"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toCommandProperties = exports2.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports2.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    exports2.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.issue = exports2.issueCommand = void 0;
    var os = __importStar2(require("os"));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports2.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    exports2.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return (0, utils_1.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    function escapeProperty(s) {
      return (0, utils_1.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareKeyValueMessage = exports2.issueFileCommand = void 0;
    var crypto = __importStar2(require("crypto"));
    var fs6 = __importStar2(require("fs"));
    var os = __importStar2(require("os"));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs6.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs6.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    exports2.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${crypto.randomUUID()}`;
      const convertedValue = (0, utils_1.toCommandValue)(value);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    exports2.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkBypass = exports2.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        try {
          return new DecodedURL(proxyVar);
        } catch (_a) {
          if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://"))
            return new DecodedURL(`http://${proxyVar}`);
        }
      } else {
        return void 0;
      }
    }
    exports2.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const reqHost = reqUrl.hostname;
      if (isLoopbackAddress(reqHost)) {
        return true;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) {
          return true;
        }
      }
      return false;
    }
    exports2.checkBypass = checkBypass;
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase();
      return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }
    var DecodedURL = class extends URL {
      constructor(url, base) {
        super(url, base);
        this._decodedUsername = decodeURIComponent(super.username);
        this._decodedPassword = decodeURIComponent(super.password);
      }
      get username() {
        return this._decodedUsername;
      }
      get password() {
        return this._decodedPassword;
      }
    };
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports2) {
    "use strict";
    var net = require("net");
    var tls = require("tls");
    var http = require("http");
    var https = require("https");
    var events = require("events");
    var assert = require("assert");
    var util = require("util");
    exports2.httpOverHttp = httpOverHttp;
    exports2.httpsOverHttp = httpsOverHttp;
    exports2.httpOverHttps = httpOverHttps;
    exports2.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending = self2.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug("got illegal response body from proxy");
          socket.destroy();
          var error = new Error("got illegal response body from proxy");
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        debug("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug(
          "tunneling socket could not be established, cause=%s\n",
          cause.message,
          cause.stack
        );
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports2.debug = debug;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports2, module2) {
    module2.exports = require_tunnel();
  }
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS({
  "node_modules/undici/lib/core/symbols.js"(exports2, module2) {
    module2.exports = {
      kClose: Symbol("close"),
      kDestroy: Symbol("destroy"),
      kDispatch: Symbol("dispatch"),
      kUrl: Symbol("url"),
      kWriting: Symbol("writing"),
      kResuming: Symbol("resuming"),
      kQueue: Symbol("queue"),
      kConnect: Symbol("connect"),
      kConnecting: Symbol("connecting"),
      kHeadersList: Symbol("headers list"),
      kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
      kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
      kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
      kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
      kKeepAlive: Symbol("keep alive"),
      kHeadersTimeout: Symbol("headers timeout"),
      kBodyTimeout: Symbol("body timeout"),
      kServerName: Symbol("server name"),
      kLocalAddress: Symbol("local address"),
      kHost: Symbol("host"),
      kNoRef: Symbol("no ref"),
      kBodyUsed: Symbol("used"),
      kRunning: Symbol("running"),
      kBlocking: Symbol("blocking"),
      kPending: Symbol("pending"),
      kSize: Symbol("size"),
      kBusy: Symbol("busy"),
      kQueued: Symbol("queued"),
      kFree: Symbol("free"),
      kConnected: Symbol("connected"),
      kClosed: Symbol("closed"),
      kNeedDrain: Symbol("need drain"),
      kReset: Symbol("reset"),
      kDestroyed: Symbol.for("nodejs.stream.destroyed"),
      kMaxHeadersSize: Symbol("max headers size"),
      kRunningIdx: Symbol("running index"),
      kPendingIdx: Symbol("pending index"),
      kError: Symbol("error"),
      kClients: Symbol("clients"),
      kClient: Symbol("client"),
      kParser: Symbol("parser"),
      kOnDestroyed: Symbol("destroy callbacks"),
      kPipelining: Symbol("pipelining"),
      kSocket: Symbol("socket"),
      kHostHeader: Symbol("host header"),
      kConnector: Symbol("connector"),
      kStrictContentLength: Symbol("strict content length"),
      kMaxRedirections: Symbol("maxRedirections"),
      kMaxRequests: Symbol("maxRequestsPerClient"),
      kProxy: Symbol("proxy agent options"),
      kCounter: Symbol("socket request counter"),
      kInterceptors: Symbol("dispatch interceptors"),
      kMaxResponseSize: Symbol("max response size"),
      kHTTP2Session: Symbol("http2Session"),
      kHTTP2SessionState: Symbol("http2Session state"),
      kHTTP2BuildRequest: Symbol("http2 build request"),
      kHTTP1BuildRequest: Symbol("http1 build request"),
      kHTTP2CopyHeaders: Symbol("http2 copy headers"),
      kHTTPConnVersion: Symbol("http connection version"),
      kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
      kConstruct: Symbol("constructable")
    };
  }
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({
  "node_modules/undici/lib/core/errors.js"(exports2, module2) {
    "use strict";
    var UndiciError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
      }
    };
    var ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
      }
    };
    var HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
      }
    };
    var HeadersOverflowError = class _HeadersOverflowError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
      }
    };
    var BodyTimeoutError = class _BodyTimeoutError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
      }
    };
    var ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {
      constructor(message, statusCode, headers, body) {
        super(message);
        Error.captureStackTrace(this, _ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
      }
    };
    var InvalidArgumentError = class _InvalidArgumentError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
      }
    };
    var InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
      }
    };
    var RequestAbortedError = class _RequestAbortedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
      }
    };
    var InformationalError = class _InformationalError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
      }
    };
    var RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ClientDestroyedError = class _ClientDestroyedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
      }
    };
    var ClientClosedError = class _ClientClosedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
      }
    };
    var SocketError = class _SocketError extends UndiciError {
      constructor(message, socket) {
        super(message);
        Error.captureStackTrace(this, _SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
      }
    };
    var NotSupportedError = class _NotSupportedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
      }
    };
    var BalancedPoolMissingUpstreamError = class extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
      }
    };
    var HTTPParserError = class _HTTPParserError extends Error {
      constructor(message, code, data) {
        super(message);
        Error.captureStackTrace(this, _HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : void 0;
        this.data = data ? data.toString() : void 0;
      }
    };
    var ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
      }
    };
    var RequestRetryError = class _RequestRetryError extends UndiciError {
      constructor(message, code, { headers, data }) {
        super(message);
        Error.captureStackTrace(this, _RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
      }
    };
    module2.exports = {
      HTTPParserError,
      UndiciError,
      HeadersTimeoutError,
      HeadersOverflowError,
      BodyTimeoutError,
      RequestContentLengthMismatchError,
      ConnectTimeoutError,
      ResponseStatusCodeError,
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError,
      ClientDestroyedError,
      ClientClosedError,
      InformationalError,
      SocketError,
      NotSupportedError,
      ResponseContentLengthMismatchError,
      BalancedPoolMissingUpstreamError,
      ResponseExceededMaxSizeError,
      RequestRetryError
    };
  }
});

// node_modules/undici/lib/core/constants.js
var require_constants = __commonJS({
  "node_modules/undici/lib/core/constants.js"(exports2, module2) {
    "use strict";
    var headerNameLowerCasedRecord = {};
    var wellknownHeaderNames = [
      "Accept",
      "Accept-Encoding",
      "Accept-Language",
      "Accept-Ranges",
      "Access-Control-Allow-Credentials",
      "Access-Control-Allow-Headers",
      "Access-Control-Allow-Methods",
      "Access-Control-Allow-Origin",
      "Access-Control-Expose-Headers",
      "Access-Control-Max-Age",
      "Access-Control-Request-Headers",
      "Access-Control-Request-Method",
      "Age",
      "Allow",
      "Alt-Svc",
      "Alt-Used",
      "Authorization",
      "Cache-Control",
      "Clear-Site-Data",
      "Connection",
      "Content-Disposition",
      "Content-Encoding",
      "Content-Language",
      "Content-Length",
      "Content-Location",
      "Content-Range",
      "Content-Security-Policy",
      "Content-Security-Policy-Report-Only",
      "Content-Type",
      "Cookie",
      "Cross-Origin-Embedder-Policy",
      "Cross-Origin-Opener-Policy",
      "Cross-Origin-Resource-Policy",
      "Date",
      "Device-Memory",
      "Downlink",
      "ECT",
      "ETag",
      "Expect",
      "Expect-CT",
      "Expires",
      "Forwarded",
      "From",
      "Host",
      "If-Match",
      "If-Modified-Since",
      "If-None-Match",
      "If-Range",
      "If-Unmodified-Since",
      "Keep-Alive",
      "Last-Modified",
      "Link",
      "Location",
      "Max-Forwards",
      "Origin",
      "Permissions-Policy",
      "Pragma",
      "Proxy-Authenticate",
      "Proxy-Authorization",
      "RTT",
      "Range",
      "Referer",
      "Referrer-Policy",
      "Refresh",
      "Retry-After",
      "Sec-WebSocket-Accept",
      "Sec-WebSocket-Extensions",
      "Sec-WebSocket-Key",
      "Sec-WebSocket-Protocol",
      "Sec-WebSocket-Version",
      "Server",
      "Server-Timing",
      "Service-Worker-Allowed",
      "Service-Worker-Navigation-Preload",
      "Set-Cookie",
      "SourceMap",
      "Strict-Transport-Security",
      "Supports-Loading-Mode",
      "TE",
      "Timing-Allow-Origin",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
      "Upgrade-Insecure-Requests",
      "User-Agent",
      "Vary",
      "Via",
      "WWW-Authenticate",
      "X-Content-Type-Options",
      "X-DNS-Prefetch-Control",
      "X-Frame-Options",
      "X-Permitted-Cross-Domain-Policies",
      "X-Powered-By",
      "X-Requested-With",
      "X-XSS-Protection"
    ];
    for (let i = 0; i < wellknownHeaderNames.length; ++i) {
      const key = wellknownHeaderNames[i];
      const lowerCasedKey = key.toLowerCase();
      headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
    }
    Object.setPrototypeOf(headerNameLowerCasedRecord, null);
    module2.exports = {
      wellknownHeaderNames,
      headerNameLowerCasedRecord
    };
  }
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS({
  "node_modules/undici/lib/core/util.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { kDestroyed, kBodyUsed } = require_symbols();
    var { IncomingMessage } = require("http");
    var stream = require("stream");
    var net = require("net");
    var { InvalidArgumentError } = require_errors();
    var { Blob: Blob2 } = require("buffer");
    var nodeUtil = require("util");
    var { stringify } = require("querystring");
    var { headerNameLowerCasedRecord } = require_constants();
    var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v) => Number(v));
    function nop() {
    }
    function isStream(obj) {
      return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
    }
    function isBlobLike(object) {
      return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
    }
    function buildURL(url, queryParams) {
      if (url.includes("?") || url.includes("#")) {
        throw new Error('Query params cannot be passed when url already contains "?" or "#".');
      }
      const stringified = stringify(queryParams);
      if (stringified) {
        url += "?" + stringified;
      }
      return url;
    }
    function parseURL(url) {
      if (typeof url === "string") {
        url = new URL(url);
        if (!/^https?:/.test(url.origin || url.protocol)) {
          throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        }
        return url;
      }
      if (!url || typeof url !== "object") {
        throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
      }
      if (!/^https?:/.test(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      if (!(url instanceof URL)) {
        if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
          throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        }
        if (url.path != null && typeof url.path !== "string") {
          throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        }
        if (url.pathname != null && typeof url.pathname !== "string") {
          throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        }
        if (url.hostname != null && typeof url.hostname !== "string") {
          throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        }
        if (url.origin != null && typeof url.origin !== "string") {
          throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        }
        const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
        let path3 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
        if (origin.endsWith("/")) {
          origin = origin.substring(0, origin.length - 1);
        }
        if (path3 && !path3.startsWith("/")) {
          path3 = `/${path3}`;
        }
        url = new URL(origin + path3);
      }
      return url;
    }
    function parseOrigin(url) {
      url = parseURL(url);
      if (url.pathname !== "/" || url.search || url.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      return url;
    }
    function getHostname(host) {
      if (host[0] === "[") {
        const idx2 = host.indexOf("]");
        assert(idx2 !== -1);
        return host.substring(1, idx2);
      }
      const idx = host.indexOf(":");
      if (idx === -1) return host;
      return host.substring(0, idx);
    }
    function getServerName(host) {
      if (!host) {
        return null;
      }
      assert.strictEqual(typeof host, "string");
      const servername = getHostname(host);
      if (net.isIP(servername)) {
        return "";
      }
      return servername;
    }
    function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function isAsyncIterable(obj) {
      return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
    }
    function isIterable(obj) {
      return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
    }
    function bodyLength(body) {
      if (body == null) {
        return 0;
      } else if (isStream(body)) {
        const state = body._readableState;
        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
      } else if (isBlobLike(body)) {
        return body.size != null ? body.size : null;
      } else if (isBuffer(body)) {
        return body.byteLength;
      }
      return null;
    }
    function isDestroyed(stream2) {
      return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
    }
    function isReadableAborted(stream2) {
      const state = stream2 && stream2._readableState;
      return isDestroyed(stream2) && state && !state.endEmitted;
    }
    function destroy(stream2, err) {
      if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
        return;
      }
      if (typeof stream2.destroy === "function") {
        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
          stream2.socket = null;
        }
        stream2.destroy(err);
      } else if (err) {
        process.nextTick((stream3, err2) => {
          stream3.emit("error", err2);
        }, stream2, err);
      }
      if (stream2.destroyed !== true) {
        stream2[kDestroyed] = true;
      }
    }
    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
    function parseKeepAliveTimeout(val) {
      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
      return m ? parseInt(m[1], 10) * 1e3 : null;
    }
    function headerNameToString(value) {
      return headerNameLowerCasedRecord[value] || value.toLowerCase();
    }
    function parseHeaders(headers, obj = {}) {
      if (!Array.isArray(headers)) return headers;
      for (let i = 0; i < headers.length; i += 2) {
        const key = headers[i].toString().toLowerCase();
        let val = obj[key];
        if (!val) {
          if (Array.isArray(headers[i + 1])) {
            obj[key] = headers[i + 1].map((x) => x.toString("utf8"));
          } else {
            obj[key] = headers[i + 1].toString("utf8");
          }
        } else {
          if (!Array.isArray(val)) {
            val = [val];
            obj[key] = val;
          }
          val.push(headers[i + 1].toString("utf8"));
        }
      }
      if ("content-length" in obj && "content-disposition" in obj) {
        obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
      }
      return obj;
    }
    function parseRawHeaders(headers) {
      const ret = [];
      let hasContentLength = false;
      let contentDispositionIdx = -1;
      for (let n = 0; n < headers.length; n += 2) {
        const key = headers[n + 0].toString();
        const val = headers[n + 1].toString("utf8");
        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
          ret.push(key, val);
          hasContentLength = true;
        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
          contentDispositionIdx = ret.push(key, val) - 1;
        } else {
          ret.push(key, val);
        }
      }
      if (hasContentLength && contentDispositionIdx !== -1) {
        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
      }
      return ret;
    }
    function isBuffer(buffer) {
      return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
    }
    function validateHandler(handler, method, upgrade) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      if (typeof handler.onConnect !== "function") {
        throw new InvalidArgumentError("invalid onConnect method");
      }
      if (typeof handler.onError !== "function") {
        throw new InvalidArgumentError("invalid onError method");
      }
      if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {
        throw new InvalidArgumentError("invalid onBodySent method");
      }
      if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") {
          throw new InvalidArgumentError("invalid onUpgrade method");
        }
      } else {
        if (typeof handler.onHeaders !== "function") {
          throw new InvalidArgumentError("invalid onHeaders method");
        }
        if (typeof handler.onData !== "function") {
          throw new InvalidArgumentError("invalid onData method");
        }
        if (typeof handler.onComplete !== "function") {
          throw new InvalidArgumentError("invalid onComplete method");
        }
      }
    }
    function isDisturbed(body) {
      return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
    }
    function isErrored(body) {
      return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(
        nodeUtil.inspect(body)
      )));
    }
    function isReadable(body) {
      return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(
        nodeUtil.inspect(body)
      )));
    }
    function getSocketInfo(socket) {
      return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
      };
    }
    async function* convertIterableToBuffer(iterable) {
      for await (const chunk of iterable) {
        yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
      }
    }
    var ReadableStream2;
    function ReadableStreamFrom(iterable) {
      if (!ReadableStream2) {
        ReadableStream2 = require("stream/web").ReadableStream;
      }
      if (ReadableStream2.from) {
        return ReadableStream2.from(convertIterableToBuffer(iterable));
      }
      let iterator;
      return new ReadableStream2(
        {
          async start() {
            iterator = iterable[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { done, value } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
              controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          }
        },
        0
      );
    }
    function isFormDataLike(object) {
      return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
    }
    function throwIfAborted(signal) {
      if (!signal) {
        return;
      }
      if (typeof signal.throwIfAborted === "function") {
        signal.throwIfAborted();
      } else {
        if (signal.aborted) {
          const err = new Error("The operation was aborted");
          err.name = "AbortError";
          throw err;
        }
      }
    }
    function addAbortListener(signal, listener) {
      if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, { once: true });
        return () => signal.removeEventListener("abort", listener);
      }
      signal.addListener("abort", listener);
      return () => signal.removeListener("abort", listener);
    }
    var hasToWellFormed = !!String.prototype.toWellFormed;
    function toUSVString(val) {
      if (hasToWellFormed) {
        return `${val}`.toWellFormed();
      } else if (nodeUtil.toUSVString) {
        return nodeUtil.toUSVString(val);
      }
      return `${val}`;
    }
    function parseRangeHeader(range) {
      if (range == null || range === "") return { start: 0, end: null, size: null };
      const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
      return m ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      } : null;
    }
    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
    kEnumerableProperty.enumerable = true;
    module2.exports = {
      kEnumerableProperty,
      nop,
      isDisturbed,
      isErrored,
      isReadable,
      toUSVString,
      isReadableAborted,
      isBlobLike,
      parseOrigin,
      parseURL,
      getServerName,
      isStream,
      isIterable,
      isAsyncIterable,
      isDestroyed,
      headerNameToString,
      parseRawHeaders,
      parseHeaders,
      parseKeepAliveTimeout,
      destroy,
      bodyLength,
      deepClone,
      ReadableStreamFrom,
      isBuffer,
      validateHandler,
      getSocketInfo,
      isFormDataLike,
      buildURL,
      throwIfAborted,
      addAbortListener,
      parseRangeHeader,
      nodeMajor,
      nodeMinor,
      nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
      safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
    };
  }
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS({
  "node_modules/undici/lib/timers.js"(exports2, module2) {
    "use strict";
    var fastNow = Date.now();
    var fastNowTimeout;
    var fastTimers = [];
    function onTimeout() {
      fastNow = Date.now();
      let len = fastTimers.length;
      let idx = 0;
      while (idx < len) {
        const timer = fastTimers[idx];
        if (timer.state === 0) {
          timer.state = fastNow + timer.delay;
        } else if (timer.state > 0 && fastNow >= timer.state) {
          timer.state = -1;
          timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
          timer.state = -2;
          if (idx !== len - 1) {
            fastTimers[idx] = fastTimers.pop();
          } else {
            fastTimers.pop();
          }
          len -= 1;
        } else {
          idx += 1;
        }
      }
      if (fastTimers.length > 0) {
        refreshTimeout();
      }
    }
    function refreshTimeout() {
      if (fastNowTimeout && fastNowTimeout.refresh) {
        fastNowTimeout.refresh();
      } else {
        clearTimeout(fastNowTimeout);
        fastNowTimeout = setTimeout(onTimeout, 1e3);
        if (fastNowTimeout.unref) {
          fastNowTimeout.unref();
        }
      }
    }
    var Timeout = class {
      constructor(callback, delay, opaque) {
        this.callback = callback;
        this.delay = delay;
        this.opaque = opaque;
        this.state = -2;
        this.refresh();
      }
      refresh() {
        if (this.state === -2) {
          fastTimers.push(this);
          if (!fastNowTimeout || fastTimers.length === 1) {
            refreshTimeout();
          }
        }
        this.state = 0;
      }
      clear() {
        this.state = -1;
      }
    };
    module2.exports = {
      setTimeout(callback, delay, opaque) {
        return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
      },
      clearTimeout(timeout) {
        if (timeout instanceof Timeout) {
          timeout.clear();
        } else {
          clearTimeout(timeout);
        }
      }
    };
  }
});

// node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({
  "node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports2, module2) {
    "use strict";
    var EventEmitter2 = require("node:events").EventEmitter;
    var inherits = require("node:util").inherits;
    function SBMH(needle) {
      if (typeof needle === "string") {
        needle = Buffer.from(needle);
      }
      if (!Buffer.isBuffer(needle)) {
        throw new TypeError("The needle has to be a String or a Buffer.");
      }
      const needleLength = needle.length;
      if (needleLength === 0) {
        throw new Error("The needle cannot be an empty String/Buffer.");
      }
      if (needleLength > 256) {
        throw new Error("The needle cannot have a length bigger than 256.");
      }
      this.maxMatches = Infinity;
      this.matches = 0;
      this._occ = new Array(256).fill(needleLength);
      this._lookbehind_size = 0;
      this._needle = needle;
      this._bufpos = 0;
      this._lookbehind = Buffer.alloc(needleLength);
      for (var i = 0; i < needleLength - 1; ++i) {
        this._occ[needle[i]] = needleLength - 1 - i;
      }
    }
    inherits(SBMH, EventEmitter2);
    SBMH.prototype.reset = function() {
      this._lookbehind_size = 0;
      this.matches = 0;
      this._bufpos = 0;
    };
    SBMH.prototype.push = function(chunk, pos) {
      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk, "binary");
      }
      const chlen = chunk.length;
      this._bufpos = pos || 0;
      let r;
      while (r !== chlen && this.matches < this.maxMatches) {
        r = this._sbmh_feed(chunk);
      }
      return r;
    };
    SBMH.prototype._sbmh_feed = function(data) {
      const len = data.length;
      const needle = this._needle;
      const needleLength = needle.length;
      const lastNeedleChar = needle[needleLength - 1];
      let pos = -this._lookbehind_size;
      let ch;
      if (pos < 0) {
        while (pos < 0 && pos <= len - needleLength) {
          ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
          if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
            this._lookbehind_size = 0;
            ++this.matches;
            this.emit("info", true);
            return this._bufpos = pos + needleLength;
          }
          pos += this._occ[ch];
        }
        if (pos < 0) {
          while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
            ++pos;
          }
        }
        if (pos >= 0) {
          this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
          this._lookbehind_size = 0;
        } else {
          const bytesToCutOff = this._lookbehind_size + pos;
          if (bytesToCutOff > 0) {
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
          }
          this._lookbehind.copy(
            this._lookbehind,
            0,
            bytesToCutOff,
            this._lookbehind_size - bytesToCutOff
          );
          this._lookbehind_size -= bytesToCutOff;
          data.copy(this._lookbehind, this._lookbehind_size);
          this._lookbehind_size += len;
          this._bufpos = len;
          return len;
        }
      }
      pos += (pos >= 0) * this._bufpos;
      if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) {
          this.emit("info", true, data, this._bufpos, pos);
        } else {
          this.emit("info", true);
        }
        return this._bufpos = pos + needleLength;
      } else {
        pos = len - needleLength;
      }
      while (pos < len && (data[pos] !== needle[0] || Buffer.compare(
        data.subarray(pos, pos + len - pos),
        needle.subarray(0, len - pos)
      ) !== 0)) {
        ++pos;
      }
      if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
      }
      if (pos > 0) {
        this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
      }
      this._bufpos = len;
      return len;
    };
    SBMH.prototype._sbmh_lookup_char = function(data, pos) {
      return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
    };
    SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
      for (var i = 0; i < len; ++i) {
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
          return false;
        }
      }
      return true;
    };
    module2.exports = SBMH;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports2, module2) {
    "use strict";
    var inherits = require("node:util").inherits;
    var ReadableStream2 = require("node:stream").Readable;
    function PartStream(opts) {
      ReadableStream2.call(this, opts);
    }
    inherits(PartStream, ReadableStream2);
    PartStream.prototype._read = function(n) {
    };
    module2.exports = PartStream;
  }
});

// node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports2, module2) {
    "use strict";
    module2.exports = function getLimit(limits, name, defaultLimit) {
      if (!limits || limits[name] === void 0 || limits[name] === null) {
        return defaultLimit;
      }
      if (typeof limits[name] !== "number" || isNaN(limits[name])) {
        throw new TypeError("Limit " + name + " is not a valid number");
      }
      return limits[name];
    };
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports2, module2) {
    "use strict";
    var EventEmitter2 = require("node:events").EventEmitter;
    var inherits = require("node:util").inherits;
    var getLimit = require_getLimit();
    var StreamSearch = require_sbmh();
    var B_DCRLF = Buffer.from("\r\n\r\n");
    var RE_CRLF = /\r\n/g;
    var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
    function HeaderParser(cfg) {
      EventEmitter2.call(this);
      cfg = cfg || {};
      const self2 = this;
      this.nread = 0;
      this.maxed = false;
      this.npairs = 0;
      this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3);
      this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
      this.buffer = "";
      this.header = {};
      this.finished = false;
      this.ss = new StreamSearch(B_DCRLF);
      this.ss.on("info", function(isMatch, data, start, end) {
        if (data && !self2.maxed) {
          if (self2.nread + end - start >= self2.maxHeaderSize) {
            end = self2.maxHeaderSize - self2.nread + start;
            self2.nread = self2.maxHeaderSize;
            self2.maxed = true;
          } else {
            self2.nread += end - start;
          }
          self2.buffer += data.toString("binary", start, end);
        }
        if (isMatch) {
          self2._finish();
        }
      });
    }
    inherits(HeaderParser, EventEmitter2);
    HeaderParser.prototype.push = function(data) {
      const r = this.ss.push(data);
      if (this.finished) {
        return r;
      }
    };
    HeaderParser.prototype.reset = function() {
      this.finished = false;
      this.buffer = "";
      this.header = {};
      this.ss.reset();
    };
    HeaderParser.prototype._finish = function() {
      if (this.buffer) {
        this._parseHeader();
      }
      this.ss.matches = this.ss.maxMatches;
      const header = this.header;
      this.header = {};
      this.buffer = "";
      this.finished = true;
      this.nread = this.npairs = 0;
      this.maxed = false;
      this.emit("header", header);
    };
    HeaderParser.prototype._parseHeader = function() {
      if (this.npairs === this.maxHeaderPairs) {
        return;
      }
      const lines = this.buffer.split(RE_CRLF);
      const len = lines.length;
      let m, h;
      for (var i = 0; i < len; ++i) {
        if (lines[i].length === 0) {
          continue;
        }
        if (lines[i][0] === "	" || lines[i][0] === " ") {
          if (h) {
            this.header[h][this.header[h].length - 1] += lines[i];
            continue;
          }
        }
        const posColon = lines[i].indexOf(":");
        if (posColon === -1 || posColon === 0) {
          return;
        }
        m = RE_HDR.exec(lines[i]);
        h = m[1].toLowerCase();
        this.header[h] = this.header[h] || [];
        this.header[h].push(m[2] || "");
        if (++this.npairs === this.maxHeaderPairs) {
          break;
        }
      }
    };
    module2.exports = HeaderParser;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports2, module2) {
    "use strict";
    var WritableStream = require("node:stream").Writable;
    var inherits = require("node:util").inherits;
    var StreamSearch = require_sbmh();
    var PartStream = require_PartStream();
    var HeaderParser = require_HeaderParser();
    var DASH = 45;
    var B_ONEDASH = Buffer.from("-");
    var B_CRLF = Buffer.from("\r\n");
    var EMPTY_FN = function() {
    };
    function Dicer(cfg) {
      if (!(this instanceof Dicer)) {
        return new Dicer(cfg);
      }
      WritableStream.call(this, cfg);
      if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") {
        throw new TypeError("Boundary required");
      }
      if (typeof cfg.boundary === "string") {
        this.setBoundary(cfg.boundary);
      } else {
        this._bparser = void 0;
      }
      this._headerFirst = cfg.headerFirst;
      this._dashes = 0;
      this._parts = 0;
      this._finished = false;
      this._realFinish = false;
      this._isPreamble = true;
      this._justMatched = false;
      this._firstWrite = true;
      this._inHeader = true;
      this._part = void 0;
      this._cb = void 0;
      this._ignoreData = false;
      this._partOpts = { highWaterMark: cfg.partHwm };
      this._pause = false;
      const self2 = this;
      this._hparser = new HeaderParser(cfg);
      this._hparser.on("header", function(header) {
        self2._inHeader = false;
        self2._part.emit("header", header);
      });
    }
    inherits(Dicer, WritableStream);
    Dicer.prototype.emit = function(ev) {
      if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
          const self2 = this;
          process.nextTick(function() {
            self2.emit("error", new Error("Unexpected end of multipart data"));
            if (self2._part && !self2._ignoreData) {
              const type = self2._isPreamble ? "Preamble" : "Part";
              self2._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
              self2._part.push(null);
              process.nextTick(function() {
                self2._realFinish = true;
                self2.emit("finish");
                self2._realFinish = false;
              });
              return;
            }
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          });
        }
      } else {
        WritableStream.prototype.emit.apply(this, arguments);
      }
    };
    Dicer.prototype._write = function(data, encoding, cb) {
      if (!this._hparser && !this._bparser) {
        return cb();
      }
      if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
          this._part = new PartStream(this._partOpts);
          if (this.listenerCount("preamble") !== 0) {
            this.emit("preamble", this._part);
          } else {
            this._ignore();
          }
        }
        const r = this._hparser.push(data);
        if (!this._inHeader && r !== void 0 && r < data.length) {
          data = data.slice(r);
        } else {
          return cb();
        }
      }
      if (this._firstWrite) {
        this._bparser.push(B_CRLF);
        this._firstWrite = false;
      }
      this._bparser.push(data);
      if (this._pause) {
        this._cb = cb;
      } else {
        cb();
      }
    };
    Dicer.prototype.reset = function() {
      this._part = void 0;
      this._bparser = void 0;
      this._hparser = void 0;
    };
    Dicer.prototype.setBoundary = function(boundary) {
      const self2 = this;
      this._bparser = new StreamSearch("\r\n--" + boundary);
      this._bparser.on("info", function(isMatch, data, start, end) {
        self2._oninfo(isMatch, data, start, end);
      });
    };
    Dicer.prototype._ignore = function() {
      if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", EMPTY_FN);
        this._part.resume();
      }
    };
    Dicer.prototype._oninfo = function(isMatch, data, start, end) {
      let buf;
      const self2 = this;
      let i = 0;
      let r;
      let shouldWriteMore = true;
      if (!this._part && this._justMatched && data) {
        while (this._dashes < 2 && start + i < end) {
          if (data[start + i] === DASH) {
            ++i;
            ++this._dashes;
          } else {
            if (this._dashes) {
              buf = B_ONEDASH;
            }
            this._dashes = 0;
            break;
          }
        }
        if (this._dashes === 2) {
          if (start + i < end && this.listenerCount("trailer") !== 0) {
            this.emit("trailer", data.slice(start + i, end));
          }
          this.reset();
          this._finished = true;
          if (self2._parts === 0) {
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          }
        }
        if (this._dashes) {
          return;
        }
      }
      if (this._justMatched) {
        this._justMatched = false;
      }
      if (!this._part) {
        this._part = new PartStream(this._partOpts);
        this._part._read = function(n) {
          self2._unpause();
        };
        if (this._isPreamble && this.listenerCount("preamble") !== 0) {
          this.emit("preamble", this._part);
        } else if (this._isPreamble !== true && this.listenerCount("part") !== 0) {
          this.emit("part", this._part);
        } else {
          this._ignore();
        }
        if (!this._isPreamble) {
          this._inHeader = true;
        }
      }
      if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
          if (buf) {
            shouldWriteMore = this._part.push(buf);
          }
          shouldWriteMore = this._part.push(data.slice(start, end));
          if (!shouldWriteMore) {
            this._pause = true;
          }
        } else if (!this._isPreamble && this._inHeader) {
          if (buf) {
            this._hparser.push(buf);
          }
          r = this._hparser.push(data.slice(start, end));
          if (!this._inHeader && r !== void 0 && r < end) {
            this._oninfo(false, data, start + r, end);
          }
        }
      }
      if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) {
          this._isPreamble = false;
        } else {
          if (start !== end) {
            ++this._parts;
            this._part.on("end", function() {
              if (--self2._parts === 0) {
                if (self2._finished) {
                  self2._realFinish = true;
                  self2.emit("finish");
                  self2._realFinish = false;
                } else {
                  self2._unpause();
                }
              }
            });
          }
        }
        this._part.push(null);
        this._part = void 0;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
      }
    };
    Dicer.prototype._unpause = function() {
      if (!this._pause) {
        return;
      }
      this._pause = false;
      if (this._cb) {
        const cb = this._cb;
        this._cb = void 0;
        cb();
      }
    };
    module2.exports = Dicer;
  }
});

// node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports2, module2) {
    "use strict";
    var utf8Decoder = new TextDecoder("utf-8");
    var textDecoders = /* @__PURE__ */ new Map([
      ["utf-8", utf8Decoder],
      ["utf8", utf8Decoder]
    ]);
    function getDecoder(charset) {
      let lc;
      while (true) {
        switch (charset) {
          case "utf-8":
          case "utf8":
            return decoders.utf8;
          case "latin1":
          case "ascii":
          // TODO: Make these a separate, strict decoder?
          case "us-ascii":
          case "iso-8859-1":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "windows-1252":
          case "iso_8859-1:1987":
          case "cp1252":
          case "x-cp1252":
            return decoders.latin1;
          case "utf16le":
          case "utf-16le":
          case "ucs2":
          case "ucs-2":
            return decoders.utf16le;
          case "base64":
            return decoders.base64;
          default:
            if (lc === void 0) {
              lc = true;
              charset = charset.toLowerCase();
              continue;
            }
            return decoders.other.bind(charset);
        }
      }
    }
    var decoders = {
      utf8: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.utf8Slice(0, data.length);
      },
      latin1: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          return data;
        }
        return data.latin1Slice(0, data.length);
      },
      utf16le: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.ucs2Slice(0, data.length);
      },
      base64: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.base64Slice(0, data.length);
      },
      other: (data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        if (textDecoders.has(exports2.toString())) {
          try {
            return textDecoders.get(exports2).decode(data);
          } catch {
          }
        }
        return typeof data === "string" ? data : data.toString();
      }
    };
    function decodeText(text, sourceEncoding, destEncoding) {
      if (text) {
        return getDecoder(destEncoding)(text, sourceEncoding);
      }
      return text;
    }
    module2.exports = decodeText;
  }
});

// node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports2, module2) {
    "use strict";
    var decodeText = require_decodeText();
    var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
    var EncodedLookup = {
      "%00": "\0",
      "%01": "",
      "%02": "",
      "%03": "",
      "%04": "",
      "%05": "",
      "%06": "",
      "%07": "\x07",
      "%08": "\b",
      "%09": "	",
      "%0a": "\n",
      "%0A": "\n",
      "%0b": "\v",
      "%0B": "\v",
      "%0c": "\f",
      "%0C": "\f",
      "%0d": "\r",
      "%0D": "\r",
      "%0e": "",
      "%0E": "",
      "%0f": "",
      "%0F": "",
      "%10": "",
      "%11": "",
      "%12": "",
      "%13": "",
      "%14": "",
      "%15": "",
      "%16": "",
      "%17": "",
      "%18": "",
      "%19": "",
      "%1a": "",
      "%1A": "",
      "%1b": "\x1B",
      "%1B": "\x1B",
      "%1c": "",
      "%1C": "",
      "%1d": "",
      "%1D": "",
      "%1e": "",
      "%1E": "",
      "%1f": "",
      "%1F": "",
      "%20": " ",
      "%21": "!",
      "%22": '"',
      "%23": "#",
      "%24": "$",
      "%25": "%",
      "%26": "&",
      "%27": "'",
      "%28": "(",
      "%29": ")",
      "%2a": "*",
      "%2A": "*",
      "%2b": "+",
      "%2B": "+",
      "%2c": ",",
      "%2C": ",",
      "%2d": "-",
      "%2D": "-",
      "%2e": ".",
      "%2E": ".",
      "%2f": "/",
      "%2F": "/",
      "%30": "0",
      "%31": "1",
      "%32": "2",
      "%33": "3",
      "%34": "4",
      "%35": "5",
      "%36": "6",
      "%37": "7",
      "%38": "8",
      "%39": "9",
      "%3a": ":",
      "%3A": ":",
      "%3b": ";",
      "%3B": ";",
      "%3c": "<",
      "%3C": "<",
      "%3d": "=",
      "%3D": "=",
      "%3e": ">",
      "%3E": ">",
      "%3f": "?",
      "%3F": "?",
      "%40": "@",
      "%41": "A",
      "%42": "B",
      "%43": "C",
      "%44": "D",
      "%45": "E",
      "%46": "F",
      "%47": "G",
      "%48": "H",
      "%49": "I",
      "%4a": "J",
      "%4A": "J",
      "%4b": "K",
      "%4B": "K",
      "%4c": "L",
      "%4C": "L",
      "%4d": "M",
      "%4D": "M",
      "%4e": "N",
      "%4E": "N",
      "%4f": "O",
      "%4F": "O",
      "%50": "P",
      "%51": "Q",
      "%52": "R",
      "%53": "S",
      "%54": "T",
      "%55": "U",
      "%56": "V",
      "%57": "W",
      "%58": "X",
      "%59": "Y",
      "%5a": "Z",
      "%5A": "Z",
      "%5b": "[",
      "%5B": "[",
      "%5c": "\\",
      "%5C": "\\",
      "%5d": "]",
      "%5D": "]",
      "%5e": "^",
      "%5E": "^",
      "%5f": "_",
      "%5F": "_",
      "%60": "`",
      "%61": "a",
      "%62": "b",
      "%63": "c",
      "%64": "d",
      "%65": "e",
      "%66": "f",
      "%67": "g",
      "%68": "h",
      "%69": "i",
      "%6a": "j",
      "%6A": "j",
      "%6b": "k",
      "%6B": "k",
      "%6c": "l",
      "%6C": "l",
      "%6d": "m",
      "%6D": "m",
      "%6e": "n",
      "%6E": "n",
      "%6f": "o",
      "%6F": "o",
      "%70": "p",
      "%71": "q",
      "%72": "r",
      "%73": "s",
      "%74": "t",
      "%75": "u",
      "%76": "v",
      "%77": "w",
      "%78": "x",
      "%79": "y",
      "%7a": "z",
      "%7A": "z",
      "%7b": "{",
      "%7B": "{",
      "%7c": "|",
      "%7C": "|",
      "%7d": "}",
      "%7D": "}",
      "%7e": "~",
      "%7E": "~",
      "%7f": "\x7F",
      "%7F": "\x7F",
      "%80": "\x80",
      "%81": "\x81",
      "%82": "\x82",
      "%83": "\x83",
      "%84": "\x84",
      "%85": "\x85",
      "%86": "\x86",
      "%87": "\x87",
      "%88": "\x88",
      "%89": "\x89",
      "%8a": "\x8A",
      "%8A": "\x8A",
      "%8b": "\x8B",
      "%8B": "\x8B",
      "%8c": "\x8C",
      "%8C": "\x8C",
      "%8d": "\x8D",
      "%8D": "\x8D",
      "%8e": "\x8E",
      "%8E": "\x8E",
      "%8f": "\x8F",
      "%8F": "\x8F",
      "%90": "\x90",
      "%91": "\x91",
      "%92": "\x92",
      "%93": "\x93",
      "%94": "\x94",
      "%95": "\x95",
      "%96": "\x96",
      "%97": "\x97",
      "%98": "\x98",
      "%99": "\x99",
      "%9a": "\x9A",
      "%9A": "\x9A",
      "%9b": "\x9B",
      "%9B": "\x9B",
      "%9c": "\x9C",
      "%9C": "\x9C",
      "%9d": "\x9D",
      "%9D": "\x9D",
      "%9e": "\x9E",
      "%9E": "\x9E",
      "%9f": "\x9F",
      "%9F": "\x9F",
      "%a0": "\xA0",
      "%A0": "\xA0",
      "%a1": "\xA1",
      "%A1": "\xA1",
      "%a2": "\xA2",
      "%A2": "\xA2",
      "%a3": "\xA3",
      "%A3": "\xA3",
      "%a4": "\xA4",
      "%A4": "\xA4",
      "%a5": "\xA5",
      "%A5": "\xA5",
      "%a6": "\xA6",
      "%A6": "\xA6",
      "%a7": "\xA7",
      "%A7": "\xA7",
      "%a8": "\xA8",
      "%A8": "\xA8",
      "%a9": "\xA9",
      "%A9": "\xA9",
      "%aa": "\xAA",
      "%Aa": "\xAA",
      "%aA": "\xAA",
      "%AA": "\xAA",
      "%ab": "\xAB",
      "%Ab": "\xAB",
      "%aB": "\xAB",
      "%AB": "\xAB",
      "%ac": "\xAC",
      "%Ac": "\xAC",
      "%aC": "\xAC",
      "%AC": "\xAC",
      "%ad": "\xAD",
      "%Ad": "\xAD",
      "%aD": "\xAD",
      "%AD": "\xAD",
      "%ae": "\xAE",
      "%Ae": "\xAE",
      "%aE": "\xAE",
      "%AE": "\xAE",
      "%af": "\xAF",
      "%Af": "\xAF",
      "%aF": "\xAF",
      "%AF": "\xAF",
      "%b0": "\xB0",
      "%B0": "\xB0",
      "%b1": "\xB1",
      "%B1": "\xB1",
      "%b2": "\xB2",
      "%B2": "\xB2",
      "%b3": "\xB3",
      "%B3": "\xB3",
      "%b4": "\xB4",
      "%B4": "\xB4",
      "%b5": "\xB5",
      "%B5": "\xB5",
      "%b6": "\xB6",
      "%B6": "\xB6",
      "%b7": "\xB7",
      "%B7": "\xB7",
      "%b8": "\xB8",
      "%B8": "\xB8",
      "%b9": "\xB9",
      "%B9": "\xB9",
      "%ba": "\xBA",
      "%Ba": "\xBA",
      "%bA": "\xBA",
      "%BA": "\xBA",
      "%bb": "\xBB",
      "%Bb": "\xBB",
      "%bB": "\xBB",
      "%BB": "\xBB",
      "%bc": "\xBC",
      "%Bc": "\xBC",
      "%bC": "\xBC",
      "%BC": "\xBC",
      "%bd": "\xBD",
      "%Bd": "\xBD",
      "%bD": "\xBD",
      "%BD": "\xBD",
      "%be": "\xBE",
      "%Be": "\xBE",
      "%bE": "\xBE",
      "%BE": "\xBE",
      "%bf": "\xBF",
      "%Bf": "\xBF",
      "%bF": "\xBF",
      "%BF": "\xBF",
      "%c0": "\xC0",
      "%C0": "\xC0",
      "%c1": "\xC1",
      "%C1": "\xC1",
      "%c2": "\xC2",
      "%C2": "\xC2",
      "%c3": "\xC3",
      "%C3": "\xC3",
      "%c4": "\xC4",
      "%C4": "\xC4",
      "%c5": "\xC5",
      "%C5": "\xC5",
      "%c6": "\xC6",
      "%C6": "\xC6",
      "%c7": "\xC7",
      "%C7": "\xC7",
      "%c8": "\xC8",
      "%C8": "\xC8",
      "%c9": "\xC9",
      "%C9": "\xC9",
      "%ca": "\xCA",
      "%Ca": "\xCA",
      "%cA": "\xCA",
      "%CA": "\xCA",
      "%cb": "\xCB",
      "%Cb": "\xCB",
      "%cB": "\xCB",
      "%CB": "\xCB",
      "%cc": "\xCC",
      "%Cc": "\xCC",
      "%cC": "\xCC",
      "%CC": "\xCC",
      "%cd": "\xCD",
      "%Cd": "\xCD",
      "%cD": "\xCD",
      "%CD": "\xCD",
      "%ce": "\xCE",
      "%Ce": "\xCE",
      "%cE": "\xCE",
      "%CE": "\xCE",
      "%cf": "\xCF",
      "%Cf": "\xCF",
      "%cF": "\xCF",
      "%CF": "\xCF",
      "%d0": "\xD0",
      "%D0": "\xD0",
      "%d1": "\xD1",
      "%D1": "\xD1",
      "%d2": "\xD2",
      "%D2": "\xD2",
      "%d3": "\xD3",
      "%D3": "\xD3",
      "%d4": "\xD4",
      "%D4": "\xD4",
      "%d5": "\xD5",
      "%D5": "\xD5",
      "%d6": "\xD6",
      "%D6": "\xD6",
      "%d7": "\xD7",
      "%D7": "\xD7",
      "%d8": "\xD8",
      "%D8": "\xD8",
      "%d9": "\xD9",
      "%D9": "\xD9",
      "%da": "\xDA",
      "%Da": "\xDA",
      "%dA": "\xDA",
      "%DA": "\xDA",
      "%db": "\xDB",
      "%Db": "\xDB",
      "%dB": "\xDB",
      "%DB": "\xDB",
      "%dc": "\xDC",
      "%Dc": "\xDC",
      "%dC": "\xDC",
      "%DC": "\xDC",
      "%dd": "\xDD",
      "%Dd": "\xDD",
      "%dD": "\xDD",
      "%DD": "\xDD",
      "%de": "\xDE",
      "%De": "\xDE",
      "%dE": "\xDE",
      "%DE": "\xDE",
      "%df": "\xDF",
      "%Df": "\xDF",
      "%dF": "\xDF",
      "%DF": "\xDF",
      "%e0": "\xE0",
      "%E0": "\xE0",
      "%e1": "\xE1",
      "%E1": "\xE1",
      "%e2": "\xE2",
      "%E2": "\xE2",
      "%e3": "\xE3",
      "%E3": "\xE3",
      "%e4": "\xE4",
      "%E4": "\xE4",
      "%e5": "\xE5",
      "%E5": "\xE5",
      "%e6": "\xE6",
      "%E6": "\xE6",
      "%e7": "\xE7",
      "%E7": "\xE7",
      "%e8": "\xE8",
      "%E8": "\xE8",
      "%e9": "\xE9",
      "%E9": "\xE9",
      "%ea": "\xEA",
      "%Ea": "\xEA",
      "%eA": "\xEA",
      "%EA": "\xEA",
      "%eb": "\xEB",
      "%Eb": "\xEB",
      "%eB": "\xEB",
      "%EB": "\xEB",
      "%ec": "\xEC",
      "%Ec": "\xEC",
      "%eC": "\xEC",
      "%EC": "\xEC",
      "%ed": "\xED",
      "%Ed": "\xED",
      "%eD": "\xED",
      "%ED": "\xED",
      "%ee": "\xEE",
      "%Ee": "\xEE",
      "%eE": "\xEE",
      "%EE": "\xEE",
      "%ef": "\xEF",
      "%Ef": "\xEF",
      "%eF": "\xEF",
      "%EF": "\xEF",
      "%f0": "\xF0",
      "%F0": "\xF0",
      "%f1": "\xF1",
      "%F1": "\xF1",
      "%f2": "\xF2",
      "%F2": "\xF2",
      "%f3": "\xF3",
      "%F3": "\xF3",
      "%f4": "\xF4",
      "%F4": "\xF4",
      "%f5": "\xF5",
      "%F5": "\xF5",
      "%f6": "\xF6",
      "%F6": "\xF6",
      "%f7": "\xF7",
      "%F7": "\xF7",
      "%f8": "\xF8",
      "%F8": "\xF8",
      "%f9": "\xF9",
      "%F9": "\xF9",
      "%fa": "\xFA",
      "%Fa": "\xFA",
      "%fA": "\xFA",
      "%FA": "\xFA",
      "%fb": "\xFB",
      "%Fb": "\xFB",
      "%fB": "\xFB",
      "%FB": "\xFB",
      "%fc": "\xFC",
      "%Fc": "\xFC",
      "%fC": "\xFC",
      "%FC": "\xFC",
      "%fd": "\xFD",
      "%Fd": "\xFD",
      "%fD": "\xFD",
      "%FD": "\xFD",
      "%fe": "\xFE",
      "%Fe": "\xFE",
      "%fE": "\xFE",
      "%FE": "\xFE",
      "%ff": "\xFF",
      "%Ff": "\xFF",
      "%fF": "\xFF",
      "%FF": "\xFF"
    };
    function encodedReplacer(match) {
      return EncodedLookup[match];
    }
    var STATE_KEY = 0;
    var STATE_VALUE = 1;
    var STATE_CHARSET = 2;
    var STATE_LANG = 3;
    function parseParams(str) {
      const res = [];
      let state = STATE_KEY;
      let charset = "";
      let inquote = false;
      let escaping = false;
      let p = 0;
      let tmp = "";
      const len = str.length;
      for (var i = 0; i < len; ++i) {
        const char = str[i];
        if (char === "\\" && inquote) {
          if (escaping) {
            escaping = false;
          } else {
            escaping = true;
            continue;
          }
        } else if (char === '"') {
          if (!escaping) {
            if (inquote) {
              inquote = false;
              state = STATE_KEY;
            } else {
              inquote = true;
            }
            continue;
          } else {
            escaping = false;
          }
        } else {
          if (escaping && inquote) {
            tmp += "\\";
          }
          escaping = false;
          if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
            if (state === STATE_CHARSET) {
              state = STATE_LANG;
              charset = tmp.substring(1);
            } else {
              state = STATE_VALUE;
            }
            tmp = "";
            continue;
          } else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
            state = char === "*" ? STATE_CHARSET : STATE_VALUE;
            res[p] = [tmp, void 0];
            tmp = "";
            continue;
          } else if (!inquote && char === ";") {
            state = STATE_KEY;
            if (charset) {
              if (tmp.length) {
                tmp = decodeText(
                  tmp.replace(RE_ENCODED, encodedReplacer),
                  "binary",
                  charset
                );
              }
              charset = "";
            } else if (tmp.length) {
              tmp = decodeText(tmp, "binary", "utf8");
            }
            if (res[p] === void 0) {
              res[p] = tmp;
            } else {
              res[p][1] = tmp;
            }
            tmp = "";
            ++p;
            continue;
          } else if (!inquote && (char === " " || char === "	")) {
            continue;
          }
        }
        tmp += char;
      }
      if (charset && tmp.length) {
        tmp = decodeText(
          tmp.replace(RE_ENCODED, encodedReplacer),
          "binary",
          charset
        );
      } else if (tmp) {
        tmp = decodeText(tmp, "binary", "utf8");
      }
      if (res[p] === void 0) {
        if (tmp) {
          res[p] = tmp;
        }
      } else {
        res[p][1] = tmp;
      }
      return res;
    }
    module2.exports = parseParams;
  }
});

// node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/basename.js"(exports2, module2) {
    "use strict";
    module2.exports = function basename(path3) {
      if (typeof path3 !== "string") {
        return "";
      }
      for (var i = path3.length - 1; i >= 0; --i) {
        switch (path3.charCodeAt(i)) {
          case 47:
          // '/'
          case 92:
            path3 = path3.slice(i + 1);
            return path3 === ".." || path3 === "." ? "" : path3;
        }
      }
      return path3 === ".." || path3 === "." ? "" : path3;
    };
  }
});

// node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({
  "node_modules/@fastify/busboy/lib/types/multipart.js"(exports2, module2) {
    "use strict";
    var { Readable } = require("node:stream");
    var { inherits } = require("node:util");
    var Dicer = require_Dicer();
    var parseParams = require_parseParams();
    var decodeText = require_decodeText();
    var basename = require_basename();
    var getLimit = require_getLimit();
    var RE_BOUNDARY = /^boundary$/i;
    var RE_FIELD = /^form-data$/i;
    var RE_CHARSET = /^charset$/i;
    var RE_FILENAME = /^filename$/i;
    var RE_NAME = /^name$/i;
    Multipart.detect = /^multipart\/form-data/i;
    function Multipart(boy, cfg) {
      let i;
      let len;
      const self2 = this;
      let boundary;
      const limits = cfg.limits;
      const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== void 0);
      const parsedConType = cfg.parsedConType || [];
      const defCharset = cfg.defCharset || "utf8";
      const preservePath = cfg.preservePath;
      const fileOpts = { highWaterMark: cfg.fileHwm };
      for (i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
          boundary = parsedConType[i][1];
          break;
        }
      }
      function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
          finished = false;
          self2.end();
        }
      }
      if (typeof boundary !== "string") {
        throw new Error("Multipart: Boundary not found");
      }
      const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
      const filesLimit = getLimit(limits, "files", Infinity);
      const fieldsLimit = getLimit(limits, "fields", Infinity);
      const partsLimit = getLimit(limits, "parts", Infinity);
      const headerPairsLimit = getLimit(limits, "headerPairs", 2e3);
      const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
      let nfiles = 0;
      let nfields = 0;
      let nends = 0;
      let curFile;
      let curField;
      let finished = false;
      this._needDrain = false;
      this._pause = false;
      this._cb = void 0;
      this._nparts = 0;
      this._boy = boy;
      const parserCfg = {
        boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
      };
      this.parser = new Dicer(parserCfg);
      this.parser.on("drain", function() {
        self2._needDrain = false;
        if (self2._cb && !self2._pause) {
          const cb = self2._cb;
          self2._cb = void 0;
          cb();
        }
      }).on("part", function onPart(part) {
        if (++self2._nparts > partsLimit) {
          self2.parser.removeListener("part", onPart);
          self2.parser.on("part", skipPart);
          boy.hitPartsLimit = true;
          boy.emit("partsLimit");
          return skipPart(part);
        }
        if (curField) {
          const field = curField;
          field.emit("end");
          field.removeAllListeners("end");
        }
        part.on("header", function(header) {
          let contype;
          let fieldname;
          let parsed;
          let charset;
          let encoding;
          let filename;
          let nsize = 0;
          if (header["content-type"]) {
            parsed = parseParams(header["content-type"][0]);
            if (parsed[0]) {
              contype = parsed[0].toLowerCase();
              for (i = 0, len = parsed.length; i < len; ++i) {
                if (RE_CHARSET.test(parsed[i][0])) {
                  charset = parsed[i][1].toLowerCase();
                  break;
                }
              }
            }
          }
          if (contype === void 0) {
            contype = "text/plain";
          }
          if (charset === void 0) {
            charset = defCharset;
          }
          if (header["content-disposition"]) {
            parsed = parseParams(header["content-disposition"][0]);
            if (!RE_FIELD.test(parsed[0])) {
              return skipPart(part);
            }
            for (i = 0, len = parsed.length; i < len; ++i) {
              if (RE_NAME.test(parsed[i][0])) {
                fieldname = parsed[i][1];
              } else if (RE_FILENAME.test(parsed[i][0])) {
                filename = parsed[i][1];
                if (!preservePath) {
                  filename = basename(filename);
                }
              }
            }
          } else {
            return skipPart(part);
          }
          if (header["content-transfer-encoding"]) {
            encoding = header["content-transfer-encoding"][0].toLowerCase();
          } else {
            encoding = "7bit";
          }
          let onData, onEnd;
          if (isPartAFile(fieldname, contype, filename)) {
            if (nfiles === filesLimit) {
              if (!boy.hitFilesLimit) {
                boy.hitFilesLimit = true;
                boy.emit("filesLimit");
              }
              return skipPart(part);
            }
            ++nfiles;
            if (boy.listenerCount("file") === 0) {
              self2.parser._ignore();
              return;
            }
            ++nends;
            const file = new FileStream(fileOpts);
            curFile = file;
            file.on("end", function() {
              --nends;
              self2._pause = false;
              checkFinished();
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            });
            file._read = function(n) {
              if (!self2._pause) {
                return;
              }
              self2._pause = false;
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            };
            boy.emit("file", fieldname, file, filename, encoding, contype);
            onData = function(data) {
              if ((nsize += data.length) > fileSizeLimit) {
                const extralen = fileSizeLimit - nsize + data.length;
                if (extralen > 0) {
                  file.push(data.slice(0, extralen));
                }
                file.truncated = true;
                file.bytesRead = fileSizeLimit;
                part.removeAllListeners("data");
                file.emit("limit");
                return;
              } else if (!file.push(data)) {
                self2._pause = true;
              }
              file.bytesRead = nsize;
            };
            onEnd = function() {
              curFile = void 0;
              file.push(null);
            };
          } else {
            if (nfields === fieldsLimit) {
              if (!boy.hitFieldsLimit) {
                boy.hitFieldsLimit = true;
                boy.emit("fieldsLimit");
              }
              return skipPart(part);
            }
            ++nfields;
            ++nends;
            let buffer = "";
            let truncated = false;
            curField = part;
            onData = function(data) {
              if ((nsize += data.length) > fieldSizeLimit) {
                const extralen = fieldSizeLimit - (nsize - data.length);
                buffer += data.toString("binary", 0, extralen);
                truncated = true;
                part.removeAllListeners("data");
              } else {
                buffer += data.toString("binary");
              }
            };
            onEnd = function() {
              curField = void 0;
              if (buffer.length) {
                buffer = decodeText(buffer, "binary", charset);
              }
              boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
              --nends;
              checkFinished();
            };
          }
          part._readableState.sync = false;
          part.on("data", onData);
          part.on("end", onEnd);
        }).on("error", function(err) {
          if (curFile) {
            curFile.emit("error", err);
          }
        });
      }).on("error", function(err) {
        boy.emit("error", err);
      }).on("finish", function() {
        finished = true;
        checkFinished();
      });
    }
    Multipart.prototype.write = function(chunk, cb) {
      const r = this.parser.write(chunk);
      if (r && !this._pause) {
        cb();
      } else {
        this._needDrain = !r;
        this._cb = cb;
      }
    };
    Multipart.prototype.end = function() {
      const self2 = this;
      if (self2.parser.writable) {
        self2.parser.end();
      } else if (!self2._boy._done) {
        process.nextTick(function() {
          self2._boy._done = true;
          self2._boy.emit("finish");
        });
      }
    };
    function skipPart(part) {
      part.resume();
    }
    function FileStream(opts) {
      Readable.call(this, opts);
      this.bytesRead = 0;
      this.truncated = false;
    }
    inherits(FileStream, Readable);
    FileStream.prototype._read = function(n) {
    };
    module2.exports = Multipart;
  }
});

// node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports2, module2) {
    "use strict";
    var RE_PLUS = /\+/g;
    var HEX = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ];
    function Decoder() {
      this.buffer = void 0;
    }
    Decoder.prototype.write = function(str) {
      str = str.replace(RE_PLUS, " ");
      let res = "";
      let i = 0;
      let p = 0;
      const len = str.length;
      for (; i < len; ++i) {
        if (this.buffer !== void 0) {
          if (!HEX[str.charCodeAt(i)]) {
            res += "%" + this.buffer;
            this.buffer = void 0;
            --i;
          } else {
            this.buffer += str[i];
            ++p;
            if (this.buffer.length === 2) {
              res += String.fromCharCode(parseInt(this.buffer, 16));
              this.buffer = void 0;
            }
          }
        } else if (str[i] === "%") {
          if (i > p) {
            res += str.substring(p, i);
            p = i;
          }
          this.buffer = "";
          ++p;
        }
      }
      if (p < len && this.buffer === void 0) {
        res += str.substring(p);
      }
      return res;
    };
    Decoder.prototype.reset = function() {
      this.buffer = void 0;
    };
    module2.exports = Decoder;
  }
});

// node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports2, module2) {
    "use strict";
    var Decoder = require_Decoder();
    var decodeText = require_decodeText();
    var getLimit = require_getLimit();
    var RE_CHARSET = /^charset$/i;
    UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
    function UrlEncoded(boy, cfg) {
      const limits = cfg.limits;
      const parsedConType = cfg.parsedConType;
      this.boy = boy;
      this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
      this.fieldsLimit = getLimit(limits, "fields", Infinity);
      let charset;
      for (var i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
          charset = parsedConType[i][1].toLowerCase();
          break;
        }
      }
      if (charset === void 0) {
        charset = cfg.defCharset || "utf8";
      }
      this.decoder = new Decoder();
      this.charset = charset;
      this._fields = 0;
      this._state = "key";
      this._checkingBytes = true;
      this._bytesKey = 0;
      this._bytesVal = 0;
      this._key = "";
      this._val = "";
      this._keyTrunc = false;
      this._valTrunc = false;
      this._hitLimit = false;
    }
    UrlEncoded.prototype.write = function(data, cb) {
      if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
          this.boy.hitFieldsLimit = true;
          this.boy.emit("fieldsLimit");
        }
        return cb();
      }
      let idxeq;
      let idxamp;
      let i;
      let p = 0;
      const len = data.length;
      while (p < len) {
        if (this._state === "key") {
          idxeq = idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 61) {
              idxeq = i;
              break;
            } else if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesKey;
            }
          }
          if (idxeq !== void 0) {
            if (idxeq > p) {
              this._key += this.decoder.write(data.toString("binary", p, idxeq));
            }
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p = idxeq + 1;
          } else if (idxamp !== void 0) {
            ++this._fields;
            let key;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p) {
              key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
            } else {
              key = this._key;
            }
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key.length) {
              this.boy.emit(
                "field",
                decodeText(key, "binary", this.charset),
                "",
                keyTrunc,
                false
              );
            }
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._key += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
              this._checkingBytes = false;
              this._keyTrunc = true;
            }
          } else {
            if (p < len) {
              this._key += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        } else {
          idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesVal;
            }
          }
          if (idxamp !== void 0) {
            ++this._fields;
            if (idxamp > p) {
              this._val += this.decoder.write(data.toString("binary", p, idxamp));
            }
            this.boy.emit(
              "field",
              decodeText(this._key, "binary", this.charset),
              decodeText(this._val, "binary", this.charset),
              this._keyTrunc,
              this._valTrunc
            );
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._val += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
              this._checkingBytes = false;
              this._valTrunc = true;
            }
          } else {
            if (p < len) {
              this._val += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        }
      }
      cb();
    };
    UrlEncoded.prototype.end = function() {
      if (this.boy._done) {
        return;
      }
      if (this._state === "key" && this._key.length > 0) {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          "",
          this._keyTrunc,
          false
        );
      } else if (this._state === "val") {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          decodeText(this._val, "binary", this.charset),
          this._keyTrunc,
          this._valTrunc
        );
      }
      this.boy._done = true;
      this.boy.emit("finish");
    };
    module2.exports = UrlEncoded;
  }
});

// node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({
  "node_modules/@fastify/busboy/lib/main.js"(exports2, module2) {
    "use strict";
    var WritableStream = require("node:stream").Writable;
    var { inherits } = require("node:util");
    var Dicer = require_Dicer();
    var MultipartParser = require_multipart();
    var UrlencodedParser = require_urlencoded();
    var parseParams = require_parseParams();
    function Busboy(opts) {
      if (!(this instanceof Busboy)) {
        return new Busboy(opts);
      }
      if (typeof opts !== "object") {
        throw new TypeError("Busboy expected an options-Object.");
      }
      if (typeof opts.headers !== "object") {
        throw new TypeError("Busboy expected an options-Object with headers-attribute.");
      }
      if (typeof opts.headers["content-type"] !== "string") {
        throw new TypeError("Missing Content-Type-header.");
      }
      const {
        headers,
        ...streamOptions
      } = opts;
      this.opts = {
        autoDestroy: false,
        ...streamOptions
      };
      WritableStream.call(this, this.opts);
      this._done = false;
      this._parser = this.getParserByHeaders(headers);
      this._finished = false;
    }
    inherits(Busboy, WritableStream);
    Busboy.prototype.emit = function(ev) {
      if (ev === "finish") {
        if (!this._done) {
          this._parser?.end();
          return;
        } else if (this._finished) {
          return;
        }
        this._finished = true;
      }
      WritableStream.prototype.emit.apply(this, arguments);
    };
    Busboy.prototype.getParserByHeaders = function(headers) {
      const parsed = parseParams(headers["content-type"]);
      const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
      };
      if (MultipartParser.detect.test(parsed[0])) {
        return new MultipartParser(this, cfg);
      }
      if (UrlencodedParser.detect.test(parsed[0])) {
        return new UrlencodedParser(this, cfg);
      }
      throw new Error("Unsupported Content-Type.");
    };
    Busboy.prototype._write = function(chunk, encoding, cb) {
      this._parser.write(chunk, cb);
    };
    module2.exports = Busboy;
    module2.exports.default = Busboy;
    module2.exports.Busboy = Busboy;
    module2.exports.Dicer = Dicer;
  }
});

// node_modules/undici/lib/fetch/constants.js
var require_constants2 = __commonJS({
  "node_modules/undici/lib/fetch/constants.js"(exports2, module2) {
    "use strict";
    var { MessageChannel, receiveMessageOnPort } = require("worker_threads");
    var corsSafeListedMethods = ["GET", "HEAD", "POST"];
    var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
    var nullBodyStatus = [101, 204, 205, 304];
    var redirectStatus = [301, 302, 303, 307, 308];
    var redirectStatusSet = new Set(redirectStatus);
    var badPorts = [
      "1",
      "7",
      "9",
      "11",
      "13",
      "15",
      "17",
      "19",
      "20",
      "21",
      "22",
      "23",
      "25",
      "37",
      "42",
      "43",
      "53",
      "69",
      "77",
      "79",
      "87",
      "95",
      "101",
      "102",
      "103",
      "104",
      "109",
      "110",
      "111",
      "113",
      "115",
      "117",
      "119",
      "123",
      "135",
      "137",
      "139",
      "143",
      "161",
      "179",
      "389",
      "427",
      "465",
      "512",
      "513",
      "514",
      "515",
      "526",
      "530",
      "531",
      "532",
      "540",
      "548",
      "554",
      "556",
      "563",
      "587",
      "601",
      "636",
      "989",
      "990",
      "993",
      "995",
      "1719",
      "1720",
      "1723",
      "2049",
      "3659",
      "4045",
      "5060",
      "5061",
      "6000",
      "6566",
      "6665",
      "6666",
      "6667",
      "6668",
      "6669",
      "6697",
      "10080"
    ];
    var badPortsSet = new Set(badPorts);
    var referrerPolicy = [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "same-origin",
      "origin",
      "strict-origin",
      "origin-when-cross-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ];
    var referrerPolicySet = new Set(referrerPolicy);
    var requestRedirect = ["follow", "manual", "error"];
    var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
    var safeMethodsSet = new Set(safeMethods);
    var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
    var requestCredentials = ["omit", "same-origin", "include"];
    var requestCache = [
      "default",
      "no-store",
      "reload",
      "no-cache",
      "force-cache",
      "only-if-cached"
    ];
    var requestBodyHeader = [
      "content-encoding",
      "content-language",
      "content-location",
      "content-type",
      // See https://github.com/nodejs/undici/issues/2021
      // 'Content-Length' is a forbidden header name, which is typically
      // removed in the Headers implementation. However, undici doesn't
      // filter out headers, so we add it here.
      "content-length"
    ];
    var requestDuplex = [
      "half"
    ];
    var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
    var forbiddenMethodsSet = new Set(forbiddenMethods);
    var subresource = [
      "audio",
      "audioworklet",
      "font",
      "image",
      "manifest",
      "paintworklet",
      "script",
      "style",
      "track",
      "video",
      "xslt",
      ""
    ];
    var subresourceSet = new Set(subresource);
    var DOMException2 = globalThis.DOMException ?? (() => {
      try {
        atob("~");
      } catch (err) {
        return Object.getPrototypeOf(err).constructor;
      }
    })();
    var channel;
    var structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
    // structuredClone was added in v17.0.0, but fetch supports v16.8
    function structuredClone2(value, options = void 0) {
      if (arguments.length === 0) {
        throw new TypeError("missing argument");
      }
      if (!channel) {
        channel = new MessageChannel();
      }
      channel.port1.unref();
      channel.port2.unref();
      channel.port1.postMessage(value, options?.transfer);
      return receiveMessageOnPort(channel.port2).message;
    };
    module2.exports = {
      DOMException: DOMException2,
      structuredClone,
      subresource,
      forbiddenMethods,
      requestBodyHeader,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      redirectStatus,
      corsSafeListedMethods,
      nullBodyStatus,
      safeMethods,
      badPorts,
      requestDuplex,
      subresourceSet,
      badPortsSet,
      redirectStatusSet,
      corsSafeListedMethodsSet,
      safeMethodsSet,
      forbiddenMethodsSet,
      referrerPolicySet
    };
  }
});

// node_modules/undici/lib/fetch/global.js
var require_global = __commonJS({
  "node_modules/undici/lib/fetch/global.js"(exports2, module2) {
    "use strict";
    var globalOrigin = Symbol.for("undici.globalOrigin.1");
    function getGlobalOrigin() {
      return globalThis[globalOrigin];
    }
    function setGlobalOrigin(newOrigin) {
      if (newOrigin === void 0) {
        Object.defineProperty(globalThis, globalOrigin, {
          value: void 0,
          writable: true,
          enumerable: false,
          configurable: false
        });
        return;
      }
      const parsedURL = new URL(newOrigin);
      if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
      }
      Object.defineProperty(globalThis, globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    module2.exports = {
      getGlobalOrigin,
      setGlobalOrigin
    };
  }
});

// node_modules/undici/lib/fetch/util.js
var require_util2 = __commonJS({
  "node_modules/undici/lib/fetch/util.js"(exports2, module2) {
    "use strict";
    var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants2();
    var { getGlobalOrigin } = require_global();
    var { performance: performance2 } = require("perf_hooks");
    var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
    var assert = require("assert");
    var { isUint8Array } = require("util/types");
    var supportedHashes = [];
    var crypto;
    try {
      crypto = require("crypto");
      const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
      supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
    } catch {
    }
    function responseURL(response) {
      const urlList = response.urlList;
      const length = urlList.length;
      return length === 0 ? null : urlList[length - 1].toString();
    }
    function responseLocationURL(response, requestFragment) {
      if (!redirectStatusSet.has(response.status)) {
        return null;
      }
      let location = response.headersList.get("location");
      if (location !== null && isValidHeaderValue(location)) {
        location = new URL(location, responseURL(response));
      }
      if (location && !location.hash) {
        location.hash = requestFragment;
      }
      return location;
    }
    function requestCurrentURL(request) {
      return request.urlList[request.urlList.length - 1];
    }
    function requestBadPort(request) {
      const url = requestCurrentURL(request);
      if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
        return "blocked";
      }
      return "allowed";
    }
    function isErrorLike(object) {
      return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
    }
    function isValidReasonPhrase(statusText) {
      for (let i = 0; i < statusText.length; ++i) {
        const c = statusText.charCodeAt(i);
        if (!(c === 9 || // HTAB
        c >= 32 && c <= 126 || // SP / VCHAR
        c >= 128 && c <= 255)) {
          return false;
        }
      }
      return true;
    }
    function isTokenCharCode(c) {
      switch (c) {
        case 34:
        case 40:
        case 41:
        case 44:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 123:
        case 125:
          return false;
        default:
          return c >= 33 && c <= 126;
      }
    }
    function isValidHTTPToken(characters) {
      if (characters.length === 0) {
        return false;
      }
      for (let i = 0; i < characters.length; ++i) {
        if (!isTokenCharCode(characters.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    }
    function isValidHeaderName(potentialValue) {
      return isValidHTTPToken(potentialValue);
    }
    function isValidHeaderValue(potentialValue) {
      if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {
        return false;
      }
      if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
        return false;
      }
      return true;
    }
    function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
      const { headersList } = actualResponse;
      const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
      let policy = "";
      if (policyHeader.length > 0) {
        for (let i = policyHeader.length; i !== 0; i--) {
          const token = policyHeader[i - 1].trim();
          if (referrerPolicyTokens.has(token)) {
            policy = token;
            break;
          }
        }
      }
      if (policy !== "") {
        request.referrerPolicy = policy;
      }
    }
    function crossOriginResourcePolicyCheck() {
      return "allowed";
    }
    function corsCheck() {
      return "success";
    }
    function TAOCheck() {
      return "success";
    }
    function appendFetchMetadata(httpRequest) {
      let header = null;
      header = httpRequest.mode;
      httpRequest.headersList.set("sec-fetch-mode", header);
    }
    function appendRequestOriginHeader(request) {
      let serializedOrigin = request.origin;
      if (request.responseTainting === "cors" || request.mode === "websocket") {
        if (serializedOrigin) {
          request.headersList.append("origin", serializedOrigin);
        }
      } else if (request.method !== "GET" && request.method !== "HEAD") {
        switch (request.referrerPolicy) {
          case "no-referrer":
            serializedOrigin = null;
            break;
          case "no-referrer-when-downgrade":
          case "strict-origin":
          case "strict-origin-when-cross-origin":
            if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
              serializedOrigin = null;
            }
            break;
          case "same-origin":
            if (!sameOrigin(request, requestCurrentURL(request))) {
              serializedOrigin = null;
            }
            break;
          default:
        }
        if (serializedOrigin) {
          request.headersList.append("origin", serializedOrigin);
        }
      }
    }
    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
      return performance2.now();
    }
    function createOpaqueTimingInfo(timingInfo) {
      return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
      };
    }
    function makePolicyContainer() {
      return {
        referrerPolicy: "strict-origin-when-cross-origin"
      };
    }
    function clonePolicyContainer(policyContainer) {
      return {
        referrerPolicy: policyContainer.referrerPolicy
      };
    }
    function determineRequestsReferrer(request) {
      const policy = request.referrerPolicy;
      assert(policy);
      let referrerSource = null;
      if (request.referrer === "client") {
        const globalOrigin = getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") {
          return "no-referrer";
        }
        referrerSource = new URL(globalOrigin);
      } else if (request.referrer instanceof URL) {
        referrerSource = request.referrer;
      }
      let referrerURL = stripURLForReferrer(referrerSource);
      const referrerOrigin = stripURLForReferrer(referrerSource, true);
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin;
      }
      const areSameOrigin = sameOrigin(request, referrerURL);
      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);
      switch (policy) {
        case "origin":
          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
          return referrerURL;
        case "same-origin":
          return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
          return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin": {
          const currentURL = requestCurrentURL(request);
          if (sameOrigin(referrerURL, currentURL)) {
            return referrerURL;
          }
          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
            return "no-referrer";
          }
          return referrerOrigin;
        }
        case "strict-origin":
        // eslint-disable-line
        /**
           * 1. If referrerURL is a potentially trustworthy URL and
           * request’s current URL is not a potentially trustworthy URL,
           * then return no referrer.
           * 2. Return referrerOrigin
          */
        case "no-referrer-when-downgrade":
        // eslint-disable-line
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
        default:
          return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
      }
    }
    function stripURLForReferrer(url, originOnly) {
      assert(url instanceof URL);
      if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") {
        return "no-referrer";
      }
      url.username = "";
      url.password = "";
      url.hash = "";
      if (originOnly) {
        url.pathname = "";
        url.search = "";
      }
      return url;
    }
    function isURLPotentiallyTrustworthy(url) {
      if (!(url instanceof URL)) {
        return false;
      }
      if (url.href === "about:blank" || url.href === "about:srcdoc") {
        return true;
      }
      if (url.protocol === "data:") return true;
      if (url.protocol === "file:") return true;
      return isOriginPotentiallyTrustworthy(url.origin);
      function isOriginPotentiallyTrustworthy(origin) {
        if (origin == null || origin === "null") return false;
        const originAsURL = new URL(origin);
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
          return true;
        }
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
          return true;
        }
        return false;
      }
    }
    function bytesMatch(bytes, metadataList) {
      if (crypto === void 0) {
        return true;
      }
      const parsedMetadata = parseMetadata(metadataList);
      if (parsedMetadata === "no metadata") {
        return true;
      }
      if (parsedMetadata.length === 0) {
        return true;
      }
      const strongest = getStrongestMetadata(parsedMetadata);
      const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
      for (const item of metadata) {
        const algorithm = item.algo;
        const expectedValue = item.hash;
        let actualValue = crypto.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue[actualValue.length - 1] === "=") {
          if (actualValue[actualValue.length - 2] === "=") {
            actualValue = actualValue.slice(0, -2);
          } else {
            actualValue = actualValue.slice(0, -1);
          }
        }
        if (compareBase64Mixed(actualValue, expectedValue)) {
          return true;
        }
      }
      return false;
    }
    var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
    function parseMetadata(metadata) {
      const result = [];
      let empty = true;
      for (const token of metadata.split(" ")) {
        empty = false;
        const parsedToken = parseHashWithOptions.exec(token);
        if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) {
          continue;
        }
        const algorithm = parsedToken.groups.algo.toLowerCase();
        if (supportedHashes.includes(algorithm)) {
          result.push(parsedToken.groups);
        }
      }
      if (empty === true) {
        return "no metadata";
      }
      return result;
    }
    function getStrongestMetadata(metadataList) {
      let algorithm = metadataList[0].algo;
      if (algorithm[3] === "5") {
        return algorithm;
      }
      for (let i = 1; i < metadataList.length; ++i) {
        const metadata = metadataList[i];
        if (metadata.algo[3] === "5") {
          algorithm = "sha512";
          break;
        } else if (algorithm[3] === "3") {
          continue;
        } else if (metadata.algo[3] === "3") {
          algorithm = "sha384";
        }
      }
      return algorithm;
    }
    function filterMetadataListByAlgorithm(metadataList, algorithm) {
      if (metadataList.length === 1) {
        return metadataList;
      }
      let pos = 0;
      for (let i = 0; i < metadataList.length; ++i) {
        if (metadataList[i].algo === algorithm) {
          metadataList[pos++] = metadataList[i];
        }
      }
      metadataList.length = pos;
      return metadataList;
    }
    function compareBase64Mixed(actualValue, expectedValue) {
      if (actualValue.length !== expectedValue.length) {
        return false;
      }
      for (let i = 0; i < actualValue.length; ++i) {
        if (actualValue[i] !== expectedValue[i]) {
          if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") {
            continue;
          }
          return false;
        }
      }
      return true;
    }
    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
    }
    function sameOrigin(A, B) {
      if (A.origin === B.origin && A.origin === "null") {
        return true;
      }
      if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
        return true;
      }
      return false;
    }
    function createDeferredPromise() {
      let res;
      let rej;
      const promise = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      return { promise, resolve: res, reject: rej };
    }
    function isAborted(fetchParams) {
      return fetchParams.controller.state === "aborted";
    }
    function isCancelled(fetchParams) {
      return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
    }
    var normalizeMethodRecord = {
      delete: "DELETE",
      DELETE: "DELETE",
      get: "GET",
      GET: "GET",
      head: "HEAD",
      HEAD: "HEAD",
      options: "OPTIONS",
      OPTIONS: "OPTIONS",
      post: "POST",
      POST: "POST",
      put: "PUT",
      PUT: "PUT"
    };
    Object.setPrototypeOf(normalizeMethodRecord, null);
    function normalizeMethod(method) {
      return normalizeMethodRecord[method.toLowerCase()] ?? method;
    }
    function serializeJavascriptValueToJSONString(value) {
      const result = JSON.stringify(value);
      if (result === void 0) {
        throw new TypeError("Value is not JSON serializable");
      }
      assert(typeof result === "string");
      return result;
    }
    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
    function makeIterator(iterator, name, kind) {
      const object = {
        index: 0,
        kind,
        target: iterator
      };
      const i = {
        next() {
          if (Object.getPrototypeOf(this) !== i) {
            throw new TypeError(
              `'next' called on an object that does not implement interface ${name} Iterator.`
            );
          }
          const { index, kind: kind2, target } = object;
          const values = target();
          const len = values.length;
          if (index >= len) {
            return { value: void 0, done: true };
          }
          const pair = values[index];
          object.index = index + 1;
          return iteratorResult(pair, kind2);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
      };
      Object.setPrototypeOf(i, esIteratorPrototype);
      return Object.setPrototypeOf({}, i);
    }
    function iteratorResult(pair, kind) {
      let result;
      switch (kind) {
        case "key": {
          result = pair[0];
          break;
        }
        case "value": {
          result = pair[1];
          break;
        }
        case "key+value": {
          result = pair;
          break;
        }
      }
      return { value: result, done: false };
    }
    async function fullyReadBody(body, processBody, processBodyError) {
      const successSteps = processBody;
      const errorSteps = processBodyError;
      let reader;
      try {
        reader = body.stream.getReader();
      } catch (e) {
        errorSteps(e);
        return;
      }
      try {
        const result = await readAllBytes(reader);
        successSteps(result);
      } catch (e) {
        errorSteps(e);
      }
    }
    var ReadableStream2 = globalThis.ReadableStream;
    function isReadableStreamLike(stream) {
      if (!ReadableStream2) {
        ReadableStream2 = require("stream/web").ReadableStream;
      }
      return stream instanceof ReadableStream2 || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
    }
    var MAXIMUM_ARGUMENT_LENGTH = 65535;
    function isomorphicDecode(input) {
      if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
        return String.fromCharCode(...input);
      }
      return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
    }
    function readableStreamClose(controller) {
      try {
        controller.close();
      } catch (err) {
        if (!err.message.includes("Controller is already closed")) {
          throw err;
        }
      }
    }
    function isomorphicEncode(input) {
      for (let i = 0; i < input.length; i++) {
        assert(input.charCodeAt(i) <= 255);
      }
      return input;
    }
    async function readAllBytes(reader) {
      const bytes = [];
      let byteLength = 0;
      while (true) {
        const { done, value: chunk } = await reader.read();
        if (done) {
          return Buffer.concat(bytes, byteLength);
        }
        if (!isUint8Array(chunk)) {
          throw new TypeError("Received non-Uint8Array chunk");
        }
        bytes.push(chunk);
        byteLength += chunk.length;
      }
    }
    function urlIsLocal(url) {
      assert("protocol" in url);
      const protocol = url.protocol;
      return protocol === "about:" || protocol === "blob:" || protocol === "data:";
    }
    function urlHasHttpsScheme(url) {
      if (typeof url === "string") {
        return url.startsWith("https:");
      }
      return url.protocol === "https:";
    }
    function urlIsHttpHttpsScheme(url) {
      assert("protocol" in url);
      const protocol = url.protocol;
      return protocol === "http:" || protocol === "https:";
    }
    var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
    module2.exports = {
      isAborted,
      isCancelled,
      createDeferredPromise,
      ReadableStreamFrom,
      toUSVString,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      coarsenedSharedCurrentTime,
      determineRequestsReferrer,
      makePolicyContainer,
      clonePolicyContainer,
      appendFetchMetadata,
      appendRequestOriginHeader,
      TAOCheck,
      corsCheck,
      crossOriginResourcePolicyCheck,
      createOpaqueTimingInfo,
      setRequestReferrerPolicyOnRedirect,
      isValidHTTPToken,
      requestBadPort,
      requestCurrentURL,
      responseURL,
      responseLocationURL,
      isBlobLike,
      isURLPotentiallyTrustworthy,
      isValidReasonPhrase,
      sameOrigin,
      normalizeMethod,
      serializeJavascriptValueToJSONString,
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue,
      hasOwn,
      isErrorLike,
      fullyReadBody,
      bytesMatch,
      isReadableStreamLike,
      readableStreamClose,
      isomorphicEncode,
      isomorphicDecode,
      urlIsLocal,
      urlHasHttpsScheme,
      urlIsHttpHttpsScheme,
      readAllBytes,
      normalizeMethodRecord,
      parseMetadata
    };
  }
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS({
  "node_modules/undici/lib/fetch/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kUrl: Symbol("url"),
      kHeaders: Symbol("headers"),
      kSignal: Symbol("signal"),
      kState: Symbol("state"),
      kGuard: Symbol("guard"),
      kRealm: Symbol("realm")
    };
  }
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({
  "node_modules/undici/lib/fetch/webidl.js"(exports2, module2) {
    "use strict";
    var { types } = require("util");
    var { hasOwn, toUSVString } = require_util2();
    var webidl = {};
    webidl.converters = {};
    webidl.util = {};
    webidl.errors = {};
    webidl.errors.exception = function(message) {
      return new TypeError(`${message.header}: ${message.message}`);
    };
    webidl.errors.conversionFailed = function(context2) {
      const plural = context2.types.length === 1 ? "" : " one of";
      const message = `${context2.argument} could not be converted to${plural}: ${context2.types.join(", ")}.`;
      return webidl.errors.exception({
        header: context2.prefix,
        message
      });
    };
    webidl.errors.invalidArgument = function(context2) {
      return webidl.errors.exception({
        header: context2.prefix,
        message: `"${context2.value}" is an invalid ${context2.type}.`
      });
    };
    webidl.brandCheck = function(V, I, opts = void 0) {
      if (opts?.strict !== false && !(V instanceof I)) {
        throw new TypeError("Illegal invocation");
      } else {
        return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
      }
    };
    webidl.argumentLengthCheck = function({ length }, min, ctx) {
      if (length < min) {
        throw webidl.errors.exception({
          message: `${min} argument${min !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
          ...ctx
        });
      }
    };
    webidl.illegalConstructor = function() {
      throw webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
      });
    };
    webidl.util.Type = function(V) {
      switch (typeof V) {
        case "undefined":
          return "Undefined";
        case "boolean":
          return "Boolean";
        case "string":
          return "String";
        case "symbol":
          return "Symbol";
        case "number":
          return "Number";
        case "bigint":
          return "BigInt";
        case "function":
        case "object": {
          if (V === null) {
            return "Null";
          }
          return "Object";
        }
      }
    };
    webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
      let upperBound;
      let lowerBound2;
      if (bitLength === 64) {
        upperBound = Math.pow(2, 53) - 1;
        if (signedness === "unsigned") {
          lowerBound2 = 0;
        } else {
          lowerBound2 = Math.pow(-2, 53) + 1;
        }
      } else if (signedness === "unsigned") {
        lowerBound2 = 0;
        upperBound = Math.pow(2, bitLength) - 1;
      } else {
        lowerBound2 = Math.pow(-2, bitLength) - 1;
        upperBound = Math.pow(2, bitLength - 1) - 1;
      }
      let x = Number(V);
      if (x === 0) {
        x = 0;
      }
      if (opts.enforceRange === true) {
        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V} to an integer.`
          });
        }
        x = webidl.util.IntegerPart(x);
        if (x < lowerBound2 || x > upperBound) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound2}-${upperBound}, got ${x}.`
          });
        }
        return x;
      }
      if (!Number.isNaN(x) && opts.clamp === true) {
        x = Math.min(Math.max(x, lowerBound2), upperBound);
        if (Math.floor(x) % 2 === 0) {
          x = Math.floor(x);
        } else {
          x = Math.ceil(x);
        }
        return x;
      }
      if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
        return 0;
      }
      x = webidl.util.IntegerPart(x);
      x = x % Math.pow(2, bitLength);
      if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
        return x - Math.pow(2, bitLength);
      }
      return x;
    };
    webidl.util.IntegerPart = function(n) {
      const r = Math.floor(Math.abs(n));
      if (n < 0) {
        return -1 * r;
      }
      return r;
    };
    webidl.sequenceConverter = function(converter) {
      return (V) => {
        if (webidl.util.Type(V) !== "Object") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${webidl.util.Type(V)} is not an Object.`
          });
        }
        const method = V?.[Symbol.iterator]?.();
        const seq = [];
        if (method === void 0 || typeof method.next !== "function") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
          });
        }
        while (true) {
          const { done, value } = method.next();
          if (done) {
            break;
          }
          seq.push(converter(value));
        }
        return seq;
      };
    };
    webidl.recordConverter = function(keyConverter, valueConverter) {
      return (O) => {
        if (webidl.util.Type(O) !== "Object") {
          throw webidl.errors.exception({
            header: "Record",
            message: `Value of type ${webidl.util.Type(O)} is not an Object.`
          });
        }
        const result = {};
        if (!types.isProxy(O)) {
          const keys2 = Object.keys(O);
          for (const key of keys2) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O[key]);
            result[typedKey] = typedValue;
          }
          return result;
        }
        const keys = Reflect.ownKeys(O);
        for (const key of keys) {
          const desc = Reflect.getOwnPropertyDescriptor(O, key);
          if (desc?.enumerable) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O[key]);
            result[typedKey] = typedValue;
          }
        }
        return result;
      };
    };
    webidl.interfaceConverter = function(i) {
      return (V, opts = {}) => {
        if (opts.strict !== false && !(V instanceof i)) {
          throw webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
          });
        }
        return V;
      };
    };
    webidl.dictionaryConverter = function(converters) {
      return (dictionary) => {
        const type = webidl.util.Type(dictionary);
        const dict = {};
        if (type === "Null" || type === "Undefined") {
          return dict;
        } else if (type !== "Object") {
          throw webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
          });
        }
        for (const options of converters) {
          const { key, defaultValue, required, converter } = options;
          if (required === true) {
            if (!hasOwn(dictionary, key)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `Missing required key "${key}".`
              });
            }
          }
          let value = dictionary[key];
          const hasDefault = hasOwn(options, "defaultValue");
          if (hasDefault && value !== null) {
            value = value ?? defaultValue;
          }
          if (required || hasDefault || value !== void 0) {
            value = converter(value);
            if (options.allowedValues && !options.allowedValues.includes(value)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
              });
            }
            dict[key] = value;
          }
        }
        return dict;
      };
    };
    webidl.nullableConverter = function(converter) {
      return (V) => {
        if (V === null) {
          return V;
        }
        return converter(V);
      };
    };
    webidl.converters.DOMString = function(V, opts = {}) {
      if (V === null && opts.legacyNullToEmptyString) {
        return "";
      }
      if (typeof V === "symbol") {
        throw new TypeError("Could not convert argument of type symbol to string.");
      }
      return String(V);
    };
    webidl.converters.ByteString = function(V) {
      const x = webidl.converters.DOMString(V);
      for (let index = 0; index < x.length; index++) {
        if (x.charCodeAt(index) > 255) {
          throw new TypeError(
            `Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
          );
        }
      }
      return x;
    };
    webidl.converters.USVString = toUSVString;
    webidl.converters.boolean = function(V) {
      const x = Boolean(V);
      return x;
    };
    webidl.converters.any = function(V) {
      return V;
    };
    webidl.converters["long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "signed");
      return x;
    };
    webidl.converters["unsigned long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "unsigned");
      return x;
    };
    webidl.converters["unsigned long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 32, "unsigned");
      return x;
    };
    webidl.converters["unsigned short"] = function(V, opts) {
      const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
      return x;
    };
    webidl.converters.ArrayBuffer = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
        throw webidl.errors.conversionFailed({
          prefix: `${V}`,
          argument: `${V}`,
          types: ["ArrayBuffer"]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.TypedArray = function(V, T, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
        throw webidl.errors.conversionFailed({
          prefix: `${T.name}`,
          argument: `${V}`,
          types: [T.name]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.DataView = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
        throw webidl.errors.exception({
          header: "DataView",
          message: "Object is not a DataView."
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.BufferSource = function(V, opts = {}) {
      if (types.isAnyArrayBuffer(V)) {
        return webidl.converters.ArrayBuffer(V, opts);
      }
      if (types.isTypedArray(V)) {
        return webidl.converters.TypedArray(V, V.constructor);
      }
      if (types.isDataView(V)) {
        return webidl.converters.DataView(V, opts);
      }
      throw new TypeError(`Could not convert ${V} to a BufferSource.`);
    };
    webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(
      webidl.converters.ByteString
    );
    webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(
      webidl.converters["sequence<ByteString>"]
    );
    webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(
      webidl.converters.ByteString,
      webidl.converters.ByteString
    );
    module2.exports = {
      webidl
    };
  }
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({
  "node_modules/undici/lib/fetch/dataURL.js"(exports2, module2) {
    var assert = require("assert");
    var { atob: atob2 } = require("buffer");
    var { isomorphicDecode } = require_util2();
    var encoder = new TextEncoder();
    var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
    var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
    var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
    function dataURLProcessor(dataURL) {
      assert(dataURL.protocol === "data:");
      let input = URLSerializer(dataURL, true);
      input = input.slice(5);
      const position = { position: 0 };
      let mimeType = collectASequenceOfCodePointsFast(
        ",",
        input,
        position
      );
      const mimeTypeLength = mimeType.length;
      mimeType = removeASCIIWhitespace(mimeType, true, true);
      if (position.position >= input.length) {
        return "failure";
      }
      position.position++;
      const encodedBody = input.slice(mimeTypeLength + 1);
      let body = stringPercentDecode(encodedBody);
      if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        const stringBody = isomorphicDecode(body);
        body = forgivingBase64(stringBody);
        if (body === "failure") {
          return "failure";
        }
        mimeType = mimeType.slice(0, -6);
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        mimeType = mimeType.slice(0, -1);
      }
      if (mimeType.startsWith(";")) {
        mimeType = "text/plain" + mimeType;
      }
      let mimeTypeRecord = parseMIMEType(mimeType);
      if (mimeTypeRecord === "failure") {
        mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
      }
      return { mimeType: mimeTypeRecord, body };
    }
    function URLSerializer(url, excludeFragment = false) {
      if (!excludeFragment) {
        return url.href;
      }
      const href = url.href;
      const hashLength = url.hash.length;
      return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
    }
    function collectASequenceOfCodePoints(condition, input, position) {
      let result = "";
      while (position.position < input.length && condition(input[position.position])) {
        result += input[position.position];
        position.position++;
      }
      return result;
    }
    function collectASequenceOfCodePointsFast(char, input, position) {
      const idx = input.indexOf(char, position.position);
      const start = position.position;
      if (idx === -1) {
        position.position = input.length;
        return input.slice(start);
      }
      position.position = idx;
      return input.slice(start, position.position);
    }
    function stringPercentDecode(input) {
      const bytes = encoder.encode(input);
      return percentDecode(bytes);
    }
    function percentDecode(input) {
      const output = [];
      for (let i = 0; i < input.length; i++) {
        const byte = input[i];
        if (byte !== 37) {
          output.push(byte);
        } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
          output.push(37);
        } else {
          const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
          const bytePoint = Number.parseInt(nextTwoBytes, 16);
          output.push(bytePoint);
          i += 2;
        }
      }
      return Uint8Array.from(output);
    }
    function parseMIMEType(input) {
      input = removeHTTPWhitespace(input, true, true);
      const position = { position: 0 };
      const type = collectASequenceOfCodePointsFast(
        "/",
        input,
        position
      );
      if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
        return "failure";
      }
      if (position.position > input.length) {
        return "failure";
      }
      position.position++;
      let subtype = collectASequenceOfCodePointsFast(
        ";",
        input,
        position
      );
      subtype = removeHTTPWhitespace(subtype, false, true);
      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
        return "failure";
      }
      const typeLowercase = type.toLowerCase();
      const subtypeLowercase = subtype.toLowerCase();
      const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */
        parameters: /* @__PURE__ */ new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
      };
      while (position.position < input.length) {
        position.position++;
        collectASequenceOfCodePoints(
          // https://fetch.spec.whatwg.org/#http-whitespace
          (char) => HTTP_WHITESPACE_REGEX.test(char),
          input,
          position
        );
        let parameterName = collectASequenceOfCodePoints(
          (char) => char !== ";" && char !== "=",
          input,
          position
        );
        parameterName = parameterName.toLowerCase();
        if (position.position < input.length) {
          if (input[position.position] === ";") {
            continue;
          }
          position.position++;
        }
        if (position.position > input.length) {
          break;
        }
        let parameterValue = null;
        if (input[position.position] === '"') {
          parameterValue = collectAnHTTPQuotedString(input, position, true);
          collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
        } else {
          parameterValue = collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
          parameterValue = removeHTTPWhitespace(parameterValue, false, true);
          if (parameterValue.length === 0) {
            continue;
          }
        }
        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
          mimeType.parameters.set(parameterName, parameterValue);
        }
      }
      return mimeType;
    }
    function forgivingBase64(data) {
      data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
      if (data.length % 4 === 0) {
        data = data.replace(/=?=$/, "");
      }
      if (data.length % 4 === 1) {
        return "failure";
      }
      if (/[^+/0-9A-Za-z]/.test(data)) {
        return "failure";
      }
      const binary = atob2(data);
      const bytes = new Uint8Array(binary.length);
      for (let byte = 0; byte < binary.length; byte++) {
        bytes[byte] = binary.charCodeAt(byte);
      }
      return bytes;
    }
    function collectAnHTTPQuotedString(input, position, extractValue) {
      const positionStart = position.position;
      let value = "";
      assert(input[position.position] === '"');
      position.position++;
      while (true) {
        value += collectASequenceOfCodePoints(
          (char) => char !== '"' && char !== "\\",
          input,
          position
        );
        if (position.position >= input.length) {
          break;
        }
        const quoteOrBackslash = input[position.position];
        position.position++;
        if (quoteOrBackslash === "\\") {
          if (position.position >= input.length) {
            value += "\\";
            break;
          }
          value += input[position.position];
          position.position++;
        } else {
          assert(quoteOrBackslash === '"');
          break;
        }
      }
      if (extractValue) {
        return value;
      }
      return input.slice(positionStart, position.position);
    }
    function serializeAMimeType(mimeType) {
      assert(mimeType !== "failure");
      const { parameters, essence } = mimeType;
      let serialization = essence;
      for (let [name, value] of parameters.entries()) {
        serialization += ";";
        serialization += name;
        serialization += "=";
        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
          value = value.replace(/(\\|")/g, "\\$1");
          value = '"' + value;
          value += '"';
        }
        serialization += value;
      }
      return serialization;
    }
    function isHTTPWhiteSpace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === " ";
    }
    function removeHTTPWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    function isASCIIWhitespace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
    }
    function removeASCIIWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    module2.exports = {
      dataURLProcessor,
      URLSerializer,
      collectASequenceOfCodePoints,
      collectASequenceOfCodePointsFast,
      stringPercentDecode,
      parseMIMEType,
      collectAnHTTPQuotedString,
      serializeAMimeType
    };
  }
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({
  "node_modules/undici/lib/fetch/file.js"(exports2, module2) {
    "use strict";
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var { types } = require("util");
    var { kState } = require_symbols2();
    var { isBlobLike } = require_util2();
    var { webidl } = require_webidl();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var { kEnumerableProperty } = require_util();
    var encoder = new TextEncoder();
    var File = class _File extends Blob2 {
      constructor(fileBits, fileName, options = {}) {
        webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
        fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = webidl.converters.USVString(fileName);
        options = webidl.converters.FilePropertyBag(options);
        const n = fileName;
        let t = options.type;
        let d;
        substep: {
          if (t) {
            t = parseMIMEType(t);
            if (t === "failure") {
              t = "";
              break substep;
            }
            t = serializeAMimeType(t).toLowerCase();
          }
          d = options.lastModified;
        }
        super(processBlobParts(fileBits, options), { type: t });
        this[kState] = {
          name: n,
          lastModified: d,
          type: t
        };
      }
      get name() {
        webidl.brandCheck(this, _File);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _File);
        return this[kState].lastModified;
      }
      get type() {
        webidl.brandCheck(this, _File);
        return this[kState].type;
      }
    };
    var FileLike = class _FileLike {
      constructor(blobLike, fileName, options = {}) {
        const n = fileName;
        const t = options.type;
        const d = options.lastModified ?? Date.now();
        this[kState] = {
          blobLike,
          name: n,
          type: t,
          lastModified: d
        };
      }
      stream(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.stream(...args);
      }
      arrayBuffer(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.arrayBuffer(...args);
      }
      slice(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.slice(...args);
      }
      text(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.text(...args);
      }
      get size() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.size;
      }
      get type() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.type;
      }
      get name() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
    Object.defineProperties(File.prototype, {
      [Symbol.toStringTag]: {
        value: "File",
        configurable: true
      },
      name: kEnumerableProperty,
      lastModified: kEnumerableProperty
    });
    webidl.converters.Blob = webidl.interfaceConverter(Blob2);
    webidl.converters.BlobPart = function(V, opts) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V, opts);
        }
      }
      return webidl.converters.USVString(V, opts);
    };
    webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(
      webidl.converters.BlobPart
    );
    webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
      {
        key: "lastModified",
        converter: webidl.converters["long long"],
        get defaultValue() {
          return Date.now();
        }
      },
      {
        key: "type",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "endings",
        converter: (value) => {
          value = webidl.converters.DOMString(value);
          value = value.toLowerCase();
          if (value !== "native") {
            value = "transparent";
          }
          return value;
        },
        defaultValue: "transparent"
      }
    ]);
    function processBlobParts(parts, options) {
      const bytes = [];
      for (const element of parts) {
        if (typeof element === "string") {
          let s = element;
          if (options.endings === "native") {
            s = convertLineEndingsNative(s);
          }
          bytes.push(encoder.encode(s));
        } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
          if (!element.buffer) {
            bytes.push(new Uint8Array(element));
          } else {
            bytes.push(
              new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
            );
          }
        } else if (isBlobLike(element)) {
          bytes.push(element);
        }
      }
      return bytes;
    }
    function convertLineEndingsNative(s) {
      let nativeLineEnding = "\n";
      if (process.platform === "win32") {
        nativeLineEnding = "\r\n";
      }
      return s.replace(/\r?\n/g, nativeLineEnding);
    }
    function isFileLike(object) {
      return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
    }
    module2.exports = { File, FileLike, isFileLike };
  }
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({
  "node_modules/undici/lib/fetch/formdata.js"(exports2, module2) {
    "use strict";
    var { isBlobLike, toUSVString, makeIterator } = require_util2();
    var { kState } = require_symbols2();
    var { File: UndiciFile, FileLike, isFileLike } = require_file();
    var { webidl } = require_webidl();
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var File = NativeFile ?? UndiciFile;
    var FormData2 = class _FormData {
      constructor(form) {
        if (form !== void 0) {
          throw webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: ["undefined"]
          });
        }
        this[kState] = [];
      }
      append(name, value, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? webidl.converters.USVString(filename) : void 0;
        const entry = makeEntry(name, value, filename);
        this[kState].push(entry);
      }
      delete(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
        name = webidl.converters.USVString(name);
        this[kState] = this[kState].filter((entry) => entry.name !== name);
      }
      get(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
        name = webidl.converters.USVString(name);
        const idx = this[kState].findIndex((entry) => entry.name === name);
        if (idx === -1) {
          return null;
        }
        return this[kState][idx].value;
      }
      getAll(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
        name = webidl.converters.USVString(name);
        return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
      }
      has(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
        name = webidl.converters.USVString(name);
        return this[kState].findIndex((entry) => entry.name === name) !== -1;
      }
      set(name, value, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? toUSVString(filename) : void 0;
        const entry = makeEntry(name, value, filename);
        const idx = this[kState].findIndex((entry2) => entry2.name === name);
        if (idx !== -1) {
          this[kState] = [
            ...this[kState].slice(0, idx),
            entry,
            ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
          ];
        } else {
          this[kState].push(entry);
        }
      }
      entries() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key+value"
        );
      }
      keys() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "value"
        );
      }
      /**
       * @param {(value: string, key: string, self: FormData) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this]);
        }
      }
    };
    FormData2.prototype[Symbol.iterator] = FormData2.prototype.entries;
    Object.defineProperties(FormData2.prototype, {
      [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
      }
    });
    function makeEntry(name, value, filename) {
      name = Buffer.from(name).toString("utf8");
      if (typeof value === "string") {
        value = Buffer.from(value).toString("utf8");
      } else {
        if (!isFileLike(value)) {
          value = value instanceof Blob2 ? new File([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
        }
        if (filename !== void 0) {
          const options = {
            type: value.type,
            lastModified: value.lastModified
          };
          value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File([value], filename, options) : new FileLike(value, filename, options);
        }
      }
      return { name, value };
    }
    module2.exports = { FormData: FormData2 };
  }
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({
  "node_modules/undici/lib/fetch/body.js"(exports2, module2) {
    "use strict";
    var Busboy = require_main();
    var util = require_util();
    var {
      ReadableStreamFrom,
      isBlobLike,
      isReadableStreamLike,
      readableStreamClose,
      createDeferredPromise,
      fullyReadBody
    } = require_util2();
    var { FormData: FormData2 } = require_formdata();
    var { kState } = require_symbols2();
    var { webidl } = require_webidl();
    var { DOMException: DOMException2, structuredClone } = require_constants2();
    var { Blob: Blob2, File: NativeFile } = require("buffer");
    var { kBodyUsed } = require_symbols();
    var assert = require("assert");
    var { isErrored } = require_util();
    var { isUint8Array, isArrayBuffer } = require("util/types");
    var { File: UndiciFile } = require_file();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var ReadableStream2 = globalThis.ReadableStream;
    var File = NativeFile ?? UndiciFile;
    var textEncoder = new TextEncoder();
    var textDecoder = new TextDecoder();
    function extractBody(object, keepalive = false) {
      if (!ReadableStream2) {
        ReadableStream2 = require("stream/web").ReadableStream;
      }
      let stream = null;
      if (object instanceof ReadableStream2) {
        stream = object;
      } else if (isBlobLike(object)) {
        stream = object.stream();
      } else {
        stream = new ReadableStream2({
          async pull(controller) {
            controller.enqueue(
              typeof source === "string" ? textEncoder.encode(source) : source
            );
            queueMicrotask(() => readableStreamClose(controller));
          },
          start() {
          },
          type: void 0
        });
      }
      assert(isReadableStreamLike(stream));
      let action = null;
      let source = null;
      let length = null;
      let type = null;
      if (typeof object === "string") {
        source = object;
        type = "text/plain;charset=UTF-8";
      } else if (object instanceof URLSearchParams) {
        source = object.toString();
        type = "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isArrayBuffer(object)) {
        source = new Uint8Array(object.slice());
      } else if (ArrayBuffer.isView(object)) {
        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
      } else if (util.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
        const prefix = `--${boundary}\r
Content-Disposition: form-data`;
        const escape = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
        const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
        const blobParts = [];
        const rn = new Uint8Array([13, 10]);
        length = 0;
        let hasUnknownSizeValue = false;
        for (const [name, value] of object) {
          if (typeof value === "string") {
            const chunk2 = textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"\r
\r
${normalizeLinefeeds(value)}\r
`);
            blobParts.push(chunk2);
            length += chunk2.byteLength;
          } else {
            const chunk2 = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
            blobParts.push(chunk2, value, rn);
            if (typeof value.size === "number") {
              length += chunk2.byteLength + value.size + rn.byteLength;
            } else {
              hasUnknownSizeValue = true;
            }
          }
        }
        const chunk = textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk);
        length += chunk.byteLength;
        if (hasUnknownSizeValue) {
          length = null;
        }
        source = object;
        action = async function* () {
          for (const part of blobParts) {
            if (part.stream) {
              yield* part.stream();
            } else {
              yield part;
            }
          }
        };
        type = "multipart/form-data; boundary=" + boundary;
      } else if (isBlobLike(object)) {
        source = object;
        length = object.size;
        if (object.type) {
          type = object.type;
        }
      } else if (typeof object[Symbol.asyncIterator] === "function") {
        if (keepalive) {
          throw new TypeError("keepalive");
        }
        if (util.isDisturbed(object) || object.locked) {
          throw new TypeError(
            "Response body object should not be disturbed or locked"
          );
        }
        stream = object instanceof ReadableStream2 ? object : ReadableStreamFrom(object);
      }
      if (typeof source === "string" || util.isBuffer(source)) {
        length = Buffer.byteLength(source);
      }
      if (action != null) {
        let iterator;
        stream = new ReadableStream2({
          async start() {
            iterator = action(object)[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { value, done } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              if (!isErrored(stream)) {
                controller.enqueue(new Uint8Array(value));
              }
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          },
          type: void 0
        });
      }
      const body = { stream, source, length };
      return [body, type];
    }
    function safelyExtractBody(object, keepalive = false) {
      if (!ReadableStream2) {
        ReadableStream2 = require("stream/web").ReadableStream;
      }
      if (object instanceof ReadableStream2) {
        assert(!util.isDisturbed(object), "The body has already been consumed.");
        assert(!object.locked, "The stream is locked.");
      }
      return extractBody(object, keepalive);
    }
    function cloneBody(body) {
      const [out1, out2] = body.stream.tee();
      const out2Clone = structuredClone(out2, { transfer: [out2] });
      const [, finalClone] = out2Clone.tee();
      body.stream = out1;
      return {
        stream: finalClone,
        length: body.length,
        source: body.source
      };
    }
    async function* consumeBody(body) {
      if (body) {
        if (isUint8Array(body)) {
          yield body;
        } else {
          const stream = body.stream;
          if (util.isDisturbed(stream)) {
            throw new TypeError("The body has already been consumed.");
          }
          if (stream.locked) {
            throw new TypeError("The stream is locked.");
          }
          stream[kBodyUsed] = true;
          yield* stream;
        }
      }
    }
    function throwIfAborted(state) {
      if (state.aborted) {
        throw new DOMException2("The operation was aborted.", "AbortError");
      }
    }
    function bodyMixinMethods(instance) {
      const methods = {
        blob() {
          return specConsumeBody(this, (bytes) => {
            let mimeType = bodyMimeType(this);
            if (mimeType === "failure") {
              mimeType = "";
            } else if (mimeType) {
              mimeType = serializeAMimeType(mimeType);
            }
            return new Blob2([bytes], { type: mimeType });
          }, instance);
        },
        arrayBuffer() {
          return specConsumeBody(this, (bytes) => {
            return new Uint8Array(bytes).buffer;
          }, instance);
        },
        text() {
          return specConsumeBody(this, utf8DecodeBytes, instance);
        },
        json() {
          return specConsumeBody(this, parseJSONFromBytes, instance);
        },
        async formData() {
          webidl.brandCheck(this, instance);
          throwIfAborted(this[kState]);
          const contentType = this.headers.get("Content-Type");
          if (/multipart\/form-data/.test(contentType)) {
            const headers = {};
            for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
            const responseFormData = new FormData2();
            let busboy;
            try {
              busboy = new Busboy({
                headers,
                preservePath: true
              });
            } catch (err) {
              throw new DOMException2(`${err}`, "AbortError");
            }
            busboy.on("field", (name, value) => {
              responseFormData.append(name, value);
            });
            busboy.on("file", (name, value, filename, encoding, mimeType) => {
              const chunks = [];
              if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                let base64chunk = "";
                value.on("data", (chunk) => {
                  base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                  const end = base64chunk.length - base64chunk.length % 4;
                  chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                  base64chunk = base64chunk.slice(end);
                });
                value.on("end", () => {
                  chunks.push(Buffer.from(base64chunk, "base64"));
                  responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
                });
              } else {
                value.on("data", (chunk) => {
                  chunks.push(chunk);
                });
                value.on("end", () => {
                  responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
                });
              }
            });
            const busboyResolve = new Promise((resolve, reject) => {
              busboy.on("finish", resolve);
              busboy.on("error", (err) => reject(new TypeError(err)));
            });
            if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk);
            busboy.end();
            await busboyResolve;
            return responseFormData;
          } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
            let entries;
            try {
              let text = "";
              const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
              for await (const chunk of consumeBody(this[kState].body)) {
                if (!isUint8Array(chunk)) {
                  throw new TypeError("Expected Uint8Array chunk");
                }
                text += streamingDecoder.decode(chunk, { stream: true });
              }
              text += streamingDecoder.decode();
              entries = new URLSearchParams(text);
            } catch (err) {
              throw Object.assign(new TypeError(), { cause: err });
            }
            const formData = new FormData2();
            for (const [name, value] of entries) {
              formData.append(name, value);
            }
            return formData;
          } else {
            await Promise.resolve();
            throwIfAborted(this[kState]);
            throw webidl.errors.exception({
              header: `${instance.name}.formData`,
              message: "Could not parse content as FormData."
            });
          }
        }
      };
      return methods;
    }
    function mixinBody(prototype) {
      Object.assign(prototype.prototype, bodyMixinMethods(prototype));
    }
    async function specConsumeBody(object, convertBytesToJSValue, instance) {
      webidl.brandCheck(object, instance);
      throwIfAborted(object[kState]);
      if (bodyUnusable(object[kState].body)) {
        throw new TypeError("Body is unusable");
      }
      const promise = createDeferredPromise();
      const errorSteps = (error) => promise.reject(error);
      const successSteps = (data) => {
        try {
          promise.resolve(convertBytesToJSValue(data));
        } catch (e) {
          errorSteps(e);
        }
      };
      if (object[kState].body == null) {
        successSteps(new Uint8Array());
        return promise.promise;
      }
      await fullyReadBody(object[kState].body, successSteps, errorSteps);
      return promise.promise;
    }
    function bodyUnusable(body) {
      return body != null && (body.stream.locked || util.isDisturbed(body.stream));
    }
    function utf8DecodeBytes(buffer) {
      if (buffer.length === 0) {
        return "";
      }
      if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
        buffer = buffer.subarray(3);
      }
      const output = textDecoder.decode(buffer);
      return output;
    }
    function parseJSONFromBytes(bytes) {
      return JSON.parse(utf8DecodeBytes(bytes));
    }
    function bodyMimeType(object) {
      const { headersList } = object[kState];
      const contentType = headersList.get("content-type");
      if (contentType === null) {
        return "failure";
      }
      return parseMIMEType(contentType);
    }
    module2.exports = {
      extractBody,
      safelyExtractBody,
      cloneBody,
      mixinBody
    };
  }
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS({
  "node_modules/undici/lib/core/request.js"(exports2, module2) {
    "use strict";
    var {
      InvalidArgumentError,
      NotSupportedError
    } = require_errors();
    var assert = require("assert");
    var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
    var util = require_util();
    var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
    var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    var invalidPathRegex = /[^\u0021-\u00ff]/;
    var kHandler = Symbol("handler");
    var channels = {};
    var extractBody;
    try {
      const diagnosticsChannel = require("diagnostics_channel");
      channels.create = diagnosticsChannel.channel("undici:request:create");
      channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
      channels.headers = diagnosticsChannel.channel("undici:request:headers");
      channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
      channels.error = diagnosticsChannel.channel("undici:request:error");
    } catch {
      channels.create = { hasSubscribers: false };
      channels.bodySent = { hasSubscribers: false };
      channels.headers = { hasSubscribers: false };
      channels.trailers = { hasSubscribers: false };
      channels.error = { hasSubscribers: false };
    }
    var Request2 = class _Request {
      constructor(origin, {
        path: path3,
        method,
        body,
        headers,
        query,
        idempotent,
        blocking,
        upgrade,
        headersTimeout,
        bodyTimeout,
        reset,
        throwOnError,
        expectContinue
      }, handler) {
        if (typeof path3 !== "string") {
          throw new InvalidArgumentError("path must be a string");
        } else if (path3[0] !== "/" && !(path3.startsWith("http://") || path3.startsWith("https://")) && method !== "CONNECT") {
          throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
        } else if (invalidPathRegex.exec(path3) !== null) {
          throw new InvalidArgumentError("invalid request path");
        }
        if (typeof method !== "string") {
          throw new InvalidArgumentError("method must be a string");
        } else if (tokenRegExp.exec(method) === null) {
          throw new InvalidArgumentError("invalid request method");
        }
        if (upgrade && typeof upgrade !== "string") {
          throw new InvalidArgumentError("upgrade must be a string");
        }
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("invalid headersTimeout");
        }
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("invalid bodyTimeout");
        }
        if (reset != null && typeof reset !== "boolean") {
          throw new InvalidArgumentError("invalid reset");
        }
        if (expectContinue != null && typeof expectContinue !== "boolean") {
          throw new InvalidArgumentError("invalid expectContinue");
        }
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body == null) {
          this.body = null;
        } else if (util.isStream(body)) {
          this.body = body;
          const rState = this.body._readableState;
          if (!rState || !rState.autoDestroy) {
            this.endHandler = function autoDestroy() {
              util.destroy(this);
            };
            this.body.on("end", this.endHandler);
          }
          this.errorHandler = (err) => {
            if (this.abort) {
              this.abort(err);
            } else {
              this.error = err;
            }
          };
          this.body.on("error", this.errorHandler);
        } else if (util.isBuffer(body)) {
          this.body = body.byteLength ? body : null;
        } else if (ArrayBuffer.isView(body)) {
          this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
        } else if (body instanceof ArrayBuffer) {
          this.body = body.byteLength ? Buffer.from(body) : null;
        } else if (typeof body === "string") {
          this.body = body.length ? Buffer.from(body) : null;
        } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
          this.body = body;
        } else {
          throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        }
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query ? util.buildURL(path3, query) : path3;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset == null ? null : reset;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(this, headers[i], headers[i + 1]);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            processHeader(this, key, headers[key]);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        if (util.isFormDataLike(this.body)) {
          if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
            throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
          }
          if (!extractBody) {
            extractBody = require_body().extractBody;
          }
          const [bodyStream, contentType] = extractBody(body);
          if (this.contentType == null) {
            this.contentType = contentType;
            this.headers += `content-type: ${contentType}\r
`;
          }
          this.body = bodyStream.stream;
          this.contentLength = bodyStream.length;
        } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
          this.contentType = body.type;
          this.headers += `content-type: ${body.type}\r
`;
        }
        util.validateHandler(handler, method, upgrade);
        this.servername = util.getServerName(this.host);
        this[kHandler] = handler;
        if (channels.create.hasSubscribers) {
          channels.create.publish({ request: this });
        }
      }
      onBodySent(chunk) {
        if (this[kHandler].onBodySent) {
          try {
            return this[kHandler].onBodySent(chunk);
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onRequestSent() {
        if (channels.bodySent.hasSubscribers) {
          channels.bodySent.publish({ request: this });
        }
        if (this[kHandler].onRequestSent) {
          try {
            return this[kHandler].onRequestSent();
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onConnect(abort) {
        assert(!this.aborted);
        assert(!this.completed);
        if (this.error) {
          abort(this.error);
        } else {
          this.abort = abort;
          return this[kHandler].onConnect(abort);
        }
      }
      onHeaders(statusCode, headers, resume, statusText) {
        assert(!this.aborted);
        assert(!this.completed);
        if (channels.headers.hasSubscribers) {
          channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
        }
        try {
          return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
        } catch (err) {
          this.abort(err);
        }
      }
      onData(chunk) {
        assert(!this.aborted);
        assert(!this.completed);
        try {
          return this[kHandler].onData(chunk);
        } catch (err) {
          this.abort(err);
          return false;
        }
      }
      onUpgrade(statusCode, headers, socket) {
        assert(!this.aborted);
        assert(!this.completed);
        return this[kHandler].onUpgrade(statusCode, headers, socket);
      }
      onComplete(trailers) {
        this.onFinally();
        assert(!this.aborted);
        this.completed = true;
        if (channels.trailers.hasSubscribers) {
          channels.trailers.publish({ request: this, trailers });
        }
        try {
          return this[kHandler].onComplete(trailers);
        } catch (err) {
          this.onError(err);
        }
      }
      onError(error) {
        this.onFinally();
        if (channels.error.hasSubscribers) {
          channels.error.publish({ request: this, error });
        }
        if (this.aborted) {
          return;
        }
        this.aborted = true;
        return this[kHandler].onError(error);
      }
      onFinally() {
        if (this.errorHandler) {
          this.body.off("error", this.errorHandler);
          this.errorHandler = null;
        }
        if (this.endHandler) {
          this.body.off("end", this.endHandler);
          this.endHandler = null;
        }
      }
      // TODO: adjust to support H2
      addHeader(key, value) {
        processHeader(this, key, value);
        return this;
      }
      static [kHTTP1BuildRequest](origin, opts, handler) {
        return new _Request(origin, opts, handler);
      }
      static [kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = { ...opts, headers: null };
        const request = new _Request(origin, opts, handler);
        request.headers = {};
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(request, headers[i], headers[i + 1], true);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            processHeader(request, key, headers[key], true);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        return request;
      }
      static [kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders) {
          const [key, value] = header.split(": ");
          if (value == null || value.length === 0) continue;
          if (headers[key]) headers[key] += `,${value}`;
          else headers[key] = value;
        }
        return headers;
      }
    };
    function processHeaderValue(key, val, skipAppend) {
      if (val && typeof val === "object") {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      val = val != null ? `${val}` : "";
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      return skipAppend ? val : `${key}: ${val}\r
`;
    }
    function processHeader(request, key, val, skipAppend = false) {
      if (val && (typeof val === "object" && !Array.isArray(val))) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      } else if (val === void 0) {
        return;
      }
      if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key} header`);
        }
        request.host = val;
      } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
        request.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request.contentLength)) {
          throw new InvalidArgumentError("invalid content-length header");
        }
      } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
        request.contentType = val;
        if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);
        else request.headers += processHeaderValue(key, val);
      } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
        throw new InvalidArgumentError("invalid transfer-encoding header");
      } else if (key.length === 10 && key.toLowerCase() === "connection") {
        const value = typeof val === "string" ? val.toLowerCase() : null;
        if (value !== "close" && value !== "keep-alive") {
          throw new InvalidArgumentError("invalid connection header");
        } else if (value === "close") {
          request.reset = true;
        }
      } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
        throw new InvalidArgumentError("invalid keep-alive header");
      } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
        throw new InvalidArgumentError("invalid upgrade header");
      } else if (key.length === 6 && key.toLowerCase() === "expect") {
        throw new NotSupportedError("expect header not supported");
      } else if (tokenRegExp.exec(key) === null) {
        throw new InvalidArgumentError("invalid header key");
      } else {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i++) {
            if (skipAppend) {
              if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;
              else request.headers[key] = processHeaderValue(key, val[i], skipAppend);
            } else {
              request.headers += processHeaderValue(key, val[i]);
            }
          }
        } else {
          if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);
          else request.headers += processHeaderValue(key, val);
        }
      }
    }
    module2.exports = Request2;
  }
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({
  "node_modules/undici/lib/dispatcher.js"(exports2, module2) {
    "use strict";
    var EventEmitter2 = require("events");
    var Dispatcher = class extends EventEmitter2 {
      dispatch() {
        throw new Error("not implemented");
      }
      close() {
        throw new Error("not implemented");
      }
      destroy() {
        throw new Error("not implemented");
      }
    };
    module2.exports = Dispatcher;
  }
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({
  "node_modules/undici/lib/dispatcher-base.js"(exports2, module2) {
    "use strict";
    var Dispatcher = require_dispatcher();
    var {
      ClientDestroyedError,
      ClientClosedError,
      InvalidArgumentError
    } = require_errors();
    var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
    var kDestroyed = Symbol("destroyed");
    var kClosed = Symbol("closed");
    var kOnDestroyed = Symbol("onDestroyed");
    var kOnClosed = Symbol("onClosed");
    var kInterceptedDispatch = Symbol("Intercepted Dispatch");
    var DispatcherBase = class extends Dispatcher {
      constructor() {
        super();
        this[kDestroyed] = false;
        this[kOnDestroyed] = null;
        this[kClosed] = false;
        this[kOnClosed] = [];
      }
      get destroyed() {
        return this[kDestroyed];
      }
      get closed() {
        return this[kClosed];
      }
      get interceptors() {
        return this[kInterceptors];
      }
      set interceptors(newInterceptors) {
        if (newInterceptors) {
          for (let i = newInterceptors.length - 1; i >= 0; i--) {
            const interceptor = this[kInterceptors][i];
            if (typeof interceptor !== "function") {
              throw new InvalidArgumentError("interceptor must be an function");
            }
          }
        }
        this[kInterceptors] = newInterceptors;
      }
      close(callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            this.close((err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          queueMicrotask(() => callback(new ClientDestroyedError(), null));
          return;
        }
        if (this[kClosed]) {
          if (this[kOnClosed]) {
            this[kOnClosed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        this[kClosed] = true;
        this[kOnClosed].push(callback);
        const onClosed = () => {
          const callbacks = this[kOnClosed];
          this[kOnClosed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        };
        this[kClose]().then(() => this.destroy()).then(() => {
          queueMicrotask(onClosed);
        });
      }
      destroy(err, callback) {
        if (typeof err === "function") {
          callback = err;
          err = null;
        }
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            this.destroy(err, (err2, data) => {
              return err2 ? (
                /* istanbul ignore next: should never error */
                reject(err2)
              ) : resolve(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          if (this[kOnDestroyed]) {
            this[kOnDestroyed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        if (!err) {
          err = new ClientDestroyedError();
        }
        this[kDestroyed] = true;
        this[kOnDestroyed] = this[kOnDestroyed] || [];
        this[kOnDestroyed].push(callback);
        const onDestroyed = () => {
          const callbacks = this[kOnDestroyed];
          this[kOnDestroyed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        };
        this[kDestroy](err).then(() => {
          queueMicrotask(onDestroyed);
        });
      }
      [kInterceptedDispatch](opts, handler) {
        if (!this[kInterceptors] || this[kInterceptors].length === 0) {
          this[kInterceptedDispatch] = this[kDispatch];
          return this[kDispatch](opts, handler);
        }
        let dispatch = this[kDispatch].bind(this);
        for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
          dispatch = this[kInterceptors][i](dispatch);
        }
        this[kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
      }
      dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") {
          throw new InvalidArgumentError("handler must be an object");
        }
        try {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("opts must be an object.");
          }
          if (this[kDestroyed] || this[kOnDestroyed]) {
            throw new ClientDestroyedError();
          }
          if (this[kClosed]) {
            throw new ClientClosedError();
          }
          return this[kInterceptedDispatch](opts, handler);
        } catch (err) {
          if (typeof handler.onError !== "function") {
            throw new InvalidArgumentError("invalid onError method");
          }
          handler.onError(err);
          return false;
        }
      }
    };
    module2.exports = DispatcherBase;
  }
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({
  "node_modules/undici/lib/core/connect.js"(exports2, module2) {
    "use strict";
    var net = require("net");
    var assert = require("assert");
    var util = require_util();
    var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
    var tls;
    var SessionCache;
    if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
      SessionCache = class WeakSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
          this._sessionRegistry = new global.FinalizationRegistry((key) => {
            if (this._sessionCache.size < this._maxCachedSessions) {
              return;
            }
            const ref = this._sessionCache.get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this._sessionCache.delete(key);
            }
          });
        }
        get(sessionKey) {
          const ref = this._sessionCache.get(sessionKey);
          return ref ? ref.deref() : null;
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          this._sessionCache.set(sessionKey, new WeakRef(session));
          this._sessionRegistry.register(session, sessionKey);
        }
      };
    } else {
      SessionCache = class SimpleSessionCache {
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
        }
        get(sessionKey) {
          return this._sessionCache.get(sessionKey);
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          if (this._sessionCache.size >= this._maxCachedSessions) {
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
          }
          this._sessionCache.set(sessionKey, session);
        }
      };
    }
    function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
      if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
        throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
      }
      const options = { path: socketPath, ...opts };
      const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
      timeout = timeout == null ? 1e4 : timeout;
      allowH2 = allowH2 != null ? allowH2 : false;
      return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
          if (!tls) {
            tls = require("tls");
          }
          servername = servername || options.servername || util.getServerName(host) || null;
          const sessionKey = servername || hostname;
          const session = sessionCache.get(sessionKey) || null;
          assert(sessionKey);
          socket = tls.connect({
            highWaterMark: 16384,
            // TLS in node can't have bigger HWM anyway...
            ...options,
            servername,
            session,
            localAddress,
            // TODO(HTTP/2): Add support for h2c
            ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
            socket: httpSocket,
            // upgrade socket connection
            port: port || 443,
            host: hostname
          });
          socket.on("session", function(session2) {
            sessionCache.set(sessionKey, session2);
          });
        } else {
          assert(!httpSocket, "httpSocket can only be sent on TLS update");
          socket = net.connect({
            highWaterMark: 64 * 1024,
            // Same as nodejs fs streams.
            ...options,
            localAddress,
            port: port || 80,
            host: hostname
          });
        }
        if (options.keepAlive == null || options.keepAlive) {
          const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
          socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(null, this);
          }
        }).on("error", function(err) {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(err);
          }
        });
        return socket;
      };
    }
    function setupTimeout(onConnectTimeout2, timeout) {
      if (!timeout) {
        return () => {
        };
      }
      let s1 = null;
      let s2 = null;
      const timeoutId = setTimeout(() => {
        s1 = setImmediate(() => {
          if (process.platform === "win32") {
            s2 = setImmediate(() => onConnectTimeout2());
          } else {
            onConnectTimeout2();
          }
        });
      }, timeout);
      return () => {
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s2);
      };
    }
    function onConnectTimeout(socket) {
      util.destroy(socket, new ConnectTimeoutError());
    }
    module2.exports = buildConnector;
  }
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils2 = __commonJS({
  "node_modules/undici/lib/llhttp/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enumToMap = void 0;
    function enumToMap(obj) {
      const res = {};
      Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === "number") {
          res[key] = value;
        }
      });
      return res;
    }
    exports2.enumToMap = enumToMap;
  }
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants3 = __commonJS({
  "node_modules/undici/lib/llhttp/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SPECIAL_HEADERS = exports2.HEADER_STATE = exports2.MINOR = exports2.MAJOR = exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS = exports2.TOKEN = exports2.STRICT_TOKEN = exports2.HEX = exports2.URL_CHAR = exports2.STRICT_URL_CHAR = exports2.USERINFO_CHARS = exports2.MARK = exports2.ALPHANUM = exports2.NUM = exports2.HEX_MAP = exports2.NUM_MAP = exports2.ALPHA = exports2.FINISH = exports2.H_METHOD_MAP = exports2.METHOD_MAP = exports2.METHODS_RTSP = exports2.METHODS_ICE = exports2.METHODS_HTTP = exports2.METHODS = exports2.LENIENT_FLAGS = exports2.FLAGS = exports2.TYPE = exports2.ERROR = void 0;
    var utils_1 = require_utils2();
    var ERROR;
    (function(ERROR2) {
      ERROR2[ERROR2["OK"] = 0] = "OK";
      ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
      ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
      ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
      ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
      ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
      ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
      ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
      ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
      ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
      ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
      ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
      ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
      ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
      ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
      ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
      ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
      ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
      ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
      ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
      ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
      ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
      ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
      ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
      ERROR2[ERROR2["USER"] = 24] = "USER";
    })(ERROR = exports2.ERROR || (exports2.ERROR = {}));
    var TYPE;
    (function(TYPE2) {
      TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
      TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
      TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
    })(TYPE = exports2.TYPE || (exports2.TYPE = {}));
    var FLAGS;
    (function(FLAGS2) {
      FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
      FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
      FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
      FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
      FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
      FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
      FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
      FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
      FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
    })(FLAGS = exports2.FLAGS || (exports2.FLAGS = {}));
    var LENIENT_FLAGS;
    (function(LENIENT_FLAGS2) {
      LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
      LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
      LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
    })(LENIENT_FLAGS = exports2.LENIENT_FLAGS || (exports2.LENIENT_FLAGS = {}));
    var METHODS;
    (function(METHODS2) {
      METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
      METHODS2[METHODS2["GET"] = 1] = "GET";
      METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
      METHODS2[METHODS2["POST"] = 3] = "POST";
      METHODS2[METHODS2["PUT"] = 4] = "PUT";
      METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
      METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
      METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
      METHODS2[METHODS2["COPY"] = 8] = "COPY";
      METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
      METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
      METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
      METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
      METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
      METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
      METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
      METHODS2[METHODS2["BIND"] = 16] = "BIND";
      METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
      METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
      METHODS2[METHODS2["ACL"] = 19] = "ACL";
      METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
      METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
      METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
      METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
      METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
      METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
      METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
      METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
      METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
      METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
      METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
      METHODS2[METHODS2["LINK"] = 31] = "LINK";
      METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
      METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
      METHODS2[METHODS2["PRI"] = 34] = "PRI";
      METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
      METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
      METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
      METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
      METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
      METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
      METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
      METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
      METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
      METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
      METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
    })(METHODS = exports2.METHODS || (exports2.METHODS = {}));
    exports2.METHODS_HTTP = [
      METHODS.DELETE,
      METHODS.GET,
      METHODS.HEAD,
      METHODS.POST,
      METHODS.PUT,
      METHODS.CONNECT,
      METHODS.OPTIONS,
      METHODS.TRACE,
      METHODS.COPY,
      METHODS.LOCK,
      METHODS.MKCOL,
      METHODS.MOVE,
      METHODS.PROPFIND,
      METHODS.PROPPATCH,
      METHODS.SEARCH,
      METHODS.UNLOCK,
      METHODS.BIND,
      METHODS.REBIND,
      METHODS.UNBIND,
      METHODS.ACL,
      METHODS.REPORT,
      METHODS.MKACTIVITY,
      METHODS.CHECKOUT,
      METHODS.MERGE,
      METHODS["M-SEARCH"],
      METHODS.NOTIFY,
      METHODS.SUBSCRIBE,
      METHODS.UNSUBSCRIBE,
      METHODS.PATCH,
      METHODS.PURGE,
      METHODS.MKCALENDAR,
      METHODS.LINK,
      METHODS.UNLINK,
      METHODS.PRI,
      // TODO(indutny): should we allow it with HTTP?
      METHODS.SOURCE
    ];
    exports2.METHODS_ICE = [
      METHODS.SOURCE
    ];
    exports2.METHODS_RTSP = [
      METHODS.OPTIONS,
      METHODS.DESCRIBE,
      METHODS.ANNOUNCE,
      METHODS.SETUP,
      METHODS.PLAY,
      METHODS.PAUSE,
      METHODS.TEARDOWN,
      METHODS.GET_PARAMETER,
      METHODS.SET_PARAMETER,
      METHODS.REDIRECT,
      METHODS.RECORD,
      METHODS.FLUSH,
      // For AirPlay
      METHODS.GET,
      METHODS.POST
    ];
    exports2.METHOD_MAP = utils_1.enumToMap(METHODS);
    exports2.H_METHOD_MAP = {};
    Object.keys(exports2.METHOD_MAP).forEach((key) => {
      if (/^H/.test(key)) {
        exports2.H_METHOD_MAP[key] = exports2.METHOD_MAP[key];
      }
    });
    var FINISH;
    (function(FINISH2) {
      FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
      FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
      FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
    })(FINISH = exports2.FINISH || (exports2.FINISH = {}));
    exports2.ALPHA = [];
    for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
      exports2.ALPHA.push(String.fromCharCode(i));
      exports2.ALPHA.push(String.fromCharCode(i + 32));
    }
    exports2.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    };
    exports2.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    };
    exports2.NUM = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ];
    exports2.ALPHANUM = exports2.ALPHA.concat(exports2.NUM);
    exports2.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
    exports2.USERINFO_CHARS = exports2.ALPHANUM.concat(exports2.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
    exports2.STRICT_URL_CHAR = [
      "!",
      '"',
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_",
      "`",
      "{",
      "|",
      "}",
      "~"
    ].concat(exports2.ALPHANUM);
    exports2.URL_CHAR = exports2.STRICT_URL_CHAR.concat(["	", "\f"]);
    for (let i = 128; i <= 255; i++) {
      exports2.URL_CHAR.push(i);
    }
    exports2.HEX = exports2.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
    exports2.STRICT_TOKEN = [
      "!",
      "#",
      "$",
      "%",
      "&",
      "'",
      "*",
      "+",
      "-",
      ".",
      "^",
      "_",
      "`",
      "|",
      "~"
    ].concat(exports2.ALPHANUM);
    exports2.TOKEN = exports2.STRICT_TOKEN.concat([" "]);
    exports2.HEADER_CHARS = ["	"];
    for (let i = 32; i <= 255; i++) {
      if (i !== 127) {
        exports2.HEADER_CHARS.push(i);
      }
    }
    exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS.filter((c) => c !== 44);
    exports2.MAJOR = exports2.NUM_MAP;
    exports2.MINOR = exports2.MAJOR;
    var HEADER_STATE;
    (function(HEADER_STATE2) {
      HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
      HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
      HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
      HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
    })(HEADER_STATE = exports2.HEADER_STATE || (exports2.HEADER_STATE = {}));
    exports2.SPECIAL_HEADERS = {
      "connection": HEADER_STATE.CONNECTION,
      "content-length": HEADER_STATE.CONTENT_LENGTH,
      "proxy-connection": HEADER_STATE.CONNECTION,
      "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
      "upgrade": HEADER_STATE.UPGRADE
    };
  }
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({
  "node_modules/undici/lib/handler/RedirectHandler.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    var { kBodyUsed } = require_symbols();
    var assert = require("assert");
    var { InvalidArgumentError } = require_errors();
    var EE = require("events");
    var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
    var kBody = Symbol("body");
    var BodyAsyncIterable = class {
      constructor(body) {
        this[kBody] = body;
        this[kBodyUsed] = false;
      }
      async *[Symbol.asyncIterator]() {
        assert(!this[kBodyUsed], "disturbed");
        this[kBodyUsed] = true;
        yield* this[kBody];
      }
    };
    var RedirectHandler = class {
      constructor(dispatch, maxRedirections, opts, handler) {
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        util.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = { ...opts, maxRedirections: 0 };
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if (util.isStream(this.opts.body)) {
          if (util.bodyLength(this.opts.body) === 0) {
            this.opts.body.on("data", function() {
              assert(false);
            });
          }
          if (typeof this.opts.body.readableDidRead !== "boolean") {
            this.opts.body[kBodyUsed] = false;
            EE.prototype.on.call(this.opts.body, "data", function() {
              this[kBodyUsed] = true;
            });
          }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        }
      }
      onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, { history: this.history });
      }
      onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
      }
      onError(error) {
        this.handler.onError(error);
      }
      onHeaders(statusCode, headers, resume, statusText) {
        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
        if (this.opts.origin) {
          this.history.push(new URL(this.opts.path, this.opts.origin));
        }
        if (!this.location) {
          return this.handler.onHeaders(statusCode, headers, resume, statusText);
        }
        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path3 = search ? `${pathname}${search}` : pathname;
        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path3;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        if (statusCode === 303 && this.opts.method !== "HEAD") {
          this.opts.method = "GET";
          this.opts.body = null;
        }
      }
      onData(chunk) {
        if (this.location) {
        } else {
          return this.handler.onData(chunk);
        }
      }
      onComplete(trailers) {
        if (this.location) {
          this.location = null;
          this.abort = null;
          this.dispatch(this.opts, this);
        } else {
          this.handler.onComplete(trailers);
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) {
          this.handler.onBodySent(chunk);
        }
      }
    };
    function parseLocation(statusCode, headers) {
      if (redirectableStatusCodes.indexOf(statusCode) === -1) {
        return null;
      }
      for (let i = 0; i < headers.length; i += 2) {
        if (headers[i].toString().toLowerCase() === "location") {
          return headers[i + 1];
        }
      }
    }
    function shouldRemoveHeader(header, removeContent, unknownOrigin) {
      if (header.length === 4) {
        return util.headerNameToString(header) === "host";
      }
      if (removeContent && util.headerNameToString(header).startsWith("content-")) {
        return true;
      }
      if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
        const name = util.headerNameToString(header);
        return name === "authorization" || name === "cookie" || name === "proxy-authorization";
      }
      return false;
    }
    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
      const ret = [];
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
            ret.push(headers[i], headers[i + 1]);
          }
        }
      } else if (headers && typeof headers === "object") {
        for (const key of Object.keys(headers)) {
          if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
            ret.push(key, headers[key]);
          }
        }
      } else {
        assert(headers == null, "headers must be an object or an array");
      }
      return ret;
    }
    module2.exports = RedirectHandler;
  }
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({
  "node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports2, module2) {
    "use strict";
    var RedirectHandler = require_RedirectHandler();
    function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
      return (dispatch) => {
        return function Intercept(opts, handler) {
          const { maxRedirections = defaultMaxRedirections } = opts;
          if (!maxRedirections) {
            return dispatch(opts, handler);
          }
          const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
          opts = { ...opts, maxRedirections: 0 };
          return dispatch(opts, redirectHandler);
        };
      };
    }
    module2.exports = createRedirectInterceptor;
  }
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports2, module2) {
    module2.exports = "";
  }
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports2, module2) {
    module2.exports = "";
  }
});

// node_modules/undici/lib/client.js
var require_client = __commonJS({
  "node_modules/undici/lib/client.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var net = require("net");
    var http = require("http");
    var { pipeline } = require("stream");
    var util = require_util();
    var timers = require_timers();
    var Request2 = require_request();
    var DispatcherBase = require_dispatcher_base();
    var {
      RequestContentLengthMismatchError,
      ResponseContentLengthMismatchError,
      InvalidArgumentError,
      RequestAbortedError,
      HeadersTimeoutError,
      HeadersOverflowError,
      SocketError,
      InformationalError,
      BodyTimeoutError,
      HTTPParserError,
      ResponseExceededMaxSizeError,
      ClientDestroyedError
    } = require_errors();
    var buildConnector = require_connect();
    var {
      kUrl,
      kReset,
      kServerName,
      kClient,
      kBusy,
      kParser,
      kConnect,
      kBlocking,
      kResuming,
      kRunning,
      kPending,
      kSize,
      kWriting,
      kQueue,
      kConnected,
      kConnecting,
      kNeedDrain,
      kNoRef,
      kKeepAliveDefaultTimeout,
      kHostHeader,
      kPendingIdx,
      kRunningIdx,
      kError,
      kPipelining,
      kSocket,
      kKeepAliveTimeoutValue,
      kMaxHeadersSize,
      kKeepAliveMaxTimeout,
      kKeepAliveTimeoutThreshold,
      kHeadersTimeout,
      kBodyTimeout,
      kStrictContentLength,
      kConnector,
      kMaxRedirections,
      kMaxRequests,
      kCounter,
      kClose,
      kDestroy,
      kDispatch,
      kInterceptors,
      kLocalAddress,
      kMaxResponseSize,
      kHTTPConnVersion,
      // HTTP2
      kHost,
      kHTTP2Session,
      kHTTP2SessionState,
      kHTTP2BuildRequest,
      kHTTP2CopyHeaders,
      kHTTP1BuildRequest
    } = require_symbols();
    var http2;
    try {
      http2 = require("http2");
    } catch {
      http2 = { constants: {} };
    }
    var {
      constants: {
        HTTP2_HEADER_AUTHORITY,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_HEADER_SCHEME,
        HTTP2_HEADER_CONTENT_LENGTH,
        HTTP2_HEADER_EXPECT,
        HTTP2_HEADER_STATUS
      }
    } = http2;
    var h2ExperimentalWarned = false;
    var FastBuffer = Buffer[Symbol.species];
    var kClosedResolve = Symbol("kClosedResolve");
    var channels = {};
    try {
      const diagnosticsChannel = require("diagnostics_channel");
      channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
      channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
      channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
      channels.connected = diagnosticsChannel.channel("undici:client:connected");
    } catch {
      channels.sendHeaders = { hasSubscribers: false };
      channels.beforeConnect = { hasSubscribers: false };
      channels.connectError = { hasSubscribers: false };
      channels.connected = { hasSubscribers: false };
    }
    var Client = class extends DispatcherBase {
      /**
       *
       * @param {string|URL} url
       * @param {import('../types/client').Client.Options} options
       */
      constructor(url, {
        interceptors,
        maxHeaderSize,
        headersTimeout,
        socketTimeout,
        requestTimeout,
        connectTimeout,
        bodyTimeout,
        idleTimeout,
        keepAlive,
        keepAliveTimeout,
        maxKeepAliveTimeout,
        keepAliveMaxTimeout,
        keepAliveTimeoutThreshold,
        socketPath,
        pipelining,
        tls,
        strictContentLength,
        maxCachedSessions,
        maxRedirections,
        connect: connect2,
        maxRequestsPerClient,
        localAddress,
        maxResponseSize,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        // h2
        allowH2,
        maxConcurrentStreams
      } = {}) {
        super();
        if (keepAlive !== void 0) {
          throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        }
        if (socketTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (requestTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (idleTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        }
        if (maxKeepAliveTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        }
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
          throw new InvalidArgumentError("invalid maxHeaderSize");
        }
        if (socketPath != null && typeof socketPath !== "string") {
          throw new InvalidArgumentError("invalid socketPath");
        }
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
          throw new InvalidArgumentError("invalid connectTimeout");
        }
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveTimeout");
        }
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
        }
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
          throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        }
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
        }
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        }
        if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
          throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
        }
        if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
          throw new InvalidArgumentError("localAddress must be valid string IP address");
        }
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
          throw new InvalidArgumentError("maxResponseSize must be a positive number");
        }
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
          throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        }
        if (allowH2 != null && typeof allowH2 !== "boolean") {
          throw new InvalidArgumentError("allowH2 must be a valid boolean value");
        }
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
          throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        }
        if (typeof connect2 !== "function") {
          connect2 = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect2
          });
        }
        this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
        this[kUrl] = util.parseOrigin(url);
        this[kConnector] = connect2;
        this[kSocket] = null;
        this[kPipelining] = pipelining != null ? pipelining : 1;
        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
        this[kServerName] = null;
        this[kLocalAddress] = localAddress != null ? localAddress : null;
        this[kResuming] = 0;
        this[kNeedDrain] = 0;
        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[kMaxRedirections] = maxRedirections;
        this[kMaxRequests] = maxRequestsPerClient;
        this[kClosedResolve] = null;
        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[kHTTPConnVersion] = "h1";
        this[kHTTP2Session] = null;
        this[kHTTP2SessionState] = !allowH2 ? null : {
          // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0,
          // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
          // Max peerConcurrentStreams for a Node h2 server
        };
        this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
        this[kQueue] = [];
        this[kRunningIdx] = 0;
        this[kPendingIdx] = 0;
      }
      get pipelining() {
        return this[kPipelining];
      }
      set pipelining(value) {
        this[kPipelining] = value;
        resume(this, true);
      }
      get [kPending]() {
        return this[kQueue].length - this[kPendingIdx];
      }
      get [kRunning]() {
        return this[kPendingIdx] - this[kRunningIdx];
      }
      get [kSize]() {
        return this[kQueue].length - this[kRunningIdx];
      }
      get [kConnected]() {
        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
      }
      get [kBusy]() {
        const socket = this[kSocket];
        return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
      }
      /* istanbul ignore: only used for test */
      [kConnect](cb) {
        connect(this);
        this.once("connect", cb);
      }
      [kDispatch](opts, handler) {
        const origin = opts.origin || this[kUrl].origin;
        const request = this[kHTTPConnVersion] === "h2" ? Request2[kHTTP2BuildRequest](origin, opts, handler) : Request2[kHTTP1BuildRequest](origin, opts, handler);
        this[kQueue].push(request);
        if (this[kResuming]) {
        } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
          this[kResuming] = 1;
          process.nextTick(resume, this);
        } else {
          resume(this, true);
        }
        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
          this[kNeedDrain] = 2;
        }
        return this[kNeedDrain] < 2;
      }
      async [kClose]() {
        return new Promise((resolve) => {
          if (!this[kSize]) {
            resolve(null);
          } else {
            this[kClosedResolve] = resolve;
          }
        });
      }
      async [kDestroy](err) {
        return new Promise((resolve) => {
          const requests = this[kQueue].splice(this[kPendingIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i];
            errorRequest(this, request, err);
          }
          const callback = () => {
            if (this[kClosedResolve]) {
              this[kClosedResolve]();
              this[kClosedResolve] = null;
            }
            resolve();
          };
          if (this[kHTTP2Session] != null) {
            util.destroy(this[kHTTP2Session], err);
            this[kHTTP2Session] = null;
            this[kHTTP2SessionState] = null;
          }
          if (!this[kSocket]) {
            queueMicrotask(callback);
          } else {
            util.destroy(this[kSocket].on("close", callback), err);
          }
          resume(this);
        });
      }
    };
    function onHttp2SessionError(err) {
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      this[kSocket][kError] = err;
      onError(this[kClient], err);
    }
    function onHttp2FrameError(type, code, id) {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      if (id === 0) {
        this[kSocket][kError] = err;
        onError(this[kClient], err);
      }
    }
    function onHttp2SessionEnd() {
      util.destroy(this, new SocketError("other side closed"));
      util.destroy(this[kSocket], new SocketError("other side closed"));
    }
    function onHTTP2GoAway(code) {
      const client = this[kClient];
      const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
      client[kSocket] = null;
      client[kHTTP2Session] = null;
      if (client.destroyed) {
        assert(this[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(this, request, err);
        }
      } else if (client[kRunning] > 0) {
        const request = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert(client[kRunning] === 0);
      client.emit(
        "disconnect",
        client[kUrl],
        [client],
        err
      );
      resume(client);
    }
    var constants = require_constants3();
    var createRedirectInterceptor = require_redirectInterceptor();
    var EMPTY_BUF = Buffer.alloc(0);
    async function lazyllhttp() {
      const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
      let mod;
      try {
        mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
      } catch (e) {
        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
      }
      return await WebAssembly.instantiate(mod, {
        env: {
          /* eslint-disable camelcase */
          wasm_on_url: (p, at, len) => {
            return 0;
          },
          wasm_on_status: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_message_begin: (p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageBegin() || 0;
          },
          wasm_on_header_field: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_header_value: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
          },
          wasm_on_body: (p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          },
          wasm_on_message_complete: (p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageComplete() || 0;
          }
          /* eslint-enable camelcase */
        }
      });
    }
    var llhttpInstance = null;
    var llhttpPromise = lazyllhttp();
    llhttpPromise.catch();
    var currentParser = null;
    var currentBufferRef = null;
    var currentBufferSize = 0;
    var currentBufferPtr = null;
    var TIMEOUT_HEADERS = 1;
    var TIMEOUT_BODY = 2;
    var TIMEOUT_IDLE = 3;
    var Parser = class {
      constructor(client, socket, { exports: exports3 }) {
        assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
        this.llhttp = exports3;
        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
        this.client = client;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client[kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client[kMaxResponseSize];
      }
      setTimeout(value, type) {
        this.timeoutType = type;
        if (value !== this.timeoutValue) {
          timers.clearTimeout(this.timeout);
          if (value) {
            this.timeout = timers.setTimeout(onParserTimeout, value, this);
            if (this.timeout.unref) {
              this.timeout.unref();
            }
          } else {
            this.timeout = null;
          }
          this.timeoutValue = value;
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
      }
      resume() {
        if (this.socket.destroyed || !this.paused) {
          return;
        }
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        assert(this.timeoutType === TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        this.paused = false;
        this.execute(this.socket.read() || EMPTY_BUF);
        this.readMore();
      }
      readMore() {
        while (!this.paused && this.ptr) {
          const chunk = this.socket.read();
          if (chunk === null) {
            break;
          }
          this.execute(chunk);
        }
      }
      execute(data) {
        assert(this.ptr != null);
        assert(currentParser == null);
        assert(!this.paused);
        const { socket, llhttp } = this;
        if (data.length > currentBufferSize) {
          if (currentBufferPtr) {
            llhttp.free(currentBufferPtr);
          }
          currentBufferSize = Math.ceil(data.length / 4096) * 4096;
          currentBufferPtr = llhttp.malloc(currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
        try {
          let ret;
          try {
            currentBufferRef = data;
            currentParser = this;
            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
          } catch (err) {
            throw err;
          } finally {
            currentParser = null;
            currentBufferRef = null;
          }
          const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data.slice(offset));
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true;
            socket.unshift(data.slice(offset));
          } else if (ret !== constants.ERROR.OK) {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr);
            let message = "";
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
              message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
            }
            throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
          }
        } catch (err) {
          util.destroy(socket, err);
        }
      }
      destroy() {
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        timers.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
      }
      onStatus(buf) {
        this.statusText = buf.toString();
      }
      onMessageBegin() {
        const { socket, client } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client[kQueue][client[kRunningIdx]];
        if (!request) {
          return -1;
        }
      }
      onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) {
          this.headers.push(buf);
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        this.trackHeader(buf.length);
      }
      onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
          this.headers.push(buf);
          len += 1;
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        const key = this.headers[len - 2];
        if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
          this.keepAlive += buf.toString();
        } else if (key.length === 10 && key.toString().toLowerCase() === "connection") {
          this.connection += buf.toString();
        } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
          this.contentLength += buf.toString();
        }
        this.trackHeader(buf.length);
      }
      trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) {
          util.destroy(this.socket, new HeadersOverflowError());
        }
      }
      onUpgrade(head) {
        const { upgrade, client, socket, headers, statusCode } = this;
        assert(upgrade);
        const request = client[kQueue][client[kRunningIdx]];
        assert(request);
        assert(!socket.destroyed);
        assert(socket === client[kSocket]);
        assert(!this.paused);
        assert(request.upgrade || request.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head);
        socket[kParser].destroy();
        socket[kParser] = null;
        socket[kClient] = null;
        socket[kError] = null;
        socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
        client[kSocket] = null;
        client[kQueue][client[kRunningIdx]++] = null;
        client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
        try {
          request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util.destroy(socket, err);
        }
        resume(client);
      }
      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client, socket, headers, statusText } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client[kQueue][client[kRunningIdx]];
        if (!request) {
          return -1;
        }
        assert(!this.upgrade);
        assert(this.statusCode < 200);
        if (statusCode === 100) {
          util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket)));
          return -1;
        }
        if (upgrade && !request.upgrade) {
          util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket)));
          return -1;
        }
        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
          const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];
          this.setTimeout(bodyTimeout, TIMEOUT_BODY);
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        if (request.method === "CONNECT") {
          assert(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        if (upgrade) {
          assert(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client[kPipelining]) {
          const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
          if (keepAliveTimeout != null) {
            const timeout = Math.min(
              keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
              client[kKeepAliveMaxTimeout]
            );
            if (timeout <= 0) {
              socket[kReset] = true;
            } else {
              client[kKeepAliveTimeoutValue] = timeout;
            }
          } else {
            client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
          }
        } else {
          socket[kReset] = true;
        }
        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request.aborted) {
          return -1;
        }
        if (request.method === "HEAD") {
          return 1;
        }
        if (statusCode < 200) {
          return 1;
        }
        if (socket[kBlocking]) {
          socket[kBlocking] = false;
          resume(client);
        }
        return pause ? constants.ERROR.PAUSED : 0;
      }
      onBody(buf) {
        const { client, socket, statusCode, maxResponseSize } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client[kQueue][client[kRunningIdx]];
        assert(request);
        assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        assert(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
          util.destroy(socket, new ResponseExceededMaxSizeError());
          return -1;
        }
        this.bytesRead += buf.length;
        if (request.onData(buf) === false) {
          return constants.ERROR.PAUSED;
        }
      }
      onMessageComplete() {
        const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
          return -1;
        }
        if (upgrade) {
          return;
        }
        const request = client[kQueue][client[kRunningIdx]];
        assert(request);
        assert(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) {
          return;
        }
        if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
          util.destroy(socket, new ResponseContentLengthMismatchError());
          return -1;
        }
        request.onComplete(headers);
        client[kQueue][client[kRunningIdx]++] = null;
        if (socket[kWriting]) {
          assert.strictEqual(client[kRunning], 0);
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (socket[kReset] && client[kRunning] === 0) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (client[kPipelining] === 1) {
          setImmediate(resume, client);
        } else {
          resume(client);
        }
      }
    };
    function onParserTimeout(parser) {
      const { socket, timeoutType, client } = parser;
      if (timeoutType === TIMEOUT_HEADERS) {
        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
          assert(!parser.paused, "cannot be paused while waiting for headers");
          util.destroy(socket, new HeadersTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_BODY) {
        if (!parser.paused) {
          util.destroy(socket, new BodyTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_IDLE) {
        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
        util.destroy(socket, new InformationalError("socket idle timeout"));
      }
    }
    function onSocketReadable() {
      const { [kParser]: parser } = this;
      if (parser) {
        parser.readMore();
      }
    }
    function onSocketError(err) {
      const { [kClient]: client, [kParser]: parser } = this;
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      if (client[kHTTPConnVersion] !== "h2") {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      this[kError] = err;
      onError(this[kClient], err);
    }
    function onError(client, err) {
      if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        assert(client[kPendingIdx] === client[kRunningIdx]);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(client, request, err);
        }
        assert(client[kSize] === 0);
      }
    }
    function onSocketEnd() {
      const { [kParser]: parser, [kClient]: client } = this;
      if (client[kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this)));
    }
    function onSocketClose() {
      const { [kClient]: client, [kParser]: parser } = this;
      if (client[kHTTPConnVersion] === "h1" && parser) {
        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
        }
        this[kParser].destroy();
        this[kParser] = null;
      }
      const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
      client[kSocket] = null;
      if (client.destroyed) {
        assert(client[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(client, request, err);
        }
      } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        const request = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert(client[kRunning] === 0);
      client.emit("disconnect", client[kUrl], [client], err);
      resume(client);
    }
    async function connect(client) {
      assert(!client[kConnecting]);
      assert(!client[kSocket]);
      let { host, hostname, protocol, port } = client[kUrl];
      if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        assert(idx !== -1);
        const ip = hostname.substring(1, idx);
        assert(net.isIP(ip));
        hostname = ip;
      }
      client[kConnecting] = true;
      if (channels.beforeConnect.hasSubscribers) {
        channels.beforeConnect.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector]
        });
      }
      try {
        const socket = await new Promise((resolve, reject) => {
          client[kConnector]({
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          }, (err, socket2) => {
            if (err) {
              reject(err);
            } else {
              resolve(socket2);
            }
          });
        });
        if (client.destroyed) {
          util.destroy(socket.on("error", () => {
          }), new ClientDestroyedError());
          return;
        }
        client[kConnecting] = false;
        assert(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
          if (!h2ExperimentalWarned) {
            h2ExperimentalWarned = true;
            process.emitWarning("H2 support is experimental, expect them to change at any time.", {
              code: "UNDICI-H2"
            });
          }
          const session = http2.connect(client[kUrl], {
            createConnection: () => socket,
            peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
          });
          client[kHTTPConnVersion] = "h2";
          session[kClient] = client;
          session[kSocket] = socket;
          session.on("error", onHttp2SessionError);
          session.on("frameError", onHttp2FrameError);
          session.on("end", onHttp2SessionEnd);
          session.on("goaway", onHTTP2GoAway);
          session.on("close", onSocketClose);
          session.unref();
          client[kHTTP2Session] = session;
          socket[kHTTP2Session] = session;
        } else {
          if (!llhttpInstance) {
            llhttpInstance = await llhttpPromise;
            llhttpPromise = null;
          }
          socket[kNoRef] = false;
          socket[kWriting] = false;
          socket[kReset] = false;
          socket[kBlocking] = false;
          socket[kParser] = new Parser(client, socket, llhttpInstance);
        }
        socket[kCounter] = 0;
        socket[kMaxRequests] = client[kMaxRequests];
        socket[kClient] = client;
        socket[kError] = null;
        socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
        client[kSocket] = socket;
        if (channels.connected.hasSubscribers) {
          channels.connected.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            socket
          });
        }
        client.emit("connect", client[kUrl], [client]);
      } catch (err) {
        if (client.destroyed) {
          return;
        }
        client[kConnecting] = false;
        if (channels.connectError.hasSubscribers) {
          channels.connectError.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            error: err
          });
        }
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
          assert(client[kRunning] === 0);
          while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
            const request = client[kQueue][client[kPendingIdx]++];
            errorRequest(client, request, err);
          }
        } else {
          onError(client, err);
        }
        client.emit("connectionError", client[kUrl], [client], err);
      }
      resume(client);
    }
    function emitDrain(client) {
      client[kNeedDrain] = 0;
      client.emit("drain", client[kUrl], [client]);
    }
    function resume(client, sync) {
      if (client[kResuming] === 2) {
        return;
      }
      client[kResuming] = 2;
      _resume(client, sync);
      client[kResuming] = 0;
      if (client[kRunningIdx] > 256) {
        client[kQueue].splice(0, client[kRunningIdx]);
        client[kPendingIdx] -= client[kRunningIdx];
        client[kRunningIdx] = 0;
      }
    }
    function _resume(client, sync) {
      while (true) {
        if (client.destroyed) {
          assert(client[kPending] === 0);
          return;
        }
        if (client[kClosedResolve] && !client[kSize]) {
          client[kClosedResolve]();
          client[kClosedResolve] = null;
          return;
        }
        const socket = client[kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
          if (client[kSize] === 0) {
            if (!socket[kNoRef] && socket.unref) {
              socket.unref();
              socket[kNoRef] = true;
            }
          } else if (socket[kNoRef] && socket.ref) {
            socket.ref();
            socket[kNoRef] = false;
          }
          if (client[kSize] === 0) {
            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
              socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
            }
          } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
              const request2 = client[kQueue][client[kRunningIdx]];
              const headersTimeout = request2.headersTimeout != null ? request2.headersTimeout : client[kHeadersTimeout];
              socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
            }
          }
        }
        if (client[kBusy]) {
          client[kNeedDrain] = 2;
        } else if (client[kNeedDrain] === 2) {
          if (sync) {
            client[kNeedDrain] = 1;
            process.nextTick(emitDrain, client);
          } else {
            emitDrain(client);
          }
          continue;
        }
        if (client[kPending] === 0) {
          return;
        }
        if (client[kRunning] >= (client[kPipelining] || 1)) {
          return;
        }
        const request = client[kQueue][client[kPendingIdx]];
        if (client[kUrl].protocol === "https:" && client[kServerName] !== request.servername) {
          if (client[kRunning] > 0) {
            return;
          }
          client[kServerName] = request.servername;
          if (socket && socket.servername !== request.servername) {
            util.destroy(socket, new InformationalError("servername changed"));
            return;
          }
        }
        if (client[kConnecting]) {
          return;
        }
        if (!socket && !client[kHTTP2Session]) {
          connect(client);
          return;
        }
        if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
          return;
        }
        if (client[kRunning] > 0 && !request.idempotent) {
          return;
        }
        if (client[kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) {
          return;
        }
        if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
          return;
        }
        if (!request.aborted && write(client, request)) {
          client[kPendingIdx]++;
        } else {
          client[kQueue].splice(client[kPendingIdx], 1);
        }
      }
    }
    function shouldSendContentLength(method) {
      return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
    }
    function write(client, request) {
      if (client[kHTTPConnVersion] === "h2") {
        writeH2(client, client[kHTTP2Session], request);
        return;
      }
      const { body, method, path: path3, host, upgrade, headers, blocking, reset } = request;
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      const bodyLength = util.bodyLength(body);
      let contentLength = bodyLength;
      if (contentLength === null) {
        contentLength = request.contentLength;
      }
      if (contentLength === 0 && !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      const socket = client[kSocket];
      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return;
          }
          errorRequest(client, request, err || new RequestAbortedError());
          util.destroy(socket, new InformationalError("aborted"));
        });
      } catch (err) {
        errorRequest(client, request, err);
      }
      if (request.aborted) {
        return false;
      }
      if (method === "HEAD") {
        socket[kReset] = true;
      }
      if (upgrade || method === "CONNECT") {
        socket[kReset] = true;
      }
      if (reset != null) {
        socket[kReset] = reset;
      }
      if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
        socket[kReset] = true;
      }
      if (blocking) {
        socket[kBlocking] = true;
      }
      let header = `${method} ${path3} HTTP/1.1\r
`;
      if (typeof host === "string") {
        header += `host: ${host}\r
`;
      } else {
        header += client[kHostHeader];
      }
      if (upgrade) {
        header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
      } else if (client[kPipelining] && !socket[kReset]) {
        header += "connection: keep-alive\r\n";
      } else {
        header += "connection: close\r\n";
      }
      if (headers) {
        header += headers;
      }
      if (channels.sendHeaders.hasSubscribers) {
        channels.sendHeaders.publish({ request, headers: header, socket });
      }
      if (!body || bodyLength === 0) {
        if (contentLength === 0) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          assert(contentLength === null, "no body must not have content length");
          socket.write(`${header}\r
`, "latin1");
        }
        request.onRequestSent();
      } else if (util.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        socket.write(body);
        socket.uncork();
        request.onBodySent(body);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload });
        } else {
          writeBlob({ body, client, request, socket, contentLength, header, expectsPayload });
        }
      } else if (util.isStream(body)) {
        writeStream({ body, client, request, socket, contentLength, header, expectsPayload });
      } else if (util.isIterable(body)) {
        writeIterable({ body, client, request, socket, contentLength, header, expectsPayload });
      } else {
        assert(false);
      }
      return true;
    }
    function writeH2(client, session, request) {
      const { body, method, path: path3, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;
      let headers;
      if (typeof reqHeaders === "string") headers = Request2[kHTTP2CopyHeaders](reqHeaders.trim());
      else headers = reqHeaders;
      if (upgrade) {
        errorRequest(client, request, new Error("Upgrade not supported for H2"));
        return false;
      }
      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return;
          }
          errorRequest(client, request, err || new RequestAbortedError());
        });
      } catch (err) {
        errorRequest(client, request, err);
      }
      if (request.aborted) {
        return false;
      }
      let stream;
      const h2State = client[kHTTP2SessionState];
      headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
      headers[HTTP2_HEADER_METHOD] = method;
      if (method === "CONNECT") {
        session.ref();
        stream = session.request(headers, { endStream: false, signal });
        if (stream.id && !stream.pending) {
          request.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        } else {
          stream.once("ready", () => {
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
          });
        }
        stream.once("close", () => {
          h2State.openStreams -= 1;
          if (h2State.openStreams === 0) session.unref();
        });
        return true;
      }
      headers[HTTP2_HEADER_PATH] = path3;
      headers[HTTP2_HEADER_SCHEME] = "https";
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      let contentLength = util.bodyLength(body);
      if (contentLength == null) {
        contentLength = request.contentLength;
      }
      if (contentLength === 0 || !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      if (contentLength != null) {
        assert(body, "no body must not have content length");
        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
      }
      session.ref();
      const shouldEndStream = method === "GET" || method === "HEAD";
      if (expectContinue) {
        headers[HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, { endStream: shouldEndStream, signal });
        stream.once("continue", writeBodyH2);
      } else {
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        });
        writeBodyH2();
      }
      ++h2State.openStreams;
      stream.once("response", (headers2) => {
        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
        if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) {
          stream.pause();
        }
      });
      stream.once("end", () => {
        request.onComplete([]);
      });
      stream.on("data", (chunk) => {
        if (request.onData(chunk) === false) {
          stream.pause();
        }
      });
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0) {
          session.unref();
        }
      });
      stream.once("error", function(err) {
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      stream.once("frameError", (type, code) => {
        const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
        errorRequest(client, request, err);
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      return true;
      function writeBodyH2() {
        if (!body) {
          request.onRequestSent();
        } else if (util.isBuffer(body)) {
          assert(contentLength === body.byteLength, "buffer body must have content length");
          stream.cork();
          stream.write(body);
          stream.uncork();
          stream.end();
          request.onBodySent(body);
          request.onRequestSent();
        } else if (util.isBlobLike(body)) {
          if (typeof body.stream === "function") {
            writeIterable({
              client,
              request,
              contentLength,
              h2stream: stream,
              expectsPayload,
              body: body.stream(),
              socket: client[kSocket],
              header: ""
            });
          } else {
            writeBlob({
              body,
              client,
              request,
              contentLength,
              expectsPayload,
              h2stream: stream,
              header: "",
              socket: client[kSocket]
            });
          }
        } else if (util.isStream(body)) {
          writeStream({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            socket: client[kSocket],
            h2stream: stream,
            header: ""
          });
        } else if (util.isIterable(body)) {
          writeIterable({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            header: "",
            h2stream: stream,
            socket: client[kSocket]
          });
        } else {
          assert(false);
        }
      }
    }
    function writeStream({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
      if (client[kHTTPConnVersion] === "h2") {
        let onPipeData = function(chunk) {
          request.onBodySent(chunk);
        };
        const pipe = pipeline(
          body,
          h2stream,
          (err) => {
            if (err) {
              util.destroy(body, err);
              util.destroy(h2stream, err);
            } else {
              request.onRequestSent();
            }
          }
        );
        pipe.on("data", onPipeData);
        pipe.once("end", () => {
          pipe.removeListener("data", onPipeData);
          util.destroy(pipe);
        });
        return;
      }
      let finished = false;
      const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
      const onData = function(chunk) {
        if (finished) {
          return;
        }
        try {
          if (!writer.write(chunk) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util.destroy(this, err);
        }
      };
      const onDrain = function() {
        if (finished) {
          return;
        }
        if (body.resume) {
          body.resume();
        }
      };
      const onAbort = function() {
        if (finished) {
          return;
        }
        const err = new RequestAbortedError();
        queueMicrotask(() => onFinished(err));
      };
      const onFinished = function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) {
          try {
            writer.end();
          } catch (er) {
            err = er;
          }
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
          util.destroy(body, err);
        } else {
          util.destroy(body);
        }
      };
      body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      if (body.resume) {
        body.resume();
      }
      socket.on("drain", onDrain).on("error", onFinished);
    }
    async function writeBlob({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength === body.size, "blob body must have content length");
      const isH2 = client[kHTTPConnVersion] === "h2";
      try {
        if (contentLength != null && contentLength !== body.size) {
          throw new RequestContentLengthMismatchError();
        }
        const buffer = Buffer.from(await body.arrayBuffer());
        if (isH2) {
          h2stream.cork();
          h2stream.write(buffer);
          h2stream.uncork();
        } else {
          socket.cork();
          socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          socket.write(buffer);
          socket.uncork();
        }
        request.onBodySent(buffer);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        resume(client);
      } catch (err) {
        util.destroy(isH2 ? h2stream : socket, err);
      }
    }
    async function writeIterable({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
      let callback = null;
      function onDrain() {
        if (callback) {
          const cb = callback;
          callback = null;
          cb();
        }
      }
      const waitForDrain = () => new Promise((resolve, reject) => {
        assert(callback === null);
        if (socket[kError]) {
          reject(socket[kError]);
        } else {
          callback = resolve;
        }
      });
      if (client[kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
          for await (const chunk of body) {
            if (socket[kError]) {
              throw socket[kError];
            }
            const res = h2stream.write(chunk);
            request.onBodySent(chunk);
            if (!res) {
              await waitForDrain();
            }
          }
        } catch (err) {
          h2stream.destroy(err);
        } finally {
          request.onRequestSent();
          h2stream.end();
          h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
      }
      socket.on("close", onDrain).on("drain", onDrain);
      const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
      try {
        for await (const chunk of body) {
          if (socket[kError]) {
            throw socket[kError];
          }
          if (!writer.write(chunk)) {
            await waitForDrain();
          }
        }
        writer.end();
      } catch (err) {
        writer.destroy(err);
      } finally {
        socket.off("close", onDrain).off("drain", onDrain);
      }
    }
    var AsyncWriter = class {
      constructor({ socket, request, contentLength, client, expectsPayload, header }) {
        this.socket = socket;
        this.request = request;
        this.contentLength = contentLength;
        this.client = client;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[kWriting] = true;
      }
      write(chunk) {
        const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return false;
        }
        const len = Buffer.byteLength(chunk);
        if (!len) {
          return true;
        }
        if (contentLength !== null && bytesWritten + len > contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
          if (!expectsPayload) {
            socket[kReset] = true;
          }
          if (contentLength === null) {
            socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
          } else {
            socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          }
        }
        if (contentLength === null) {
          socket.write(`\r
${len.toString(16)}\r
`, "latin1");
        }
        this.bytesWritten += len;
        const ret = socket.write(chunk);
        socket.uncork();
        request.onBodySent(chunk);
        if (!ret) {
          if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh();
            }
          }
        }
        return ret;
      }
      end() {
        const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;
        request.onRequestSent();
        socket[kWriting] = false;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
`, "latin1");
          } else {
            socket.write(`${header}\r
`, "latin1");
          }
        } else if (contentLength === null) {
          socket.write("\r\n0\r\n\r\n", "latin1");
        }
        if (contentLength !== null && bytesWritten !== contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          } else {
            process.emitWarning(new RequestContentLengthMismatchError());
          }
        }
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
        resume(client);
      }
      destroy(err) {
        const { socket, client } = this;
        socket[kWriting] = false;
        if (err) {
          assert(client[kRunning] <= 1, "pipeline should only contain this request");
          util.destroy(socket, err);
        }
      }
    };
    function errorRequest(client, request, err) {
      try {
        request.onError(err);
        assert(request.aborted);
      } catch (err2) {
        client.emit("error", err2);
      }
    }
    module2.exports = Client;
  }
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({
  "node_modules/undici/lib/node/fixed-queue.js"(exports2, module2) {
    "use strict";
    var kSize = 2048;
    var kMask = kSize - 1;
    var FixedCircularBuffer = class {
      constructor() {
        this.bottom = 0;
        this.top = 0;
        this.list = new Array(kSize);
        this.next = null;
      }
      isEmpty() {
        return this.top === this.bottom;
      }
      isFull() {
        return (this.top + 1 & kMask) === this.bottom;
      }
      push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & kMask;
      }
      shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === void 0)
          return null;
        this.list[this.bottom] = void 0;
        this.bottom = this.bottom + 1 & kMask;
        return nextItem;
      }
    };
    module2.exports = class FixedQueue {
      constructor() {
        this.head = this.tail = new FixedCircularBuffer();
      }
      isEmpty() {
        return this.head.isEmpty();
      }
      push(data) {
        if (this.head.isFull()) {
          this.head = this.head.next = new FixedCircularBuffer();
        }
        this.head.push(data);
      }
      shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) {
          this.tail = tail.next;
        }
        return next;
      }
    };
  }
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({
  "node_modules/undici/lib/pool-stats.js"(exports2, module2) {
    var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
    var kPool = Symbol("pool");
    var PoolStats = class {
      constructor(pool) {
        this[kPool] = pool;
      }
      get connected() {
        return this[kPool][kConnected];
      }
      get free() {
        return this[kPool][kFree];
      }
      get pending() {
        return this[kPool][kPending];
      }
      get queued() {
        return this[kPool][kQueued];
      }
      get running() {
        return this[kPool][kRunning];
      }
      get size() {
        return this[kPool][kSize];
      }
    };
    module2.exports = PoolStats;
  }
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({
  "node_modules/undici/lib/pool-base.js"(exports2, module2) {
    "use strict";
    var DispatcherBase = require_dispatcher_base();
    var FixedQueue = require_fixed_queue();
    var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
    var PoolStats = require_pool_stats();
    var kClients = Symbol("clients");
    var kNeedDrain = Symbol("needDrain");
    var kQueue = Symbol("queue");
    var kClosedResolve = Symbol("closed resolve");
    var kOnDrain = Symbol("onDrain");
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kGetDispatcher = Symbol("get dispatcher");
    var kAddClient = Symbol("add client");
    var kRemoveClient = Symbol("remove client");
    var kStats = Symbol("stats");
    var PoolBase = class extends DispatcherBase {
      constructor() {
        super();
        this[kQueue] = new FixedQueue();
        this[kClients] = [];
        this[kQueued] = 0;
        const pool = this;
        this[kOnDrain] = function onDrain(origin, targets) {
          const queue = pool[kQueue];
          let needDrain = false;
          while (!needDrain) {
            const item = queue.shift();
            if (!item) {
              break;
            }
            pool[kQueued]--;
            needDrain = !this.dispatch(item.opts, item.handler);
          }
          this[kNeedDrain] = needDrain;
          if (!this[kNeedDrain] && pool[kNeedDrain]) {
            pool[kNeedDrain] = false;
            pool.emit("drain", origin, [pool, ...targets]);
          }
          if (pool[kClosedResolve] && queue.isEmpty()) {
            Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
          }
        };
        this[kOnConnect] = (origin, targets) => {
          pool.emit("connect", origin, [pool, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          pool.emit("disconnect", origin, [pool, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          pool.emit("connectionError", origin, [pool, ...targets], err);
        };
        this[kStats] = new PoolStats(this);
      }
      get [kBusy]() {
        return this[kNeedDrain];
      }
      get [kConnected]() {
        return this[kClients].filter((client) => client[kConnected]).length;
      }
      get [kFree]() {
        return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
      }
      get [kPending]() {
        let ret = this[kQueued];
        for (const { [kPending]: pending } of this[kClients]) {
          ret += pending;
        }
        return ret;
      }
      get [kRunning]() {
        let ret = 0;
        for (const { [kRunning]: running } of this[kClients]) {
          ret += running;
        }
        return ret;
      }
      get [kSize]() {
        let ret = this[kQueued];
        for (const { [kSize]: size } of this[kClients]) {
          ret += size;
        }
        return ret;
      }
      get stats() {
        return this[kStats];
      }
      async [kClose]() {
        if (this[kQueue].isEmpty()) {
          return Promise.all(this[kClients].map((c) => c.close()));
        } else {
          return new Promise((resolve) => {
            this[kClosedResolve] = resolve;
          });
        }
      }
      async [kDestroy](err) {
        while (true) {
          const item = this[kQueue].shift();
          if (!item) {
            break;
          }
          item.handler.onError(err);
        }
        return Promise.all(this[kClients].map((c) => c.destroy(err)));
      }
      [kDispatch](opts, handler) {
        const dispatcher = this[kGetDispatcher]();
        if (!dispatcher) {
          this[kNeedDrain] = true;
          this[kQueue].push({ opts, handler });
          this[kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
          dispatcher[kNeedDrain] = true;
          this[kNeedDrain] = !this[kGetDispatcher]();
        }
        return !this[kNeedDrain];
      }
      [kAddClient](client) {
        client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].push(client);
        if (this[kNeedDrain]) {
          process.nextTick(() => {
            if (this[kNeedDrain]) {
              this[kOnDrain](client[kUrl], [this, client]);
            }
          });
        }
        return this;
      }
      [kRemoveClient](client) {
        client.close(() => {
          const idx = this[kClients].indexOf(client);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        });
        this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
      }
    };
    module2.exports = {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    };
  }
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS({
  "node_modules/undici/lib/pool.js"(exports2, module2) {
    "use strict";
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kGetDispatcher
    } = require_pool_base();
    var Client = require_client();
    var {
      InvalidArgumentError
    } = require_errors();
    var util = require_util();
    var { kUrl, kInterceptors } = require_symbols();
    var buildConnector = require_connect();
    var kOptions = Symbol("options");
    var kConnections = Symbol("connections");
    var kFactory = Symbol("factory");
    function defaultFactory(origin, opts) {
      return new Client(origin, opts);
    }
    var Pool = class extends PoolBase {
      constructor(origin, {
        connections,
        factory = defaultFactory,
        connect,
        connectTimeout,
        tls,
        maxCachedSessions,
        socketPath,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        allowH2,
        ...options
      } = {}) {
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
          throw new InvalidArgumentError("invalid connections");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (typeof connect !== "function") {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect
          });
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
        this[kConnections] = connections || null;
        this[kUrl] = util.parseOrigin(origin);
        this[kOptions] = { ...util.deepClone(options), connect, allowH2 };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kFactory] = factory;
      }
      [kGetDispatcher]() {
        let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
        if (dispatcher) {
          return dispatcher;
        }
        if (!this[kConnections] || this[kClients].length < this[kConnections]) {
          dispatcher = this[kFactory](this[kUrl], this[kOptions]);
          this[kAddClient](dispatcher);
        }
        return dispatcher;
      }
    };
    module2.exports = Pool;
  }
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({
  "node_modules/undici/lib/balanced-pool.js"(exports2, module2) {
    "use strict";
    var {
      BalancedPoolMissingUpstreamError,
      InvalidArgumentError
    } = require_errors();
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    } = require_pool_base();
    var Pool = require_pool();
    var { kUrl, kInterceptors } = require_symbols();
    var { parseOrigin } = require_util();
    var kFactory = Symbol("factory");
    var kOptions = Symbol("options");
    var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
    var kCurrentWeight = Symbol("kCurrentWeight");
    var kIndex = Symbol("kIndex");
    var kWeight = Symbol("kWeight");
    var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
    var kErrorPenalty = Symbol("kErrorPenalty");
    function getGreatestCommonDivisor(a, b) {
      if (b === 0) return a;
      return getGreatestCommonDivisor(b, a % b);
    }
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    var BalancedPool = class extends PoolBase {
      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
        super();
        this[kOptions] = opts;
        this[kIndex] = -1;
        this[kCurrentWeight] = 0;
        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) {
          upstreams = [upstreams];
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[kFactory] = factory;
        for (const upstream of upstreams) {
          this.addUpstream(upstream);
        }
        this._updateBalancedPoolStats();
      }
      addUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
          return this;
        }
        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
        this[kAddClient](pool);
        pool.on("connect", () => {
          pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
        });
        pool.on("connectionError", () => {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args) => {
          const err = args[2];
          if (err && err.code === "UND_ERR_SOCKET") {
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
            this._updateBalancedPoolStats();
          }
        });
        for (const client of this[kClients]) {
          client[kWeight] = this[kMaxWeightPerServer];
        }
        this._updateBalancedPoolStats();
        return this;
      }
      _updateBalancedPoolStats() {
        this[kGreatestCommonDivisor] = this[kClients].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
      }
      removeUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
        if (pool) {
          this[kRemoveClient](pool);
        }
        return this;
      }
      get upstreams() {
        return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
      }
      [kGetDispatcher]() {
        if (this[kClients].length === 0) {
          throw new BalancedPoolMissingUpstreamError();
        }
        const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
        if (!dispatcher) {
          return;
        }
        const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
        if (allClientsBusy) {
          return;
        }
        let counter = 0;
        let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
        while (counter++ < this[kClients].length) {
          this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
          const pool = this[kClients][this[kIndex]];
          if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
            maxWeightIndex = this[kIndex];
          }
          if (this[kIndex] === 0) {
            this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
            if (this[kCurrentWeight] <= 0) {
              this[kCurrentWeight] = this[kMaxWeightPerServer];
            }
          }
          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
            return pool;
          }
        }
        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
        this[kIndex] = maxWeightIndex;
        return this[kClients][maxWeightIndex];
      }
    };
    module2.exports = BalancedPool;
  }
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({
  "node_modules/undici/lib/compat/dispatcher-weakref.js"(exports2, module2) {
    "use strict";
    var { kConnected, kSize } = require_symbols();
    var CompatWeakRef = class {
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
      }
    };
    var CompatFinalizer = class {
      constructor(finalizer) {
        this.finalizer = finalizer;
      }
      register(dispatcher, key) {
        if (dispatcher.on) {
          dispatcher.on("disconnect", () => {
            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
              this.finalizer(key);
            }
          });
        }
      }
    };
    module2.exports = function() {
      if (process.env.NODE_V8_COVERAGE) {
        return {
          WeakRef: CompatWeakRef,
          FinalizationRegistry: CompatFinalizer
        };
      }
      return {
        WeakRef: global.WeakRef || CompatWeakRef,
        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
      };
    };
  }
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS({
  "node_modules/undici/lib/agent.js"(exports2, module2) {
    "use strict";
    var { InvalidArgumentError } = require_errors();
    var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
    var DispatcherBase = require_dispatcher_base();
    var Pool = require_pool();
    var Client = require_client();
    var util = require_util();
    var createRedirectInterceptor = require_redirectInterceptor();
    var { WeakRef: WeakRef2, FinalizationRegistry } = require_dispatcher_weakref()();
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kMaxRedirections = Symbol("maxRedirections");
    var kOnDrain = Symbol("onDrain");
    var kFactory = Symbol("factory");
    var kFinalizer = Symbol("finalizer");
    var kOptions = Symbol("options");
    function defaultFactory(origin, opts) {
      return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
    }
    var Agent = class extends DispatcherBase {
      constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
        super();
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (connect && typeof connect !== "function") {
          connect = { ...connect };
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
        this[kOptions] = { ...util.deepClone(options), connect };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kMaxRedirections] = maxRedirections;
        this[kFactory] = factory;
        this[kClients] = /* @__PURE__ */ new Map();
        this[kFinalizer] = new FinalizationRegistry(
          /* istanbul ignore next: gc is undeterministic */
          (key) => {
            const ref = this[kClients].get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this[kClients].delete(key);
            }
          }
        );
        const agent = this;
        this[kOnDrain] = (origin, targets) => {
          agent.emit("drain", origin, [agent, ...targets]);
        };
        this[kOnConnect] = (origin, targets) => {
          agent.emit("connect", origin, [agent, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          agent.emit("disconnect", origin, [agent, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          agent.emit("connectionError", origin, [agent, ...targets], err);
        };
      }
      get [kRunning]() {
        let ret = 0;
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            ret += client[kRunning];
          }
        }
        return ret;
      }
      [kDispatch](opts, handler) {
        let key;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
          key = String(opts.origin);
        } else {
          throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        }
        const ref = this[kClients].get(key);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
          dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
          this[kClients].set(key, new WeakRef2(dispatcher));
          this[kFinalizer].register(dispatcher, key);
        }
        return dispatcher.dispatch(opts, handler);
      }
      async [kClose]() {
        const closePromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            closePromises.push(client.close());
          }
        }
        await Promise.all(closePromises);
      }
      async [kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            destroyPromises.push(client.destroy(err));
          }
        }
        await Promise.all(destroyPromises);
      }
    };
    module2.exports = Agent;
  }
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({
  "node_modules/undici/lib/api/readable.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { Readable } = require("stream");
    var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors();
    var util = require_util();
    var { ReadableStreamFrom, toUSVString } = require_util();
    var Blob2;
    var kConsume = Symbol("kConsume");
    var kReading = Symbol("kReading");
    var kBody = Symbol("kBody");
    var kAbort = Symbol("abort");
    var kContentType = Symbol("kContentType");
    var noop = () => {
    };
    module2.exports = class BodyReadable extends Readable {
      constructor({
        resume,
        abort,
        contentType = "",
        highWaterMark = 64 * 1024
        // Same as nodejs fs streams.
      }) {
        super({
          autoDestroy: true,
          read: resume,
          highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[kAbort] = abort;
        this[kConsume] = null;
        this[kBody] = null;
        this[kContentType] = contentType;
        this[kReading] = false;
      }
      destroy(err) {
        if (this.destroyed) {
          return this;
        }
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        if (err) {
          this[kAbort]();
        }
        return super.destroy(err);
      }
      emit(ev, ...args) {
        if (ev === "data") {
          this._readableState.dataEmitted = true;
        } else if (ev === "error") {
          this._readableState.errorEmitted = true;
        }
        return super.emit(ev, ...args);
      }
      on(ev, ...args) {
        if (ev === "data" || ev === "readable") {
          this[kReading] = true;
        }
        return super.on(ev, ...args);
      }
      addListener(ev, ...args) {
        return this.on(ev, ...args);
      }
      off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") {
          this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        }
        return ret;
      }
      removeListener(ev, ...args) {
        return this.off(ev, ...args);
      }
      push(chunk) {
        if (this[kConsume] && chunk !== null && this.readableLength === 0) {
          consumePush(this[kConsume], chunk);
          return this[kReading] ? super.push(chunk) : true;
        }
        return super.push(chunk);
      }
      // https://fetch.spec.whatwg.org/#dom-body-text
      async text() {
        return consume(this, "text");
      }
      // https://fetch.spec.whatwg.org/#dom-body-json
      async json() {
        return consume(this, "json");
      }
      // https://fetch.spec.whatwg.org/#dom-body-blob
      async blob() {
        return consume(this, "blob");
      }
      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
      async arrayBuffer() {
        return consume(this, "arrayBuffer");
      }
      // https://fetch.spec.whatwg.org/#dom-body-formdata
      async formData() {
        throw new NotSupportedError();
      }
      // https://fetch.spec.whatwg.org/#dom-body-bodyused
      get bodyUsed() {
        return util.isDisturbed(this);
      }
      // https://fetch.spec.whatwg.org/#dom-body-body
      get body() {
        if (!this[kBody]) {
          this[kBody] = ReadableStreamFrom(this);
          if (this[kConsume]) {
            this[kBody].getReader();
            assert(this[kBody].locked);
          }
        }
        return this[kBody];
      }
      dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) {
          try {
            if (typeof signal !== "object" || !("aborted" in signal)) {
              throw new InvalidArgumentError("signal must be an AbortSignal");
            }
            util.throwIfAborted(signal);
          } catch (err) {
            return Promise.reject(err);
          }
        }
        if (this.closed) {
          return Promise.resolve(null);
        }
        return new Promise((resolve, reject) => {
          const signalListenerCleanup = signal ? util.addAbortListener(signal, () => {
            this.destroy();
          }) : noop;
          this.on("close", function() {
            signalListenerCleanup();
            if (signal && signal.aborted) {
              reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
            } else {
              resolve(null);
            }
          }).on("error", noop).on("data", function(chunk) {
            limit -= chunk.length;
            if (limit <= 0) {
              this.destroy();
            }
          }).resume();
        });
      }
    };
    function isLocked(self2) {
      return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
    }
    function isUnusable(self2) {
      return util.isDisturbed(self2) || isLocked(self2);
    }
    async function consume(stream, type) {
      if (isUnusable(stream)) {
        throw new TypeError("unusable");
      }
      assert(!stream[kConsume]);
      return new Promise((resolve, reject) => {
        stream[kConsume] = {
          type,
          stream,
          resolve,
          reject,
          length: 0,
          body: []
        };
        stream.on("error", function(err) {
          consumeFinish(this[kConsume], err);
        }).on("close", function() {
          if (this[kConsume].body !== null) {
            consumeFinish(this[kConsume], new RequestAbortedError());
          }
        });
        process.nextTick(consumeStart, stream[kConsume]);
      });
    }
    function consumeStart(consume2) {
      if (consume2.body === null) {
        return;
      }
      const { _readableState: state } = consume2.stream;
      for (const chunk of state.buffer) {
        consumePush(consume2, chunk);
      }
      if (state.endEmitted) {
        consumeEnd(this[kConsume]);
      } else {
        consume2.stream.on("end", function() {
          consumeEnd(this[kConsume]);
        });
      }
      consume2.stream.resume();
      while (consume2.stream.read() != null) {
      }
    }
    function consumeEnd(consume2) {
      const { type, body, resolve, stream, length } = consume2;
      try {
        if (type === "text") {
          resolve(toUSVString(Buffer.concat(body)));
        } else if (type === "json") {
          resolve(JSON.parse(Buffer.concat(body)));
        } else if (type === "arrayBuffer") {
          const dst = new Uint8Array(length);
          let pos = 0;
          for (const buf of body) {
            dst.set(buf, pos);
            pos += buf.byteLength;
          }
          resolve(dst.buffer);
        } else if (type === "blob") {
          if (!Blob2) {
            Blob2 = require("buffer").Blob;
          }
          resolve(new Blob2(body, { type: stream[kContentType] }));
        }
        consumeFinish(consume2);
      } catch (err) {
        stream.destroy(err);
      }
    }
    function consumePush(consume2, chunk) {
      consume2.length += chunk.length;
      consume2.body.push(chunk);
    }
    function consumeFinish(consume2, err) {
      if (consume2.body === null) {
        return;
      }
      if (err) {
        consume2.reject(err);
      } else {
        consume2.resolve();
      }
      consume2.type = null;
      consume2.stream = null;
      consume2.resolve = null;
      consume2.reject = null;
      consume2.length = 0;
      consume2.body = null;
    }
  }
});

// node_modules/undici/lib/api/util.js
var require_util3 = __commonJS({
  "node_modules/undici/lib/api/util.js"(exports2, module2) {
    var assert = require("assert");
    var {
      ResponseStatusCodeError
    } = require_errors();
    var { toUSVString } = require_util();
    async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
      assert(body);
      let chunks = [];
      let limit = 0;
      for await (const chunk of body) {
        chunks.push(chunk);
        limit += chunk.length;
        if (limit > 128 * 1024) {
          chunks = null;
          break;
        }
      }
      if (statusCode === 204 || !contentType || !chunks) {
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
      }
      try {
        if (contentType.startsWith("application/json")) {
          const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
        if (contentType.startsWith("text/")) {
          const payload = toUSVString(Buffer.concat(chunks));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
      } catch (err) {
      }
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
    }
    module2.exports = { getResolveErrorBodyCallback };
  }
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({
  "node_modules/undici/lib/api/abort-signal.js"(exports2, module2) {
    var { addAbortListener } = require_util();
    var { RequestAbortedError } = require_errors();
    var kListener = Symbol("kListener");
    var kSignal = Symbol("kSignal");
    function abort(self2) {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    }
    function addSignal(self2, signal) {
      self2[kSignal] = null;
      self2[kListener] = null;
      if (!signal) {
        return;
      }
      if (signal.aborted) {
        abort(self2);
        return;
      }
      self2[kSignal] = signal;
      self2[kListener] = () => {
        abort(self2);
      };
      addAbortListener(self2[kSignal], self2[kListener]);
    }
    function removeSignal(self2) {
      if (!self2[kSignal]) {
        return;
      }
      if ("removeEventListener" in self2[kSignal]) {
        self2[kSignal].removeEventListener("abort", self2[kListener]);
      } else {
        self2[kSignal].removeListener("abort", self2[kListener]);
      }
      self2[kSignal] = null;
      self2[kListener] = null;
    }
    module2.exports = {
      addSignal,
      removeSignal
    };
  }
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({
  "node_modules/undici/lib/api/api-request.js"(exports2, module2) {
    "use strict";
    var Readable = require_readable();
    var {
      InvalidArgumentError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var RequestHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
            throw new InvalidArgumentError("invalid highWaterMark");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_REQUEST");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context2) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context2;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { callback, opaque, abort, context: context2, responseHeaders, highWaterMark } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        const body = new Readable({ resume, abort, contentType, highWaterMark });
        this.callback = null;
        this.res = body;
        if (callback !== null) {
          if (this.throwOnError && statusCode >= 400) {
            this.runInAsyncScope(
              getResolveErrorBodyCallback,
              null,
              { callback, body, contentType, statusCode, statusMessage, headers }
            );
          } else {
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              trailers: this.trailers,
              opaque,
              body,
              context: context2
            });
          }
        }
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        util.parseHeaders(trailers, this.trailers);
        res.push(null);
      }
      onError(err) {
        const { res, callback, body, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (res) {
          this.res = null;
          queueMicrotask(() => {
            util.destroy(res, err);
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function request(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          request.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        this.dispatch(opts, new RequestHandler(opts, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = request;
    module2.exports.RequestHandler = RequestHandler;
  }
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({
  "node_modules/undici/lib/api/api-stream.js"(exports2, module2) {
    "use strict";
    var { finished, PassThrough } = require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { getResolveErrorBodyCallback } = require_util3();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var StreamHandler = class extends AsyncResource {
      constructor(opts, factory, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("invalid factory");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_STREAM");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context2) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context2;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory, opaque, context: context2, callback, responseHeaders } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
          const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
          const contentType = parsedHeaders["content-type"];
          res = new PassThrough();
          this.callback = null;
          this.runInAsyncScope(
            getResolveErrorBodyCallback,
            null,
            { callback, body: res, contentType, statusCode, statusMessage, headers }
          );
        } else {
          if (factory === null) {
            return;
          }
          res = this.runInAsyncScope(factory, null, {
            statusCode,
            headers,
            opaque,
            context: context2
          });
          if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
            throw new InvalidReturnValueError("expected Writable");
          }
          finished(res, { readable: false }, (err) => {
            const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
            this.res = null;
            if (err || !res2.readable) {
              util.destroy(res2, err);
            }
            this.callback = null;
            this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
            if (err) {
              abort();
            }
          });
        }
        res.on("drain", resume);
        this.res = res;
        const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
      }
      onData(chunk) {
        const { res } = this;
        return res ? res.write(chunk) : true;
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        if (!res) {
          return;
        }
        this.trailers = util.parseHeaders(trailers);
        res.end();
      }
      onError(err) {
        const { res, callback, opaque, body } = this;
        removeSignal(this);
        this.factory = null;
        if (res) {
          this.res = null;
          util.destroy(res, err);
        } else if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function stream(opts, factory, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          stream.call(this, opts, factory, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        this.dispatch(opts, new StreamHandler(opts, factory, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = stream;
  }
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({
  "node_modules/undici/lib/api/api-pipeline.js"(exports2, module2) {
    "use strict";
    var {
      Readable,
      Duplex,
      PassThrough
    } = require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util();
    var { AsyncResource } = require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = require("assert");
    var kResume = Symbol("resume");
    var PipelineRequest = class extends Readable {
      constructor() {
        super({ autoDestroy: true });
        this[kResume] = null;
      }
      _read() {
        const { [kResume]: resume } = this;
        if (resume) {
          this[kResume] = null;
          resume();
        }
      }
      _destroy(err, callback) {
        this._read();
        callback(err);
      }
    };
    var PipelineResponse = class extends Readable {
      constructor(resume) {
        super({ autoDestroy: true });
        this[kResume] = resume;
      }
      _read() {
        this[kResume]();
      }
      _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        callback(err);
      }
    };
    var PipelineHandler = class extends AsyncResource {
      constructor(opts, handler) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof handler !== "function") {
          throw new InvalidArgumentError("invalid handler");
        }
        const { signal, method, opaque, onInfo, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new PipelineRequest().on("error", util.nop);
        this.ret = new Duplex({
          readableObjectMode: opts.objectMode,
          autoDestroy: true,
          read: () => {
            const { body } = this;
            if (body && body.resume) {
              body.resume();
            }
          },
          write: (chunk, encoding, callback) => {
            const { req } = this;
            if (req.push(chunk, encoding) || req._readableState.destroyed) {
              callback();
            } else {
              req[kResume] = callback;
            }
          },
          destroy: (err, callback) => {
            const { body, req, res, ret, abort } = this;
            if (!err && !ret._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            if (abort && err) {
              abort();
            }
            util.destroy(body, err);
            util.destroy(req, err);
            util.destroy(res, err);
            removeSignal(this);
            callback(err);
          }
        }).on("prefinish", () => {
          const { req } = this;
          req.push(null);
        });
        this.res = null;
        addSignal(this, signal);
      }
      onConnect(abort, context2) {
        const { ret, res } = this;
        assert(!res, "pipeline cannot be retried");
        if (ret.destroyed) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context2;
      }
      onHeaders(statusCode, rawHeaders, resume) {
        const { opaque, handler, context: context2 } = this;
        if (statusCode < 200) {
          if (this.onInfo) {
            const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.res = new PipelineResponse(resume);
        let body;
        try {
          this.handler = null;
          const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
          body = this.runInAsyncScope(handler, null, {
            statusCode,
            headers,
            opaque,
            body: this.res,
            context: context2
          });
        } catch (err) {
          this.res.on("error", util.nop);
          throw err;
        }
        if (!body || typeof body.on !== "function") {
          throw new InvalidReturnValueError("expected Readable");
        }
        body.on("data", (chunk) => {
          const { ret, body: body2 } = this;
          if (!ret.push(chunk) && body2.pause) {
            body2.pause();
          }
        }).on("error", (err) => {
          const { ret } = this;
          util.destroy(ret, err);
        }).on("end", () => {
          const { ret } = this;
          ret.push(null);
        }).on("close", () => {
          const { ret } = this;
          if (!ret._readableState.ended) {
            util.destroy(ret, new RequestAbortedError());
          }
        });
        this.body = body;
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        res.push(null);
      }
      onError(err) {
        const { ret } = this;
        this.handler = null;
        util.destroy(ret, err);
      }
    };
    function pipeline(opts, handler) {
      try {
        const pipelineHandler = new PipelineHandler(opts, handler);
        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
        return pipelineHandler.ret;
      } catch (err) {
        return new PassThrough().destroy(err);
      }
    }
    module2.exports = pipeline;
  }
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({
  "node_modules/undici/lib/api/api-upgrade.js"(exports2, module2) {
    "use strict";
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var { AsyncResource } = require("async_hooks");
    var util = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = require("assert");
    var UpgradeHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        addSignal(this, signal);
      }
      onConnect(abort, context2) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = null;
      }
      onHeaders() {
        throw new SocketError("bad upgrade", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context: context2 } = this;
        assert.strictEqual(statusCode, 101);
        removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
          headers,
          socket,
          opaque,
          context: context2
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function upgrade(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          upgrade.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        const upgradeHandler = new UpgradeHandler(opts, callback);
        this.dispatch({
          ...opts,
          method: opts.method || "GET",
          upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = upgrade;
  }
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({
  "node_modules/undici/lib/api/api-connect.js"(exports2, module2) {
    "use strict";
    var { AsyncResource } = require("async_hooks");
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var util = require_util();
    var { addSignal, removeSignal } = require_abort_signal();
    var ConnectHandler = class extends AsyncResource {
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        addSignal(this, signal);
      }
      onConnect(abort, context2) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context2;
      }
      onHeaders() {
        throw new SocketError("bad connect", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context: context2 } = this;
        removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        if (headers != null) {
          headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        }
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          socket,
          opaque,
          context: context2
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function connect(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          connect.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        const connectHandler = new ConnectHandler(opts, callback);
        this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    module2.exports = connect;
  }
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS({
  "node_modules/undici/lib/api/index.js"(exports2, module2) {
    "use strict";
    module2.exports.request = require_api_request();
    module2.exports.stream = require_api_stream();
    module2.exports.pipeline = require_api_pipeline();
    module2.exports.upgrade = require_api_upgrade();
    module2.exports.connect = require_api_connect();
  }
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({
  "node_modules/undici/lib/mock/mock-errors.js"(exports2, module2) {
    "use strict";
    var { UndiciError } = require_errors();
    var MockNotMatchedError = class _MockNotMatchedError extends UndiciError {
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
      }
    };
    module2.exports = {
      MockNotMatchedError
    };
  }
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({
  "node_modules/undici/lib/mock/mock-symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kAgent: Symbol("agent"),
      kOptions: Symbol("options"),
      kFactory: Symbol("factory"),
      kDispatches: Symbol("dispatches"),
      kDispatchKey: Symbol("dispatch key"),
      kDefaultHeaders: Symbol("default headers"),
      kDefaultTrailers: Symbol("default trailers"),
      kContentLength: Symbol("content length"),
      kMockAgent: Symbol("mock agent"),
      kMockAgentSet: Symbol("mock agent set"),
      kMockAgentGet: Symbol("mock agent get"),
      kMockDispatch: Symbol("mock dispatch"),
      kClose: Symbol("close"),
      kOriginalClose: Symbol("original agent close"),
      kOrigin: Symbol("origin"),
      kIsMockActive: Symbol("is mock active"),
      kNetConnect: Symbol("net connect"),
      kGetNetConnect: Symbol("get net connect"),
      kConnected: Symbol("connected")
    };
  }
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({
  "node_modules/undici/lib/mock/mock-utils.js"(exports2, module2) {
    "use strict";
    var { MockNotMatchedError } = require_mock_errors();
    var {
      kDispatches,
      kMockAgent,
      kOriginalDispatch,
      kOrigin,
      kGetNetConnect
    } = require_mock_symbols();
    var { buildURL, nop } = require_util();
    var { STATUS_CODES } = require("http");
    var {
      types: {
        isPromise
      }
    } = require("util");
    function matchValue(match, value) {
      if (typeof match === "string") {
        return match === value;
      }
      if (match instanceof RegExp) {
        return match.test(value);
      }
      if (typeof match === "function") {
        return match(value) === true;
      }
      return false;
    }
    function lowerCaseEntries(headers) {
      return Object.fromEntries(
        Object.entries(headers).map(([headerName, headerValue]) => {
          return [headerName.toLocaleLowerCase(), headerValue];
        })
      );
    }
    function getHeaderByName(headers, key) {
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
            return headers[i + 1];
          }
        }
        return void 0;
      } else if (typeof headers.get === "function") {
        return headers.get(key);
      } else {
        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
      }
    }
    function buildHeadersFromArray(headers) {
      const clone = headers.slice();
      const entries = [];
      for (let index = 0; index < clone.length; index += 2) {
        entries.push([clone[index], clone[index + 1]]);
      }
      return Object.fromEntries(entries);
    }
    function matchHeaders(mockDispatch2, headers) {
      if (typeof mockDispatch2.headers === "function") {
        if (Array.isArray(headers)) {
          headers = buildHeadersFromArray(headers);
        }
        return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
      }
      if (typeof mockDispatch2.headers === "undefined") {
        return true;
      }
      if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
        return false;
      }
      for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
        const headerValue = getHeaderByName(headers, matchHeaderName);
        if (!matchValue(matchHeaderValue, headerValue)) {
          return false;
        }
      }
      return true;
    }
    function safeUrl(path3) {
      if (typeof path3 !== "string") {
        return path3;
      }
      const pathSegments = path3.split("?");
      if (pathSegments.length !== 2) {
        return path3;
      }
      const qp = new URLSearchParams(pathSegments.pop());
      qp.sort();
      return [...pathSegments, qp.toString()].join("?");
    }
    function matchKey(mockDispatch2, { path: path3, method, body, headers }) {
      const pathMatch = matchValue(mockDispatch2.path, path3);
      const methodMatch = matchValue(mockDispatch2.method, method);
      const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
      const headersMatch = matchHeaders(mockDispatch2, headers);
      return pathMatch && methodMatch && bodyMatch && headersMatch;
    }
    function getResponseData(data) {
      if (Buffer.isBuffer(data)) {
        return data;
      } else if (typeof data === "object") {
        return JSON.stringify(data);
      } else {
        return data.toString();
      }
    }
    function getMockDispatch(mockDispatches, key) {
      const basePath = key.query ? buildURL(key.path, key.query) : key.path;
      const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
      let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path3 }) => matchValue(safeUrl(path3), resolvedPath));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
      }
      return matchedMockDispatches[0];
    }
    function addMockDispatch(mockDispatches, key, data) {
      const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
      const replyData = typeof data === "function" ? { callback: data } : { ...data };
      const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
      mockDispatches.push(newMockDispatch);
      return newMockDispatch;
    }
    function deleteMockDispatch(mockDispatches, key) {
      const index = mockDispatches.findIndex((dispatch) => {
        if (!dispatch.consumed) {
          return false;
        }
        return matchKey(dispatch, key);
      });
      if (index !== -1) {
        mockDispatches.splice(index, 1);
      }
    }
    function buildKey(opts) {
      const { path: path3, method, body, headers, query } = opts;
      return {
        path: path3,
        method,
        body,
        headers,
        query
      };
    }
    function generateKeyValues(data) {
      return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
        ...keyValuePairs,
        Buffer.from(`${key}`),
        Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
      ], []);
    }
    function getStatusText(statusCode) {
      return STATUS_CODES[statusCode] || "unknown";
    }
    async function getResponse(body) {
      const buffers = [];
      for await (const data of body) {
        buffers.push(data);
      }
      return Buffer.concat(buffers).toString("utf8");
    }
    function mockDispatch(opts, handler) {
      const key = buildKey(opts);
      const mockDispatch2 = getMockDispatch(this[kDispatches], key);
      mockDispatch2.timesInvoked++;
      if (mockDispatch2.data.callback) {
        mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
      }
      const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch2;
      const { timesInvoked, times } = mockDispatch2;
      mockDispatch2.consumed = !persist && timesInvoked >= times;
      mockDispatch2.pending = timesInvoked < times;
      if (error !== null) {
        deleteMockDispatch(this[kDispatches], key);
        handler.onError(error);
        return true;
      }
      if (typeof delay === "number" && delay > 0) {
        setTimeout(() => {
          handleReply(this[kDispatches]);
        }, delay);
      } else {
        handleReply(this[kDispatches]);
      }
      function handleReply(mockDispatches, _data = data) {
        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
        const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
        if (isPromise(body)) {
          body.then((newData) => handleReply(mockDispatches, newData));
          return;
        }
        const responseData = getResponseData(body);
        const responseHeaders = generateKeyValues(headers);
        const responseTrailers = generateKeyValues(trailers);
        handler.abort = nop;
        handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
        handler.onData(Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        deleteMockDispatch(mockDispatches, key);
      }
      function resume() {
      }
      return true;
    }
    function buildMockDispatch() {
      const agent = this[kMockAgent];
      const origin = this[kOrigin];
      const originalDispatch = this[kOriginalDispatch];
      return function dispatch(opts, handler) {
        if (agent.isMockActive) {
          try {
            mockDispatch.call(this, opts, handler);
          } catch (error) {
            if (error instanceof MockNotMatchedError) {
              const netConnect = agent[kGetNetConnect]();
              if (netConnect === false) {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
              }
              if (checkNetConnect(netConnect, origin)) {
                originalDispatch.call(this, opts, handler);
              } else {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
              }
            } else {
              throw error;
            }
          }
        } else {
          originalDispatch.call(this, opts, handler);
        }
      };
    }
    function checkNetConnect(netConnect, origin) {
      const url = new URL(origin);
      if (netConnect === true) {
        return true;
      } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
        return true;
      }
      return false;
    }
    function buildMockOptions(opts) {
      if (opts) {
        const { agent, ...mockOptions } = opts;
        return mockOptions;
      }
    }
    module2.exports = {
      getResponseData,
      getMockDispatch,
      addMockDispatch,
      deleteMockDispatch,
      buildKey,
      generateKeyValues,
      matchValue,
      getResponse,
      getStatusText,
      mockDispatch,
      buildMockDispatch,
      checkNetConnect,
      buildMockOptions,
      getHeaderByName
    };
  }
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({
  "node_modules/undici/lib/mock/mock-interceptor.js"(exports2, module2) {
    "use strict";
    var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kDispatchKey,
      kDefaultHeaders,
      kDefaultTrailers,
      kContentLength,
      kMockDispatch
    } = require_mock_symbols();
    var { InvalidArgumentError } = require_errors();
    var { buildURL } = require_util();
    var MockScope = class {
      constructor(mockDispatch) {
        this[kMockDispatch] = mockDispatch;
      }
      /**
       * Delay a reply by a set amount in ms.
       */
      delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
          throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
        }
        this[kMockDispatch].delay = waitInMs;
        return this;
      }
      /**
       * For a defined reply, never mark as consumed.
       */
      persist() {
        this[kMockDispatch].persist = true;
        return this;
      }
      /**
       * Allow one to define a reply for a set amount of matching requests.
       */
      times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
          throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
        }
        this[kMockDispatch].times = repeatTimes;
        return this;
      }
    };
    var MockInterceptor = class {
      constructor(opts, mockDispatches) {
        if (typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object");
        }
        if (typeof opts.path === "undefined") {
          throw new InvalidArgumentError("opts.path must be defined");
        }
        if (typeof opts.method === "undefined") {
          opts.method = "GET";
        }
        if (typeof opts.path === "string") {
          if (opts.query) {
            opts.path = buildURL(opts.path, opts.query);
          } else {
            const parsedURL = new URL(opts.path, "data://");
            opts.path = parsedURL.pathname + parsedURL.search;
          }
        }
        if (typeof opts.method === "string") {
          opts.method = opts.method.toUpperCase();
        }
        this[kDispatchKey] = buildKey(opts);
        this[kDispatches] = mockDispatches;
        this[kDefaultHeaders] = {};
        this[kDefaultTrailers] = {};
        this[kContentLength] = false;
      }
      createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = getResponseData(data);
        const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
        const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
        const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
        return { statusCode, data, headers, trailers };
      }
      validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") {
          throw new InvalidArgumentError("statusCode must be defined");
        }
        if (typeof data === "undefined") {
          throw new InvalidArgumentError("data must be defined");
        }
        if (typeof responseOptions !== "object") {
          throw new InvalidArgumentError("responseOptions must be an object");
        }
      }
      /**
       * Mock an undici request with a defined reply.
       */
      reply(replyData) {
        if (typeof replyData === "function") {
          const wrappedDefaultsCallback = (opts) => {
            const resolvedData = replyData(opts);
            if (typeof resolvedData !== "object") {
              throw new InvalidArgumentError("reply options callback must return an object");
            }
            const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
            this.validateReplyParameters(statusCode2, data2, responseOptions2);
            return {
              ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
            };
          };
          const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
          return new MockScope(newMockDispatch2);
        }
        const [statusCode, data = "", responseOptions = {}] = [...arguments];
        this.validateReplyParameters(statusCode, data, responseOptions);
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
        return new MockScope(newMockDispatch);
      }
      /**
       * Mock an undici request with a defined error.
       */
      replyWithError(error) {
        if (typeof error === "undefined") {
          throw new InvalidArgumentError("error must be defined");
        }
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
        return new MockScope(newMockDispatch);
      }
      /**
       * Set default reply headers on the interceptor for subsequent replies
       */
      defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") {
          throw new InvalidArgumentError("headers must be defined");
        }
        this[kDefaultHeaders] = headers;
        return this;
      }
      /**
       * Set default reply trailers on the interceptor for subsequent replies
       */
      defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") {
          throw new InvalidArgumentError("trailers must be defined");
        }
        this[kDefaultTrailers] = trailers;
        return this;
      }
      /**
       * Set reply content length header for replies on the interceptor
       */
      replyContentLength() {
        this[kContentLength] = true;
        return this;
      }
    };
    module2.exports.MockInterceptor = MockInterceptor;
    module2.exports.MockScope = MockScope;
  }
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({
  "node_modules/undici/lib/mock/mock-client.js"(exports2, module2) {
    "use strict";
    var { promisify } = require("util");
    var Client = require_client();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockClient = class extends Client {
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module2.exports = MockClient;
  }
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({
  "node_modules/undici/lib/mock/mock-pool.js"(exports2, module2) {
    "use strict";
    var { promisify } = require("util");
    var Pool = require_pool();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockPool = class extends Pool {
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module2.exports = MockPool;
  }
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({
  "node_modules/undici/lib/mock/pluralizer.js"(exports2, module2) {
    "use strict";
    var singulars = {
      pronoun: "it",
      is: "is",
      was: "was",
      this: "this"
    };
    var plurals = {
      pronoun: "they",
      is: "are",
      was: "were",
      this: "these"
    };
    module2.exports = class Pluralizer {
      constructor(singular, plural) {
        this.singular = singular;
        this.plural = plural;
      }
      pluralize(count) {
        const one = count === 1;
        const keys = one ? singulars : plurals;
        const noun = one ? this.singular : this.plural;
        return { ...keys, count, noun };
      }
    };
  }
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({
  "node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports2, module2) {
    "use strict";
    var { Transform } = require("stream");
    var { Console } = require("console");
    module2.exports = class PendingInterceptorsFormatter {
      constructor({ disableColors } = {}) {
        this.transform = new Transform({
          transform(chunk, _enc, cb) {
            cb(null, chunk);
          }
        });
        this.logger = new Console({
          stdout: this.transform,
          inspectOptions: {
            colors: !disableColors && !process.env.CI
          }
        });
      }
      format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(
          ({ method, path: path3, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
            Method: method,
            Origin: origin,
            Path: path3,
            "Status code": statusCode,
            Persistent: persist ? "\u2705" : "\u274C",
            Invocations: timesInvoked,
            Remaining: persist ? Infinity : times - timesInvoked
          })
        );
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
      }
    };
  }
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({
  "node_modules/undici/lib/mock/mock-agent.js"(exports2, module2) {
    "use strict";
    var { kClients } = require_symbols();
    var Agent = require_agent();
    var {
      kAgent,
      kMockAgentSet,
      kMockAgentGet,
      kDispatches,
      kIsMockActive,
      kNetConnect,
      kGetNetConnect,
      kOptions,
      kFactory
    } = require_mock_symbols();
    var MockClient = require_mock_client();
    var MockPool = require_mock_pool();
    var { matchValue, buildMockOptions } = require_mock_utils();
    var { InvalidArgumentError, UndiciError } = require_errors();
    var Dispatcher = require_dispatcher();
    var Pluralizer = require_pluralizer();
    var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
    var FakeWeakRef = class {
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value;
      }
    };
    var MockAgent = class extends Dispatcher {
      constructor(opts) {
        super(opts);
        this[kNetConnect] = true;
        this[kIsMockActive] = true;
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        const agent = opts && opts.agent ? opts.agent : new Agent(opts);
        this[kAgent] = agent;
        this[kClients] = agent[kClients];
        this[kOptions] = buildMockOptions(opts);
      }
      get(origin) {
        let dispatcher = this[kMockAgentGet](origin);
        if (!dispatcher) {
          dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
      }
      dispatch(opts, handler) {
        this.get(opts.origin);
        return this[kAgent].dispatch(opts, handler);
      }
      async close() {
        await this[kAgent].close();
        this[kClients].clear();
      }
      deactivate() {
        this[kIsMockActive] = false;
      }
      activate() {
        this[kIsMockActive] = true;
      }
      enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
          if (Array.isArray(this[kNetConnect])) {
            this[kNetConnect].push(matcher);
          } else {
            this[kNetConnect] = [matcher];
          }
        } else if (typeof matcher === "undefined") {
          this[kNetConnect] = true;
        } else {
          throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
        }
      }
      disableNetConnect() {
        this[kNetConnect] = false;
      }
      // This is required to bypass issues caused by using global symbols - see:
      // https://github.com/nodejs/undici/issues/1447
      get isMockActive() {
        return this[kIsMockActive];
      }
      [kMockAgentSet](origin, dispatcher) {
        this[kClients].set(origin, new FakeWeakRef(dispatcher));
      }
      [kFactory](origin) {
        const mockOptions = Object.assign({ agent: this }, this[kOptions]);
        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
      }
      [kMockAgentGet](origin) {
        const ref = this[kClients].get(origin);
        if (ref) {
          return ref.deref();
        }
        if (typeof origin !== "string") {
          const dispatcher = this[kFactory]("http://localhost:9999");
          this[kMockAgentSet](origin, dispatcher);
          return dispatcher;
        }
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
          const nonExplicitDispatcher = nonExplicitRef.deref();
          if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
            const dispatcher = this[kFactory](origin);
            this[kMockAgentSet](origin, dispatcher);
            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
            return dispatcher;
          }
        }
      }
      [kGetNetConnect]() {
        return this[kNetConnect];
      }
      pendingInterceptors() {
        const mockAgentClients = this[kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
      }
      assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
        const pending = this.pendingInterceptors();
        if (pending.length === 0) {
          return;
        }
        const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
        throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
      }
    };
    module2.exports = MockAgent;
  }
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({
  "node_modules/undici/lib/proxy-agent.js"(exports2, module2) {
    "use strict";
    var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
    var { URL: URL2 } = require("url");
    var Agent = require_agent();
    var Pool = require_pool();
    var DispatcherBase = require_dispatcher_base();
    var { InvalidArgumentError, RequestAbortedError } = require_errors();
    var buildConnector = require_connect();
    var kAgent = Symbol("proxy agent");
    var kClient = Symbol("proxy client");
    var kProxyHeaders = Symbol("proxy headers");
    var kRequestTls = Symbol("request tls settings");
    var kProxyTls = Symbol("proxy tls settings");
    var kConnectEndpoint = Symbol("connect endpoint function");
    function defaultProtocolPort(protocol) {
      return protocol === "https:" ? 443 : 80;
    }
    function buildProxyOptions(opts) {
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
      };
    }
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    var ProxyAgent = class extends DispatcherBase {
      constructor(opts) {
        super(opts);
        this[kProxy] = buildProxyOptions(opts);
        this[kAgent] = new Agent(opts);
        this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") {
          opts = { uri: opts };
        }
        if (!opts || !opts.uri) {
          throw new InvalidArgumentError("Proxy opts.uri is mandatory");
        }
        const { clientFactory = defaultFactory } = opts;
        if (typeof clientFactory !== "function") {
          throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        }
        this[kRequestTls] = opts.requestTls;
        this[kProxyTls] = opts.proxyTls;
        this[kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new URL2(opts.uri);
        const { origin, port, host, username, password } = resolvedUrl;
        if (opts.auth && opts.token) {
          throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        } else if (opts.auth) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        } else if (opts.token) {
          this[kProxyHeaders]["proxy-authorization"] = opts.token;
        } else if (username && password) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        }
        const connect = buildConnector({ ...opts.proxyTls });
        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
        this[kClient] = clientFactory(resolvedUrl, { connect });
        this[kAgent] = new Agent({
          ...opts,
          connect: async (opts2, callback) => {
            let requestedHost = opts2.host;
            if (!opts2.port) {
              requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
            }
            try {
              const { socket, statusCode } = await this[kClient].connect({
                origin,
                port,
                path: requestedHost,
                signal: opts2.signal,
                headers: {
                  ...this[kProxyHeaders],
                  host
                }
              });
              if (statusCode !== 200) {
                socket.on("error", () => {
                }).destroy();
                callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
              }
              if (opts2.protocol !== "https:") {
                callback(null, socket);
                return;
              }
              let servername;
              if (this[kRequestTls]) {
                servername = this[kRequestTls].servername;
              } else {
                servername = opts2.servername;
              }
              this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
            } catch (err) {
              callback(err);
            }
          }
        });
      }
      dispatch(opts, handler) {
        const { host } = new URL2(opts.origin);
        const headers = buildHeaders(opts.headers);
        throwIfProxyAuthIsSent(headers);
        return this[kAgent].dispatch(
          {
            ...opts,
            headers: {
              ...headers,
              host
            }
          },
          handler
        );
      }
      async [kClose]() {
        await this[kAgent].close();
        await this[kClient].close();
      }
      async [kDestroy]() {
        await this[kAgent].destroy();
        await this[kClient].destroy();
      }
    };
    function buildHeaders(headers) {
      if (Array.isArray(headers)) {
        const headersPair = {};
        for (let i = 0; i < headers.length; i += 2) {
          headersPair[headers[i]] = headers[i + 1];
        }
        return headersPair;
      }
      return headers;
    }
    function throwIfProxyAuthIsSent(headers) {
      const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
      if (existProxyAuth) {
        throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
      }
    }
    module2.exports = ProxyAgent;
  }
});

// node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({
  "node_modules/undici/lib/handler/RetryHandler.js"(exports2, module2) {
    var assert = require("assert");
    var { kRetryHandlerDefaultRetry } = require_symbols();
    var { RequestRetryError } = require_errors();
    var { isDisturbed, parseHeaders, parseRangeHeader } = require_util();
    function calculateRetryAfterHeader(retryAfter) {
      const current = Date.now();
      const diff = new Date(retryAfter).getTime() - current;
      return diff;
    }
    var RetryHandler = class _RetryHandler {
      constructor(opts, handlers) {
        const { retryOptions, ...dispatchOpts } = opts;
        const {
          // Retry scoped
          retry: retryFn,
          maxRetries,
          maxTimeout,
          minTimeout,
          timeoutFactor,
          // Response scoped
          methods,
          errorCodes,
          retryAfter,
          statusCodes
        } = retryOptions ?? {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
          retry: retryFn ?? _RetryHandler[kRetryHandlerDefaultRetry],
          retryAfter: retryAfter ?? true,
          maxTimeout: maxTimeout ?? 30 * 1e3,
          // 30s,
          timeout: minTimeout ?? 500,
          // .5s
          timeoutFactor: timeoutFactor ?? 2,
          maxRetries: maxRetries ?? 5,
          // What errors we should retry
          methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
          // Indicates which errors to retry
          statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
          // List of errors to retry
          errorCodes: errorCodes ?? [
            "ECONNRESET",
            "ECONNREFUSED",
            "ENOTFOUND",
            "ENETDOWN",
            "ENETUNREACH",
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "EPIPE"
          ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        this.handler.onConnect((reason) => {
          this.aborted = true;
          if (this.abort) {
            this.abort(reason);
          } else {
            this.reason = reason;
          }
        });
      }
      onRequestSent() {
        if (this.handler.onRequestSent) {
          this.handler.onRequestSent();
        }
      }
      onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) {
          this.handler.onUpgrade(statusCode, headers, socket);
        }
      }
      onConnect(abort) {
        if (this.aborted) {
          abort(this.reason);
        } else {
          this.abort = abort;
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
      }
      static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
        const { statusCode, code, headers } = err;
        const { method, retryOptions } = opts;
        const {
          maxRetries,
          timeout,
          maxTimeout,
          timeoutFactor,
          statusCodes,
          errorCodes,
          methods
        } = retryOptions;
        let { counter, currentTimeout } = state;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
          cb(err);
          return;
        }
        if (Array.isArray(methods) && !methods.includes(method)) {
          cb(err);
          return;
        }
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
          cb(err);
          return;
        }
        if (counter > maxRetries) {
          cb(err);
          return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
          retryAfterHeader = Number(retryAfterHeader);
          retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
        state.currentTimeout = retryTimeout;
        setTimeout(() => cb(null), retryTimeout);
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const headers = parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
          this.abort(
            new RequestRetryError("Request failed", statusCode, {
              headers,
              count: this.retryCount
            })
          );
          return false;
        }
        if (this.resume != null) {
          this.resume = null;
          if (statusCode !== 206) {
            return true;
          }
          const contentRange = parseRangeHeader(headers["content-range"]);
          if (!contentRange) {
            this.abort(
              new RequestRetryError("Content-Range mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          if (this.etag != null && this.etag !== headers.etag) {
            this.abort(
              new RequestRetryError("ETag mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          const { start, size, end = size } = contentRange;
          assert(this.start === start, "content-range mismatch");
          assert(this.end == null || this.end === end, "content-range mismatch");
          this.resume = resume;
          return true;
        }
        if (this.end == null) {
          if (statusCode === 206) {
            const range = parseRangeHeader(headers["content-range"]);
            if (range == null) {
              return this.handler.onHeaders(
                statusCode,
                rawHeaders,
                resume,
                statusMessage
              );
            }
            const { start, size, end = size } = range;
            assert(
              start != null && Number.isFinite(start) && this.start !== start,
              "content-range mismatch"
            );
            assert(Number.isFinite(start));
            assert(
              end != null && Number.isFinite(end) && this.end !== end,
              "invalid content-length"
            );
            this.start = start;
            this.end = end;
          }
          if (this.end == null) {
            const contentLength = headers["content-length"];
            this.end = contentLength != null ? Number(contentLength) : null;
          }
          assert(Number.isFinite(this.start));
          assert(
            this.end == null || Number.isFinite(this.end),
            "invalid content-length"
          );
          this.resume = resume;
          this.etag = headers.etag != null ? headers.etag : null;
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          );
        }
        const err = new RequestRetryError("Request failed", statusCode, {
          headers,
          count: this.retryCount
        });
        this.abort(err);
        return false;
      }
      onData(chunk) {
        this.start += chunk.length;
        return this.handler.onData(chunk);
      }
      onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
      }
      onError(err) {
        if (this.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onError(err);
        }
        this.retryOpts.retry(
          err,
          {
            state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
            opts: { retryOptions: this.retryOpts, ...this.opts }
          },
          onRetry.bind(this)
        );
        function onRetry(err2) {
          if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
            return this.handler.onError(err2);
          }
          if (this.start !== 0) {
            this.opts = {
              ...this.opts,
              headers: {
                ...this.opts.headers,
                range: `bytes=${this.start}-${this.end ?? ""}`
              }
            };
          }
          try {
            this.dispatch(this.opts, this);
          } catch (err3) {
            this.handler.onError(err3);
          }
        }
      }
    };
    module2.exports = RetryHandler;
  }
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS({
  "node_modules/undici/lib/global.js"(exports2, module2) {
    "use strict";
    var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
    var { InvalidArgumentError } = require_errors();
    var Agent = require_agent();
    if (getGlobalDispatcher() === void 0) {
      setGlobalDispatcher(new Agent());
    }
    function setGlobalDispatcher(agent) {
      if (!agent || typeof agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument agent must implement Agent");
      }
      Object.defineProperty(globalThis, globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    function getGlobalDispatcher() {
      return globalThis[globalDispatcher];
    }
    module2.exports = {
      setGlobalDispatcher,
      getGlobalDispatcher
    };
  }
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({
  "node_modules/undici/lib/handler/DecoratorHandler.js"(exports2, module2) {
    "use strict";
    module2.exports = class DecoratorHandler {
      constructor(handler) {
        this.handler = handler;
      }
      onConnect(...args) {
        return this.handler.onConnect(...args);
      }
      onError(...args) {
        return this.handler.onError(...args);
      }
      onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
      }
      onHeaders(...args) {
        return this.handler.onHeaders(...args);
      }
      onData(...args) {
        return this.handler.onData(...args);
      }
      onComplete(...args) {
        return this.handler.onComplete(...args);
      }
      onBodySent(...args) {
        return this.handler.onBodySent(...args);
      }
    };
  }
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({
  "node_modules/undici/lib/fetch/headers.js"(exports2, module2) {
    "use strict";
    var { kHeadersList, kConstruct } = require_symbols();
    var { kGuard } = require_symbols2();
    var { kEnumerableProperty } = require_util();
    var {
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue
    } = require_util2();
    var { webidl } = require_webidl();
    var assert = require("assert");
    var kHeadersMap = Symbol("headers map");
    var kHeadersSortedMap = Symbol("headers map sorted");
    function isHTTPWhiteSpaceCharCode(code) {
      return code === 10 || code === 13 || code === 9 || code === 32;
    }
    function headerValueNormalize(potentialValue) {
      let i = 0;
      let j = potentialValue.length;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;
      return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
    }
    function fill(headers, object) {
      if (Array.isArray(object)) {
        for (let i = 0; i < object.length; ++i) {
          const header = object[i];
          if (header.length !== 2) {
            throw webidl.errors.exception({
              header: "Headers constructor",
              message: `expected name/value pair to be length 2, found ${header.length}.`
            });
          }
          appendHeader(headers, header[0], header[1]);
        }
      } else if (typeof object === "object" && object !== null) {
        const keys = Object.keys(object);
        for (let i = 0; i < keys.length; ++i) {
          appendHeader(headers, keys[i], object[keys[i]]);
        }
      } else {
        throw webidl.errors.conversionFailed({
          prefix: "Headers constructor",
          argument: "Argument 1",
          types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
        });
      }
    }
    function appendHeader(headers, name, value) {
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value,
          type: "header value"
        });
      }
      if (headers[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (headers[kGuard] === "request-no-cors") {
      }
      return headers[kHeadersList].append(name, value);
    }
    var HeadersList = class _HeadersList {
      /** @type {[string, string][]|null} */
      cookies = null;
      constructor(init) {
        if (init instanceof _HeadersList) {
          this[kHeadersMap] = new Map(init[kHeadersMap]);
          this[kHeadersSortedMap] = init[kHeadersSortedMap];
          this.cookies = init.cookies === null ? null : [...init.cookies];
        } else {
          this[kHeadersMap] = new Map(init);
          this[kHeadersSortedMap] = null;
        }
      }
      // https://fetch.spec.whatwg.org/#header-list-contains
      contains(name) {
        name = name.toLowerCase();
        return this[kHeadersMap].has(name);
      }
      clear() {
        this[kHeadersMap].clear();
        this[kHeadersSortedMap] = null;
        this.cookies = null;
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-append
      append(name, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        const exists = this[kHeadersMap].get(lowercaseName);
        if (exists) {
          const delimiter = lowercaseName === "cookie" ? "; " : ", ";
          this[kHeadersMap].set(lowercaseName, {
            name: exists.name,
            value: `${exists.value}${delimiter}${value}`
          });
        } else {
          this[kHeadersMap].set(lowercaseName, { name, value });
        }
        if (lowercaseName === "set-cookie") {
          this.cookies ??= [];
          this.cookies.push(value);
        }
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-set
      set(name, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        if (lowercaseName === "set-cookie") {
          this.cookies = [value];
        }
        this[kHeadersMap].set(lowercaseName, { name, value });
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-delete
      delete(name) {
        this[kHeadersSortedMap] = null;
        name = name.toLowerCase();
        if (name === "set-cookie") {
          this.cookies = null;
        }
        this[kHeadersMap].delete(name);
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-get
      get(name) {
        const value = this[kHeadersMap].get(name.toLowerCase());
        return value === void 0 ? null : value.value;
      }
      *[Symbol.iterator]() {
        for (const [name, { value }] of this[kHeadersMap]) {
          yield [name, value];
        }
      }
      get entries() {
        const headers = {};
        if (this[kHeadersMap].size) {
          for (const { name, value } of this[kHeadersMap].values()) {
            headers[name] = value;
          }
        }
        return headers;
      }
    };
    var Headers = class _Headers {
      constructor(init = void 0) {
        if (init === kConstruct) {
          return;
        }
        this[kHeadersList] = new HeadersList();
        this[kGuard] = "none";
        if (init !== void 0) {
          init = webidl.converters.HeadersInit(init);
          fill(this, init);
        }
      }
      // https://fetch.spec.whatwg.org/#dom-headers-append
      append(name, value) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
        name = webidl.converters.ByteString(name);
        value = webidl.converters.ByteString(value);
        return appendHeader(this, name, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-delete
      delete(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name,
            type: "header name"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        if (!this[kHeadersList].contains(name)) {
          return;
        }
        this[kHeadersList].delete(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-get
      get(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].get(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-has
      has(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].contains(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-set
      set(name, value) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
        name = webidl.converters.ByteString(name);
        value = webidl.converters.ByteString(value);
        value = headerValueNormalize(value);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name,
            type: "header name"
          });
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value,
            type: "header value"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        this[kHeadersList].set(name, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
      getSetCookie() {
        webidl.brandCheck(this, _Headers);
        const list = this[kHeadersList].cookies;
        if (list) {
          return [...list];
        }
        return [];
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
      get [kHeadersSortedMap]() {
        if (this[kHeadersList][kHeadersSortedMap]) {
          return this[kHeadersList][kHeadersSortedMap];
        }
        const headers = [];
        const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
        const cookies = this[kHeadersList].cookies;
        for (let i = 0; i < names.length; ++i) {
          const [name, value] = names[i];
          if (name === "set-cookie") {
            for (let j = 0; j < cookies.length; ++j) {
              headers.push([name, cookies[j]]);
            }
          } else {
            assert(value !== null);
            headers.push([name, value]);
          }
        }
        this[kHeadersList][kHeadersSortedMap] = headers;
        return headers;
      }
      keys() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "value"
        );
      }
      entries() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key+value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key+value"
        );
      }
      /**
       * @param {(value: string, key: string, self: Headers) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this]);
        }
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        webidl.brandCheck(this, _Headers);
        return this[kHeadersList];
      }
    };
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    Object.defineProperties(Headers.prototype, {
      append: kEnumerableProperty,
      delete: kEnumerableProperty,
      get: kEnumerableProperty,
      has: kEnumerableProperty,
      set: kEnumerableProperty,
      getSetCookie: kEnumerableProperty,
      keys: kEnumerableProperty,
      values: kEnumerableProperty,
      entries: kEnumerableProperty,
      forEach: kEnumerableProperty,
      [Symbol.iterator]: { enumerable: false },
      [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
      }
    });
    webidl.converters.HeadersInit = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (V[Symbol.iterator]) {
          return webidl.converters["sequence<sequence<ByteString>>"](V);
        }
        return webidl.converters["record<ByteString, ByteString>"](V);
      }
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    };
    module2.exports = {
      fill,
      Headers,
      HeadersList
    };
  }
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({
  "node_modules/undici/lib/fetch/response.js"(exports2, module2) {
    "use strict";
    var { Headers, HeadersList, fill } = require_headers();
    var { extractBody, cloneBody, mixinBody } = require_body();
    var util = require_util();
    var { kEnumerableProperty } = util;
    var {
      isValidReasonPhrase,
      isCancelled,
      isAborted,
      isBlobLike,
      serializeJavascriptValueToJSONString,
      isErrorLike,
      isomorphicEncode
    } = require_util2();
    var {
      redirectStatusSet,
      nullBodyStatus,
      DOMException: DOMException2
    } = require_constants2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { FormData: FormData2 } = require_formdata();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = require("assert");
    var { types } = require("util");
    var ReadableStream2 = globalThis.ReadableStream || require("stream/web").ReadableStream;
    var textEncoder = new TextEncoder("utf-8");
    var Response2 = class _Response {
      // Creates network error Response.
      static error() {
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kState] = makeNetworkError();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response-json
      static json(data, init = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
        if (init !== null) {
          init = webidl.converters.ResponseInit(init);
        }
        const bytes = textEncoder.encode(
          serializeJavascriptValueToJSONString(data)
        );
        const body = extractBody(bytes);
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "response";
        responseObject[kHeaders][kRealm] = relevantRealm;
        initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
        return responseObject;
      }
      // Creates a redirect Response that redirects to url with status status.
      static redirect(url, status = 302) {
        const relevantRealm = { settingsObject: {} };
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
        url = webidl.converters.USVString(url);
        status = webidl.converters["unsigned short"](status);
        let parsedURL;
        try {
          parsedURL = new URL(url, getGlobalOrigin());
        } catch (err) {
          throw Object.assign(new TypeError("Failed to parse URL from " + url), {
            cause: err
          });
        }
        if (!redirectStatusSet.has(status)) {
          throw new RangeError("Invalid status code " + status);
        }
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        responseObject[kState].status = status;
        const value = isomorphicEncode(URLSerializer(parsedURL));
        responseObject[kState].headersList.append("location", value);
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response
      constructor(body = null, init = {}) {
        if (body !== null) {
          body = webidl.converters.BodyInit(body);
        }
        init = webidl.converters.ResponseInit(init);
        this[kRealm] = { settingsObject: {} };
        this[kState] = makeResponse({});
        this[kHeaders] = new Headers(kConstruct);
        this[kHeaders][kGuard] = "response";
        this[kHeaders][kHeadersList] = this[kState].headersList;
        this[kHeaders][kRealm] = this[kRealm];
        let bodyWithType = null;
        if (body != null) {
          const [extractedBody, type] = extractBody(body);
          bodyWithType = { body: extractedBody, type };
        }
        initializeResponse(this, init, bodyWithType);
      }
      // Returns response’s type, e.g., "cors".
      get type() {
        webidl.brandCheck(this, _Response);
        return this[kState].type;
      }
      // Returns response’s URL, if it has one; otherwise the empty string.
      get url() {
        webidl.brandCheck(this, _Response);
        const urlList = this[kState].urlList;
        const url = urlList[urlList.length - 1] ?? null;
        if (url === null) {
          return "";
        }
        return URLSerializer(url, true);
      }
      // Returns whether response was obtained through a redirect.
      get redirected() {
        webidl.brandCheck(this, _Response);
        return this[kState].urlList.length > 1;
      }
      // Returns response’s status.
      get status() {
        webidl.brandCheck(this, _Response);
        return this[kState].status;
      }
      // Returns whether response’s status is an ok status.
      get ok() {
        webidl.brandCheck(this, _Response);
        return this[kState].status >= 200 && this[kState].status <= 299;
      }
      // Returns response’s status message.
      get statusText() {
        webidl.brandCheck(this, _Response);
        return this[kState].statusText;
      }
      // Returns response’s headers as Headers.
      get headers() {
        webidl.brandCheck(this, _Response);
        return this[kHeaders];
      }
      get body() {
        webidl.brandCheck(this, _Response);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Response);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      // Returns a clone of response.
      clone() {
        webidl.brandCheck(this, _Response);
        if (this.bodyUsed || this.body && this.body.locked) {
          throw webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
          });
        }
        const clonedResponse = cloneResponse(this[kState]);
        const clonedResponseObject = new _Response();
        clonedResponseObject[kState] = clonedResponse;
        clonedResponseObject[kRealm] = this[kRealm];
        clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        return clonedResponseObject;
      }
    };
    mixinBody(Response2);
    Object.defineProperties(Response2.prototype, {
      type: kEnumerableProperty,
      url: kEnumerableProperty,
      status: kEnumerableProperty,
      ok: kEnumerableProperty,
      redirected: kEnumerableProperty,
      statusText: kEnumerableProperty,
      headers: kEnumerableProperty,
      clone: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
      }
    });
    Object.defineProperties(Response2, {
      json: kEnumerableProperty,
      redirect: kEnumerableProperty,
      error: kEnumerableProperty
    });
    function cloneResponse(response) {
      if (response.internalResponse) {
        return filterResponse(
          cloneResponse(response.internalResponse),
          response.type
        );
      }
      const newResponse = makeResponse({ ...response, body: null });
      if (response.body != null) {
        newResponse.body = cloneBody(response.body);
      }
      return newResponse;
    }
    function makeResponse(init) {
      return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init,
        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList(),
        urlList: init.urlList ? [...init.urlList] : []
      };
    }
    function makeNetworkError(reason) {
      const isError = isErrorLike(reason);
      return makeResponse({
        type: "error",
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
      });
    }
    function makeFilteredResponse(response, state) {
      state = {
        internalResponse: response,
        ...state
      };
      return new Proxy(response, {
        get(target, p) {
          return p in state ? state[p] : target[p];
        },
        set(target, p, value) {
          assert(!(p in state));
          target[p] = value;
          return true;
        }
      });
    }
    function filterResponse(response, type) {
      if (type === "basic") {
        return makeFilteredResponse(response, {
          type: "basic",
          headersList: response.headersList
        });
      } else if (type === "cors") {
        return makeFilteredResponse(response, {
          type: "cors",
          headersList: response.headersList
        });
      } else if (type === "opaque") {
        return makeFilteredResponse(response, {
          type: "opaque",
          urlList: Object.freeze([]),
          status: 0,
          statusText: "",
          body: null
        });
      } else if (type === "opaqueredirect") {
        return makeFilteredResponse(response, {
          type: "opaqueredirect",
          status: 0,
          statusText: "",
          headersList: [],
          body: null
        });
      } else {
        assert(false);
      }
    }
    function makeAppropriateNetworkError(fetchParams, err = null) {
      assert(isCancelled(fetchParams));
      return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
    }
    function initializeResponse(response, init, body) {
      if (init.status !== null && (init.status < 200 || init.status > 599)) {
        throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
      }
      if ("statusText" in init && init.statusText != null) {
        if (!isValidReasonPhrase(String(init.statusText))) {
          throw new TypeError("Invalid statusText");
        }
      }
      if ("status" in init && init.status != null) {
        response[kState].status = init.status;
      }
      if ("statusText" in init && init.statusText != null) {
        response[kState].statusText = init.statusText;
      }
      if ("headers" in init && init.headers != null) {
        fill(response[kHeaders], init.headers);
      }
      if (body) {
        if (nullBodyStatus.includes(response.status)) {
          throw webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
          });
        }
        response[kState].body = body.body;
        if (body.type != null && !response[kState].headersList.contains("Content-Type")) {
          response[kState].headersList.append("content-type", body.type);
        }
      }
    }
    webidl.converters.ReadableStream = webidl.interfaceConverter(
      ReadableStream2
    );
    webidl.converters.FormData = webidl.interfaceConverter(
      FormData2
    );
    webidl.converters.URLSearchParams = webidl.interfaceConverter(
      URLSearchParams
    );
    webidl.converters.XMLHttpRequestBodyInit = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
        return webidl.converters.BufferSource(V);
      }
      if (util.isFormDataLike(V)) {
        return webidl.converters.FormData(V, { strict: false });
      }
      if (V instanceof URLSearchParams) {
        return webidl.converters.URLSearchParams(V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.BodyInit = function(V) {
      if (V instanceof ReadableStream2) {
        return webidl.converters.ReadableStream(V);
      }
      if (V?.[Symbol.asyncIterator]) {
        return V;
      }
      return webidl.converters.XMLHttpRequestBodyInit(V);
    };
    webidl.converters.ResponseInit = webidl.dictionaryConverter([
      {
        key: "status",
        converter: webidl.converters["unsigned short"],
        defaultValue: 200
      },
      {
        key: "statusText",
        converter: webidl.converters.ByteString,
        defaultValue: ""
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      }
    ]);
    module2.exports = {
      makeNetworkError,
      makeResponse,
      makeAppropriateNetworkError,
      filterResponse,
      Response: Response2,
      cloneResponse
    };
  }
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS({
  "node_modules/undici/lib/fetch/request.js"(exports2, module2) {
    "use strict";
    var { extractBody, mixinBody, cloneBody } = require_body();
    var { Headers, fill: fillHeaders, HeadersList } = require_headers();
    var { FinalizationRegistry } = require_dispatcher_weakref()();
    var util = require_util();
    var {
      isValidHTTPToken,
      sameOrigin,
      normalizeMethod,
      makePolicyContainer,
      normalizeMethodRecord
    } = require_util2();
    var {
      forbiddenMethodsSet,
      corsSafeListedMethodsSet,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      requestDuplex
    } = require_constants2();
    var { kEnumerableProperty } = util;
    var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = require("assert");
    var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require("events");
    var TransformStream = globalThis.TransformStream;
    var kAbortController = Symbol("abortController");
    var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
      signal.removeEventListener("abort", abort);
    });
    var Request2 = class _Request {
      // https://fetch.spec.whatwg.org/#dom-request
      constructor(input, init = {}) {
        if (input === kConstruct) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init = webidl.converters.RequestInit(init);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin(),
            get origin() {
              return this.baseUrl?.origin;
            },
            policyContainer: makePolicyContainer()
          }
        };
        let request = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError(
              "Request cannot be constructed from a URL that includes credentials: " + input
            );
          }
          request = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert(input instanceof _Request);
          request = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window2 = "client";
        if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
          window2 = request.window;
        }
        if (init.window != null) {
          throw new TypeError(`'window' option '${window2}' must be null`);
        }
        if ("window" in init) {
          window2 = "no-window";
        }
        request = makeRequest({
          // URL request’s URL.
          // undici implementation note: this is set as the first item in request's urlList in makeRequest
          // method request’s method.
          method: request.method,
          // header list A copy of request’s header list.
          // undici implementation note: headersList is cloned in makeRequest
          headersList: request.headersList,
          // unsafe-request flag Set.
          unsafeRequest: request.unsafeRequest,
          // client This’s relevant settings object.
          client: this[kRealm].settingsObject,
          // window window.
          window: window2,
          // priority request’s priority.
          priority: request.priority,
          // origin request’s origin. The propagation of the origin is only significant for navigation requests
          // being handled by a service worker. In this scenario a request can have an origin that is different
          // from the current client.
          origin: request.origin,
          // referrer request’s referrer.
          referrer: request.referrer,
          // referrer policy request’s referrer policy.
          referrerPolicy: request.referrerPolicy,
          // mode request’s mode.
          mode: request.mode,
          // credentials mode request’s credentials mode.
          credentials: request.credentials,
          // cache mode request’s cache mode.
          cache: request.cache,
          // redirect mode request’s redirect mode.
          redirect: request.redirect,
          // integrity metadata request’s integrity metadata.
          integrity: request.integrity,
          // keepalive request’s keepalive.
          keepalive: request.keepalive,
          // reload-navigation flag request’s reload-navigation flag.
          reloadNavigation: request.reloadNavigation,
          // history-navigation flag request’s history-navigation flag.
          historyNavigation: request.historyNavigation,
          // URL list A clone of request’s URL list.
          urlList: [...request.urlList]
        });
        const initHasKey = Object.keys(init).length !== 0;
        if (initHasKey) {
          if (request.mode === "navigate") {
            request.mode = "same-origin";
          }
          request.reloadNavigation = false;
          request.historyNavigation = false;
          request.origin = "client";
          request.referrer = "client";
          request.referrerPolicy = "";
          request.url = request.urlList[request.urlList.length - 1];
          request.urlList = [request.url];
        }
        if (init.referrer !== void 0) {
          const referrer = init.referrer;
          if (referrer === "") {
            request.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
              request.referrer = "client";
            } else {
              request.referrer = parsedReferrer;
            }
          }
        }
        if (init.referrerPolicy !== void 0) {
          request.referrerPolicy = init.referrerPolicy;
        }
        let mode;
        if (init.mode !== void 0) {
          mode = init.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request.mode = mode;
        }
        if (init.credentials !== void 0) {
          request.credentials = init.credentials;
        }
        if (init.cache !== void 0) {
          request.cache = init.cache;
        }
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
          throw new TypeError(
            "'only-if-cached' can be set only with 'same-origin' mode"
          );
        }
        if (init.redirect !== void 0) {
          request.redirect = init.redirect;
        }
        if (init.integrity != null) {
          request.integrity = String(init.integrity);
        }
        if (init.keepalive !== void 0) {
          request.keepalive = Boolean(init.keepalive);
        }
        if (init.method !== void 0) {
          let method = init.method;
          if (!isValidHTTPToken(method)) {
            throw new TypeError(`'${method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethodsSet.has(method.toUpperCase())) {
            throw new TypeError(`'${method}' HTTP method is unsupported.`);
          }
          method = normalizeMethodRecord[method] ?? normalizeMethod(method);
          request.method = method;
        }
        if (init.signal !== void 0) {
          signal = init.signal;
        }
        this[kState] = request;
        const ac = new AbortController();
        this[kSignal] = ac.signal;
        this[kSignal][kRealm] = this[kRealm];
        if (signal != null) {
          if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
            throw new TypeError(
              "Failed to construct 'Request': member signal is not of type AbortSignal."
            );
          }
          if (signal.aborted) {
            ac.abort(signal.reason);
          } else {
            this[kAbortController] = ac;
            const acRef = new WeakRef(ac);
            const abort = function() {
              const ac2 = acRef.deref();
              if (ac2 !== void 0) {
                ac2.abort(this.reason);
              }
            };
            try {
              if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
                setMaxListeners(100, signal);
              } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
                setMaxListeners(100, signal);
              }
            } catch {
            }
            util.addAbortListener(signal, abort);
            requestFinalizer.register(ac, { signal, abort });
          }
        }
        this[kHeaders] = new Headers(kConstruct);
        this[kHeaders][kHeadersList] = request.headersList;
        this[kHeaders][kGuard] = "request";
        this[kHeaders][kRealm] = this[kRealm];
        if (mode === "no-cors") {
          if (!corsSafeListedMethodsSet.has(request.method)) {
            throw new TypeError(
              `'${request.method} is unsupported in no-cors mode.`
            );
          }
          this[kHeaders][kGuard] = "request-no-cors";
        }
        if (initHasKey) {
          const headersList = this[kHeaders][kHeadersList];
          const headers = init.headers !== void 0 ? init.headers : new HeadersList(headersList);
          headersList.clear();
          if (headers instanceof HeadersList) {
            for (const [key, val] of headers) {
              headersList.append(key, val);
            }
            headersList.cookies = headers.cookies;
          } else {
            fillHeaders(this[kHeaders], headers);
          }
        }
        const inputBody = input instanceof _Request ? input[kState].body : null;
        if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body.");
        }
        let initBody = null;
        if (init.body != null) {
          const [extractedBody, contentType] = extractBody(
            init.body,
            request.keepalive
          );
          initBody = extractedBody;
          if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request.mode !== "same-origin" && request.mode !== "cors") {
            throw new TypeError(
              'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
            );
          }
          request.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError(
              "Cannot construct a Request with a Request object that has already been used."
            );
          }
          if (!TransformStream) {
            TransformStream = require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      // Returns request’s HTTP method, which is "GET" by default.
      get method() {
        webidl.brandCheck(this, _Request);
        return this[kState].method;
      }
      // Returns the URL of request as a string.
      get url() {
        webidl.brandCheck(this, _Request);
        return URLSerializer(this[kState].url);
      }
      // Returns a Headers object consisting of the headers associated with request.
      // Note that headers added in the network layer by the user agent will not
      // be accounted for in this object, e.g., the "Host" header.
      get headers() {
        webidl.brandCheck(this, _Request);
        return this[kHeaders];
      }
      // Returns the kind of resource requested by request, e.g., "document"
      // or "script".
      get destination() {
        webidl.brandCheck(this, _Request);
        return this[kState].destination;
      }
      // Returns the referrer of request. Its value can be a same-origin URL if
      // explicitly set in init, the empty string to indicate no referrer, and
      // "about:client" when defaulting to the global’s default. This is used
      // during fetching to determine the value of the `Referer` header of the
      // request being made.
      get referrer() {
        webidl.brandCheck(this, _Request);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      // Returns the referrer policy associated with request.
      // This is used during fetching to compute the value of the request’s
      // referrer.
      get referrerPolicy() {
        webidl.brandCheck(this, _Request);
        return this[kState].referrerPolicy;
      }
      // Returns the mode associated with request, which is a string indicating
      // whether the request will use CORS, or will be restricted to same-origin
      // URLs.
      get mode() {
        webidl.brandCheck(this, _Request);
        return this[kState].mode;
      }
      // Returns the credentials mode associated with request,
      // which is a string indicating whether credentials will be sent with the
      // request always, never, or only when sent to a same-origin URL.
      get credentials() {
        return this[kState].credentials;
      }
      // Returns the cache mode associated with request,
      // which is a string indicating how the request will
      // interact with the browser’s cache when fetching.
      get cache() {
        webidl.brandCheck(this, _Request);
        return this[kState].cache;
      }
      // Returns the redirect mode associated with request,
      // which is a string indicating how redirects for the
      // request will be handled during fetching. A request
      // will follow redirects by default.
      get redirect() {
        webidl.brandCheck(this, _Request);
        return this[kState].redirect;
      }
      // Returns request’s subresource integrity metadata, which is a
      // cryptographic hash of the resource being fetched. Its value
      // consists of multiple hashes separated by whitespace. [SRI]
      get integrity() {
        webidl.brandCheck(this, _Request);
        return this[kState].integrity;
      }
      // Returns a boolean indicating whether or not request can outlive the
      // global in which it was created.
      get keepalive() {
        webidl.brandCheck(this, _Request);
        return this[kState].keepalive;
      }
      // Returns a boolean indicating whether or not request is for a reload
      // navigation.
      get isReloadNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].reloadNavigation;
      }
      // Returns a boolean indicating whether or not request is for a history
      // navigation (a.k.a. back-foward navigation).
      get isHistoryNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].historyNavigation;
      }
      // Returns the signal associated with request, which is an AbortSignal
      // object indicating whether or not request has been aborted, and its
      // abort event handler.
      get signal() {
        webidl.brandCheck(this, _Request);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, _Request);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Request);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, _Request);
        return "half";
      }
      // Returns a clone of request.
      clone() {
        webidl.brandCheck(this, _Request);
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new _Request(kConstruct);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers(kConstruct);
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          util.addAbortListener(
            this.signal,
            () => {
              ac.abort(this.signal.reason);
            }
          );
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    };
    mixinBody(Request2);
    function makeRequest(init) {
      const request = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init,
        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()
      };
      request.url = request.urlList[0];
      return request;
    }
    function cloneRequest(request) {
      const newRequest = makeRequest({ ...request, body: null });
      if (request.body != null) {
        newRequest.body = cloneBody(request.body);
      }
      return newRequest;
    }
    Object.defineProperties(Request2.prototype, {
      method: kEnumerableProperty,
      url: kEnumerableProperty,
      headers: kEnumerableProperty,
      redirect: kEnumerableProperty,
      clone: kEnumerableProperty,
      signal: kEnumerableProperty,
      duplex: kEnumerableProperty,
      destination: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      isHistoryNavigation: kEnumerableProperty,
      isReloadNavigation: kEnumerableProperty,
      keepalive: kEnumerableProperty,
      integrity: kEnumerableProperty,
      cache: kEnumerableProperty,
      credentials: kEnumerableProperty,
      attribute: kEnumerableProperty,
      referrerPolicy: kEnumerableProperty,
      referrer: kEnumerableProperty,
      mode: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
      }
    });
    webidl.converters.Request = webidl.interfaceConverter(
      Request2
    );
    webidl.converters.RequestInfo = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (V instanceof Request2) {
        return webidl.converters.Request(V);
      }
      return webidl.converters.USVString(V);
    };
    webidl.converters.AbortSignal = webidl.interfaceConverter(
      AbortSignal
    );
    webidl.converters.RequestInit = webidl.dictionaryConverter([
      {
        key: "method",
        converter: webidl.converters.ByteString
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      },
      {
        key: "body",
        converter: webidl.nullableConverter(
          webidl.converters.BodyInit
        )
      },
      {
        key: "referrer",
        converter: webidl.converters.USVString
      },
      {
        key: "referrerPolicy",
        converter: webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: referrerPolicy
      },
      {
        key: "mode",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: requestMode
      },
      {
        key: "credentials",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: requestCredentials
      },
      {
        key: "cache",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: requestCache
      },
      {
        key: "redirect",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: requestRedirect
      },
      {
        key: "integrity",
        converter: webidl.converters.DOMString
      },
      {
        key: "keepalive",
        converter: webidl.converters.boolean
      },
      {
        key: "signal",
        converter: webidl.nullableConverter(
          (signal) => webidl.converters.AbortSignal(
            signal,
            { strict: false }
          )
        )
      },
      {
        key: "window",
        converter: webidl.converters.any
      },
      {
        key: "duplex",
        converter: webidl.converters.DOMString,
        allowedValues: requestDuplex
      }
    ]);
    module2.exports = { Request: Request2, makeRequest };
  }
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/undici/lib/fetch/index.js"(exports2, module2) {
    "use strict";
    var {
      Response: Response2,
      makeNetworkError,
      makeAppropriateNetworkError,
      filterResponse,
      makeResponse
    } = require_response();
    var { Headers } = require_headers();
    var { Request: Request2, makeRequest } = require_request2();
    var zlib = require("zlib");
    var {
      bytesMatch,
      makePolicyContainer,
      clonePolicyContainer,
      requestBadPort,
      TAOCheck,
      appendRequestOriginHeader,
      responseLocationURL,
      requestCurrentURL,
      setRequestReferrerPolicyOnRedirect,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      createOpaqueTimingInfo,
      appendFetchMetadata,
      corsCheck,
      crossOriginResourcePolicyCheck,
      determineRequestsReferrer,
      coarsenedSharedCurrentTime,
      createDeferredPromise,
      isBlobLike,
      sameOrigin,
      isCancelled,
      isAborted,
      isErrorLike,
      fullyReadBody,
      readableStreamClose,
      isomorphicEncode,
      urlIsLocal,
      urlIsHttpHttpsScheme,
      urlHasHttpsScheme
    } = require_util2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var assert = require("assert");
    var { safelyExtractBody } = require_body();
    var {
      redirectStatusSet,
      nullBodyStatus,
      safeMethodsSet,
      requestBodyHeader,
      subresourceSet,
      DOMException: DOMException2
    } = require_constants2();
    var { kHeadersList } = require_symbols();
    var EE = require("events");
    var { Readable, pipeline } = require("stream");
    var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util();
    var { dataURLProcessor, serializeAMimeType } = require_dataURL();
    var { TransformStream } = require("stream/web");
    var { getGlobalDispatcher } = require_global2();
    var { webidl } = require_webidl();
    var { STATUS_CODES } = require("http");
    var GET_OR_HEAD = ["GET", "HEAD"];
    var resolveObjectURL;
    var ReadableStream2 = globalThis.ReadableStream;
    var Fetch = class extends EE {
      constructor(dispatcher) {
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        this.setMaxListeners(21);
      }
      terminate(reason) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "terminated";
        this.connection?.destroy(reason);
        this.emit("terminated", reason);
      }
      // https://fetch.spec.whatwg.org/#fetch-controller-abort
      abort(error) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "aborted";
        if (!error) {
          error = new DOMException2("The operation was aborted.", "AbortError");
        }
        this.serializedAbortReason = error;
        this.connection?.destroy(error);
        this.emit("terminated", error);
      }
    };
    function fetch2(input, init = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
      const p = createDeferredPromise();
      let requestObject;
      try {
        requestObject = new Request2(input, init);
      } catch (e) {
        p.reject(e);
        return p.promise;
      }
      const request = requestObject[kState];
      if (requestObject.signal.aborted) {
        abortFetch(p, request, null, requestObject.signal.reason);
        return p.promise;
      }
      const globalObject = request.client.globalObject;
      if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
        request.serviceWorkers = "none";
      }
      let responseObject = null;
      const relevantRealm = null;
      let locallyAborted = false;
      let controller = null;
      addAbortListener(
        requestObject.signal,
        () => {
          locallyAborted = true;
          assert(controller != null);
          controller.abort(requestObject.signal.reason);
          abortFetch(p, request, responseObject, requestObject.signal.reason);
        }
      );
      const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
      const processResponse = (response) => {
        if (locallyAborted) {
          return Promise.resolve();
        }
        if (response.aborted) {
          abortFetch(p, request, responseObject, controller.serializedAbortReason);
          return Promise.resolve();
        }
        if (response.type === "error") {
          p.reject(
            Object.assign(new TypeError("fetch failed"), { cause: response.error })
          );
          return Promise.resolve();
        }
        responseObject = new Response2();
        responseObject[kState] = response;
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        p.resolve(responseObject);
      };
      controller = fetching({
        request,
        processResponseEndOfBody: handleFetchDone,
        processResponse,
        dispatcher: init.dispatcher ?? getGlobalDispatcher()
        // undici
      });
      return p.promise;
    }
    function finalizeAndReportTiming(response, initiatorType = "other") {
      if (response.type === "error" && response.aborted) {
        return;
      }
      if (!response.urlList?.length) {
        return;
      }
      const originalURL = response.urlList[0];
      let timingInfo = response.timingInfo;
      let cacheState = response.cacheState;
      if (!urlIsHttpHttpsScheme(originalURL)) {
        return;
      }
      if (timingInfo === null) {
        return;
      }
      if (!response.timingAllowPassed) {
        timingInfo = createOpaqueTimingInfo({
          startTime: timingInfo.startTime
        });
        cacheState = "";
      }
      timingInfo.endTime = coarsenedSharedCurrentTime();
      response.timingInfo = timingInfo;
      markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis,
        cacheState
      );
    }
    function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
      if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
        performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
      }
    }
    function abortFetch(p, request, responseObject, error) {
      if (!error) {
        error = new DOMException2("The operation was aborted.", "AbortError");
      }
      p.reject(error);
      if (request.body != null && isReadable(request.body?.stream)) {
        request.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
      if (responseObject == null) {
        return;
      }
      const response = responseObject[kState];
      if (response.body != null && isReadable(response.body?.stream)) {
        response.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
    }
    function fetching({
      request,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseEndOfBody,
      processResponseConsumeBody,
      useParallelQueue = false,
      dispatcher
      // undici
    }) {
      let taskDestination = null;
      let crossOriginIsolatedCapability = false;
      if (request.client != null) {
        taskDestination = request.client.globalObject;
        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
      }
      const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
      const timingInfo = createOpaqueTimingInfo({
        startTime: currenTime
      });
      const fetchParams = {
        controller: new Fetch(dispatcher),
        request,
        timingInfo,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseConsumeBody,
        processResponseEndOfBody,
        taskDestination,
        crossOriginIsolatedCapability
      };
      assert(!request.body || request.body.stream);
      if (request.window === "client") {
        request.window = request.client?.globalObject?.constructor?.name === "Window" ? request.client : "no-window";
      }
      if (request.origin === "client") {
        request.origin = request.client?.origin;
      }
      if (request.policyContainer === "client") {
        if (request.client != null) {
          request.policyContainer = clonePolicyContainer(
            request.client.policyContainer
          );
        } else {
          request.policyContainer = makePolicyContainer();
        }
      }
      if (!request.headersList.contains("accept")) {
        const value = "*/*";
        request.headersList.append("accept", value);
      }
      if (!request.headersList.contains("accept-language")) {
        request.headersList.append("accept-language", "*");
      }
      if (request.priority === null) {
      }
      if (subresourceSet.has(request.destination)) {
      }
      mainFetch(fetchParams).catch((err) => {
        fetchParams.controller.terminate(err);
      });
      return fetchParams.controller;
    }
    async function mainFetch(fetchParams, recursive = false) {
      const request = fetchParams.request;
      let response = null;
      if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
        response = makeNetworkError("local URLs only");
      }
      tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
      if (requestBadPort(request) === "blocked") {
        response = makeNetworkError("bad port");
      }
      if (request.referrerPolicy === "") {
        request.referrerPolicy = request.policyContainer.referrerPolicy;
      }
      if (request.referrer !== "no-referrer") {
        request.referrer = determineRequestsReferrer(request);
      }
      if (response === null) {
        response = await (async () => {
          const currentURL = requestCurrentURL(request);
          if (
            // - request’s current URL’s origin is same origin with request’s origin,
            //   and request’s response tainting is "basic"
            sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || // request’s current URL’s scheme is "data"
            currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
            (request.mode === "navigate" || request.mode === "websocket")
          ) {
            request.responseTainting = "basic";
            return await schemeFetch(fetchParams);
          }
          if (request.mode === "same-origin") {
            return makeNetworkError('request mode cannot be "same-origin"');
          }
          if (request.mode === "no-cors") {
            if (request.redirect !== "follow") {
              return makeNetworkError(
                'redirect mode cannot be "follow" for "no-cors" request'
              );
            }
            request.responseTainting = "opaque";
            return await schemeFetch(fetchParams);
          }
          if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
            return makeNetworkError("URL scheme must be a HTTP(S) scheme");
          }
          request.responseTainting = "cors";
          return await httpFetch(fetchParams);
        })();
      }
      if (recursive) {
        return response;
      }
      if (response.status !== 0 && !response.internalResponse) {
        if (request.responseTainting === "cors") {
        }
        if (request.responseTainting === "basic") {
          response = filterResponse(response, "basic");
        } else if (request.responseTainting === "cors") {
          response = filterResponse(response, "cors");
        } else if (request.responseTainting === "opaque") {
          response = filterResponse(response, "opaque");
        } else {
          assert(false);
        }
      }
      let internalResponse = response.status === 0 ? response : response.internalResponse;
      if (internalResponse.urlList.length === 0) {
        internalResponse.urlList.push(...request.urlList);
      }
      if (!request.timingAllowFailed) {
        response.timingAllowPassed = true;
      }
      if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) {
        response = internalResponse = makeNetworkError();
      }
      if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
      }
      if (request.integrity) {
        const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
        if (request.responseTainting === "opaque" || response.body == null) {
          processBodyError(response.error);
          return;
        }
        const processBody = (bytes) => {
          if (!bytesMatch(bytes, request.integrity)) {
            processBodyError("integrity mismatch");
            return;
          }
          response.body = safelyExtractBody(bytes)[0];
          fetchFinale(fetchParams, response);
        };
        await fullyReadBody(response.body, processBody, processBodyError);
      } else {
        fetchFinale(fetchParams, response);
      }
    }
    function schemeFetch(fetchParams) {
      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
        return Promise.resolve(makeAppropriateNetworkError(fetchParams));
      }
      const { request } = fetchParams;
      const { protocol: scheme } = requestCurrentURL(request);
      switch (scheme) {
        case "about:": {
          return Promise.resolve(makeNetworkError("about scheme is not supported"));
        }
        case "blob:": {
          if (!resolveObjectURL) {
            resolveObjectURL = require("buffer").resolveObjectURL;
          }
          const blobURLEntry = requestCurrentURL(request);
          if (blobURLEntry.search.length !== 0) {
            return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
          }
          const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
          if (request.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
            return Promise.resolve(makeNetworkError("invalid method"));
          }
          const bodyWithType = safelyExtractBody(blobURLEntryObject);
          const body = bodyWithType[0];
          const length = isomorphicEncode(`${body.length}`);
          const type = bodyWithType[1] ?? "";
          const response = makeResponse({
            statusText: "OK",
            headersList: [
              ["content-length", { name: "Content-Length", value: length }],
              ["content-type", { name: "Content-Type", value: type }]
            ]
          });
          response.body = body;
          return Promise.resolve(response);
        }
        case "data:": {
          const currentURL = requestCurrentURL(request);
          const dataURLStruct = dataURLProcessor(currentURL);
          if (dataURLStruct === "failure") {
            return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
          }
          const mimeType = serializeAMimeType(dataURLStruct.mimeType);
          return Promise.resolve(makeResponse({
            statusText: "OK",
            headersList: [
              ["content-type", { name: "Content-Type", value: mimeType }]
            ],
            body: safelyExtractBody(dataURLStruct.body)[0]
          }));
        }
        case "file:": {
          return Promise.resolve(makeNetworkError("not implemented... yet..."));
        }
        case "http:":
        case "https:": {
          return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
        }
        default: {
          return Promise.resolve(makeNetworkError("unknown scheme"));
        }
      }
    }
    function finalizeResponse(fetchParams, response) {
      fetchParams.request.done = true;
      if (fetchParams.processResponseDone != null) {
        queueMicrotask(() => fetchParams.processResponseDone(response));
      }
    }
    function fetchFinale(fetchParams, response) {
      if (response.type === "error") {
        response.urlList = [fetchParams.request.urlList[0]];
        response.timingInfo = createOpaqueTimingInfo({
          startTime: fetchParams.timingInfo.startTime
        });
      }
      const processResponseEndOfBody = () => {
        fetchParams.request.done = true;
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
        }
      };
      if (fetchParams.processResponse != null) {
        queueMicrotask(() => fetchParams.processResponse(response));
      }
      if (response.body == null) {
        processResponseEndOfBody();
      } else {
        const identityTransformAlgorithm = (chunk, controller) => {
          controller.enqueue(chunk);
        };
        const transformStream = new TransformStream({
          start() {
          },
          transform: identityTransformAlgorithm,
          flush: processResponseEndOfBody
        }, {
          size() {
            return 1;
          }
        }, {
          size() {
            return 1;
          }
        });
        response.body = { stream: response.body.stream.pipeThrough(transformStream) };
      }
      if (fetchParams.processResponseConsumeBody != null) {
        const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
        const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
        if (response.body == null) {
          queueMicrotask(() => processBody(null));
        } else {
          return fullyReadBody(response.body, processBody, processBodyError);
        }
        return Promise.resolve();
      }
    }
    async function httpFetch(fetchParams) {
      const request = fetchParams.request;
      let response = null;
      let actualResponse = null;
      const timingInfo = fetchParams.timingInfo;
      if (request.serviceWorkers === "all") {
      }
      if (response === null) {
        if (request.redirect === "follow") {
          request.serviceWorkers = "none";
        }
        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
        if (request.responseTainting === "cors" && corsCheck(request, response) === "failure") {
          return makeNetworkError("cors failure");
        }
        if (TAOCheck(request, response) === "failure") {
          request.timingAllowFailed = true;
        }
      }
      if ((request.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(
        request.origin,
        request.client,
        request.destination,
        actualResponse
      ) === "blocked") {
        return makeNetworkError("blocked");
      }
      if (redirectStatusSet.has(actualResponse.status)) {
        if (request.redirect !== "manual") {
          fetchParams.controller.connection.destroy();
        }
        if (request.redirect === "error") {
          response = makeNetworkError("unexpected redirect");
        } else if (request.redirect === "manual") {
          response = actualResponse;
        } else if (request.redirect === "follow") {
          response = await httpRedirectFetch(fetchParams, response);
        } else {
          assert(false);
        }
      }
      response.timingInfo = timingInfo;
      return response;
    }
    function httpRedirectFetch(fetchParams, response) {
      const request = fetchParams.request;
      const actualResponse = response.internalResponse ? response.internalResponse : response;
      let locationURL;
      try {
        locationURL = responseLocationURL(
          actualResponse,
          requestCurrentURL(request).hash
        );
        if (locationURL == null) {
          return response;
        }
      } catch (err) {
        return Promise.resolve(makeNetworkError(err));
      }
      if (!urlIsHttpHttpsScheme(locationURL)) {
        return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
      }
      if (request.redirectCount === 20) {
        return Promise.resolve(makeNetworkError("redirect count exceeded"));
      }
      request.redirectCount += 1;
      if (request.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
      }
      if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
        return Promise.resolve(makeNetworkError(
          'URL cannot contain credentials for request mode "cors"'
        ));
      }
      if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
        return Promise.resolve(makeNetworkError());
      }
      if ([301, 302].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {
        request.method = "GET";
        request.body = null;
        for (const headerName of requestBodyHeader) {
          request.headersList.delete(headerName);
        }
      }
      if (!sameOrigin(requestCurrentURL(request), locationURL)) {
        request.headersList.delete("authorization");
        request.headersList.delete("proxy-authorization", true);
        request.headersList.delete("cookie");
        request.headersList.delete("host");
      }
      if (request.body != null) {
        assert(request.body.source != null);
        request.body = safelyExtractBody(request.body.source)[0];
      }
      const timingInfo = fetchParams.timingInfo;
      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
      if (timingInfo.redirectStartTime === 0) {
        timingInfo.redirectStartTime = timingInfo.startTime;
      }
      request.urlList.push(locationURL);
      setRequestReferrerPolicyOnRedirect(request, actualResponse);
      return mainFetch(fetchParams, true);
    }
    async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
      const request = fetchParams.request;
      let httpFetchParams = null;
      let httpRequest = null;
      let response = null;
      const httpCache = null;
      const revalidatingFlag = false;
      if (request.window === "no-window" && request.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request;
      } else {
        httpRequest = makeRequest(request);
        httpFetchParams = { ...fetchParams };
        httpFetchParams.request = httpRequest;
      }
      const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
      const contentLength = httpRequest.body ? httpRequest.body.length : null;
      let contentLengthHeaderValue = null;
      if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
        contentLengthHeaderValue = "0";
      }
      if (contentLength != null) {
        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
      }
      if (contentLengthHeaderValue != null) {
        httpRequest.headersList.append("content-length", contentLengthHeaderValue);
      }
      if (contentLength != null && httpRequest.keepalive) {
      }
      if (httpRequest.referrer instanceof URL) {
        httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
      }
      appendRequestOriginHeader(httpRequest);
      appendFetchMetadata(httpRequest);
      if (!httpRequest.headersList.contains("user-agent")) {
        httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
      }
      if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "max-age=0");
      }
      if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        if (!httpRequest.headersList.contains("pragma")) {
          httpRequest.headersList.append("pragma", "no-cache");
        }
        if (!httpRequest.headersList.contains("cache-control")) {
          httpRequest.headersList.append("cache-control", "no-cache");
        }
      }
      if (httpRequest.headersList.contains("range")) {
        httpRequest.headersList.append("accept-encoding", "identity");
      }
      if (!httpRequest.headersList.contains("accept-encoding")) {
        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
          httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        } else {
          httpRequest.headersList.append("accept-encoding", "gzip, deflate");
        }
      }
      httpRequest.headersList.delete("host");
      if (includeCredentials) {
      }
      if (httpCache == null) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
      }
      if (response == null) {
        if (httpRequest.mode === "only-if-cached") {
          return makeNetworkError("only if cached");
        }
        const forwardResponse = await httpNetworkFetch(
          httpFetchParams,
          includeCredentials,
          isNewConnectionFetch
        );
        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
        }
        if (revalidatingFlag && forwardResponse.status === 304) {
        }
        if (response == null) {
          response = forwardResponse;
        }
      }
      response.urlList = [...httpRequest.urlList];
      if (httpRequest.headersList.contains("range")) {
        response.rangeRequested = true;
      }
      response.requestIncludesCredentials = includeCredentials;
      if (response.status === 407) {
        if (request.window === "no-window") {
          return makeNetworkError();
        }
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        return makeNetworkError("proxy authentication required");
      }
      if (
        // response’s status is 421
        response.status === 421 && // isNewConnectionFetch is false
        !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
        (request.body == null || request.body.source != null)
      ) {
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        fetchParams.controller.connection.destroy();
        response = await httpNetworkOrCacheFetch(
          fetchParams,
          isAuthenticationFetch,
          true
        );
      }
      if (isAuthenticationFetch) {
      }
      return response;
    }
    async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
      assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
      fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy(err) {
          if (!this.destroyed) {
            this.destroyed = true;
            this.abort?.(err ?? new DOMException2("The operation was aborted.", "AbortError"));
          }
        }
      };
      const request = fetchParams.request;
      let response = null;
      const timingInfo = fetchParams.timingInfo;
      const httpCache = null;
      if (httpCache == null) {
        request.cache = "no-store";
      }
      const newConnection = forceNewConnection ? "yes" : "no";
      if (request.mode === "websocket") {
      } else {
      }
      let requestBody = null;
      if (request.body == null && fetchParams.processRequestEndOfBody) {
        queueMicrotask(() => fetchParams.processRequestEndOfBody());
      } else if (request.body != null) {
        const processBodyChunk = async function* (bytes) {
          if (isCancelled(fetchParams)) {
            return;
          }
          yield bytes;
          fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
        };
        const processEndOfBody = () => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (fetchParams.processRequestEndOfBody) {
            fetchParams.processRequestEndOfBody();
          }
        };
        const processBodyError = (e) => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (e.name === "AbortError") {
            fetchParams.controller.abort();
          } else {
            fetchParams.controller.terminate(e);
          }
        };
        requestBody = async function* () {
          try {
            for await (const bytes of request.body.stream) {
              yield* processBodyChunk(bytes);
            }
            processEndOfBody();
          } catch (err) {
            processBodyError(err);
          }
        }();
      }
      try {
        const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
        if (socket) {
          response = makeResponse({ status, statusText, headersList, socket });
        } else {
          const iterator = body[Symbol.asyncIterator]();
          fetchParams.controller.next = () => iterator.next();
          response = makeResponse({ status, statusText, headersList });
        }
      } catch (err) {
        if (err.name === "AbortError") {
          fetchParams.controller.connection.destroy();
          return makeAppropriateNetworkError(fetchParams, err);
        }
        return makeNetworkError(err);
      }
      const pullAlgorithm = () => {
        fetchParams.controller.resume();
      };
      const cancelAlgorithm = (reason) => {
        fetchParams.controller.abort(reason);
      };
      if (!ReadableStream2) {
        ReadableStream2 = require("stream/web").ReadableStream;
      }
      const stream = new ReadableStream2(
        {
          async start(controller) {
            fetchParams.controller.controller = controller;
          },
          async pull(controller) {
            await pullAlgorithm(controller);
          },
          async cancel(reason) {
            await cancelAlgorithm(reason);
          }
        },
        {
          highWaterMark: 0,
          size() {
            return 1;
          }
        }
      );
      response.body = { stream };
      fetchParams.controller.on("terminated", onAborted);
      fetchParams.controller.resume = async () => {
        while (true) {
          let bytes;
          let isFailure;
          try {
            const { done, value } = await fetchParams.controller.next();
            if (isAborted(fetchParams)) {
              break;
            }
            bytes = done ? void 0 : value;
          } catch (err) {
            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
              bytes = void 0;
            } else {
              bytes = err;
              isFailure = true;
            }
          }
          if (bytes === void 0) {
            readableStreamClose(fetchParams.controller.controller);
            finalizeResponse(fetchParams, response);
            return;
          }
          timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
          if (isFailure) {
            fetchParams.controller.terminate(bytes);
            return;
          }
          fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
          if (isErrored(stream)) {
            fetchParams.controller.terminate();
            return;
          }
          if (!fetchParams.controller.controller.desiredSize) {
            return;
          }
        }
      };
      function onAborted(reason) {
        if (isAborted(fetchParams)) {
          response.aborted = true;
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              fetchParams.controller.serializedAbortReason
            );
          }
        } else {
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(new TypeError("terminated", {
              cause: isErrorLike(reason) ? reason : void 0
            }));
          }
        }
        fetchParams.controller.connection.destroy();
      }
      return response;
      async function dispatch({ body }) {
        const url = requestCurrentURL(request);
        const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve, reject) => agent.dispatch(
          {
            path: url.pathname + url.search,
            origin: url.origin,
            method: request.method,
            body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
            headers: request.headersList.entries,
            maxRedirections: 0,
            upgrade: request.mode === "websocket" ? "websocket" : void 0
          },
          {
            body: null,
            abort: null,
            onConnect(abort) {
              const { connection } = fetchParams.controller;
              if (connection.destroyed) {
                abort(new DOMException2("The operation was aborted.", "AbortError"));
              } else {
                fetchParams.controller.on("terminated", abort);
                this.abort = connection.abort = abort;
              }
            },
            onHeaders(status, headersList, resume, statusText) {
              if (status < 200) {
                return;
              }
              let codings = [];
              let location = "";
              const headers = new Headers();
              if (Array.isArray(headersList)) {
                for (let n = 0; n < headersList.length; n += 2) {
                  const key = headersList[n + 0].toString("latin1");
                  const val = headersList[n + 1].toString("latin1");
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim());
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              } else {
                const keys = Object.keys(headersList);
                for (const key of keys) {
                  const val = headersList[key];
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              }
              this.body = new Readable({ read: resume });
              const decoders = [];
              const willFollow = request.redirect === "follow" && location && redirectStatusSet.has(status);
              if (request.method !== "HEAD" && request.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
                for (const coding of codings) {
                  if (coding === "x-gzip" || coding === "gzip") {
                    decoders.push(zlib.createGunzip({
                      // Be less strict when decoding compressed responses, since sometimes
                      // servers send slightly invalid responses that are still accepted
                      // by common browsers.
                      // Always using Z_SYNC_FLUSH is what cURL does.
                      flush: zlib.constants.Z_SYNC_FLUSH,
                      finishFlush: zlib.constants.Z_SYNC_FLUSH
                    }));
                  } else if (coding === "deflate") {
                    decoders.push(zlib.createInflate());
                  } else if (coding === "br") {
                    decoders.push(zlib.createBrotliDecompress());
                  } else {
                    decoders.length = 0;
                    break;
                  }
                }
              }
              resolve({
                status,
                statusText,
                headersList: headers[kHeadersList],
                body: decoders.length ? pipeline(this.body, ...decoders, () => {
                }) : this.body.on("error", () => {
                })
              });
              return true;
            },
            onData(chunk) {
              if (fetchParams.controller.dump) {
                return;
              }
              const bytes = chunk;
              timingInfo.encodedBodySize += bytes.byteLength;
              return this.body.push(bytes);
            },
            onComplete() {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              fetchParams.controller.ended = true;
              this.body.push(null);
            },
            onError(error) {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              this.body?.destroy(error);
              fetchParams.controller.terminate(error);
              reject(error);
            },
            onUpgrade(status, headersList, socket) {
              if (status !== 101) {
                return;
              }
              const headers = new Headers();
              for (let n = 0; n < headersList.length; n += 2) {
                const key = headersList[n + 0].toString("latin1");
                const val = headersList[n + 1].toString("latin1");
                headers[kHeadersList].append(key, val);
              }
              resolve({
                status,
                statusText: STATUS_CODES[status],
                headersList: headers[kHeadersList],
                socket
              });
              return true;
            }
          }
        ));
      }
    }
    module2.exports = {
      fetch: fetch2,
      Fetch,
      fetching,
      finalizeAndReportTiming
    };
  }
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS({
  "node_modules/undici/lib/fileapi/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kState: Symbol("FileReader state"),
      kResult: Symbol("FileReader result"),
      kError: Symbol("FileReader error"),
      kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
      kEvents: Symbol("FileReader events"),
      kAborted: Symbol("FileReader aborted")
    };
  }
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({
  "node_modules/undici/lib/fileapi/progressevent.js"(exports2, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var kState = Symbol("ProgressEvent state");
    var ProgressEvent = class _ProgressEvent extends Event {
      constructor(type, eventInitDict = {}) {
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
        super(type, eventInitDict);
        this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        };
      }
      get lengthComputable() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].lengthComputable;
      }
      get loaded() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].loaded;
      }
      get total() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].total;
      }
    };
    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
      {
        key: "lengthComputable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "loaded",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "total",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]);
    module2.exports = {
      ProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({
  "node_modules/undici/lib/fileapi/encoding.js"(exports2, module2) {
    "use strict";
    function getEncoding(label) {
      if (!label) {
        return "failure";
      }
      switch (label.trim().toLowerCase()) {
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
          return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
          return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
          return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
          return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
          return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
          return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
          return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
          return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
          return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
          return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
          return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
          return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
          return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
          return "ISO-8859-15";
        case "iso-8859-16":
          return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
          return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
          return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
          return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
          return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
          return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
          return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
          return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
          return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
          return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
          return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
          return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
          return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
          return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
          return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
          return "GBK";
        case "gb18030":
          return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
          return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
          return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
          return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
          return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
          return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
          return "replacement";
        case "unicodefffe":
        case "utf-16be":
          return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
          return "UTF-16LE";
        case "x-user-defined":
          return "x-user-defined";
        default:
          return "failure";
      }
    }
    module2.exports = {
      getEncoding
    };
  }
});

// node_modules/undici/lib/fileapi/util.js
var require_util4 = __commonJS({
  "node_modules/undici/lib/fileapi/util.js"(exports2, module2) {
    "use strict";
    var {
      kState,
      kError,
      kResult,
      kAborted,
      kLastProgressEventFired
    } = require_symbols3();
    var { ProgressEvent } = require_progressevent();
    var { getEncoding } = require_encoding();
    var { DOMException: DOMException2 } = require_constants2();
    var { serializeAMimeType, parseMIMEType } = require_dataURL();
    var { types } = require("util");
    var { StringDecoder } = require("string_decoder");
    var { btoa: btoa2 } = require("buffer");
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    function readOperation(fr, blob, type, encodingName) {
      if (fr[kState] === "loading") {
        throw new DOMException2("Invalid state", "InvalidStateError");
      }
      fr[kState] = "loading";
      fr[kResult] = null;
      fr[kError] = null;
      const stream = blob.stream();
      const reader = stream.getReader();
      const bytes = [];
      let chunkPromise = reader.read();
      let isFirstChunk = true;
      (async () => {
        while (!fr[kAborted]) {
          try {
            const { done, value } = await chunkPromise;
            if (isFirstChunk && !fr[kAborted]) {
              queueMicrotask(() => {
                fireAProgressEvent("loadstart", fr);
              });
            }
            isFirstChunk = false;
            if (!done && types.isUint8Array(value)) {
              bytes.push(value);
              if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
                fr[kLastProgressEventFired] = Date.now();
                queueMicrotask(() => {
                  fireAProgressEvent("progress", fr);
                });
              }
              chunkPromise = reader.read();
            } else if (done) {
              queueMicrotask(() => {
                fr[kState] = "done";
                try {
                  const result = packageData(bytes, type, blob.type, encodingName);
                  if (fr[kAborted]) {
                    return;
                  }
                  fr[kResult] = result;
                  fireAProgressEvent("load", fr);
                } catch (error) {
                  fr[kError] = error;
                  fireAProgressEvent("error", fr);
                }
                if (fr[kState] !== "loading") {
                  fireAProgressEvent("loadend", fr);
                }
              });
              break;
            }
          } catch (error) {
            if (fr[kAborted]) {
              return;
            }
            queueMicrotask(() => {
              fr[kState] = "done";
              fr[kError] = error;
              fireAProgressEvent("error", fr);
              if (fr[kState] !== "loading") {
                fireAProgressEvent("loadend", fr);
              }
            });
            break;
          }
        }
      })();
    }
    function fireAProgressEvent(e, reader) {
      const event = new ProgressEvent(e, {
        bubbles: false,
        cancelable: false
      });
      reader.dispatchEvent(event);
    }
    function packageData(bytes, type, mimeType, encodingName) {
      switch (type) {
        case "DataURL": {
          let dataURL = "data:";
          const parsed = parseMIMEType(mimeType || "application/octet-stream");
          if (parsed !== "failure") {
            dataURL += serializeAMimeType(parsed);
          }
          dataURL += ";base64,";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            dataURL += btoa2(decoder.write(chunk));
          }
          dataURL += btoa2(decoder.end());
          return dataURL;
        }
        case "Text": {
          let encoding = "failure";
          if (encodingName) {
            encoding = getEncoding(encodingName);
          }
          if (encoding === "failure" && mimeType) {
            const type2 = parseMIMEType(mimeType);
            if (type2 !== "failure") {
              encoding = getEncoding(type2.parameters.get("charset"));
            }
          }
          if (encoding === "failure") {
            encoding = "UTF-8";
          }
          return decode(bytes, encoding);
        }
        case "ArrayBuffer": {
          const sequence = combineByteSequences(bytes);
          return sequence.buffer;
        }
        case "BinaryString": {
          let binaryString = "";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            binaryString += decoder.write(chunk);
          }
          binaryString += decoder.end();
          return binaryString;
        }
      }
    }
    function decode(ioQueue, encoding) {
      const bytes = combineByteSequences(ioQueue);
      const BOMEncoding = BOMSniffing(bytes);
      let slice = 0;
      if (BOMEncoding !== null) {
        encoding = BOMEncoding;
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
      }
      const sliced = bytes.slice(slice);
      return new TextDecoder(encoding).decode(sliced);
    }
    function BOMSniffing(ioQueue) {
      const [a, b, c] = ioQueue;
      if (a === 239 && b === 187 && c === 191) {
        return "UTF-8";
      } else if (a === 254 && b === 255) {
        return "UTF-16BE";
      } else if (a === 255 && b === 254) {
        return "UTF-16LE";
      }
      return null;
    }
    function combineByteSequences(sequences) {
      const size = sequences.reduce((a, b) => {
        return a + b.byteLength;
      }, 0);
      let offset = 0;
      return sequences.reduce((a, b) => {
        a.set(b, offset);
        offset += b.byteLength;
        return a;
      }, new Uint8Array(size));
    }
    module2.exports = {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({
  "node_modules/undici/lib/fileapi/filereader.js"(exports2, module2) {
    "use strict";
    var {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    } = require_util4();
    var {
      kState,
      kError,
      kResult,
      kEvents,
      kAborted
    } = require_symbols3();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var FileReader = class _FileReader extends EventTarget {
      constructor() {
        super();
        this[kState] = "empty";
        this[kResult] = null;
        this[kError] = null;
        this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        };
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
       * @param {import('buffer').Blob} blob
       */
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "ArrayBuffer");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsBinaryString
       * @param {import('buffer').Blob} blob
       */
      readAsBinaryString(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "BinaryString");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsDataText
       * @param {import('buffer').Blob} blob
       * @param {string?} encoding
       */
      readAsText(blob, encoding = void 0) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
        blob = webidl.converters.Blob(blob, { strict: false });
        if (encoding !== void 0) {
          encoding = webidl.converters.DOMString(encoding);
        }
        readOperation(this, blob, "Text", encoding);
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
       * @param {import('buffer').Blob} blob
       */
      readAsDataURL(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "DataURL");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-abort
       */
      abort() {
        if (this[kState] === "empty" || this[kState] === "done") {
          this[kResult] = null;
          return;
        }
        if (this[kState] === "loading") {
          this[kState] = "done";
          this[kResult] = null;
        }
        this[kAborted] = true;
        fireAProgressEvent("abort", this);
        if (this[kState] !== "loading") {
          fireAProgressEvent("loadend", this);
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
       */
      get readyState() {
        webidl.brandCheck(this, _FileReader);
        switch (this[kState]) {
          case "empty":
            return this.EMPTY;
          case "loading":
            return this.LOADING;
          case "done":
            return this.DONE;
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-result
       */
      get result() {
        webidl.brandCheck(this, _FileReader);
        return this[kResult];
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-error
       */
      get error() {
        webidl.brandCheck(this, _FileReader);
        return this[kError];
      }
      get onloadend() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadend;
      }
      set onloadend(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadend) {
          this.removeEventListener("loadend", this[kEvents].loadend);
        }
        if (typeof fn === "function") {
          this[kEvents].loadend = fn;
          this.addEventListener("loadend", fn);
        } else {
          this[kEvents].loadend = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].error) {
          this.removeEventListener("error", this[kEvents].error);
        }
        if (typeof fn === "function") {
          this[kEvents].error = fn;
          this.addEventListener("error", fn);
        } else {
          this[kEvents].error = null;
        }
      }
      get onloadstart() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadstart;
      }
      set onloadstart(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadstart) {
          this.removeEventListener("loadstart", this[kEvents].loadstart);
        }
        if (typeof fn === "function") {
          this[kEvents].loadstart = fn;
          this.addEventListener("loadstart", fn);
        } else {
          this[kEvents].loadstart = null;
        }
      }
      get onprogress() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].progress;
      }
      set onprogress(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].progress) {
          this.removeEventListener("progress", this[kEvents].progress);
        }
        if (typeof fn === "function") {
          this[kEvents].progress = fn;
          this.addEventListener("progress", fn);
        } else {
          this[kEvents].progress = null;
        }
      }
      get onload() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].load;
      }
      set onload(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].load) {
          this.removeEventListener("load", this[kEvents].load);
        }
        if (typeof fn === "function") {
          this[kEvents].load = fn;
          this.addEventListener("load", fn);
        } else {
          this[kEvents].load = null;
        }
      }
      get onabort() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].abort;
      }
      set onabort(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].abort) {
          this.removeEventListener("abort", this[kEvents].abort);
        }
        if (typeof fn === "function") {
          this[kEvents].abort = fn;
          this.addEventListener("abort", fn);
        } else {
          this[kEvents].abort = null;
        }
      }
    };
    FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
    FileReader.LOADING = FileReader.prototype.LOADING = 1;
    FileReader.DONE = FileReader.prototype.DONE = 2;
    Object.defineProperties(FileReader.prototype, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors,
      readAsArrayBuffer: kEnumerableProperty,
      readAsBinaryString: kEnumerableProperty,
      readAsText: kEnumerableProperty,
      readAsDataURL: kEnumerableProperty,
      abort: kEnumerableProperty,
      readyState: kEnumerableProperty,
      result: kEnumerableProperty,
      error: kEnumerableProperty,
      onloadstart: kEnumerableProperty,
      onprogress: kEnumerableProperty,
      onload: kEnumerableProperty,
      onabort: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onloadend: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(FileReader, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors
    });
    module2.exports = {
      FileReader
    };
  }
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS({
  "node_modules/undici/lib/cache/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kConstruct: require_symbols().kConstruct
    };
  }
});

// node_modules/undici/lib/cache/util.js
var require_util5 = __commonJS({
  "node_modules/undici/lib/cache/util.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { URLSerializer } = require_dataURL();
    var { isValidHeaderName } = require_util2();
    function urlEquals(A, B, excludeFragment = false) {
      const serializedA = URLSerializer(A, excludeFragment);
      const serializedB = URLSerializer(B, excludeFragment);
      return serializedA === serializedB;
    }
    function fieldValues(header) {
      assert(header !== null);
      const values = [];
      for (let value of header.split(",")) {
        value = value.trim();
        if (!value.length) {
          continue;
        } else if (!isValidHeaderName(value)) {
          continue;
        }
        values.push(value);
      }
      return values;
    }
    module2.exports = {
      urlEquals,
      fieldValues
    };
  }
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({
  "node_modules/undici/lib/cache/cache.js"(exports2, module2) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { urlEquals, fieldValues: getFieldValues } = require_util5();
    var { kEnumerableProperty, isDisturbed } = require_util();
    var { kHeadersList } = require_symbols();
    var { webidl } = require_webidl();
    var { Response: Response2, cloneResponse } = require_response();
    var { Request: Request2 } = require_request2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { fetching } = require_fetch();
    var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
    var assert = require("assert");
    var { getGlobalDispatcher } = require_global2();
    var Cache = class _Cache {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      #relevantRequestResponseList;
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
        this.#relevantRequestResponseList = arguments[1];
      }
      async match(request, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
        request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        const p = await this.matchAll(request, options);
        if (p.length === 0) {
          return;
        }
        return p[0];
      }
      async matchAll(request = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request !== void 0) request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request !== void 0) {
          if (request instanceof Request2) {
            r = request[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request === "string") {
            r = new Request2(request)[kState];
          }
        }
        const responses = [];
        if (request === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            responses.push(requestResponse[1]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options);
          for (const requestResponse of requestResponses) {
            responses.push(requestResponse[1]);
          }
        }
        const responseList = [];
        for (const response of responses) {
          const responseObject = new Response2(response.body?.source ?? null);
          const body = responseObject[kState].body;
          responseObject[kState] = response;
          responseObject[kState].body = body;
          responseObject[kHeaders][kHeadersList] = response.headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseList.push(responseObject);
        }
        return Object.freeze(responseList);
      }
      async add(request) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
        request = webidl.converters.RequestInfo(request);
        const requests = [request];
        const responseArrayPromise = this.addAll(requests);
        return await responseArrayPromise;
      }
      async addAll(requests) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
        requests = webidl.converters["sequence<RequestInfo>"](requests);
        const responsePromises = [];
        const requestList = [];
        for (const request of requests) {
          if (typeof request === "string") {
            continue;
          }
          const r = request[kState];
          if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme when method is not GET."
            });
          }
        }
        const fetchControllers = [];
        for (const request of requests) {
          const r = new Request2(request)[kState];
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme."
            });
          }
          r.initiator = "fetch";
          r.destination = "subresource";
          requestList.push(r);
          const responsePromise = createDeferredPromise();
          fetchControllers.push(fetching({
            request: r,
            dispatcher: getGlobalDispatcher(),
            processResponse(response) {
              if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
                responsePromise.reject(webidl.errors.exception({
                  header: "Cache.addAll",
                  message: "Received an invalid status code or the request failed."
                }));
              } else if (response.headersList.contains("vary")) {
                const fieldValues = getFieldValues(response.headersList.get("vary"));
                for (const fieldValue of fieldValues) {
                  if (fieldValue === "*") {
                    responsePromise.reject(webidl.errors.exception({
                      header: "Cache.addAll",
                      message: "invalid vary field value"
                    }));
                    for (const controller of fetchControllers) {
                      controller.abort();
                    }
                    return;
                  }
                }
              }
            },
            processResponseEndOfBody(response) {
              if (response.aborted) {
                responsePromise.reject(new DOMException("aborted", "AbortError"));
                return;
              }
              responsePromise.resolve(response);
            }
          }));
          responsePromises.push(responsePromise.promise);
        }
        const p = Promise.all(responsePromises);
        const responses = await p;
        const operations = [];
        let index = 0;
        for (const response of responses) {
          const operation = {
            type: "put",
            // 7.3.2
            request: requestList[index],
            // 7.3.3
            response
            // 7.3.4
          };
          operations.push(operation);
          index++;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(void 0);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async put(request, response) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
        request = webidl.converters.RequestInfo(request);
        response = webidl.converters.Response(response);
        let innerRequest = null;
        if (request instanceof Request2) {
          innerRequest = request[kState];
        } else {
          innerRequest = new Request2(request)[kState];
        }
        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
          });
        }
        const innerResponse = response[kState];
        if (innerResponse.status === 206) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
          });
        }
        if (innerResponse.headersList.contains("vary")) {
          const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
          for (const fieldValue of fieldValues) {
            if (fieldValue === "*") {
              throw webidl.errors.exception({
                header: "Cache.put",
                message: "Got * vary field value"
              });
            }
          }
        }
        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
          });
        }
        const clonedResponse = cloneResponse(innerResponse);
        const bodyReadPromise = createDeferredPromise();
        if (innerResponse.body != null) {
          const stream = innerResponse.body.stream;
          const reader = stream.getReader();
          readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else {
          bodyReadPromise.resolve(void 0);
        }
        const operations = [];
        const operation = {
          type: "put",
          // 14.
          request: innerRequest,
          // 15.
          response: clonedResponse
          // 16.
        };
        operations.push(operation);
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) {
          clonedResponse.body.source = bytes;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve();
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async delete(request, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
        request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request instanceof Request2) {
          r = request[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return false;
          }
        } else {
          assert(typeof request === "string");
          r = new Request2(request)[kState];
        }
        const operations = [];
        const operation = {
          type: "delete",
          request: r,
          options
        };
        operations.push(operation);
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
          requestResponses = this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(!!requestResponses?.length);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
       * @param {any} request
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @returns {readonly Request[]}
       */
      async keys(request = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request !== void 0) request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request !== void 0) {
          if (request instanceof Request2) {
            r = request[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request === "string") {
            r = new Request2(request)[kState];
          }
        }
        const promise = createDeferredPromise();
        const requests = [];
        if (request === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            requests.push(requestResponse[0]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options);
          for (const requestResponse of requestResponses) {
            requests.push(requestResponse[0]);
          }
        }
        queueMicrotask(() => {
          const requestList = [];
          for (const request2 of requests) {
            const requestObject = new Request2("https://a");
            requestObject[kState] = request2;
            requestObject[kHeaders][kHeadersList] = request2.headersList;
            requestObject[kHeaders][kGuard] = "immutable";
            requestObject[kRealm] = request2.client;
            requestList.push(requestObject);
          }
          promise.resolve(Object.freeze(requestList));
        });
        return promise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      #batchCacheOperations(operations) {
        const cache = this.#relevantRequestResponseList;
        const backupCache = [...cache];
        const addedItems = [];
        const resultList = [];
        try {
          for (const operation of operations) {
            if (operation.type !== "delete" && operation.type !== "put") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: 'operation type does not match "delete" or "put"'
              });
            }
            if (operation.type === "delete" && operation.response != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "delete operation should not have an associated response"
              });
            }
            if (this.#queryCache(operation.request, operation.options, addedItems).length) {
              throw new DOMException("???", "InvalidStateError");
            }
            let requestResponses;
            if (operation.type === "delete") {
              requestResponses = this.#queryCache(operation.request, operation.options);
              if (requestResponses.length === 0) {
                return [];
              }
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
            } else if (operation.type === "put") {
              if (operation.response == null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "put operation should have an associated response"
                });
              }
              const r = operation.request;
              if (!urlIsHttpHttpsScheme(r.url)) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "expected http or https scheme"
                });
              }
              if (r.method !== "GET") {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "not get method"
                });
              }
              if (operation.options != null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "options must not be defined"
                });
              }
              requestResponses = this.#queryCache(operation.request);
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
              cache.push([operation.request, operation.response]);
              addedItems.push([operation.request, operation.response]);
            }
            resultList.push([operation.request, operation.response]);
          }
          return resultList;
        } catch (e) {
          this.#relevantRequestResponseList.length = 0;
          this.#relevantRequestResponseList = backupCache;
          throw e;
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      #queryCache(requestQuery, options, targetStorage) {
        const resultList = [];
        const storage = targetStorage ?? this.#relevantRequestResponseList;
        for (const requestResponse of storage) {
          const [cachedRequest, cachedResponse] = requestResponse;
          if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
            resultList.push(requestResponse);
          }
        }
        return resultList;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      #requestMatchesCachedItem(requestQuery, request, response = null, options) {
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request.url);
        if (options?.ignoreSearch) {
          cachedURL.search = "";
          queryURL.search = "";
        }
        if (!urlEquals(queryURL, cachedURL, true)) {
          return false;
        }
        if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
          return true;
        }
        const fieldValues = getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            return false;
          }
          const requestValue = request.headersList.get(fieldValue);
          const queryValue = requestQuery.headersList.get(fieldValue);
          if (requestValue !== queryValue) {
            return false;
          }
        }
        return true;
      }
    };
    Object.defineProperties(Cache.prototype, {
      [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
      },
      match: kEnumerableProperty,
      matchAll: kEnumerableProperty,
      add: kEnumerableProperty,
      addAll: kEnumerableProperty,
      put: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    var cacheQueryOptionConverters = [
      {
        key: "ignoreSearch",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreMethod",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreVary",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
      ...cacheQueryOptionConverters,
      {
        key: "cacheName",
        converter: webidl.converters.DOMString
      }
    ]);
    webidl.converters.Response = webidl.interfaceConverter(Response2);
    webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(
      webidl.converters.RequestInfo
    );
    module2.exports = {
      Cache
    };
  }
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({
  "node_modules/undici/lib/cache/cachestorage.js"(exports2, module2) {
    "use strict";
    var { kConstruct } = require_symbols4();
    var { Cache } = require_cache();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var CacheStorage = class _CacheStorage {
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      #caches = /* @__PURE__ */ new Map();
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
      }
      async match(request, options = {}) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
        request = webidl.converters.RequestInfo(request);
        options = webidl.converters.MultiCacheQueryOptions(options);
        if (options.cacheName != null) {
          if (this.#caches.has(options.cacheName)) {
            const cacheList = this.#caches.get(options.cacheName);
            const cache = new Cache(kConstruct, cacheList);
            return await cache.match(request, options);
          }
        } else {
          for (const cacheList of this.#caches.values()) {
            const cache = new Cache(kConstruct, cacheList);
            const response = await cache.match(request, options);
            if (response !== void 0) {
              return response;
            }
          }
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async has(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.has(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
       * @param {string} cacheName
       * @returns {Promise<Cache>}
       */
      async open(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
        cacheName = webidl.converters.DOMString(cacheName);
        if (this.#caches.has(cacheName)) {
          const cache2 = this.#caches.get(cacheName);
          return new Cache(kConstruct, cache2);
        }
        const cache = [];
        this.#caches.set(cacheName, cache);
        return new Cache(kConstruct, cache);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async delete(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
       * @returns {string[]}
       */
      async keys() {
        webidl.brandCheck(this, _CacheStorage);
        const keys = this.#caches.keys();
        return [...keys];
      }
    };
    Object.defineProperties(CacheStorage.prototype, {
      [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
      },
      match: kEnumerableProperty,
      has: kEnumerableProperty,
      open: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    module2.exports = {
      CacheStorage
    };
  }
});

// node_modules/undici/lib/cookies/constants.js
var require_constants4 = __commonJS({
  "node_modules/undici/lib/cookies/constants.js"(exports2, module2) {
    "use strict";
    var maxAttributeValueSize = 1024;
    var maxNameValuePairSize = 4096;
    module2.exports = {
      maxAttributeValueSize,
      maxNameValuePairSize
    };
  }
});

// node_modules/undici/lib/cookies/util.js
var require_util6 = __commonJS({
  "node_modules/undici/lib/cookies/util.js"(exports2, module2) {
    "use strict";
    var assert = require("assert");
    var { kHeadersList } = require_symbols();
    function isCTLExcludingHtab(value) {
      if (value.length === 0) {
        return false;
      }
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
          return false;
        }
      }
    }
    function validateCookieName(name) {
      for (const char of name) {
        const code = char.charCodeAt(0);
        if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
          throw new Error("Invalid cookie name");
        }
      }
    }
    function validateCookieValue(value) {
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code < 33 || // exclude CTLs (0-31)
        code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
          throw new Error("Invalid header value");
        }
      }
    }
    function validateCookiePath(path3) {
      for (const char of path3) {
        const code = char.charCodeAt(0);
        if (code < 33 || char === ";") {
          throw new Error("Invalid cookie path");
        }
      }
    }
    function validateCookieDomain(domain) {
      if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
        throw new Error("Invalid cookie domain");
      }
    }
    function toIMFDate(date) {
      if (typeof date === "number") {
        date = new Date(date);
      }
      const days = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
      ];
      const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      const dayName = days[date.getUTCDay()];
      const day = date.getUTCDate().toString().padStart(2, "0");
      const month = months[date.getUTCMonth()];
      const year = date.getUTCFullYear();
      const hour = date.getUTCHours().toString().padStart(2, "0");
      const minute = date.getUTCMinutes().toString().padStart(2, "0");
      const second = date.getUTCSeconds().toString().padStart(2, "0");
      return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
    }
    function validateCookieMaxAge(maxAge) {
      if (maxAge < 0) {
        throw new Error("Invalid cookie max-age");
      }
    }
    function stringify(cookie) {
      if (cookie.name.length === 0) {
        return null;
      }
      validateCookieName(cookie.name);
      validateCookieValue(cookie.value);
      const out = [`${cookie.name}=${cookie.value}`];
      if (cookie.name.startsWith("__Secure-")) {
        cookie.secure = true;
      }
      if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
      }
      if (cookie.secure) {
        out.push("Secure");
      }
      if (cookie.httpOnly) {
        out.push("HttpOnly");
      }
      if (typeof cookie.maxAge === "number") {
        validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
      }
      if (cookie.domain) {
        validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
      }
      if (cookie.path) {
        validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
      }
      if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
        out.push(`Expires=${toIMFDate(cookie.expires)}`);
      }
      if (cookie.sameSite) {
        out.push(`SameSite=${cookie.sameSite}`);
      }
      for (const part of cookie.unparsed) {
        if (!part.includes("=")) {
          throw new Error("Invalid unparsed");
        }
        const [key, ...value] = part.split("=");
        out.push(`${key.trim()}=${value.join("=")}`);
      }
      return out.join("; ");
    }
    var kHeadersListNode;
    function getHeadersList(headers) {
      if (headers[kHeadersList]) {
        return headers[kHeadersList];
      }
      if (!kHeadersListNode) {
        kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
          (symbol) => symbol.description === "headers list"
        );
        assert(kHeadersListNode, "Headers cannot be parsed");
      }
      const headersList = headers[kHeadersListNode];
      assert(headersList);
      return headersList;
    }
    module2.exports = {
      isCTLExcludingHtab,
      stringify,
      getHeadersList
    };
  }
});

// node_modules/undici/lib/cookies/parse.js
var require_parse = __commonJS({
  "node_modules/undici/lib/cookies/parse.js"(exports2, module2) {
    "use strict";
    var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();
    var { isCTLExcludingHtab } = require_util6();
    var { collectASequenceOfCodePointsFast } = require_dataURL();
    var assert = require("assert");
    function parseSetCookie(header) {
      if (isCTLExcludingHtab(header)) {
        return null;
      }
      let nameValuePair = "";
      let unparsedAttributes = "";
      let name = "";
      let value = "";
      if (header.includes(";")) {
        const position = { position: 0 };
        nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
        unparsedAttributes = header.slice(position.position);
      } else {
        nameValuePair = header;
      }
      if (!nameValuePair.includes("=")) {
        value = nameValuePair;
      } else {
        const position = { position: 0 };
        name = collectASequenceOfCodePointsFast(
          "=",
          nameValuePair,
          position
        );
        value = nameValuePair.slice(position.position + 1);
      }
      name = name.trim();
      value = value.trim();
      if (name.length + value.length > maxNameValuePairSize) {
        return null;
      }
      return {
        name,
        value,
        ...parseUnparsedAttributes(unparsedAttributes)
      };
    }
    function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
      if (unparsedAttributes.length === 0) {
        return cookieAttributeList;
      }
      assert(unparsedAttributes[0] === ";");
      unparsedAttributes = unparsedAttributes.slice(1);
      let cookieAv = "";
      if (unparsedAttributes.includes(";")) {
        cookieAv = collectASequenceOfCodePointsFast(
          ";",
          unparsedAttributes,
          { position: 0 }
        );
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
      } else {
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
      }
      let attributeName = "";
      let attributeValue = "";
      if (cookieAv.includes("=")) {
        const position = { position: 0 };
        attributeName = collectASequenceOfCodePointsFast(
          "=",
          cookieAv,
          position
        );
        attributeValue = cookieAv.slice(position.position + 1);
      } else {
        attributeName = cookieAv;
      }
      attributeName = attributeName.trim();
      attributeValue = attributeValue.trim();
      if (attributeValue.length > maxAttributeValueSize) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const attributeNameLowercase = attributeName.toLowerCase();
      if (attributeNameLowercase === "expires") {
        const expiryTime = new Date(attributeValue);
        cookieAttributeList.expires = expiryTime;
      } else if (attributeNameLowercase === "max-age") {
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        if (!/^\d+$/.test(attributeValue)) {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        const deltaSeconds = Number(attributeValue);
        cookieAttributeList.maxAge = deltaSeconds;
      } else if (attributeNameLowercase === "domain") {
        let cookieDomain = attributeValue;
        if (cookieDomain[0] === ".") {
          cookieDomain = cookieDomain.slice(1);
        }
        cookieDomain = cookieDomain.toLowerCase();
        cookieAttributeList.domain = cookieDomain;
      } else if (attributeNameLowercase === "path") {
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") {
          cookiePath = "/";
        } else {
          cookiePath = attributeValue;
        }
        cookieAttributeList.path = cookiePath;
      } else if (attributeNameLowercase === "secure") {
        cookieAttributeList.secure = true;
      } else if (attributeNameLowercase === "httponly") {
        cookieAttributeList.httpOnly = true;
      } else if (attributeNameLowercase === "samesite") {
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        if (attributeValueLowercase.includes("none")) {
          enforcement = "None";
        }
        if (attributeValueLowercase.includes("strict")) {
          enforcement = "Strict";
        }
        if (attributeValueLowercase.includes("lax")) {
          enforcement = "Lax";
        }
        cookieAttributeList.sameSite = enforcement;
      } else {
        cookieAttributeList.unparsed ??= [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
      }
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    module2.exports = {
      parseSetCookie,
      parseUnparsedAttributes
    };
  }
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({
  "node_modules/undici/lib/cookies/index.js"(exports2, module2) {
    "use strict";
    var { parseSetCookie } = require_parse();
    var { stringify, getHeadersList } = require_util6();
    var { webidl } = require_webidl();
    var { Headers } = require_headers();
    function getCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
      webidl.brandCheck(headers, Headers, { strict: false });
      const cookie = headers.get("cookie");
      const out = {};
      if (!cookie) {
        return out;
      }
      for (const piece of cookie.split(";")) {
        const [name, ...value] = piece.split("=");
        out[name.trim()] = value.join("=");
      }
      return out;
    }
    function deleteCookie(headers, name, attributes) {
      webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
      webidl.brandCheck(headers, Headers, { strict: false });
      name = webidl.converters.DOMString(name);
      attributes = webidl.converters.DeleteCookieAttributes(attributes);
      setCookie(headers, {
        name,
        value: "",
        expires: /* @__PURE__ */ new Date(0),
        ...attributes
      });
    }
    function getSetCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
      webidl.brandCheck(headers, Headers, { strict: false });
      const cookies = getHeadersList(headers).cookies;
      if (!cookies) {
        return [];
      }
      return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
    }
    function setCookie(headers, cookie) {
      webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
      webidl.brandCheck(headers, Headers, { strict: false });
      cookie = webidl.converters.Cookie(cookie);
      const str = stringify(cookie);
      if (str) {
        headers.append("Set-Cookie", stringify(cookie));
      }
    }
    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      }
    ]);
    webidl.converters.Cookie = webidl.dictionaryConverter([
      {
        converter: webidl.converters.DOMString,
        key: "name"
      },
      {
        converter: webidl.converters.DOMString,
        key: "value"
      },
      {
        converter: webidl.nullableConverter((value) => {
          if (typeof value === "number") {
            return webidl.converters["unsigned long long"](value);
          }
          return new Date(value);
        }),
        key: "expires",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "secure",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
      },
      {
        converter: webidl.converters.USVString,
        key: "sameSite",
        allowedValues: ["Strict", "Lax", "None"]
      },
      {
        converter: webidl.sequenceConverter(webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
      }
    ]);
    module2.exports = {
      getCookies,
      deleteCookie,
      getSetCookies,
      setCookie
    };
  }
});

// node_modules/undici/lib/websocket/constants.js
var require_constants5 = __commonJS({
  "node_modules/undici/lib/websocket/constants.js"(exports2, module2) {
    "use strict";
    var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    var states = {
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    };
    var opcodes = {
      CONTINUATION: 0,
      TEXT: 1,
      BINARY: 2,
      CLOSE: 8,
      PING: 9,
      PONG: 10
    };
    var maxUnsigned16Bit = 2 ** 16 - 1;
    var parserStates = {
      INFO: 0,
      PAYLOADLENGTH_16: 2,
      PAYLOADLENGTH_64: 3,
      READ_DATA: 4
    };
    var emptyBuffer = Buffer.allocUnsafe(0);
    module2.exports = {
      uid,
      staticPropertyDescriptors,
      states,
      opcodes,
      maxUnsigned16Bit,
      parserStates,
      emptyBuffer
    };
  }
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS({
  "node_modules/undici/lib/websocket/symbols.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      kWebSocketURL: Symbol("url"),
      kReadyState: Symbol("ready state"),
      kController: Symbol("controller"),
      kResponse: Symbol("response"),
      kBinaryType: Symbol("binary type"),
      kSentClose: Symbol("sent close"),
      kReceivedClose: Symbol("received close"),
      kByteParser: Symbol("byte parser")
    };
  }
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({
  "node_modules/undici/lib/websocket/events.js"(exports2, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util();
    var { MessagePort } = require("worker_threads");
    var MessageEvent = class _MessageEvent extends Event {
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get data() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.data;
      }
      get origin() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.origin;
      }
      get lastEventId() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.lastEventId;
      }
      get source() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.source;
      }
      get ports() {
        webidl.brandCheck(this, _MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) {
          Object.freeze(this.#eventInit.ports);
        }
        return this.#eventInit.ports;
      }
      initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        webidl.brandCheck(this, _MessageEvent);
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
        return new _MessageEvent(type, {
          bubbles,
          cancelable,
          data,
          origin,
          lastEventId,
          source,
          ports
        });
      }
    };
    var CloseEvent = class _CloseEvent extends Event {
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get wasClean() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.wasClean;
      }
      get code() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.code;
      }
      get reason() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.reason;
      }
    };
    var ErrorEvent = class _ErrorEvent extends Event {
      #eventInit;
      constructor(type, eventInitDict) {
        webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
        super(type, eventInitDict);
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
        this.#eventInit = eventInitDict;
      }
      get message() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.message;
      }
      get filename() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.filename;
      }
      get lineno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.lineno;
      }
      get colno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.colno;
      }
      get error() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.error;
      }
    };
    Object.defineProperties(MessageEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
      },
      data: kEnumerableProperty,
      origin: kEnumerableProperty,
      lastEventId: kEnumerableProperty,
      source: kEnumerableProperty,
      ports: kEnumerableProperty,
      initMessageEvent: kEnumerableProperty
    });
    Object.defineProperties(CloseEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
      },
      reason: kEnumerableProperty,
      code: kEnumerableProperty,
      wasClean: kEnumerableProperty
    });
    Object.defineProperties(ErrorEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
      },
      message: kEnumerableProperty,
      filename: kEnumerableProperty,
      lineno: kEnumerableProperty,
      colno: kEnumerableProperty,
      error: kEnumerableProperty
    });
    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
    webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(
      webidl.converters.MessagePort
    );
    var eventInit = [
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.MessageEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "data",
        converter: webidl.converters.any,
        defaultValue: null
      },
      {
        key: "origin",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lastEventId",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: webidl.nullableConverter(webidl.converters.MessagePort),
        defaultValue: null
      },
      {
        key: "ports",
        converter: webidl.converters["sequence<MessagePort>"],
        get defaultValue() {
          return [];
        }
      }
    ]);
    webidl.converters.CloseEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "wasClean",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "code",
        converter: webidl.converters["unsigned short"],
        defaultValue: 0
      },
      {
        key: "reason",
        converter: webidl.converters.USVString,
        defaultValue: ""
      }
    ]);
    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "message",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "filename",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lineno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "colno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "error",
        converter: webidl.converters.any
      }
    ]);
    module2.exports = {
      MessageEvent,
      CloseEvent,
      ErrorEvent
    };
  }
});

// node_modules/undici/lib/websocket/util.js
var require_util7 = __commonJS({
  "node_modules/undici/lib/websocket/util.js"(exports2, module2) {
    "use strict";
    var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
    var { states, opcodes } = require_constants5();
    var { MessageEvent, ErrorEvent } = require_events();
    function isEstablished(ws) {
      return ws[kReadyState] === states.OPEN;
    }
    function isClosing(ws) {
      return ws[kReadyState] === states.CLOSING;
    }
    function isClosed(ws) {
      return ws[kReadyState] === states.CLOSED;
    }
    function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
      const event = new eventConstructor(e, eventInitDict);
      target.dispatchEvent(event);
    }
    function websocketMessageReceived(ws, type, data) {
      if (ws[kReadyState] !== states.OPEN) {
        return;
      }
      let dataForEvent;
      if (type === opcodes.TEXT) {
        try {
          dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
        } catch {
          failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type === opcodes.BINARY) {
        if (ws[kBinaryType] === "blob") {
          dataForEvent = new Blob([data]);
        } else {
          dataForEvent = new Uint8Array(data).buffer;
        }
      }
      fireEvent("message", ws, MessageEvent, {
        origin: ws[kWebSocketURL].origin,
        data: dataForEvent
      });
    }
    function isValidSubprotocol(protocol) {
      if (protocol.length === 0) {
        return false;
      }
      for (const char of protocol) {
        const code = char.charCodeAt(0);
        if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9) {
          return false;
        }
      }
      return true;
    }
    function isValidStatusCode(code) {
      if (code >= 1e3 && code < 1015) {
        return code !== 1004 && // reserved
        code !== 1005 && // "MUST NOT be set as a status code"
        code !== 1006;
      }
      return code >= 3e3 && code <= 4999;
    }
    function failWebsocketConnection(ws, reason) {
      const { [kController]: controller, [kResponse]: response } = ws;
      controller.abort();
      if (response?.socket && !response.socket.destroyed) {
        response.socket.destroy();
      }
      if (reason) {
        fireEvent("error", ws, ErrorEvent, {
          error: new Error(reason)
        });
      }
    }
    module2.exports = {
      isEstablished,
      isClosing,
      isClosed,
      fireEvent,
      isValidSubprotocol,
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    };
  }
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({
  "node_modules/undici/lib/websocket/connection.js"(exports2, module2) {
    "use strict";
    var diagnosticsChannel = require("diagnostics_channel");
    var { uid, states } = require_constants5();
    var {
      kReadyState,
      kSentClose,
      kByteParser,
      kReceivedClose
    } = require_symbols5();
    var { fireEvent, failWebsocketConnection } = require_util7();
    var { CloseEvent } = require_events();
    var { makeRequest } = require_request2();
    var { fetching } = require_fetch();
    var { Headers } = require_headers();
    var { getGlobalDispatcher } = require_global2();
    var { kHeadersList } = require_symbols();
    var channels = {};
    channels.open = diagnosticsChannel.channel("undici:websocket:open");
    channels.close = diagnosticsChannel.channel("undici:websocket:close");
    channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
    var crypto;
    try {
      crypto = require("crypto");
    } catch {
    }
    function establishWebSocketConnection(url, protocols, ws, onEstablish, options) {
      const requestURL = url;
      requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
      const request = makeRequest({
        urlList: [requestURL],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
      });
      if (options.headers) {
        const headersList = new Headers(options.headers)[kHeadersList];
        request.headersList = headersList;
      }
      const keyValue = crypto.randomBytes(16).toString("base64");
      request.headersList.append("sec-websocket-key", keyValue);
      request.headersList.append("sec-websocket-version", "13");
      for (const protocol of protocols) {
        request.headersList.append("sec-websocket-protocol", protocol);
      }
      const permessageDeflate = "";
      const controller = fetching({
        request,
        useParallelQueue: true,
        dispatcher: options.dispatcher ?? getGlobalDispatcher(),
        processResponse(response) {
          if (response.type === "error" || response.status !== 101) {
            failWebsocketConnection(ws, "Received network error or non-101 status code.");
            return;
          }
          if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Server did not respond with sent protocols.");
            return;
          }
          if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
            failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
            return;
          }
          if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
            failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
            return;
          }
          const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
          const digest = crypto.createHash("sha1").update(keyValue + uid).digest("base64");
          if (secWSAccept !== digest) {
            failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
            return;
          }
          const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
          if (secExtension !== null && secExtension !== permessageDeflate) {
            failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
            return;
          }
          const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
          if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
            return;
          }
          response.socket.on("data", onSocketData);
          response.socket.on("close", onSocketClose);
          response.socket.on("error", onSocketError);
          if (channels.open.hasSubscribers) {
            channels.open.publish({
              address: response.socket.address(),
              protocol: secProtocol,
              extensions: secExtension
            });
          }
          onEstablish(response);
        }
      });
      return controller;
    }
    function onSocketData(chunk) {
      if (!this.ws[kByteParser].write(chunk)) {
        this.pause();
      }
    }
    function onSocketClose() {
      const { ws } = this;
      const wasClean = ws[kSentClose] && ws[kReceivedClose];
      let code = 1005;
      let reason = "";
      const result = ws[kByteParser].closingInfo;
      if (result) {
        code = result.code ?? 1005;
        reason = result.reason;
      } else if (!ws[kSentClose]) {
        code = 1006;
      }
      ws[kReadyState] = states.CLOSED;
      fireEvent("close", ws, CloseEvent, {
        wasClean,
        code,
        reason
      });
      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: ws,
          code,
          reason
        });
      }
    }
    function onSocketError(error) {
      const { ws } = this;
      ws[kReadyState] = states.CLOSING;
      if (channels.socketError.hasSubscribers) {
        channels.socketError.publish(error);
      }
      this.destroy();
    }
    module2.exports = {
      establishWebSocketConnection
    };
  }
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({
  "node_modules/undici/lib/websocket/frame.js"(exports2, module2) {
    "use strict";
    var { maxUnsigned16Bit } = require_constants5();
    var crypto;
    try {
      crypto = require("crypto");
    } catch {
    }
    var WebsocketFrameSend = class {
      /**
       * @param {Buffer|undefined} data
       */
      constructor(data) {
        this.frameData = data;
        this.maskKey = crypto.randomBytes(4);
      }
      createFrame(opcode) {
        const bodyLength = this.frameData?.byteLength ?? 0;
        let payloadLength = bodyLength;
        let offset = 6;
        if (bodyLength > maxUnsigned16Bit) {
          offset += 8;
          payloadLength = 127;
        } else if (bodyLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const buffer = Buffer.allocUnsafe(bodyLength + offset);
        buffer[0] = buffer[1] = 0;
        buffer[0] |= 128;
        buffer[0] = (buffer[0] & 240) + opcode;
        buffer[offset - 4] = this.maskKey[0];
        buffer[offset - 3] = this.maskKey[1];
        buffer[offset - 2] = this.maskKey[2];
        buffer[offset - 1] = this.maskKey[3];
        buffer[1] = payloadLength;
        if (payloadLength === 126) {
          buffer.writeUInt16BE(bodyLength, 2);
        } else if (payloadLength === 127) {
          buffer[2] = buffer[3] = 0;
          buffer.writeUIntBE(bodyLength, 4, 6);
        }
        buffer[1] |= 128;
        for (let i = 0; i < bodyLength; i++) {
          buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
        }
        return buffer;
      }
    };
    module2.exports = {
      WebsocketFrameSend
    };
  }
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({
  "node_modules/undici/lib/websocket/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable } = require("stream");
    var diagnosticsChannel = require("diagnostics_channel");
    var { parserStates, opcodes, states, emptyBuffer } = require_constants5();
    var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
    var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util7();
    var { WebsocketFrameSend } = require_frame();
    var channels = {};
    channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
    channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
    var ByteParser = class extends Writable {
      #buffers = [];
      #byteOffset = 0;
      #state = parserStates.INFO;
      #info = {};
      #fragments = [];
      constructor(ws) {
        super();
        this.ws = ws;
      }
      /**
       * @param {Buffer} chunk
       * @param {() => void} callback
       */
      _write(chunk, _, callback) {
        this.#buffers.push(chunk);
        this.#byteOffset += chunk.length;
        this.run(callback);
      }
      /**
       * Runs whenever a new chunk is received.
       * Callback is called whenever there are no more chunks buffering,
       * or not enough bytes are buffered to parse.
       */
      run(callback) {
        while (true) {
          if (this.#state === parserStates.INFO) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer = this.consume(2);
            this.#info.fin = (buffer[0] & 128) !== 0;
            this.#info.opcode = buffer[0] & 15;
            this.#info.originalOpcode ??= this.#info.opcode;
            this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
            if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
              failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
              return;
            }
            const payloadLength = buffer[1] & 127;
            if (payloadLength <= 125) {
              this.#info.payloadLength = payloadLength;
              this.#state = parserStates.READ_DATA;
            } else if (payloadLength === 126) {
              this.#state = parserStates.PAYLOADLENGTH_16;
            } else if (payloadLength === 127) {
              this.#state = parserStates.PAYLOADLENGTH_64;
            }
            if (this.#info.fragmented && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
              return;
            } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
              return;
            } else if (this.#info.opcode === opcodes.CLOSE) {
              if (payloadLength === 1) {
                failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                return;
              }
              const body = this.consume(payloadLength);
              this.#info.closeInfo = this.parseCloseBody(false, body);
              if (!this.ws[kSentClose]) {
                const body2 = Buffer.allocUnsafe(2);
                body2.writeUInt16BE(this.#info.closeInfo.code, 0);
                const closeFrame = new WebsocketFrameSend(body2);
                this.ws[kResponse].socket.write(
                  closeFrame.createFrame(opcodes.CLOSE),
                  (err) => {
                    if (!err) {
                      this.ws[kSentClose] = true;
                    }
                  }
                );
              }
              this.ws[kReadyState] = states.CLOSING;
              this.ws[kReceivedClose] = true;
              this.end();
              return;
            } else if (this.#info.opcode === opcodes.PING) {
              const body = this.consume(payloadLength);
              if (!this.ws[kReceivedClose]) {
                const frame = new WebsocketFrameSend(body);
                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
                if (channels.ping.hasSubscribers) {
                  channels.ping.publish({
                    payload: body
                  });
                }
              }
              this.#state = parserStates.INFO;
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            } else if (this.#info.opcode === opcodes.PONG) {
              const body = this.consume(payloadLength);
              if (channels.pong.hasSubscribers) {
                channels.pong.publish({
                  payload: body
                });
              }
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            }
          } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer = this.consume(2);
            this.#info.payloadLength = buffer.readUInt16BE(0);
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
            if (this.#byteOffset < 8) {
              return callback();
            }
            const buffer = this.consume(8);
            const upper = buffer.readUInt32BE(0);
            if (upper > 2 ** 31 - 1) {
              failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
              return;
            }
            const lower = buffer.readUInt32BE(4);
            this.#info.payloadLength = (upper << 8) + lower;
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.READ_DATA) {
            if (this.#byteOffset < this.#info.payloadLength) {
              return callback();
            } else if (this.#byteOffset >= this.#info.payloadLength) {
              const body = this.consume(this.#info.payloadLength);
              this.#fragments.push(body);
              if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
                const fullMessage = Buffer.concat(this.#fragments);
                websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                this.#info = {};
                this.#fragments.length = 0;
              }
              this.#state = parserStates.INFO;
            }
          }
          if (this.#byteOffset > 0) {
            continue;
          } else {
            callback();
            break;
          }
        }
      }
      /**
       * Take n bytes from the buffered Buffers
       * @param {number} n
       * @returns {Buffer|null}
       */
      consume(n) {
        if (n > this.#byteOffset) {
          return null;
        } else if (n === 0) {
          return emptyBuffer;
        }
        if (this.#buffers[0].length === n) {
          this.#byteOffset -= this.#buffers[0].length;
          return this.#buffers.shift();
        }
        const buffer = Buffer.allocUnsafe(n);
        let offset = 0;
        while (offset !== n) {
          const next = this.#buffers[0];
          const { length } = next;
          if (length + offset === n) {
            buffer.set(this.#buffers.shift(), offset);
            break;
          } else if (length + offset > n) {
            buffer.set(next.subarray(0, n - offset), offset);
            this.#buffers[0] = next.subarray(n - offset);
            break;
          } else {
            buffer.set(this.#buffers.shift(), offset);
            offset += next.length;
          }
        }
        this.#byteOffset -= n;
        return buffer;
      }
      parseCloseBody(onlyCode, data) {
        let code;
        if (data.length >= 2) {
          code = data.readUInt16BE(0);
        }
        if (onlyCode) {
          if (!isValidStatusCode(code)) {
            return null;
          }
          return { code };
        }
        let reason = data.subarray(2);
        if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
          reason = reason.subarray(3);
        }
        if (code !== void 0 && !isValidStatusCode(code)) {
          return null;
        }
        try {
          reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
        } catch {
          return null;
        }
        return { code, reason };
      }
      get closingInfo() {
        return this.#info.closeInfo;
      }
    };
    module2.exports = {
      ByteParser
    };
  }
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({
  "node_modules/undici/lib/websocket/websocket.js"(exports2, module2) {
    "use strict";
    var { webidl } = require_webidl();
    var { DOMException: DOMException2 } = require_constants2();
    var { URLSerializer } = require_dataURL();
    var { getGlobalOrigin } = require_global();
    var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants5();
    var {
      kWebSocketURL,
      kReadyState,
      kController,
      kBinaryType,
      kResponse,
      kSentClose,
      kByteParser
    } = require_symbols5();
    var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util7();
    var { establishWebSocketConnection } = require_connection();
    var { WebsocketFrameSend } = require_frame();
    var { ByteParser } = require_receiver();
    var { kEnumerableProperty, isBlobLike } = require_util();
    var { getGlobalDispatcher } = require_global2();
    var { types } = require("util");
    var experimentalWarned = false;
    var WebSocket = class _WebSocket extends EventTarget {
      #events = {
        open: null,
        error: null,
        close: null,
        message: null
      };
      #bufferedAmount = 0;
      #protocol = "";
      #extensions = "";
      /**
       * @param {string} url
       * @param {string|string[]} protocols
       */
      constructor(url, protocols = []) {
        super();
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
        if (!experimentalWarned) {
          experimentalWarned = true;
          process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
            code: "UNDICI-WS"
          });
        }
        const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url = webidl.converters.USVString(url);
        protocols = options.protocols;
        const baseURL = getGlobalOrigin();
        let urlRecord;
        try {
          urlRecord = new URL(url, baseURL);
        } catch (e) {
          throw new DOMException2(e, "SyntaxError");
        }
        if (urlRecord.protocol === "http:") {
          urlRecord.protocol = "ws:";
        } else if (urlRecord.protocol === "https:") {
          urlRecord.protocol = "wss:";
        }
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
          throw new DOMException2(
            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
            "SyntaxError"
          );
        }
        if (urlRecord.hash || urlRecord.href.endsWith("#")) {
          throw new DOMException2("Got fragment", "SyntaxError");
        }
        if (typeof protocols === "string") {
          protocols = [protocols];
        }
        if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        this[kWebSocketURL] = new URL(urlRecord.href);
        this[kController] = establishWebSocketConnection(
          urlRecord,
          protocols,
          this,
          (response) => this.#onConnectionEstablished(response),
          options
        );
        this[kReadyState] = _WebSocket.CONNECTING;
        this[kBinaryType] = "blob";
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-close
       * @param {number|undefined} code
       * @param {string|undefined} reason
       */
      close(code = void 0, reason = void 0) {
        webidl.brandCheck(this, _WebSocket);
        if (code !== void 0) {
          code = webidl.converters["unsigned short"](code, { clamp: true });
        }
        if (reason !== void 0) {
          reason = webidl.converters.USVString(reason);
        }
        if (code !== void 0) {
          if (code !== 1e3 && (code < 3e3 || code > 4999)) {
            throw new DOMException2("invalid code", "InvalidAccessError");
          }
        }
        let reasonByteLength = 0;
        if (reason !== void 0) {
          reasonByteLength = Buffer.byteLength(reason);
          if (reasonByteLength > 123) {
            throw new DOMException2(
              `Reason must be less than 123 bytes; received ${reasonByteLength}`,
              "SyntaxError"
            );
          }
        }
        if (this[kReadyState] === _WebSocket.CLOSING || this[kReadyState] === _WebSocket.CLOSED) {
        } else if (!isEstablished(this)) {
          failWebsocketConnection(this, "Connection was closed before it was established.");
          this[kReadyState] = _WebSocket.CLOSING;
        } else if (!isClosing(this)) {
          const frame = new WebsocketFrameSend();
          if (code !== void 0 && reason === void 0) {
            frame.frameData = Buffer.allocUnsafe(2);
            frame.frameData.writeUInt16BE(code, 0);
          } else if (code !== void 0 && reason !== void 0) {
            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
            frame.frameData.writeUInt16BE(code, 0);
            frame.frameData.write(reason, 2, "utf-8");
          } else {
            frame.frameData = emptyBuffer;
          }
          const socket = this[kResponse].socket;
          socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
            if (!err) {
              this[kSentClose] = true;
            }
          });
          this[kReadyState] = states.CLOSING;
        } else {
          this[kReadyState] = _WebSocket.CLOSING;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-send
       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
       */
      send(data) {
        webidl.brandCheck(this, _WebSocket);
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
        data = webidl.converters.WebSocketSendData(data);
        if (this[kReadyState] === _WebSocket.CONNECTING) {
          throw new DOMException2("Sent before connected.", "InvalidStateError");
        }
        if (!isEstablished(this) || isClosing(this)) {
          return;
        }
        const socket = this[kResponse].socket;
        if (typeof data === "string") {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer = frame.createFrame(opcodes.TEXT);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (types.isArrayBuffer(data)) {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (ArrayBuffer.isView(data)) {
          const ab = Buffer.from(data, data.byteOffset, data.byteLength);
          const frame = new WebsocketFrameSend(ab);
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += ab.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= ab.byteLength;
          });
        } else if (isBlobLike(data)) {
          const frame = new WebsocketFrameSend();
          data.arrayBuffer().then((ab) => {
            const value = Buffer.from(ab);
            frame.frameData = value;
            const buffer = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, () => {
              this.#bufferedAmount -= value.byteLength;
            });
          });
        }
      }
      get readyState() {
        webidl.brandCheck(this, _WebSocket);
        return this[kReadyState];
      }
      get bufferedAmount() {
        webidl.brandCheck(this, _WebSocket);
        return this.#bufferedAmount;
      }
      get url() {
        webidl.brandCheck(this, _WebSocket);
        return URLSerializer(this[kWebSocketURL]);
      }
      get extensions() {
        webidl.brandCheck(this, _WebSocket);
        return this.#extensions;
      }
      get protocol() {
        webidl.brandCheck(this, _WebSocket);
        return this.#protocol;
      }
      get onopen() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.open;
      }
      set onopen(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.open) {
          this.removeEventListener("open", this.#events.open);
        }
        if (typeof fn === "function") {
          this.#events.open = fn;
          this.addEventListener("open", fn);
        } else {
          this.#events.open = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.error) {
          this.removeEventListener("error", this.#events.error);
        }
        if (typeof fn === "function") {
          this.#events.error = fn;
          this.addEventListener("error", fn);
        } else {
          this.#events.error = null;
        }
      }
      get onclose() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.close;
      }
      set onclose(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.close) {
          this.removeEventListener("close", this.#events.close);
        }
        if (typeof fn === "function") {
          this.#events.close = fn;
          this.addEventListener("close", fn);
        } else {
          this.#events.close = null;
        }
      }
      get onmessage() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.message;
      }
      set onmessage(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.message) {
          this.removeEventListener("message", this.#events.message);
        }
        if (typeof fn === "function") {
          this.#events.message = fn;
          this.addEventListener("message", fn);
        } else {
          this.#events.message = null;
        }
      }
      get binaryType() {
        webidl.brandCheck(this, _WebSocket);
        return this[kBinaryType];
      }
      set binaryType(type) {
        webidl.brandCheck(this, _WebSocket);
        if (type !== "blob" && type !== "arraybuffer") {
          this[kBinaryType] = "blob";
        } else {
          this[kBinaryType] = type;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      #onConnectionEstablished(response) {
        this[kResponse] = response;
        const parser = new ByteParser(this);
        parser.on("drain", function onParserDrain() {
          this.ws[kResponse].socket.resume();
        });
        response.socket.ws = this;
        this[kByteParser] = parser;
        this[kReadyState] = states.OPEN;
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) {
          this.#extensions = extensions;
        }
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) {
          this.#protocol = protocol;
        }
        fireEvent("open", this);
      }
    };
    WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
    WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
    WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
    WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
    Object.defineProperties(WebSocket.prototype, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors,
      url: kEnumerableProperty,
      readyState: kEnumerableProperty,
      bufferedAmount: kEnumerableProperty,
      onopen: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onclose: kEnumerableProperty,
      close: kEnumerableProperty,
      onmessage: kEnumerableProperty,
      binaryType: kEnumerableProperty,
      send: kEnumerableProperty,
      extensions: kEnumerableProperty,
      protocol: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(WebSocket, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors
    });
    webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(
      webidl.converters.DOMString
    );
    webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
      if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) {
        return webidl.converters["sequence<DOMString>"](V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.WebSocketInit = webidl.dictionaryConverter([
      {
        key: "protocols",
        converter: webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue() {
          return [];
        }
      },
      {
        key: "dispatcher",
        converter: (V) => V,
        get defaultValue() {
          return getGlobalDispatcher();
        }
      },
      {
        key: "headers",
        converter: webidl.nullableConverter(webidl.converters.HeadersInit)
      }
    ]);
    webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
      if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
        return webidl.converters.WebSocketInit(V);
      }
      return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
    };
    webidl.converters.WebSocketSendData = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V);
        }
      }
      return webidl.converters.USVString(V);
    };
    module2.exports = {
      WebSocket
    };
  }
});

// node_modules/undici/index.js
var require_undici = __commonJS({
  "node_modules/undici/index.js"(exports2, module2) {
    "use strict";
    var Client = require_client();
    var Dispatcher = require_dispatcher();
    var errors = require_errors();
    var Pool = require_pool();
    var BalancedPool = require_balanced_pool();
    var Agent = require_agent();
    var util = require_util();
    var { InvalidArgumentError } = errors;
    var api = require_api();
    var buildConnector = require_connect();
    var MockClient = require_mock_client();
    var MockAgent = require_mock_agent();
    var MockPool = require_mock_pool();
    var mockErrors = require_mock_errors();
    var ProxyAgent = require_proxy_agent();
    var RetryHandler = require_RetryHandler();
    var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
    var DecoratorHandler = require_DecoratorHandler();
    var RedirectHandler = require_RedirectHandler();
    var createRedirectInterceptor = require_redirectInterceptor();
    var hasCrypto;
    try {
      require("crypto");
      hasCrypto = true;
    } catch {
      hasCrypto = false;
    }
    Object.assign(Dispatcher.prototype, api);
    module2.exports.Dispatcher = Dispatcher;
    module2.exports.Client = Client;
    module2.exports.Pool = Pool;
    module2.exports.BalancedPool = BalancedPool;
    module2.exports.Agent = Agent;
    module2.exports.ProxyAgent = ProxyAgent;
    module2.exports.RetryHandler = RetryHandler;
    module2.exports.DecoratorHandler = DecoratorHandler;
    module2.exports.RedirectHandler = RedirectHandler;
    module2.exports.createRedirectInterceptor = createRedirectInterceptor;
    module2.exports.buildConnector = buildConnector;
    module2.exports.errors = errors;
    function makeDispatcher(fn) {
      return (url, opts, handler) => {
        if (typeof opts === "function") {
          handler = opts;
          opts = null;
        }
        if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
          throw new InvalidArgumentError("invalid url");
        }
        if (opts != null && typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (opts && opts.path != null) {
          if (typeof opts.path !== "string") {
            throw new InvalidArgumentError("invalid opts.path");
          }
          let path3 = opts.path;
          if (!opts.path.startsWith("/")) {
            path3 = `/${path3}`;
          }
          url = new URL(util.parseOrigin(url).origin + path3);
        } else {
          if (!opts) {
            opts = typeof url === "object" ? url : {};
          }
          url = util.parseURL(url);
        }
        const { agent, dispatcher = getGlobalDispatcher() } = opts;
        if (agent) {
          throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        }
        return fn.call(dispatcher, {
          ...opts,
          origin: url.origin,
          path: url.search ? `${url.pathname}${url.search}` : url.pathname,
          method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
      };
    }
    module2.exports.setGlobalDispatcher = setGlobalDispatcher;
    module2.exports.getGlobalDispatcher = getGlobalDispatcher;
    if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
      let fetchImpl = null;
      module2.exports.fetch = async function fetch2(resource) {
        if (!fetchImpl) {
          fetchImpl = require_fetch().fetch;
        }
        try {
          return await fetchImpl(...arguments);
        } catch (err) {
          if (typeof err === "object") {
            Error.captureStackTrace(err, this);
          }
          throw err;
        }
      };
      module2.exports.Headers = require_headers().Headers;
      module2.exports.Response = require_response().Response;
      module2.exports.Request = require_request2().Request;
      module2.exports.FormData = require_formdata().FormData;
      module2.exports.File = require_file().File;
      module2.exports.FileReader = require_filereader().FileReader;
      const { setGlobalOrigin, getGlobalOrigin } = require_global();
      module2.exports.setGlobalOrigin = setGlobalOrigin;
      module2.exports.getGlobalOrigin = getGlobalOrigin;
      const { CacheStorage } = require_cachestorage();
      const { kConstruct } = require_symbols4();
      module2.exports.caches = new CacheStorage(kConstruct);
    }
    if (util.nodeMajor >= 16) {
      const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
      module2.exports.deleteCookie = deleteCookie;
      module2.exports.getCookies = getCookies;
      module2.exports.getSetCookies = getSetCookies;
      module2.exports.setCookie = setCookie;
      const { parseMIMEType, serializeAMimeType } = require_dataURL();
      module2.exports.parseMIMEType = parseMIMEType;
      module2.exports.serializeAMimeType = serializeAMimeType;
    }
    if (util.nodeMajor >= 18 && hasCrypto) {
      const { WebSocket } = require_websocket();
      module2.exports.WebSocket = WebSocket;
    }
    module2.exports.request = makeDispatcher(api.request);
    module2.exports.stream = makeDispatcher(api.stream);
    module2.exports.pipeline = makeDispatcher(api.pipeline);
    module2.exports.connect = makeDispatcher(api.connect);
    module2.exports.upgrade = makeDispatcher(api.upgrade);
    module2.exports.MockClient = MockClient;
    module2.exports.MockPool = MockPool;
    module2.exports.MockAgent = MockAgent;
    module2.exports.mockErrors = mockErrors;
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpClient = exports2.isHttps = exports2.HttpClientResponse = exports2.HttpClientError = exports2.getProxyUrl = exports2.MediaTypes = exports2.Headers = exports2.HttpCodes = void 0;
    var http = __importStar2(require("http"));
    var https = __importStar2(require("https"));
    var pm = __importStar2(require_proxy());
    var tunnel = __importStar2(require_tunnel2());
    var undici_1 = require_undici();
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes || (exports2.HttpCodes = HttpCodes = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers || (exports2.Headers = Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes || (exports2.MediaTypes = MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    exports2.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class _HttpClientError extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, _HttpClientError.prototype);
      }
    };
    exports2.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter2(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk]);
            });
            this.message.on("end", () => {
              resolve(output.toString());
            });
          }));
        });
      }
      readBodyBuffer() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter2(this, void 0, void 0, function* () {
            const chunks = [];
            this.message.on("data", (chunk) => {
              chunks.push(chunk);
            });
            this.message.on("end", () => {
              resolve(Buffer.concat(chunks));
            });
          }));
        });
      }
    };
    exports2.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    exports2.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      /**
       * Gets a typed object from an endpoint
       * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
       */
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter2(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter2(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter2(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter2(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      /**
       * Makes a raw http request.
       * All other methods such as get, post, patch, and request ultimately call this.
       * Prefer get, del, post and patch
       */
      request(verb, requestUrl, data, headers) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info5 = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info5, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info5, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info5 = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info5, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      /**
       * Needs to be called if keepAlive is set to true in request options.
       */
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      /**
       * Raw request.
       * @param info
       * @param data
       */
      requestRaw(info5, data) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve(res);
              }
            }
            this.requestRawWithCallback(info5, data, callbackForResult);
          });
        });
      }
      /**
       * Raw request with callback.
       * @param info
       * @param data
       * @param onResult
       */
      requestRawWithCallback(info5, data, onResult) {
        if (typeof data === "string") {
          if (!info5.options.headers) {
            info5.options.headers = {};
          }
          info5.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        const req = info5.httpModule.request(info5.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info5.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      /**
       * Gets an http agent. This function is useful when you need an http agent that handles
       * routing through a proxy server - depending upon the url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
          return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info5 = {};
        info5.parsedUrl = requestUrl;
        const usingSsl = info5.parsedUrl.protocol === "https:";
        info5.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info5.options = {};
        info5.options.host = info5.parsedUrl.hostname;
        info5.options.port = info5.parsedUrl.port ? parseInt(info5.parsedUrl.port) : defaultPort;
        info5.options.path = (info5.parsedUrl.pathname || "") + (info5.parsedUrl.search || "");
        info5.options.method = method;
        info5.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info5.options.headers["user-agent"] = this.userAgent;
        }
        info5.options.agent = this._getAgent(info5.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info5.options);
          }
        }
        return info5;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (!useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (!agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
          proxyAgent = this._proxyAgentDispatcher;
        }
        if (proxyAgent) {
          return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, (proxyUrl.username || proxyUrl.password) && {
          token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}`
        }));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
          proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
            rejectUnauthorized: false
          });
        }
        return proxyAgent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter2(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter2(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes.NotFound) {
              resolve(response);
            }
            function dateTimeDeserializer(key, value) {
              if (typeof value === "string") {
                const a = new Date(value);
                if (!isNaN(a.valueOf())) {
                  return a;
                }
              }
              return value;
            }
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports2.HttpClient = HttpClient;
    var lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PersonalAccessTokenCredentialHandler = exports2.BearerCredentialHandler = exports2.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter2(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter2(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter2(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports2.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class _OidcClient {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(_OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter2(this, void 0, void 0, function* () {
          const httpclient = _OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter2(this, void 0, void 0, function* () {
          try {
            let id_token_url = _OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            (0, core_1.debug)(`ID token url is ${id_token_url}`);
            const id_token = yield _OidcClient.getCall(id_token_url);
            (0, core_1.setSecret)(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports2.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.summary = exports2.markdownSummary = exports2.SUMMARY_DOCS_URL = exports2.SUMMARY_ENV_VAR = void 0;
    var os_1 = require("os");
    var fs_1 = require("fs");
    var { access, appendFile, writeFile } = fs_1.promises;
    exports2.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports2.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports2.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports2.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter2(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter2(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports2.markdownSummary = _summary;
    exports2.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toPlatformPath = exports2.toWin32Path = exports2.toPosixPath = void 0;
    var path3 = __importStar2(require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    exports2.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    exports2.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path3.sep);
    }
    exports2.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({
  "node_modules/@actions/io/lib/io-util.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCmdPath = exports2.tryGetExecutablePath = exports2.isRooted = exports2.isDirectory = exports2.exists = exports2.READONLY = exports2.UV_FS_O_EXLOCK = exports2.IS_WINDOWS = exports2.unlink = exports2.symlink = exports2.stat = exports2.rmdir = exports2.rm = exports2.rename = exports2.readlink = exports2.readdir = exports2.open = exports2.mkdir = exports2.lstat = exports2.copyFile = exports2.chmod = void 0;
    var fs6 = __importStar2(require("fs"));
    var path3 = __importStar2(require("path"));
    _a = fs6.promises, exports2.chmod = _a.chmod, exports2.copyFile = _a.copyFile, exports2.lstat = _a.lstat, exports2.mkdir = _a.mkdir, exports2.open = _a.open, exports2.readdir = _a.readdir, exports2.readlink = _a.readlink, exports2.rename = _a.rename, exports2.rm = _a.rm, exports2.rmdir = _a.rmdir, exports2.stat = _a.stat, exports2.symlink = _a.symlink, exports2.unlink = _a.unlink;
    exports2.IS_WINDOWS = process.platform === "win32";
    exports2.UV_FS_O_EXLOCK = 268435456;
    exports2.READONLY = fs6.constants.O_RDONLY;
    function exists(fsPath) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          yield exports2.stat(fsPath);
        } catch (err) {
          if (err.code === "ENOENT") {
            return false;
          }
          throw err;
        }
        return true;
      });
    }
    exports2.exists = exists;
    function isDirectory(fsPath, useStat = false) {
      return __awaiter2(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports2.stat(fsPath) : yield exports2.lstat(fsPath);
        return stats.isDirectory();
      });
    }
    exports2.isDirectory = isDirectory;
    function isRooted(p) {
      p = normalizeSeparators(p);
      if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
      }
      if (exports2.IS_WINDOWS) {
        return p.startsWith("\\") || /^[A-Z]:/i.test(p);
      }
      return p.startsWith("/");
    }
    exports2.isRooted = isRooted;
    function tryGetExecutablePath(filePath, extensions) {
      return __awaiter2(this, void 0, void 0, function* () {
        let stats = void 0;
        try {
          stats = yield exports2.stat(filePath);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
          }
        }
        if (stats && stats.isFile()) {
          if (exports2.IS_WINDOWS) {
            const upperExt = path3.extname(filePath).toUpperCase();
            if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) {
              return filePath;
            }
          } else {
            if (isUnixExecutable(stats)) {
              return filePath;
            }
          }
        }
        const originalFilePath = filePath;
        for (const extension of extensions) {
          filePath = originalFilePath + extension;
          stats = void 0;
          try {
            stats = yield exports2.stat(filePath);
          } catch (err) {
            if (err.code !== "ENOENT") {
              console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
          }
          if (stats && stats.isFile()) {
            if (exports2.IS_WINDOWS) {
              try {
                const directory = path3.dirname(filePath);
                const upperName = path3.basename(filePath).toUpperCase();
                for (const actualName of yield exports2.readdir(directory)) {
                  if (upperName === actualName.toUpperCase()) {
                    filePath = path3.join(directory, actualName);
                    break;
                  }
                }
              } catch (err) {
                console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
              }
              return filePath;
            } else {
              if (isUnixExecutable(stats)) {
                return filePath;
              }
            }
          }
        }
        return "";
      });
    }
    exports2.tryGetExecutablePath = tryGetExecutablePath;
    function normalizeSeparators(p) {
      p = p || "";
      if (exports2.IS_WINDOWS) {
        p = p.replace(/\//g, "\\");
        return p.replace(/\\\\+/g, "\\");
      }
      return p.replace(/\/\/+/g, "/");
    }
    function isUnixExecutable(stats) {
      return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
    }
    function getCmdPath() {
      var _a2;
      return (_a2 = process.env["COMSPEC"]) !== null && _a2 !== void 0 ? _a2 : `cmd.exe`;
    }
    exports2.getCmdPath = getCmdPath;
  }
});

// node_modules/@actions/io/lib/io.js
var require_io = __commonJS({
  "node_modules/@actions/io/lib/io.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.findInPath = exports2.which = exports2.mkdirP = exports2.rmRF = exports2.mv = exports2.cp = void 0;
    var assert_1 = require("assert");
    var path3 = __importStar2(require("path"));
    var ioUtil = __importStar2(require_io_util());
    function cp(source, dest, options = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        if (destStat && destStat.isFile() && !force) {
          return;
        }
        const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path3.join(dest, path3.basename(source)) : dest;
        if (!(yield ioUtil.exists(source))) {
          throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
          if (!recursive) {
            throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
          } else {
            yield cpDirRecursive(source, newDest, 0, force);
          }
        } else {
          if (path3.relative(source, newDest) === "") {
            throw new Error(`'${newDest}' and '${source}' are the same file`);
          }
          yield copyFile(source, newDest, force);
        }
      });
    }
    exports2.cp = cp;
    function mv(source, dest, options = {}) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
          let destExists = true;
          if (yield ioUtil.isDirectory(dest)) {
            dest = path3.join(dest, path3.basename(source));
            destExists = yield ioUtil.exists(dest);
          }
          if (destExists) {
            if (options.force == null || options.force) {
              yield rmRF(dest);
            } else {
              throw new Error("Destination already exists");
            }
          }
        }
        yield mkdirP(path3.dirname(dest));
        yield ioUtil.rename(source, dest);
      });
    }
    exports2.mv = mv;
    function rmRF(inputPath) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
          if (/[*"<>|]/.test(inputPath)) {
            throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
          }
        }
        try {
          yield ioUtil.rm(inputPath, {
            force: true,
            maxRetries: 3,
            recursive: true,
            retryDelay: 300
          });
        } catch (err) {
          throw new Error(`File was unable to be removed ${err}`);
        }
      });
    }
    exports2.rmRF = rmRF;
    function mkdirP(fsPath) {
      return __awaiter2(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, "a path argument must be provided");
        yield ioUtil.mkdir(fsPath, { recursive: true });
      });
    }
    exports2.mkdirP = mkdirP;
    function which(tool, check) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        if (check) {
          const result = yield which(tool, false);
          if (!result) {
            if (ioUtil.IS_WINDOWS) {
              throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
            } else {
              throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
            }
          }
          return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
          return matches[0];
        }
        return "";
      });
    }
    exports2.which = which;
    function findInPath(tool) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env["PATHEXT"]) {
          for (const extension of process.env["PATHEXT"].split(path3.delimiter)) {
            if (extension) {
              extensions.push(extension);
            }
          }
        }
        if (ioUtil.isRooted(tool)) {
          const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
          if (filePath) {
            return [filePath];
          }
          return [];
        }
        if (tool.includes(path3.sep)) {
          return [];
        }
        const directories = [];
        if (process.env.PATH) {
          for (const p of process.env.PATH.split(path3.delimiter)) {
            if (p) {
              directories.push(p);
            }
          }
        }
        const matches = [];
        for (const directory of directories) {
          const filePath = yield ioUtil.tryGetExecutablePath(path3.join(directory, tool), extensions);
          if (filePath) {
            matches.push(filePath);
          }
        }
        return matches;
      });
    }
    exports2.findInPath = findInPath;
    function readCopyOptions(options) {
      const force = options.force == null ? true : options.force;
      const recursive = Boolean(options.recursive);
      const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
      return { force, recursive, copySourceDirectory };
    }
    function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (currentDepth >= 255)
          return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
          const srcFile = `${sourceDir}/${fileName}`;
          const destFile = `${destDir}/${fileName}`;
          const srcFileStat = yield ioUtil.lstat(srcFile);
          if (srcFileStat.isDirectory()) {
            yield cpDirRecursive(srcFile, destFile, currentDepth, force);
          } else {
            yield copyFile(srcFile, destFile, force);
          }
        }
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
      });
    }
    function copyFile(srcFile, destFile, force) {
      return __awaiter2(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
          try {
            yield ioUtil.lstat(destFile);
            yield ioUtil.unlink(destFile);
          } catch (e) {
            if (e.code === "EPERM") {
              yield ioUtil.chmod(destFile, "0666");
              yield ioUtil.unlink(destFile);
            }
          }
          const symlinkFull = yield ioUtil.readlink(srcFile);
          yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? "junction" : null);
        } else if (!(yield ioUtil.exists(destFile)) || force) {
          yield ioUtil.copyFile(srcFile, destFile);
        }
      });
    }
  }
});

// node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({
  "node_modules/@actions/exec/lib/toolrunner.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.argStringToArray = exports2.ToolRunner = void 0;
    var os = __importStar2(require("os"));
    var events = __importStar2(require("events"));
    var child = __importStar2(require("child_process"));
    var path3 = __importStar2(require("path"));
    var io = __importStar2(require_io());
    var ioUtil = __importStar2(require_io_util());
    var timers_1 = require("timers");
    var IS_WINDOWS = process.platform === "win32";
    var ToolRunner = class extends events.EventEmitter {
      constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
          throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
      }
      _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
          this.options.listeners.debug(message);
        }
      }
      _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? "" : "[command]";
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            cmd += toolPath;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          } else if (options.windowsVerbatimArguments) {
            cmd += `"${toolPath}"`;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          } else {
            cmd += this._windowsQuoteCmdArg(toolPath);
            for (const a of args) {
              cmd += ` ${this._windowsQuoteCmdArg(a)}`;
            }
          }
        } else {
          cmd += toolPath;
          for (const a of args) {
            cmd += ` ${a}`;
          }
        }
        return cmd;
      }
      _processLineBuffer(data, strBuffer, onLine) {
        try {
          let s = strBuffer + data.toString();
          let n = s.indexOf(os.EOL);
          while (n > -1) {
            const line = s.substring(0, n);
            onLine(line);
            s = s.substring(n + os.EOL.length);
            n = s.indexOf(os.EOL);
          }
          return s;
        } catch (err) {
          this._debug(`error processing line. Failed with error ${err}`);
          return "";
        }
      }
      _getSpawnFileName() {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            return process.env["COMSPEC"] || "cmd.exe";
          }
        }
        return this.toolPath;
      }
      _getSpawnArgs(options) {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
            for (const a of this.args) {
              argline += " ";
              argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
            }
            argline += '"';
            return [argline];
          }
        }
        return this.args;
      }
      _endsWith(str, end) {
        return str.endsWith(end);
      }
      _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
      }
      _windowsQuoteCmdArg(arg) {
        if (!this._isCmdFile()) {
          return this._uvQuoteCmdArg(arg);
        }
        if (!arg) {
          return '""';
        }
        const cmdSpecialChars = [
          " ",
          "	",
          "&",
          "(",
          ")",
          "[",
          "]",
          "{",
          "}",
          "^",
          "=",
          ";",
          "!",
          "'",
          "+",
          ",",
          "`",
          "~",
          "|",
          "<",
          ">",
          '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
          if (cmdSpecialChars.some((x) => x === char)) {
            needsQuotes = true;
            break;
          }
        }
        if (!needsQuotes) {
          return arg;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
          reverse += arg[i - 1];
          if (quoteHit && arg[i - 1] === "\\") {
            reverse += "\\";
          } else if (arg[i - 1] === '"') {
            quoteHit = true;
            reverse += '"';
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split("").reverse().join("");
      }
      _uvQuoteCmdArg(arg) {
        if (!arg) {
          return '""';
        }
        if (!arg.includes(" ") && !arg.includes("	") && !arg.includes('"')) {
          return arg;
        }
        if (!arg.includes('"') && !arg.includes("\\")) {
          return `"${arg}"`;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
          reverse += arg[i - 1];
          if (quoteHit && arg[i - 1] === "\\") {
            reverse += "\\";
          } else if (arg[i - 1] === '"') {
            quoteHit = true;
            reverse += "\\";
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split("").reverse().join("");
      }
      _cloneExecOptions(options) {
        options = options || {};
        const result = {
          cwd: options.cwd || process.cwd(),
          env: options.env || process.env,
          silent: options.silent || false,
          windowsVerbatimArguments: options.windowsVerbatimArguments || false,
          failOnStdErr: options.failOnStdErr || false,
          ignoreReturnCode: options.ignoreReturnCode || false,
          delay: options.delay || 1e4
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
      }
      _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
          result.argv0 = `"${toolPath}"`;
        }
        return result;
      }
      /**
       * Exec a tool.
       * Output will be streamed to the live console.
       * Returns promise with return code
       *
       * @param     tool     path to tool to exec
       * @param     options  optional exec options.  See ExecOptions
       * @returns   number
       */
      exec() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) {
            this.toolPath = path3.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
          }
          this.toolPath = yield io.which(this.toolPath, true);
          return new Promise((resolve, reject) => __awaiter2(this, void 0, void 0, function* () {
            this._debug(`exec tool: ${this.toolPath}`);
            this._debug("arguments:");
            for (const arg of this.args) {
              this._debug(`   ${arg}`);
            }
            const optionsNonNull = this._cloneExecOptions(this.options);
            if (!optionsNonNull.silent && optionsNonNull.outStream) {
              optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
            }
            const state = new ExecState(optionsNonNull, this.toolPath);
            state.on("debug", (message) => {
              this._debug(message);
            });
            if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
              return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
            }
            const fileName = this._getSpawnFileName();
            const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
            let stdbuffer = "";
            if (cp.stdout) {
              cp.stdout.on("data", (data) => {
                if (this.options.listeners && this.options.listeners.stdout) {
                  this.options.listeners.stdout(data);
                }
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                  optionsNonNull.outStream.write(data);
                }
                stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                  if (this.options.listeners && this.options.listeners.stdline) {
                    this.options.listeners.stdline(line);
                  }
                });
              });
            }
            let errbuffer = "";
            if (cp.stderr) {
              cp.stderr.on("data", (data) => {
                state.processStderr = true;
                if (this.options.listeners && this.options.listeners.stderr) {
                  this.options.listeners.stderr(data);
                }
                if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
                  const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
                  s.write(data);
                }
                errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                  if (this.options.listeners && this.options.listeners.errline) {
                    this.options.listeners.errline(line);
                  }
                });
              });
            }
            cp.on("error", (err) => {
              state.processError = err.message;
              state.processExited = true;
              state.processClosed = true;
              state.CheckComplete();
            });
            cp.on("exit", (code) => {
              state.processExitCode = code;
              state.processExited = true;
              this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
              state.CheckComplete();
            });
            cp.on("close", (code) => {
              state.processExitCode = code;
              state.processExited = true;
              state.processClosed = true;
              this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
              state.CheckComplete();
            });
            state.on("done", (error, exitCode) => {
              if (stdbuffer.length > 0) {
                this.emit("stdline", stdbuffer);
              }
              if (errbuffer.length > 0) {
                this.emit("errline", errbuffer);
              }
              cp.removeAllListeners();
              if (error) {
                reject(error);
              } else {
                resolve(exitCode);
              }
            });
            if (this.options.input) {
              if (!cp.stdin) {
                throw new Error("child process missing stdin");
              }
              cp.stdin.end(this.options.input);
            }
          }));
        });
      }
    };
    exports2.ToolRunner = ToolRunner;
    function argStringToArray(argString) {
      const args = [];
      let inQuotes = false;
      let escaped = false;
      let arg = "";
      function append(c) {
        if (escaped && c !== '"') {
          arg += "\\";
        }
        arg += c;
        escaped = false;
      }
      for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
          if (!escaped) {
            inQuotes = !inQuotes;
          } else {
            append(c);
          }
          continue;
        }
        if (c === "\\" && escaped) {
          append(c);
          continue;
        }
        if (c === "\\" && inQuotes) {
          escaped = true;
          continue;
        }
        if (c === " " && !inQuotes) {
          if (arg.length > 0) {
            args.push(arg);
            arg = "";
          }
          continue;
        }
        append(c);
      }
      if (arg.length > 0) {
        args.push(arg.trim());
      }
      return args;
    }
    exports2.argStringToArray = argStringToArray;
    var ExecState = class _ExecState extends events.EventEmitter {
      constructor(options, toolPath) {
        super();
        this.processClosed = false;
        this.processError = "";
        this.processExitCode = 0;
        this.processExited = false;
        this.processStderr = false;
        this.delay = 1e4;
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
          throw new Error("toolPath must not be empty");
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
          this.delay = options.delay;
        }
      }
      CheckComplete() {
        if (this.done) {
          return;
        }
        if (this.processClosed) {
          this._setResult();
        } else if (this.processExited) {
          this.timeout = timers_1.setTimeout(_ExecState.HandleTimeout, this.delay, this);
        }
      }
      _debug(message) {
        this.emit("debug", message);
      }
      _setResult() {
        let error;
        if (this.processExited) {
          if (this.processError) {
            error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
          } else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
            error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
          } else if (this.processStderr && this.options.failOnStdErr) {
            error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
          }
        }
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.done = true;
        this.emit("done", error, this.processExitCode);
      }
      static HandleTimeout(state) {
        if (state.done) {
          return;
        }
        if (!state.processClosed && state.processExited) {
          const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
          state._debug(message);
        }
        state._setResult();
      }
    };
  }
});

// node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({
  "node_modules/@actions/exec/lib/exec.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExecOutput = exports2.exec = void 0;
    var string_decoder_1 = require("string_decoder");
    var tr = __importStar2(require_toolrunner());
    function exec(commandLine, args, options) {
      return __awaiter2(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
          throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
      });
    }
    exports2.exec = exec;
    function getExecOutput2(commandLine, args, options) {
      var _a, _b;
      return __awaiter2(this, void 0, void 0, function* () {
        let stdout = "";
        let stderr = "";
        const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
        const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;
        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
        const stdErrListener = (data) => {
          stderr += stderrDecoder.write(data);
          if (originalStdErrListener) {
            originalStdErrListener(data);
          }
        };
        const stdOutListener = (data) => {
          stdout += stdoutDecoder.write(data);
          if (originalStdoutListener) {
            originalStdoutListener(data);
          }
        };
        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        stdout += stdoutDecoder.end();
        stderr += stderrDecoder.end();
        return {
          exitCode,
          stdout,
          stderr
        };
      });
    }
    exports2.getExecOutput = getExecOutput2;
  }
});

// node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({
  "node_modules/@actions/core/lib/platform.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDetails = exports2.isLinux = exports2.isMacOS = exports2.isWindows = exports2.arch = exports2.platform = void 0;
    var os_1 = __importDefault2(require("os"));
    var exec = __importStar2(require_exec());
    var getWindowsInfo = () => __awaiter2(void 0, void 0, void 0, function* () {
      const { stdout: version } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"', void 0, {
        silent: true
      });
      const { stdout: name } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"', void 0, {
        silent: true
      });
      return {
        name: name.trim(),
        version: version.trim()
      };
    });
    var getMacOsInfo = () => __awaiter2(void 0, void 0, void 0, function* () {
      var _a, _b, _c, _d;
      const { stdout } = yield exec.getExecOutput("sw_vers", void 0, {
        silent: true
      });
      const version = (_b = (_a = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : "";
      const name = (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : "";
      return {
        name,
        version
      };
    });
    var getLinuxInfo = () => __awaiter2(void 0, void 0, void 0, function* () {
      const { stdout } = yield exec.getExecOutput("lsb_release", ["-i", "-r", "-s"], {
        silent: true
      });
      const [name, version] = stdout.trim().split("\n");
      return {
        name,
        version
      };
    });
    exports2.platform = os_1.default.platform();
    exports2.arch = os_1.default.arch();
    exports2.isWindows = exports2.platform === "win32";
    exports2.isMacOS = exports2.platform === "darwin";
    exports2.isLinux = exports2.platform === "linux";
    function getDetails() {
      return __awaiter2(this, void 0, void 0, function* () {
        return Object.assign(Object.assign({}, yield exports2.isWindows ? getWindowsInfo() : exports2.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
          platform: exports2.platform,
          arch: exports2.arch,
          isWindows: exports2.isWindows,
          isMacOS: exports2.isMacOS,
          isLinux: exports2.isLinux
        });
      });
    }
    exports2.getDetails = getDetails;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.platform = exports2.toPlatformPath = exports2.toWin32Path = exports2.toPosixPath = exports2.markdownSummary = exports2.summary = exports2.getIDToken = exports2.getState = exports2.saveState = exports2.group = exports2.endGroup = exports2.startGroup = exports2.info = exports2.notice = exports2.warning = exports2.error = exports2.debug = exports2.isDebug = exports2.setFailed = exports2.setCommandEcho = exports2.setOutput = exports2.getBooleanInput = exports2.getMultilineInput = exports2.getInput = exports2.addPath = exports2.setSecret = exports2.exportVariable = exports2.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os = __importStar2(require("os"));
    var path3 = __importStar2(require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode || (exports2.ExitCode = ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = (0, utils_1.toCommandValue)(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name, val));
      }
      (0, command_1.issueCommand)("set-env", { name }, convertedVal);
    }
    exports2.exportVariable = exportVariable;
    function setSecret(secret) {
      (0, command_1.issueCommand)("add-mask", {}, secret);
    }
    exports2.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        (0, file_command_1.issueFileCommand)("PATH", inputPath);
      } else {
        (0, command_1.issueCommand)("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path3.delimiter}${process.env["PATH"]}`;
    }
    exports2.addPath = addPath;
    function getInput6(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports2.getInput = getInput6;
    function getMultilineInput(name, options) {
      const inputs = getInput6(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    exports2.getMultilineInput = getMultilineInput;
    function getBooleanInput2(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput6(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports2.getBooleanInput = getBooleanInput2;
    function setOutput(name, value) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name, value));
      }
      process.stdout.write(os.EOL);
      (0, command_1.issueCommand)("set-output", { name }, (0, utils_1.toCommandValue)(value));
    }
    exports2.setOutput = setOutput;
    function setCommandEcho(enabled) {
      (0, command_1.issue)("echo", enabled ? "on" : "off");
    }
    exports2.setCommandEcho = setCommandEcho;
    function setFailed2(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    exports2.setFailed = setFailed2;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    exports2.isDebug = isDebug;
    function debug(message) {
      (0, command_1.issueCommand)("debug", {}, message);
    }
    exports2.debug = debug;
    function error(message, properties = {}) {
      (0, command_1.issueCommand)("error", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
    }
    exports2.error = error;
    function warning3(message, properties = {}) {
      (0, command_1.issueCommand)("warning", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
    }
    exports2.warning = warning3;
    function notice(message, properties = {}) {
      (0, command_1.issueCommand)("notice", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
    }
    exports2.notice = notice;
    function info5(message) {
      process.stdout.write(message + os.EOL);
    }
    exports2.info = info5;
    function startGroup(name) {
      (0, command_1.issue)("group", name);
    }
    exports2.startGroup = startGroup;
    function endGroup() {
      (0, command_1.issue)("endgroup");
    }
    exports2.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter2(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports2.group = group;
    function saveState(name, value) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name, value));
      }
      (0, command_1.issueCommand)("save-state", { name }, (0, utils_1.toCommandValue)(value));
    }
    exports2.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    exports2.getState = getState;
    function getIDToken(aud) {
      return __awaiter2(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports2.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports2, "summary", { enumerable: true, get: function() {
      return summary_1.summary;
    } });
    var summary_2 = require_summary();
    Object.defineProperty(exports2, "markdownSummary", { enumerable: true, get: function() {
      return summary_2.markdownSummary;
    } });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports2, "toPosixPath", { enumerable: true, get: function() {
      return path_utils_1.toPosixPath;
    } });
    Object.defineProperty(exports2, "toWin32Path", { enumerable: true, get: function() {
      return path_utils_1.toWin32Path;
    } });
    Object.defineProperty(exports2, "toPlatformPath", { enumerable: true, get: function() {
      return path_utils_1.toPlatformPath;
    } });
    exports2.platform = __importStar2(require_platform());
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports2, module2) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix = false;
    }
    function EE(fn, context2, once) {
      this.fn = fn;
      this.context = context2;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context2, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context2 || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context2) {
      return addListener(this, event, fn, context2, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context2) {
      return addListener(this, event, fn, context2, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context2, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context2 || listeners.context === context2)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context2 && listeners[i].context !== context2) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module2) {
      module2.exports = EventEmitter2;
    }
  }
});

// node_modules/@actions/github/lib/context.js
var require_context = __commonJS({
  "node_modules/@actions/github/lib/context.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Context = void 0;
    var fs_1 = require("fs");
    var os_1 = require("os");
    var Context = class {
      /**
       * Hydrate the context from the environment
       */
      constructor() {
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
          if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) {
            this.payload = JSON.parse((0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
          } else {
            const path3 = process.env.GITHUB_EVENT_PATH;
            process.stdout.write(`GITHUB_EVENT_PATH ${path3} does not exist${os_1.EOL}`);
          }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
      }
      get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
      }
      get repo() {
        if (process.env.GITHUB_REPOSITORY) {
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
          return { owner, repo };
        }
        if (this.payload.repository) {
          return {
            owner: this.payload.repository.owner.login,
            repo: this.payload.repository.name
          };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
      }
    };
    exports2.Context = Context;
  }
});

// node_modules/@actions/github/lib/internal/utils.js
var require_utils3 = __commonJS({
  "node_modules/@actions/github/lib/internal/utils.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getApiBaseUrl = exports2.getProxyFetch = exports2.getProxyAgentDispatcher = exports2.getProxyAgent = exports2.getAuthString = void 0;
    var httpClient = __importStar2(require_lib());
    var undici_1 = require_undici();
    function getAuthString(token, options) {
      if (!token && !options.auth) {
        throw new Error("Parameter token or opts.auth is required");
      } else if (token && options.auth) {
        throw new Error("Parameters token and opts.auth may not both be specified");
      }
      return typeof options.auth === "string" ? options.auth : `token ${token}`;
    }
    exports2.getAuthString = getAuthString;
    function getProxyAgent(destinationUrl) {
      const hc = new httpClient.HttpClient();
      return hc.getAgent(destinationUrl);
    }
    exports2.getProxyAgent = getProxyAgent;
    function getProxyAgentDispatcher(destinationUrl) {
      const hc = new httpClient.HttpClient();
      return hc.getAgentDispatcher(destinationUrl);
    }
    exports2.getProxyAgentDispatcher = getProxyAgentDispatcher;
    function getProxyFetch(destinationUrl) {
      const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
      const proxyFetch = (url, opts) => __awaiter2(this, void 0, void 0, function* () {
        return (0, undici_1.fetch)(url, Object.assign(Object.assign({}, opts), { dispatcher: httpDispatcher }));
      });
      return proxyFetch;
    }
    exports2.getProxyFetch = getProxyFetch;
    function getApiBaseUrl() {
      return process.env["GITHUB_API_URL"] || "https://api.github.com";
    }
    exports2.getApiBaseUrl = getApiBaseUrl;
  }
});

// node_modules/universal-user-agent/dist-node/index.js
var require_dist_node = __commonJS({
  "node_modules/universal-user-agent/dist-node/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function getUserAgent() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && process.version !== void 0) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports2.getUserAgent = getUserAgent;
  }
});

// node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/before-after-hook/lib/register.js"(exports2, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/before-after-hook/lib/add.js"(exports2, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook) {
      var orig = hook;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
            return orig(error, options);
          });
        };
      }
      state.registry[name].push({
        hook,
        orig
      });
    }
  }
});

// node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/before-after-hook/lib/remove.js"(exports2, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index === -1) {
        return;
      }
      state.registry[name].splice(index, 1);
    }
  }
});

// node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/before-after-hook/index.js"(exports2, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(
        null,
        name ? [state, name] : [state]
      );
      hook.api = { remove: removeHookRef };
      hook.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook = register.bind(null, state);
      bindApi(hook, state);
      return hook;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn(
          '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
        );
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node2 = __commonJS({
  "node_modules/@octokit/endpoint/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      endpoint: () => endpoint
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_universal_user_agent = require_dist_node();
    var VERSION = "9.0.5";
    var userAgent = `octokit-endpoint.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
    var DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: ""
      }
    };
    function lowercaseKeys(object) {
      if (!object) {
        return {};
      }
      return Object.keys(object).reduce((newObj, key) => {
        newObj[key.toLowerCase()] = object[key];
        return newObj;
      }, {});
    }
    function isPlainObject(value) {
      if (typeof value !== "object" || value === null)
        return false;
      if (Object.prototype.toString.call(value) !== "[object Object]")
        return false;
      const proto = Object.getPrototypeOf(value);
      if (proto === null)
        return true;
      const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
    }
    function mergeDeep(defaults, options) {
      const result = Object.assign({}, defaults);
      Object.keys(options).forEach((key) => {
        if (isPlainObject(options[key])) {
          if (!(key in defaults))
            Object.assign(result, { [key]: options[key] });
          else
            result[key] = mergeDeep(defaults[key], options[key]);
        } else {
          Object.assign(result, { [key]: options[key] });
        }
      });
      return result;
    }
    function removeUndefinedProperties(obj) {
      for (const key in obj) {
        if (obj[key] === void 0) {
          delete obj[key];
        }
      }
      return obj;
    }
    function merge(defaults, route, options) {
      if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? { method, url } : { url: method }, options);
      } else {
        options = Object.assign({}, route);
      }
      options.headers = lowercaseKeys(options.headers);
      removeUndefinedProperties(options);
      removeUndefinedProperties(options.headers);
      const mergedOptions = mergeDeep(defaults || {}, options);
      if (options.url === "/graphql") {
        if (defaults && defaults.mediaType.previews?.length) {
          mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(
            (preview) => !mergedOptions.mediaType.previews.includes(preview)
          ).concat(mergedOptions.mediaType.previews);
        }
        mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
      }
      return mergedOptions;
    }
    function addQueryParameters(url, parameters) {
      const separator = /\?/.test(url) ? "&" : "?";
      const names = Object.keys(parameters);
      if (names.length === 0) {
        return url;
      }
      return url + separator + names.map((name) => {
        if (name === "q") {
          return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
        }
        return `${name}=${encodeURIComponent(parameters[name])}`;
      }).join("&");
    }
    var urlVariableRegex = /\{[^}]+\}/g;
    function removeNonChars(variableName) {
      return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
    }
    function extractUrlVariableNames(url) {
      const matches = url.match(urlVariableRegex);
      if (!matches) {
        return [];
      }
      return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
    }
    function omit(object, keysToOmit) {
      const result = { __proto__: null };
      for (const key of Object.keys(object)) {
        if (keysToOmit.indexOf(key) === -1) {
          result[key] = object[key];
        }
      }
      return result;
    }
    function encodeReserved(str) {
      return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
        if (!/%[0-9A-Fa-f]/.test(part)) {
          part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
        }
        return part;
      }).join("");
    }
    function encodeUnreserved(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue(operator, value, key) {
      value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
      if (key) {
        return encodeUnreserved(key) + "=" + value;
      } else {
        return value;
      }
    }
    function isDefined(value) {
      return value !== void 0 && value !== null;
    }
    function isKeyOperator(operator) {
      return operator === ";" || operator === "&" || operator === "?";
    }
    function getValues(context2, operator, key, modifier) {
      var value = context2[key], result = [];
      if (isDefined(value) && value !== "") {
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
          value = value.toString();
          if (modifier && modifier !== "*") {
            value = value.substring(0, parseInt(modifier, 10));
          }
          result.push(
            encodeValue(operator, value, isKeyOperator(operator) ? key : "")
          );
        } else {
          if (modifier === "*") {
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                result.push(
                  encodeValue(operator, value2, isKeyOperator(operator) ? key : "")
                );
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  result.push(encodeValue(operator, value[k], k));
                }
              });
            }
          } else {
            const tmp = [];
            if (Array.isArray(value)) {
              value.filter(isDefined).forEach(function(value2) {
                tmp.push(encodeValue(operator, value2));
              });
            } else {
              Object.keys(value).forEach(function(k) {
                if (isDefined(value[k])) {
                  tmp.push(encodeUnreserved(k));
                  tmp.push(encodeValue(operator, value[k].toString()));
                }
              });
            }
            if (isKeyOperator(operator)) {
              result.push(encodeUnreserved(key) + "=" + tmp.join(","));
            } else if (tmp.length !== 0) {
              result.push(tmp.join(","));
            }
          }
        }
      } else {
        if (operator === ";") {
          if (isDefined(value)) {
            result.push(encodeUnreserved(key));
          }
        } else if (value === "" && (operator === "&" || operator === "?")) {
          result.push(encodeUnreserved(key) + "=");
        } else if (value === "") {
          result.push("");
        }
      }
      return result;
    }
    function parseUrl(template) {
      return {
        expand: expand.bind(null, template)
      };
    }
    function expand(template, context2) {
      var operators = ["+", "#", ".", "/", ";", "?", "&"];
      template = template.replace(
        /\{([^\{\}]+)\}|([^\{\}]+)/g,
        function(_, expression, literal) {
          if (expression) {
            let operator = "";
            const values = [];
            if (operators.indexOf(expression.charAt(0)) !== -1) {
              operator = expression.charAt(0);
              expression = expression.substr(1);
            }
            expression.split(/,/g).forEach(function(variable) {
              var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
              values.push(getValues(context2, operator, tmp[1], tmp[2] || tmp[3]));
            });
            if (operator && operator !== "+") {
              var separator = ",";
              if (operator === "?") {
                separator = "&";
              } else if (operator !== "#") {
                separator = operator;
              }
              return (values.length !== 0 ? operator : "") + values.join(separator);
            } else {
              return values.join(",");
            }
          } else {
            return encodeReserved(literal);
          }
        }
      );
      if (template === "/") {
        return template;
      } else {
        return template.replace(/\/$/, "");
      }
    }
    function parse3(options) {
      let method = options.method.toUpperCase();
      let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
      let headers = Object.assign({}, options.headers);
      let body;
      let parameters = omit(options, [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "mediaType"
      ]);
      const urlVariableNames = extractUrlVariableNames(url);
      url = parseUrl(url).expand(parameters);
      if (!/^http/.test(url)) {
        url = options.baseUrl + url;
      }
      const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
      const remainingParameters = omit(parameters, omittedParameters);
      const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
      if (!isBinaryRequest) {
        if (options.mediaType.format) {
          headers.accept = headers.accept.split(/,/).map(
            (format) => format.replace(
              /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
              `application/vnd$1$2.${options.mediaType.format}`
            )
          ).join(",");
        }
        if (url.endsWith("/graphql")) {
          if (options.mediaType.previews?.length) {
            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
            headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
              const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
              return `application/vnd.github.${preview}-preview${format}`;
            }).join(",");
          }
        }
      }
      if (["GET", "HEAD"].includes(method)) {
        url = addQueryParameters(url, remainingParameters);
      } else {
        if ("data" in remainingParameters) {
          body = remainingParameters.data;
        } else {
          if (Object.keys(remainingParameters).length) {
            body = remainingParameters;
          }
        }
      }
      if (!headers["content-type"] && typeof body !== "undefined") {
        headers["content-type"] = "application/json; charset=utf-8";
      }
      if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
        body = "";
      }
      return Object.assign(
        { method, url, headers },
        typeof body !== "undefined" ? { body } : null,
        options.request ? { request: options.request } : null
      );
    }
    function endpointWithDefaults(defaults, route, options) {
      return parse3(merge(defaults, route, options));
    }
    function withDefaults(oldDefaults, newDefaults) {
      const DEFAULTS2 = merge(oldDefaults, newDefaults);
      const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
      return Object.assign(endpoint2, {
        DEFAULTS: DEFAULTS2,
        defaults: withDefaults.bind(null, DEFAULTS2),
        merge: merge.bind(null, DEFAULTS2),
        parse: parse3
      });
    }
    var endpoint = withDefaults(null, DEFAULTS);
  }
});

// node_modules/deprecation/dist-node/index.js
var require_dist_node3 = __commonJS({
  "node_modules/deprecation/dist-node/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var Deprecation = class extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    };
    exports2.Deprecation = Deprecation;
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb) return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node4 = __commonJS({
  "node_modules/@octokit/request-error/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      RequestError: () => RequestError
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_deprecation = require_dist_node3();
    var import_once = __toESM2(require_once());
    var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
    var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
    var RequestError = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(
              / .*$/,
              " [REDACTED]"
            )
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(
              new import_deprecation.Deprecation(
                "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
              )
            );
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(
              new import_deprecation.Deprecation(
                "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
              )
            );
            return headers || {};
          }
        });
      }
    };
  }
});

// node_modules/@octokit/request/dist-node/index.js
var require_dist_node5 = __commonJS({
  "node_modules/@octokit/request/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      request: () => request
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_endpoint = require_dist_node2();
    var import_universal_user_agent = require_dist_node();
    var VERSION = "8.4.0";
    function isPlainObject(value) {
      if (typeof value !== "object" || value === null)
        return false;
      if (Object.prototype.toString.call(value) !== "[object Object]")
        return false;
      const proto = Object.getPrototypeOf(value);
      if (proto === null)
        return true;
      const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
    }
    var import_request_error = require_dist_node4();
    function getBufferResponse(response) {
      return response.arrayBuffer();
    }
    function fetchWrapper(requestOptions) {
      var _a, _b, _c, _d;
      const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
      const parseSuccessResponseBody = ((_a = requestOptions.request) == null ? void 0 : _a.parseSuccessResponseBody) !== false;
      if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
        requestOptions.body = JSON.stringify(requestOptions.body);
      }
      let headers = {};
      let status;
      let url;
      let { fetch: fetch2 } = globalThis;
      if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {
        fetch2 = requestOptions.request.fetch;
      }
      if (!fetch2) {
        throw new Error(
          "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
        );
      }
      return fetch2(requestOptions.url, {
        method: requestOptions.method,
        body: requestOptions.body,
        redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,
        headers: requestOptions.headers,
        signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,
        // duplex must be set if request.body is ReadableStream or Async Iterables.
        // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
        ...requestOptions.body && { duplex: "half" }
      }).then(async (response) => {
        url = response.url;
        status = response.status;
        for (const keyAndValue of response.headers) {
          headers[keyAndValue[0]] = keyAndValue[1];
        }
        if ("deprecation" in headers) {
          const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
          const deprecationLink = matches && matches.pop();
          log.warn(
            `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
          );
        }
        if (status === 204 || status === 205) {
          return;
        }
        if (requestOptions.method === "HEAD") {
          if (status < 400) {
            return;
          }
          throw new import_request_error.RequestError(response.statusText, status, {
            response: {
              url,
              status,
              headers,
              data: void 0
            },
            request: requestOptions
          });
        }
        if (status === 304) {
          throw new import_request_error.RequestError("Not modified", status, {
            response: {
              url,
              status,
              headers,
              data: await getResponseData(response)
            },
            request: requestOptions
          });
        }
        if (status >= 400) {
          const data = await getResponseData(response);
          const error = new import_request_error.RequestError(toErrorMessage(data), status, {
            response: {
              url,
              status,
              headers,
              data
            },
            request: requestOptions
          });
          throw error;
        }
        return parseSuccessResponseBody ? await getResponseData(response) : response.body;
      }).then((data) => {
        return {
          status,
          url,
          headers,
          data
        };
      }).catch((error) => {
        if (error instanceof import_request_error.RequestError)
          throw error;
        else if (error.name === "AbortError")
          throw error;
        let message = error.message;
        if (error.name === "TypeError" && "cause" in error) {
          if (error.cause instanceof Error) {
            message = error.cause.message;
          } else if (typeof error.cause === "string") {
            message = error.cause;
          }
        }
        throw new import_request_error.RequestError(message, 500, {
          request: requestOptions
        });
      });
    }
    async function getResponseData(response) {
      const contentType = response.headers.get("content-type");
      if (/application\/json/.test(contentType)) {
        return response.json().catch(() => response.text()).catch(() => "");
      }
      if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
        return response.text();
      }
      return getBufferResponse(response);
    }
    function toErrorMessage(data) {
      if (typeof data === "string")
        return data;
      let suffix;
      if ("documentation_url" in data) {
        suffix = ` - ${data.documentation_url}`;
      } else {
        suffix = "";
      }
      if ("message" in data) {
        if (Array.isArray(data.errors)) {
          return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}${suffix}`;
        }
        return `${data.message}${suffix}`;
      }
      return `Unknown error: ${JSON.stringify(data)}`;
    }
    function withDefaults(oldEndpoint, newDefaults) {
      const endpoint2 = oldEndpoint.defaults(newDefaults);
      const newApi = function(route, parameters) {
        const endpointOptions = endpoint2.merge(route, parameters);
        if (!endpointOptions.request || !endpointOptions.request.hook) {
          return fetchWrapper(endpoint2.parse(endpointOptions));
        }
        const request2 = (route2, parameters2) => {
          return fetchWrapper(
            endpoint2.parse(endpoint2.merge(route2, parameters2))
          );
        };
        Object.assign(request2, {
          endpoint: endpoint2,
          defaults: withDefaults.bind(null, endpoint2)
        });
        return endpointOptions.request.hook(request2, endpointOptions);
      };
      return Object.assign(newApi, {
        endpoint: endpoint2,
        defaults: withDefaults.bind(null, endpoint2)
      });
    }
    var request = withDefaults(import_endpoint.endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
      }
    });
  }
});

// node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node6 = __commonJS({
  "node_modules/@octokit/graphql/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      GraphqlResponseError: () => GraphqlResponseError,
      graphql: () => graphql2,
      withCustomRequest: () => withCustomRequest
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_request3 = require_dist_node5();
    var import_universal_user_agent = require_dist_node();
    var VERSION = "7.1.0";
    var import_request2 = require_dist_node5();
    var import_request = require_dist_node5();
    function _buildMessageForResponseErrors(data) {
      return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
    }
    var GraphqlResponseError = class extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    };
    var NON_VARIABLE_OPTIONS = [
      "method",
      "baseUrl",
      "url",
      "headers",
      "request",
      "query",
      "mediaType"
    ];
    var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
    function graphql(request2, query, options) {
      if (options) {
        if (typeof query === "string" && "query" in options) {
          return Promise.reject(
            new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
          );
        }
        for (const key in options) {
          if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
            continue;
          return Promise.reject(
            new Error(
              `[@octokit/graphql] "${key}" cannot be used as variable name`
            )
          );
        }
      }
      const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
      const requestOptions = Object.keys(
        parsedOptions
      ).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
          result[key] = parsedOptions[key];
          return result;
        }
        if (!result.variables) {
          result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
      }, {});
      const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
      if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
      }
      return request2(requestOptions).then((response) => {
        if (response.data.errors) {
          const headers = {};
          for (const key of Object.keys(response.headers)) {
            headers[key] = response.headers[key];
          }
          throw new GraphqlResponseError(
            requestOptions,
            headers,
            response.data
          );
        }
        return response.data.data;
      });
    }
    function withDefaults(request2, newDefaults) {
      const newRequest = request2.defaults(newDefaults);
      const newApi = (query, options) => {
        return graphql(newRequest, query, options);
      };
      return Object.assign(newApi, {
        defaults: withDefaults.bind(null, newRequest),
        endpoint: newRequest.endpoint
      });
    }
    var graphql2 = withDefaults(import_request3.request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
      },
      method: "POST",
      url: "/graphql"
    });
    function withCustomRequest(customRequest) {
      return withDefaults(customRequest, {
        method: "POST",
        url: "/graphql"
      });
    }
  }
});

// node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node7 = __commonJS({
  "node_modules/@octokit/auth-token/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      createTokenAuth: () => createTokenAuth
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    var REGEX_IS_INSTALLATION = /^ghs_/;
    var REGEX_IS_USER_TO_SERVER = /^ghu_/;
    async function auth(token) {
      const isApp = token.split(/\./).length === 3;
      const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
      const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
      const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
      return {
        type: "token",
        token,
        tokenType
      };
    }
    function withAuthorizationPrefix(token) {
      if (token.split(/\./).length === 3) {
        return `bearer ${token}`;
      }
      return `token ${token}`;
    }
    async function hook(token, request, route, parameters) {
      const endpoint = request.endpoint.merge(
        route,
        parameters
      );
      endpoint.headers.authorization = withAuthorizationPrefix(token);
      return request(endpoint);
    }
    var createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error(
          "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
        );
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
  }
});

// node_modules/@octokit/core/dist-node/index.js
var require_dist_node8 = __commonJS({
  "node_modules/@octokit/core/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      Octokit: () => Octokit
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_universal_user_agent = require_dist_node();
    var import_before_after_hook = require_before_after_hook();
    var import_request = require_dist_node5();
    var import_graphql = require_dist_node6();
    var import_auth_token = require_dist_node7();
    var VERSION = "5.2.0";
    var noop = () => {
    };
    var consoleWarn = console.warn.bind(console);
    var consoleError = console.error.bind(console);
    var userAgentTrail = `octokit-core.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
    var Octokit = class {
      static {
        this.VERSION = VERSION;
      }
      static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
          constructor(...args) {
            const options = args[0] || {};
            if (typeof defaults === "function") {
              super(defaults(options));
              return;
            }
            super(
              Object.assign(
                {},
                defaults,
                options,
                options.userAgent && defaults.userAgent ? {
                  userAgent: `${options.userAgent} ${defaults.userAgent}`
                } : null
              )
            );
          }
        };
        return OctokitWithDefaults;
      }
      static {
        this.plugins = [];
      }
      /**
       * Attach a plugin (or many) to your Octokit instance.
       *
       * @example
       * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
       */
      static plugin(...newPlugins) {
        const currentPlugins = this.plugins;
        const NewOctokit = class extends this {
          static {
            this.plugins = currentPlugins.concat(
              newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
            );
          }
        };
        return NewOctokit;
      }
      constructor(options = {}) {
        const hook = new import_before_after_hook.Collection();
        const requestDefaults = {
          baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, options.request, {
            // @ts-ignore internal usage only, no need to type
            hook: hook.bind(null, "request")
          }),
          mediaType: {
            previews: [],
            format: ""
          }
        };
        requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
        if (options.baseUrl) {
          requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
          requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
          requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = import_request.request.defaults(requestDefaults);
        this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
        this.log = Object.assign(
          {
            debug: noop,
            info: noop,
            warn: consoleWarn,
            error: consoleError
          },
          options.log
        );
        this.hook = hook;
        if (!options.authStrategy) {
          if (!options.auth) {
            this.auth = async () => ({
              type: "unauthenticated"
            });
          } else {
            const auth = (0, import_auth_token.createTokenAuth)(options.auth);
            hook.wrap("request", auth.hook);
            this.auth = auth;
          }
        } else {
          const { authStrategy, ...otherOptions } = options;
          const auth = authStrategy(
            Object.assign(
              {
                request: this.request,
                log: this.log,
                // we pass the current octokit instance as well as its constructor options
                // to allow for authentication strategies that return a new octokit instance
                // that shares the same internal state as the current one. The original
                // requirement for this was the "event-octokit" authentication strategy
                // of https://github.com/probot/octokit-auth-probot.
                octokit: this,
                octokitOptions: otherOptions
              },
              options.auth
            )
          );
          hook.wrap("request", auth.hook);
          this.auth = auth;
        }
        const classConstructor = this.constructor;
        for (let i = 0; i < classConstructor.plugins.length; ++i) {
          Object.assign(this, classConstructor.plugins[i](this, options));
        }
      }
    };
  }
});

// node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node9 = __commonJS({
  "node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      legacyRestEndpointMethods: () => legacyRestEndpointMethods,
      restEndpointMethods: () => restEndpointMethods
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var VERSION = "10.4.1";
    var Endpoints = {
      actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [
          "POST /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        addCustomLabelsToSelfHostedRunnerForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgVariable: [
          "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        approveWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
        ],
        cancelWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
        ],
        createEnvironmentVariable: [
          "POST /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        createOrUpdateEnvironmentSecret: [
          "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        createOrgVariable: ["POST /orgs/{org}/actions/variables"],
        createRegistrationTokenForOrg: [
          "POST /orgs/{org}/actions/runners/registration-token"
        ],
        createRegistrationTokenForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/registration-token"
        ],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/remove-token"
        ],
        createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
        createWorkflowDispatch: [
          "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
        ],
        deleteActionsCacheById: [
          "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
        ],
        deleteActionsCacheByKey: [
          "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
        ],
        deleteArtifact: [
          "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        ],
        deleteEnvironmentSecret: [
          "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        deleteEnvironmentVariable: [
          "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        deleteRepoVariable: [
          "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
        ],
        deleteSelfHostedRunnerFromOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}"
        ],
        deleteSelfHostedRunnerFromRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: [
          "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        disableSelectedRepositoryGithubActionsOrganization: [
          "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        disableWorkflow: [
          "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
        ],
        downloadArtifact: [
          "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
        ],
        downloadJobLogsForWorkflowRun: [
          "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
        ],
        downloadWorkflowRunAttemptLogs: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
        ],
        downloadWorkflowRunLogs: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        enableSelectedRepositoryGithubActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        enableWorkflow: [
          "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
        ],
        forceCancelWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
        ],
        generateRunnerJitconfigForOrg: [
          "POST /orgs/{org}/actions/runners/generate-jitconfig"
        ],
        generateRunnerJitconfigForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
        ],
        getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
        getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
        getActionsCacheUsageByRepoForOrg: [
          "GET /orgs/{org}/actions/cache/usage-by-repository"
        ],
        getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
        getAllowedActionsOrganization: [
          "GET /orgs/{org}/actions/permissions/selected-actions"
        ],
        getAllowedActionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getCustomOidcSubClaimForRepo: [
          "GET /repos/{owner}/{repo}/actions/oidc/customization/sub"
        ],
        getEnvironmentPublicKey: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
        ],
        getEnvironmentSecret: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        getEnvironmentVariable: [
          "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [
          "GET /orgs/{org}/actions/permissions/workflow"
        ],
        getGithubActionsDefaultWorkflowPermissionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        getGithubActionsPermissionsOrganization: [
          "GET /orgs/{org}/actions/permissions"
        ],
        getGithubActionsPermissionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions"
        ],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
        getPendingDeploymentsForRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        getRepoPermissions: [
          "GET /repos/{owner}/{repo}/actions/permissions",
          {},
          { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
        ],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
        getReviewsForRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
        ],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowAccessToRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/access"
        ],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunAttempt: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
        ],
        getWorkflowRunUsage: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
        ],
        getWorkflowUsage: [
          "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
        ],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listEnvironmentSecrets: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
        ],
        listEnvironmentVariables: [
          "GET /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        listJobsForWorkflowRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
        ],
        listJobsForWorkflowRunAttempt: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
        ],
        listLabelsForSelfHostedRunnerForOrg: [
          "GET /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        listLabelsForSelfHostedRunnerForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listOrgVariables: ["GET /orgs/{org}/actions/variables"],
        listRepoOrganizationSecrets: [
          "GET /repos/{owner}/{repo}/actions/organization-secrets"
        ],
        listRepoOrganizationVariables: [
          "GET /repos/{owner}/{repo}/actions/organization-variables"
        ],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/downloads"
        ],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        listSelectedReposForOrgVariable: [
          "GET /orgs/{org}/actions/variables/{name}/repositories"
        ],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [
          "GET /orgs/{org}/actions/permissions/repositories"
        ],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
        ],
        listWorkflowRuns: [
          "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
        ],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        reRunJobForWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
        ],
        reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
        reRunWorkflowFailedJobs: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        removeCustomLabelFromSelfHostedRunnerForOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeCustomLabelFromSelfHostedRunnerForRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgVariable: [
          "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        reviewCustomGatesForRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
        ],
        reviewPendingDeploymentsForRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        setAllowedActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/selected-actions"
        ],
        setAllowedActionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        setCustomLabelsForSelfHostedRunnerForOrg: [
          "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        setCustomLabelsForSelfHostedRunnerForRepo: [
          "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        setCustomOidcSubClaimForRepo: [
          "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"
        ],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/workflow"
        ],
        setGithubActionsDefaultWorkflowPermissionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        setGithubActionsPermissionsOrganization: [
          "PUT /orgs/{org}/actions/permissions"
        ],
        setGithubActionsPermissionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgVariable: [
          "PUT /orgs/{org}/actions/variables/{name}/repositories"
        ],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/repositories"
        ],
        setWorkflowAccessToRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/access"
        ],
        updateEnvironmentVariable: [
          "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
        updateRepoVariable: [
          "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
        ]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: [
          "DELETE /notifications/threads/{thread_id}/subscription"
        ],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: [
          "GET /notifications/threads/{thread_id}/subscription"
        ],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: [
          "GET /users/{username}/events/orgs/{org}"
        ],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: [
          "GET /users/{username}/received_events/public"
        ],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/notifications"
        ],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: [
          "PUT /notifications/threads/{thread_id}/subscription"
        ],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
      },
      apps: {
        addRepoToInstallation: [
          "PUT /user/installations/{installation_id}/repositories/{repository_id}",
          {},
          { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
        ],
        addRepoToInstallationForAuthenticatedUser: [
          "PUT /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        checkToken: ["POST /applications/{client_id}/token"],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: [
          "POST /app/installations/{installation_id}/access_tokens"
        ],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: [
          "GET /marketplace_listing/accounts/{account_id}"
        ],
        getSubscriptionPlanForAccountStubbed: [
          "GET /marketplace_listing/stubbed/accounts/{account_id}"
        ],
        getUserInstallation: ["GET /users/{username}/installation"],
        getWebhookConfigForApp: ["GET /app/hook/config"],
        getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: [
          "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
        ],
        listInstallationReposForAuthenticatedUser: [
          "GET /user/installations/{installation_id}/repositories"
        ],
        listInstallationRequestsForAuthenticatedApp: [
          "GET /app/installation-requests"
        ],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: [
          "GET /user/marketplace_purchases/stubbed"
        ],
        listWebhookDeliveries: ["GET /app/hook/deliveries"],
        redeliverWebhookDelivery: [
          "POST /app/hook/deliveries/{delivery_id}/attempts"
        ],
        removeRepoFromInstallation: [
          "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
          {},
          { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
        ],
        removeRepoFromInstallationForAuthenticatedUser: [
          "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        scopeToken: ["POST /applications/{client_id}/token/scoped"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: [
          "DELETE /app/installations/{installation_id}/suspended"
        ],
        updateWebhookConfigForApp: ["PATCH /app/hook/config"]
      },
      billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: [
          "GET /users/{username}/settings/billing/actions"
        ],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: [
          "GET /users/{username}/settings/billing/packages"
        ],
        getSharedStorageBillingOrg: [
          "GET /orgs/{org}/settings/billing/shared-storage"
        ],
        getSharedStorageBillingUser: [
          "GET /users/{username}/settings/billing/shared-storage"
        ]
      },
      checks: {
        create: ["POST /repos/{owner}/{repo}/check-runs"],
        createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
        get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
        listAnnotations: [
          "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
        ],
        listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
        listForSuite: [
          "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
        ],
        listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
        rerequestRun: [
          "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
        ],
        rerequestSuite: [
          "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
        ],
        setSuitesPreferences: [
          "PATCH /repos/{owner}/{repo}/check-suites/preferences"
        ],
        update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
      },
      codeScanning: {
        deleteAnalysis: [
          "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
        ],
        getAlert: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
          {},
          { renamedParameters: { alert_id: "alert_number" } }
        ],
        getAnalysis: [
          "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
        ],
        getCodeqlDatabase: [
          "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
        ],
        getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
        getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
        listAlertInstances: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listAlertsInstances: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
          {},
          { renamed: ["codeScanning", "listAlertInstances"] }
        ],
        listCodeqlDatabases: [
          "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
        ],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        ],
        updateDefaultSetup: [
          "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
        ],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
      },
      codesOfConduct: {
        getAllCodesOfConduct: ["GET /codes_of_conduct"],
        getConductCode: ["GET /codes_of_conduct/{key}"]
      },
      codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        checkPermissionsForDevcontainer: [
          "GET /repos/{owner}/{repo}/codespaces/permissions_check"
        ],
        codespaceMachinesForAuthenticatedUser: [
          "GET /user/codespaces/{codespace_name}/machines"
        ],
        createForAuthenticatedUser: ["POST /user/codespaces"],
        createOrUpdateOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}"
        ],
        createWithPrForAuthenticatedUser: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
        ],
        createWithRepoForAuthenticatedUser: [
          "POST /repos/{owner}/{repo}/codespaces"
        ],
        deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
        deleteFromOrganization: [
          "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        deleteSecretForAuthenticatedUser: [
          "DELETE /user/codespaces/secrets/{secret_name}"
        ],
        exportForAuthenticatedUser: [
          "POST /user/codespaces/{codespace_name}/exports"
        ],
        getCodespacesForUserInOrg: [
          "GET /orgs/{org}/members/{username}/codespaces"
        ],
        getExportDetailsForAuthenticatedUser: [
          "GET /user/codespaces/{codespace_name}/exports/{export_id}"
        ],
        getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
        getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
        getPublicKeyForAuthenticatedUser: [
          "GET /user/codespaces/secrets/public-key"
        ],
        getRepoPublicKey: [
          "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
        ],
        getRepoSecret: [
          "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        getSecretForAuthenticatedUser: [
          "GET /user/codespaces/secrets/{secret_name}"
        ],
        listDevcontainersInRepositoryForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/devcontainers"
        ],
        listForAuthenticatedUser: ["GET /user/codespaces"],
        listInOrganization: [
          "GET /orgs/{org}/codespaces",
          {},
          { renamedParameters: { org_id: "org" } }
        ],
        listInRepositoryForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces"
        ],
        listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
        listRepositoriesForSecretForAuthenticatedUser: [
          "GET /user/codespaces/secrets/{secret_name}/repositories"
        ],
        listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        preFlightWithRepoForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/new"
        ],
        publishForAuthenticatedUser: [
          "POST /user/codespaces/{codespace_name}/publish"
        ],
        removeRepositoryForSecretForAuthenticatedUser: [
          "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        repoMachinesForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/machines"
        ],
        setRepositoriesForSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
        stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
        stopInOrganization: [
          "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
        ],
        updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
      },
      copilot: {
        addCopilotSeatsForTeams: [
          "POST /orgs/{org}/copilot/billing/selected_teams"
        ],
        addCopilotSeatsForUsers: [
          "POST /orgs/{org}/copilot/billing/selected_users"
        ],
        cancelCopilotSeatAssignmentForTeams: [
          "DELETE /orgs/{org}/copilot/billing/selected_teams"
        ],
        cancelCopilotSeatAssignmentForUsers: [
          "DELETE /orgs/{org}/copilot/billing/selected_users"
        ],
        getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
        getCopilotSeatDetailsForUser: [
          "GET /orgs/{org}/members/{username}/copilot"
        ],
        listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
      },
      dependabot: {
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        createOrUpdateOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
        getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
        getRepoPublicKey: [
          "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
        ],
        getRepoSecret: [
          "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        listAlertsForEnterprise: [
          "GET /enterprises/{enterprise}/dependabot/alerts"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
        listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
        ]
      },
      dependencyGraph: {
        createRepositorySnapshot: [
          "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
        ],
        diffRange: [
          "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
        ],
        exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
      },
      emojis: { get: ["GET /emojis"] },
      gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
      },
      git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
      },
      gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"]
      },
      interactions: {
        getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
        getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
        getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
        getRestrictionsForYourPublicRepos: [
          "GET /user/interaction-limits",
          {},
          { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
        ],
        removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
        removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
        removeRestrictionsForRepo: [
          "DELETE /repos/{owner}/{repo}/interaction-limits"
        ],
        removeRestrictionsForYourPublicRepos: [
          "DELETE /user/interaction-limits",
          {},
          { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
        ],
        setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
        setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
        setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
        setRestrictionsForYourPublicRepos: [
          "PUT /user/interaction-limits",
          {},
          { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
        ]
      },
      issues: {
        addAssignees: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        checkUserCanBeAssignedToIssue: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
        ],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
        ],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: [
          "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
        ],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: [
          "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
        ],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
        ],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: [
          "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
        ],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        removeAssignees: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        removeLabel: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
        ],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: [
          "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
        ]
      },
      licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"]
      },
      markdown: {
        render: ["POST /markdown"],
        renderRaw: [
          "POST /markdown/raw",
          { headers: { "content-type": "text/plain; charset=utf-8" } }
        ]
      },
      meta: {
        get: ["GET /meta"],
        getAllVersions: ["GET /versions"],
        getOctocat: ["GET /octocat"],
        getZen: ["GET /zen"],
        root: ["GET /"]
      },
      migrations: {
        cancelImport: [
          "DELETE /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
          }
        ],
        deleteArchiveForAuthenticatedUser: [
          "DELETE /user/migrations/{migration_id}/archive"
        ],
        deleteArchiveForOrg: [
          "DELETE /orgs/{org}/migrations/{migration_id}/archive"
        ],
        downloadArchiveForOrg: [
          "GET /orgs/{org}/migrations/{migration_id}/archive"
        ],
        getArchiveForAuthenticatedUser: [
          "GET /user/migrations/{migration_id}/archive"
        ],
        getCommitAuthors: [
          "GET /repos/{owner}/{repo}/import/authors",
          {},
          {
            deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
          }
        ],
        getImportStatus: [
          "GET /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
          }
        ],
        getLargeFiles: [
          "GET /repos/{owner}/{repo}/import/large_files",
          {},
          {
            deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"
          }
        ],
        getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
        getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
        listForAuthenticatedUser: ["GET /user/migrations"],
        listForOrg: ["GET /orgs/{org}/migrations"],
        listReposForAuthenticatedUser: [
          "GET /user/migrations/{migration_id}/repositories"
        ],
        listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
        listReposForUser: [
          "GET /user/migrations/{migration_id}/repositories",
          {},
          { renamed: ["migrations", "listReposForAuthenticatedUser"] }
        ],
        mapCommitAuthor: [
          "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
          {},
          {
            deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
          }
        ],
        setLfsPreference: [
          "PATCH /repos/{owner}/{repo}/import/lfs",
          {},
          {
            deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
          }
        ],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: [
          "PUT /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"
          }
        ],
        unlockRepoForAuthenticatedUser: [
          "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        unlockRepoForOrg: [
          "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        updateImport: [
          "PATCH /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"
          }
        ]
      },
      oidc: {
        getOidcCustomSubTemplateForOrg: [
          "GET /orgs/{org}/actions/oidc/customization/sub"
        ],
        updateOidcCustomSubTemplateForOrg: [
          "PUT /orgs/{org}/actions/oidc/customization/sub"
        ]
      },
      orgs: {
        addSecurityManagerTeam: [
          "PUT /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        assignTeamToOrgRole: [
          "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
        ],
        assignUserToOrgRole: [
          "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"
        ],
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: [
          "PUT /orgs/{org}/outside_collaborators/{username}"
        ],
        createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
        createOrUpdateCustomPropertiesValuesForRepos: [
          "PATCH /orgs/{org}/properties/values"
        ],
        createOrUpdateCustomProperty: [
          "PUT /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        createWebhook: ["POST /orgs/{org}/hooks"],
        delete: ["DELETE /orgs/{org}"],
        deleteCustomOrganizationRole: [
          "DELETE /orgs/{org}/organization-roles/{role_id}"
        ],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        enableOrDisableSecurityProductOnAllOrgRepos: [
          "POST /orgs/{org}/{security_product}/{enablement}"
        ],
        get: ["GET /orgs/{org}"],
        getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
        getCustomProperty: [
          "GET /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
        getWebhookDelivery: [
          "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
        listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
        listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
        listOrgRoles: ["GET /orgs/{org}/organization-roles"],
        listOrganizationFineGrainedPermissions: [
          "GET /orgs/{org}/organization-fine-grained-permissions"
        ],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPatGrantRepositories: [
          "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
        ],
        listPatGrantRequestRepositories: [
          "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
        ],
        listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
        listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
        listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        patchCustomOrganizationRole: [
          "PATCH /orgs/{org}/organization-roles/{role_id}"
        ],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
          "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeCustomProperty: [
          "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: [
          "DELETE /orgs/{org}/outside_collaborators/{username}"
        ],
        removePublicMembershipForAuthenticatedUser: [
          "DELETE /orgs/{org}/public_members/{username}"
        ],
        removeSecurityManagerTeam: [
          "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        reviewPatGrantRequest: [
          "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
        ],
        reviewPatGrantRequestsInBulk: [
          "POST /orgs/{org}/personal-access-token-requests"
        ],
        revokeAllOrgRolesTeam: [
          "DELETE /orgs/{org}/organization-roles/teams/{team_slug}"
        ],
        revokeAllOrgRolesUser: [
          "DELETE /orgs/{org}/organization-roles/users/{username}"
        ],
        revokeOrgRoleTeam: [
          "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
        ],
        revokeOrgRoleUser: [
          "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"
        ],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: [
          "PUT /orgs/{org}/public_members/{username}"
        ],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: [
          "PATCH /user/memberships/orgs/{org}"
        ],
        updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
        updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
        updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
      },
      packages: {
        deletePackageForAuthenticatedUser: [
          "DELETE /user/packages/{package_type}/{package_name}"
        ],
        deletePackageForOrg: [
          "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        deletePackageForUser: [
          "DELETE /users/{username}/packages/{package_type}/{package_name}"
        ],
        deletePackageVersionForAuthenticatedUser: [
          "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForOrg: [
          "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForUser: [
          "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
          {},
          { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
        ],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions",
          {},
          {
            renamed: [
              "packages",
              "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
            ]
          }
        ],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByOrg: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}/versions"
        ],
        getPackageForAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}"
        ],
        getPackageForOrganization: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        getPackageForUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}"
        ],
        getPackageVersionForAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForOrganization: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        listDockerMigrationConflictingPackagesForAuthenticatedUser: [
          "GET /user/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForOrganization: [
          "GET /orgs/{org}/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForUser: [
          "GET /users/{username}/docker/conflicts"
        ],
        listPackagesForAuthenticatedUser: ["GET /user/packages"],
        listPackagesForOrganization: ["GET /orgs/{org}/packages"],
        listPackagesForUser: ["GET /users/{username}/packages"],
        restorePackageForAuthenticatedUser: [
          "POST /user/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForOrg: [
          "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForUser: [
          "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageVersionForAuthenticatedUser: [
          "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForOrg: [
          "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForUser: [
          "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ]
      },
      projects: {
        addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
        createCard: ["POST /projects/columns/{column_id}/cards"],
        createColumn: ["POST /projects/{project_id}/columns"],
        createForAuthenticatedUser: ["POST /user/projects"],
        createForOrg: ["POST /orgs/{org}/projects"],
        createForRepo: ["POST /repos/{owner}/{repo}/projects"],
        delete: ["DELETE /projects/{project_id}"],
        deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
        deleteColumn: ["DELETE /projects/columns/{column_id}"],
        get: ["GET /projects/{project_id}"],
        getCard: ["GET /projects/columns/cards/{card_id}"],
        getColumn: ["GET /projects/columns/{column_id}"],
        getPermissionForUser: [
          "GET /projects/{project_id}/collaborators/{username}/permission"
        ],
        listCards: ["GET /projects/columns/{column_id}/cards"],
        listCollaborators: ["GET /projects/{project_id}/collaborators"],
        listColumns: ["GET /projects/{project_id}/columns"],
        listForOrg: ["GET /orgs/{org}/projects"],
        listForRepo: ["GET /repos/{owner}/{repo}/projects"],
        listForUser: ["GET /users/{username}/projects"],
        moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
        moveColumn: ["POST /projects/columns/{column_id}/moves"],
        removeCollaborator: [
          "DELETE /projects/{project_id}/collaborators/{username}"
        ],
        update: ["PATCH /projects/{project_id}"],
        updateCard: ["PATCH /projects/columns/cards/{card_id}"],
        updateColumn: ["PATCH /projects/columns/{column_id}"]
      },
      pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
        ],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        deletePendingReview: [
          "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        deleteReviewComment: [
          "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ],
        dismissReview: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
        ],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
        ],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        listReviewComments: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: [
          "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        requestReviewers: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        submitReview: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
        ],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
        ],
        updateReview: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        updateReviewComment: [
          "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ]
      },
      rateLimit: { get: ["GET /rate_limit"] },
      reactions: {
        createForCommitComment: [
          "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        createForIssue: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
        ],
        createForIssueComment: [
          "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        createForPullRequestReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        createForRelease: [
          "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        createForTeamDiscussionCommentInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        createForTeamDiscussionInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ],
        deleteForCommitComment: [
          "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForIssue: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
        ],
        deleteForIssueComment: [
          "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForPullRequestComment: [
          "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForRelease: [
          "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussion: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussionComment: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
        ],
        listForCommitComment: [
          "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        listForIssueComment: [
          "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        listForPullRequestReviewComment: [
          "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        listForRelease: [
          "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        listForTeamDiscussionCommentInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        listForTeamDiscussionInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ]
      },
      repos: {
        acceptInvitation: [
          "PATCH /user/repository_invitations/{invitation_id}",
          {},
          { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
        ],
        acceptInvitationForAuthenticatedUser: [
          "PATCH /user/repository_invitations/{invitation_id}"
        ],
        addAppAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        addTeamAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        addUserAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        cancelPagesDeployment: [
          "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"
        ],
        checkAutomatedSecurityFixes: [
          "GET /repos/{owner}/{repo}/automated-security-fixes"
        ],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: [
          "GET /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        compareCommitsWithBasehead: [
          "GET /repos/{owner}/{repo}/compare/{basehead}"
        ],
        createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
        createCommitComment: [
          "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        createCommitSignatureProtection: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentBranchPolicy: [
          "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        createDeploymentProtectionRule: [
          "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        createDeploymentStatus: [
          "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateCustomPropertiesValues: [
          "PATCH /repos/{owner}/{repo}/properties/values"
        ],
        createOrUpdateEnvironment: [
          "PUT /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createOrgRuleset: ["POST /orgs/{org}/rulesets"],
        createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
        createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
        createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
        createUsingTemplate: [
          "POST /repos/{template_owner}/{template_repo}/generate"
        ],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: [
          "DELETE /user/repository_invitations/{invitation_id}",
          {},
          { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
        ],
        declineInvitationForAuthenticatedUser: [
          "DELETE /user/repository_invitations/{invitation_id}"
        ],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        deleteAdminBranchProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        deleteAnEnvironment: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        deleteBranchProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: [
          "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
        ],
        deleteDeploymentBranchPolicy: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: [
          "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
        deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
        deletePullRequestReviewProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: [
          "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        deleteTagProtection: [
          "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
        ],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: [
          "DELETE /repos/{owner}/{repo}/automated-security-fixes"
        ],
        disableDeploymentProtectionRule: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        disablePrivateVulnerabilityReporting: [
          "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        disableVulnerabilityAlerts: [
          "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        downloadArchive: [
          "GET /repos/{owner}/{repo}/zipball/{ref}",
          {},
          { renamed: ["repos", "downloadZipballArchive"] }
        ],
        downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
        downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
        enableAutomatedSecurityFixes: [
          "PUT /repos/{owner}/{repo}/automated-security-fixes"
        ],
        enablePrivateVulnerabilityReporting: [
          "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        enableVulnerabilityAlerts: [
          "PUT /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        generateReleaseNotes: [
          "POST /repos/{owner}/{repo}/releases/generate-notes"
        ],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        getAdminBranchProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        getAllDeploymentProtectionRules: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
        getAllStatusCheckContexts: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        ],
        getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
        getAppsWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        ],
        getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: [
          "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
        ],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getCustomDeploymentProtectionRule: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentBranchPolicy: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        getDeploymentStatus: [
          "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
        ],
        getEnvironment: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
        getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
        getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
        getOrgRulesets: ["GET /orgs/{org}/rulesets"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getPagesDeployment: [
          "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"
        ],
        getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getRepoRuleSuite: [
          "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
        ],
        getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
        getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
        getStatusChecksProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        getTeamsWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        ],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        ],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        getWebhookConfigForRepo: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        getWebhookDelivery: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        listActivities: ["GET /repos/{owner}/{repo}/activity"],
        listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
        ],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: [
          "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
        ],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listCustomDeploymentRuleIntegrations: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
        ],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentBranchPolicies: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        listDeploymentStatuses: [
          "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
        ],
        listReleaseAssets: [
          "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
        ],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhookDeliveries: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
        ],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
          "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeAppAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        removeCollaborator: [
          "DELETE /repos/{owner}/{repo}/collaborators/{username}"
        ],
        removeStatusCheckContexts: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        removeStatusCheckProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        removeTeamAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        removeUserAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
        replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        setAppAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        setStatusCheckContexts: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        setTeamAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        setUserAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateDeploymentBranchPolicy: [
          "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: [
          "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
        updatePullRequestReviewProtection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: [
          "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        updateStatusCheckPotection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          {},
          { renamed: ["repos", "updateStatusCheckProtection"] }
        ],
        updateStatusCheckProtection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        updateWebhookConfigForRepo: [
          "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        uploadReleaseAsset: [
          "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
          { baseUrl: "https://uploads.github.com" }
        ]
      },
      search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits"],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics"],
        users: ["GET /search/users"]
      },
      secretScanning: {
        getAlert: [
          "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ],
        listAlertsForEnterprise: [
          "GET /enterprises/{enterprise}/secret-scanning/alerts"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
        listLocationsForAlert: [
          "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
        ],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ]
      },
      securityAdvisories: {
        createFork: [
          "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
        ],
        createPrivateVulnerabilityReport: [
          "POST /repos/{owner}/{repo}/security-advisories/reports"
        ],
        createRepositoryAdvisory: [
          "POST /repos/{owner}/{repo}/security-advisories"
        ],
        createRepositoryAdvisoryCveRequest: [
          "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
        ],
        getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
        getRepositoryAdvisory: [
          "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ],
        listGlobalAdvisories: ["GET /advisories"],
        listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
        listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
        updateRepositoryAdvisory: [
          "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        addOrUpdateProjectPermissionsInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        addOrUpdateRepoPermissionsInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        checkPermissionsForProjectInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        checkPermissionsForRepoInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        deleteDiscussionInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        getDiscussionInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        getMembershipForUserInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/invitations"
        ],
        listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        removeProjectInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        removeRepoInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        updateDiscussionCommentInOrg: [
          "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        updateDiscussionInOrg: [
          "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
      },
      users: {
        addEmailForAuthenticated: [
          "POST /user/emails",
          {},
          { renamed: ["users", "addEmailForAuthenticatedUser"] }
        ],
        addEmailForAuthenticatedUser: ["POST /user/emails"],
        addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: [
          "POST /user/gpg_keys",
          {},
          { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
        ],
        createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: [
          "POST /user/keys",
          {},
          { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
        ],
        createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
        createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
        deleteEmailForAuthenticated: [
          "DELETE /user/emails",
          {},
          { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
        ],
        deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: [
          "DELETE /user/gpg_keys/{gpg_key_id}",
          {},
          { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
        ],
        deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: [
          "DELETE /user/keys/{key_id}",
          {},
          { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
        ],
        deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
        deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
        deleteSshSigningKeyForAuthenticatedUser: [
          "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: [
          "GET /user/gpg_keys/{gpg_key_id}",
          {},
          { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
        ],
        getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: [
          "GET /user/keys/{key_id}",
          {},
          { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
        ],
        getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
        getSshSigningKeyForAuthenticatedUser: [
          "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        list: ["GET /users"],
        listBlockedByAuthenticated: [
          "GET /user/blocks",
          {},
          { renamed: ["users", "listBlockedByAuthenticatedUser"] }
        ],
        listBlockedByAuthenticatedUser: ["GET /user/blocks"],
        listEmailsForAuthenticated: [
          "GET /user/emails",
          {},
          { renamed: ["users", "listEmailsForAuthenticatedUser"] }
        ],
        listEmailsForAuthenticatedUser: ["GET /user/emails"],
        listFollowedByAuthenticated: [
          "GET /user/following",
          {},
          { renamed: ["users", "listFollowedByAuthenticatedUser"] }
        ],
        listFollowedByAuthenticatedUser: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: [
          "GET /user/gpg_keys",
          {},
          { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
        ],
        listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: [
          "GET /user/public_emails",
          {},
          { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
        ],
        listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: [
          "GET /user/keys",
          {},
          { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
        ],
        listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
        listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
        listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
        listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
        listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
        setPrimaryEmailVisibilityForAuthenticated: [
          "PATCH /user/email/visibility",
          {},
          { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
        ],
        setPrimaryEmailVisibilityForAuthenticatedUser: [
          "PATCH /user/email/visibility"
        ],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"]
      }
    };
    var endpoints_default = Endpoints;
    var endpointMethodsMap = /* @__PURE__ */ new Map();
    for (const [scope, endpoints] of Object.entries(endpoints_default)) {
      for (const [methodName, endpoint] of Object.entries(endpoints)) {
        const [route, defaults, decorations] = endpoint;
        const [method, url] = route.split(/ /);
        const endpointDefaults = Object.assign(
          {
            method,
            url
          },
          defaults
        );
        if (!endpointMethodsMap.has(scope)) {
          endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
        }
        endpointMethodsMap.get(scope).set(methodName, {
          scope,
          methodName,
          endpointDefaults,
          decorations
        });
      }
    }
    var handler = {
      has({ scope }, methodName) {
        return endpointMethodsMap.get(scope).has(methodName);
      },
      getOwnPropertyDescriptor(target, methodName) {
        return {
          value: this.get(target, methodName),
          // ensures method is in the cache
          configurable: true,
          writable: true,
          enumerable: true
        };
      },
      defineProperty(target, methodName, descriptor) {
        Object.defineProperty(target.cache, methodName, descriptor);
        return true;
      },
      deleteProperty(target, methodName) {
        delete target.cache[methodName];
        return true;
      },
      ownKeys({ scope }) {
        return [...endpointMethodsMap.get(scope).keys()];
      },
      set(target, methodName, value) {
        return target.cache[methodName] = value;
      },
      get({ octokit, scope, cache }, methodName) {
        if (cache[methodName]) {
          return cache[methodName];
        }
        const method = endpointMethodsMap.get(scope).get(methodName);
        if (!method) {
          return void 0;
        }
        const { endpointDefaults, decorations } = method;
        if (decorations) {
          cache[methodName] = decorate(
            octokit,
            scope,
            methodName,
            endpointDefaults,
            decorations
          );
        } else {
          cache[methodName] = octokit.request.defaults(endpointDefaults);
        }
        return cache[methodName];
      }
    };
    function endpointsToMethods(octokit) {
      const newMethods = {};
      for (const scope of endpointMethodsMap.keys()) {
        newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);
      }
      return newMethods;
    }
    function decorate(octokit, scope, methodName, defaults, decorations) {
      const requestWithDefaults = octokit.request.defaults(defaults);
      function withDecorations(...args) {
        let options = requestWithDefaults.endpoint.merge(...args);
        if (decorations.mapToData) {
          options = Object.assign({}, options, {
            data: options[decorations.mapToData],
            [decorations.mapToData]: void 0
          });
          return requestWithDefaults(options);
        }
        if (decorations.renamed) {
          const [newScope, newMethodName] = decorations.renamed;
          octokit.log.warn(
            `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
          );
        }
        if (decorations.deprecated) {
          octokit.log.warn(decorations.deprecated);
        }
        if (decorations.renamedParameters) {
          const options2 = requestWithDefaults.endpoint.merge(...args);
          for (const [name, alias] of Object.entries(
            decorations.renamedParameters
          )) {
            if (name in options2) {
              octokit.log.warn(
                `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`
              );
              if (!(alias in options2)) {
                options2[alias] = options2[name];
              }
              delete options2[name];
            }
          }
          return requestWithDefaults(options2);
        }
        return requestWithDefaults(...args);
      }
      return Object.assign(withDecorations, requestWithDefaults);
    }
    function restEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit);
      return {
        rest: api
      };
    }
    restEndpointMethods.VERSION = VERSION;
    function legacyRestEndpointMethods(octokit) {
      const api = endpointsToMethods(octokit);
      return {
        ...api,
        rest: api
      };
    }
    legacyRestEndpointMethods.VERSION = VERSION;
  }
});

// node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node10 = __commonJS({
  "node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      composePaginateRest: () => composePaginateRest,
      isPaginatingEndpoint: () => isPaginatingEndpoint,
      paginateRest: () => paginateRest,
      paginatingEndpoints: () => paginatingEndpoints
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var VERSION = "9.2.1";
    function normalizePaginatedListResponse(response) {
      if (!response.data) {
        return {
          ...response,
          data: []
        };
      }
      const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
      if (!responseNeedsNormalization)
        return response;
      const incompleteResults = response.data.incomplete_results;
      const repositorySelection = response.data.repository_selection;
      const totalCount = response.data.total_count;
      delete response.data.incomplete_results;
      delete response.data.repository_selection;
      delete response.data.total_count;
      const namespaceKey = Object.keys(response.data)[0];
      const data = response.data[namespaceKey];
      response.data = data;
      if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
      }
      if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
      }
      response.data.total_count = totalCount;
      return response;
    }
    function iterator(octokit, route, parameters) {
      const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
      const requestMethod = typeof route === "function" ? route : octokit.request;
      const method = options.method;
      const headers = options.headers;
      let url = options.url;
      return {
        [Symbol.asyncIterator]: () => ({
          async next() {
            if (!url)
              return { done: true };
            try {
              const response = await requestMethod({ method, url, headers });
              const normalizedResponse = normalizePaginatedListResponse(response);
              url = ((normalizedResponse.headers.link || "").match(
                /<([^>]+)>;\s*rel="next"/
              ) || [])[1];
              return { value: normalizedResponse };
            } catch (error) {
              if (error.status !== 409)
                throw error;
              url = "";
              return {
                value: {
                  status: 200,
                  headers: {},
                  data: []
                }
              };
            }
          }
        })
      };
    }
    function paginate(octokit, route, parameters, mapFn) {
      if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
      }
      return gather(
        octokit,
        [],
        iterator(octokit, route, parameters)[Symbol.asyncIterator](),
        mapFn
      );
    }
    function gather(octokit, results, iterator2, mapFn) {
      return iterator2.next().then((result) => {
        if (result.done) {
          return results;
        }
        let earlyExit = false;
        function done() {
          earlyExit = true;
        }
        results = results.concat(
          mapFn ? mapFn(result.value, done) : result.value.data
        );
        if (earlyExit) {
          return results;
        }
        return gather(octokit, results, iterator2, mapFn);
      });
    }
    var composePaginateRest = Object.assign(paginate, {
      iterator
    });
    var paginatingEndpoints = [
      "GET /advisories",
      "GET /app/hook/deliveries",
      "GET /app/installation-requests",
      "GET /app/installations",
      "GET /assignments/{assignment_id}/accepted_assignments",
      "GET /classrooms",
      "GET /classrooms/{classroom_id}/assignments",
      "GET /enterprises/{enterprise}/dependabot/alerts",
      "GET /enterprises/{enterprise}/secret-scanning/alerts",
      "GET /events",
      "GET /gists",
      "GET /gists/public",
      "GET /gists/starred",
      "GET /gists/{gist_id}/comments",
      "GET /gists/{gist_id}/commits",
      "GET /gists/{gist_id}/forks",
      "GET /installation/repositories",
      "GET /issues",
      "GET /licenses",
      "GET /marketplace_listing/plans",
      "GET /marketplace_listing/plans/{plan_id}/accounts",
      "GET /marketplace_listing/stubbed/plans",
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
      "GET /networks/{owner}/{repo}/events",
      "GET /notifications",
      "GET /organizations",
      "GET /orgs/{org}/actions/cache/usage-by-repository",
      "GET /orgs/{org}/actions/permissions/repositories",
      "GET /orgs/{org}/actions/runners",
      "GET /orgs/{org}/actions/secrets",
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/actions/variables",
      "GET /orgs/{org}/actions/variables/{name}/repositories",
      "GET /orgs/{org}/blocks",
      "GET /orgs/{org}/code-scanning/alerts",
      "GET /orgs/{org}/codespaces",
      "GET /orgs/{org}/codespaces/secrets",
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/copilot/billing/seats",
      "GET /orgs/{org}/dependabot/alerts",
      "GET /orgs/{org}/dependabot/secrets",
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/events",
      "GET /orgs/{org}/failed_invitations",
      "GET /orgs/{org}/hooks",
      "GET /orgs/{org}/hooks/{hook_id}/deliveries",
      "GET /orgs/{org}/installations",
      "GET /orgs/{org}/invitations",
      "GET /orgs/{org}/invitations/{invitation_id}/teams",
      "GET /orgs/{org}/issues",
      "GET /orgs/{org}/members",
      "GET /orgs/{org}/members/{username}/codespaces",
      "GET /orgs/{org}/migrations",
      "GET /orgs/{org}/migrations/{migration_id}/repositories",
      "GET /orgs/{org}/organization-roles/{role_id}/teams",
      "GET /orgs/{org}/organization-roles/{role_id}/users",
      "GET /orgs/{org}/outside_collaborators",
      "GET /orgs/{org}/packages",
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      "GET /orgs/{org}/personal-access-token-requests",
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
      "GET /orgs/{org}/personal-access-tokens",
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
      "GET /orgs/{org}/projects",
      "GET /orgs/{org}/properties/values",
      "GET /orgs/{org}/public_members",
      "GET /orgs/{org}/repos",
      "GET /orgs/{org}/rulesets",
      "GET /orgs/{org}/rulesets/rule-suites",
      "GET /orgs/{org}/secret-scanning/alerts",
      "GET /orgs/{org}/security-advisories",
      "GET /orgs/{org}/teams",
      "GET /orgs/{org}/teams/{team_slug}/discussions",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      "GET /orgs/{org}/teams/{team_slug}/invitations",
      "GET /orgs/{org}/teams/{team_slug}/members",
      "GET /orgs/{org}/teams/{team_slug}/projects",
      "GET /orgs/{org}/teams/{team_slug}/repos",
      "GET /orgs/{org}/teams/{team_slug}/teams",
      "GET /projects/columns/{column_id}/cards",
      "GET /projects/{project_id}/collaborators",
      "GET /projects/{project_id}/columns",
      "GET /repos/{owner}/{repo}/actions/artifacts",
      "GET /repos/{owner}/{repo}/actions/caches",
      "GET /repos/{owner}/{repo}/actions/organization-secrets",
      "GET /repos/{owner}/{repo}/actions/organization-variables",
      "GET /repos/{owner}/{repo}/actions/runners",
      "GET /repos/{owner}/{repo}/actions/runs",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
      "GET /repos/{owner}/{repo}/actions/secrets",
      "GET /repos/{owner}/{repo}/actions/variables",
      "GET /repos/{owner}/{repo}/actions/workflows",
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
      "GET /repos/{owner}/{repo}/activity",
      "GET /repos/{owner}/{repo}/assignees",
      "GET /repos/{owner}/{repo}/branches",
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
      "GET /repos/{owner}/{repo}/code-scanning/alerts",
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      "GET /repos/{owner}/{repo}/code-scanning/analyses",
      "GET /repos/{owner}/{repo}/codespaces",
      "GET /repos/{owner}/{repo}/codespaces/devcontainers",
      "GET /repos/{owner}/{repo}/codespaces/secrets",
      "GET /repos/{owner}/{repo}/collaborators",
      "GET /repos/{owner}/{repo}/comments",
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/commits",
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
      "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
      "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
      "GET /repos/{owner}/{repo}/commits/{ref}/status",
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
      "GET /repos/{owner}/{repo}/contributors",
      "GET /repos/{owner}/{repo}/dependabot/alerts",
      "GET /repos/{owner}/{repo}/dependabot/secrets",
      "GET /repos/{owner}/{repo}/deployments",
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      "GET /repos/{owner}/{repo}/environments",
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
      "GET /repos/{owner}/{repo}/events",
      "GET /repos/{owner}/{repo}/forks",
      "GET /repos/{owner}/{repo}/hooks",
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
      "GET /repos/{owner}/{repo}/invitations",
      "GET /repos/{owner}/{repo}/issues",
      "GET /repos/{owner}/{repo}/issues/comments",
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/issues/events",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
      "GET /repos/{owner}/{repo}/keys",
      "GET /repos/{owner}/{repo}/labels",
      "GET /repos/{owner}/{repo}/milestones",
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
      "GET /repos/{owner}/{repo}/notifications",
      "GET /repos/{owner}/{repo}/pages/builds",
      "GET /repos/{owner}/{repo}/projects",
      "GET /repos/{owner}/{repo}/pulls",
      "GET /repos/{owner}/{repo}/pulls/comments",
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
      "GET /repos/{owner}/{repo}/releases",
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
      "GET /repos/{owner}/{repo}/rules/branches/{branch}",
      "GET /repos/{owner}/{repo}/rulesets",
      "GET /repos/{owner}/{repo}/rulesets/rule-suites",
      "GET /repos/{owner}/{repo}/secret-scanning/alerts",
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
      "GET /repos/{owner}/{repo}/security-advisories",
      "GET /repos/{owner}/{repo}/stargazers",
      "GET /repos/{owner}/{repo}/subscribers",
      "GET /repos/{owner}/{repo}/tags",
      "GET /repos/{owner}/{repo}/teams",
      "GET /repos/{owner}/{repo}/topics",
      "GET /repositories",
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
      "GET /repositories/{repository_id}/environments/{environment_name}/variables",
      "GET /search/code",
      "GET /search/commits",
      "GET /search/issues",
      "GET /search/labels",
      "GET /search/repositories",
      "GET /search/topics",
      "GET /search/users",
      "GET /teams/{team_id}/discussions",
      "GET /teams/{team_id}/discussions/{discussion_number}/comments",
      "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
      "GET /teams/{team_id}/invitations",
      "GET /teams/{team_id}/members",
      "GET /teams/{team_id}/projects",
      "GET /teams/{team_id}/repos",
      "GET /teams/{team_id}/teams",
      "GET /user/blocks",
      "GET /user/codespaces",
      "GET /user/codespaces/secrets",
      "GET /user/emails",
      "GET /user/followers",
      "GET /user/following",
      "GET /user/gpg_keys",
      "GET /user/installations",
      "GET /user/installations/{installation_id}/repositories",
      "GET /user/issues",
      "GET /user/keys",
      "GET /user/marketplace_purchases",
      "GET /user/marketplace_purchases/stubbed",
      "GET /user/memberships/orgs",
      "GET /user/migrations",
      "GET /user/migrations/{migration_id}/repositories",
      "GET /user/orgs",
      "GET /user/packages",
      "GET /user/packages/{package_type}/{package_name}/versions",
      "GET /user/public_emails",
      "GET /user/repos",
      "GET /user/repository_invitations",
      "GET /user/social_accounts",
      "GET /user/ssh_signing_keys",
      "GET /user/starred",
      "GET /user/subscriptions",
      "GET /user/teams",
      "GET /users",
      "GET /users/{username}/events",
      "GET /users/{username}/events/orgs/{org}",
      "GET /users/{username}/events/public",
      "GET /users/{username}/followers",
      "GET /users/{username}/following",
      "GET /users/{username}/gists",
      "GET /users/{username}/gpg_keys",
      "GET /users/{username}/keys",
      "GET /users/{username}/orgs",
      "GET /users/{username}/packages",
      "GET /users/{username}/projects",
      "GET /users/{username}/received_events",
      "GET /users/{username}/received_events/public",
      "GET /users/{username}/repos",
      "GET /users/{username}/social_accounts",
      "GET /users/{username}/ssh_signing_keys",
      "GET /users/{username}/starred",
      "GET /users/{username}/subscriptions"
    ];
    function isPaginatingEndpoint(arg) {
      if (typeof arg === "string") {
        return paginatingEndpoints.includes(arg);
      } else {
        return false;
      }
    }
    function paginateRest(octokit) {
      return {
        paginate: Object.assign(paginate.bind(null, octokit), {
          iterator: iterator.bind(null, octokit)
        })
      };
    }
    paginateRest.VERSION = VERSION;
  }
});

// node_modules/@actions/github/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/@actions/github/lib/utils.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOctokitOptions = exports2.GitHub = exports2.defaults = exports2.context = void 0;
    var Context = __importStar2(require_context());
    var Utils = __importStar2(require_utils3());
    var core_1 = require_dist_node8();
    var plugin_rest_endpoint_methods_1 = require_dist_node9();
    var plugin_paginate_rest_1 = require_dist_node10();
    exports2.context = new Context.Context();
    var baseUrl = Utils.getApiBaseUrl();
    exports2.defaults = {
      baseUrl,
      request: {
        agent: Utils.getProxyAgent(baseUrl),
        fetch: Utils.getProxyFetch(baseUrl)
      }
    };
    exports2.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports2.defaults);
    function getOctokitOptions(token, options) {
      const opts = Object.assign({}, options || {});
      const auth = Utils.getAuthString(token, opts);
      if (auth) {
        opts.auth = auth;
      }
      return opts;
    }
    exports2.getOctokitOptions = getOctokitOptions;
  }
});

// node_modules/@actions/github/lib/github.js
var require_github = __commonJS({
  "node_modules/@actions/github/lib/github.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOctokit = exports2.context = void 0;
    var Context = __importStar2(require_context());
    var utils_1 = require_utils4();
    exports2.context = new Context.Context();
    function getOctokit2(token, options, ...additionalPlugins) {
      const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
      return new GitHubWithPlugins((0, utils_1.getOctokitOptions)(token, options));
    }
    exports2.getOctokit = getOctokit2;
  }
});

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context2 = {};
    for (var p in contextIn) context2[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context2.access[p] = contextIn.access[p];
    context2.addInitializer = function(f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context2);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
        } else s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}
function __rewriteRelativeImportExtension(path3, preserveJsx) {
  if (typeof path3 === "string" && /^\.\.?\//.test(path3)) {
    return path3.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path3;
}
var extendStatics, __assign, __createBinding, __setModuleDefault, ownKeys, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension
    };
  }
});

// node_modules/jira.js/out/agile/backlog.js
var require_backlog = __commonJS({
  "node_modules/jira.js/out/agile/backlog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Backlog = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Backlog = class {
      constructor(client) {
        this.client = client;
      }
      moveIssuesToBacklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/backlog/issue",
            method: "POST",
            data: {
              issues: parameters.issues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveIssuesToBacklogForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/backlog/${parameters.boardId}/issue`,
            method: "POST",
            data: {
              issues: parameters.issues,
              rankAfterIssue: parameters.rankAfterIssue,
              rankBeforeIssue: parameters.rankBeforeIssue,
              rankCustomFieldId: parameters.rankCustomFieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Backlog = Backlog;
  }
});

// node_modules/jira.js/out/agile/board.js
var require_board = __commonJS({
  "node_modules/jira.js/out/agile/board.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Board = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Board = class {
      constructor(client) {
        this.client = client;
      }
      getAllBoards(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/board",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              projectKeyOrId: parameters === null || parameters === void 0 ? void 0 : parameters.projectKeyOrId,
              accountIdLocation: parameters === null || parameters === void 0 ? void 0 : parameters.accountIdLocation,
              projectLocation: parameters === null || parameters === void 0 ? void 0 : parameters.projectLocation,
              includePrivate: parameters === null || parameters === void 0 ? void 0 : parameters.includePrivate,
              negateLocationFiltering: parameters === null || parameters === void 0 ? void 0 : parameters.negateLocationFiltering,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              projectTypeLocation: parameters === null || parameters === void 0 ? void 0 : parameters.projectTypeLocation,
              filterId: parameters === null || parameters === void 0 ? void 0 : parameters.filterId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/board",
            method: "POST",
            data: {
              filterId: parameters.filterId,
              location: parameters.location,
              name: parameters.name,
              type: parameters.type
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBoardByFilterId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/filter/${parameters.filterId}`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuesForBacklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/backlog`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/configuration`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getEpics(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/epic`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              done: parameters.done
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuesWithoutEpicForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/epic/none/issue`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBoardIssuesForEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/epic/${parameters.epicId}/issue`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFeaturesForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/features`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      toggleFeatures(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/features`,
            method: "PUT",
            data: parameters.body
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuesForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/issue`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveIssuesToBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/issue`,
            method: "POST",
            data: {
              issues: parameters.issues,
              rankAfterIssue: parameters.rankAfterIssue,
              rankBeforeIssue: parameters.rankBeforeIssue,
              rankCustomFieldId: parameters.rankCustomFieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/project`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectsFull(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/project/full`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBoardPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBoardProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setBoardProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/properties/${parameters.propertyKey}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteBoardProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllQuickFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/quickfilter`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getQuickFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/quickfilter/${parameters.quickFilterId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getReportsForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/reports`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllSprints(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/sprint`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              state: parameters.state
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBoardIssuesForSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/sprint/${parameters.sprintId}/issue`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/board/${parameters.boardId}/version`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              released: parameters.released
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Board = Board;
  }
});

// node_modules/jira.js/out/agile/builds.js
var require_builds = __commonJS({
  "node_modules/jira.js/out/agile/builds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Builds = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Builds = class {
      constructor(client) {
        this.client = client;
      }
      submitBuilds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/builds/0.1/bulk",
            method: "POST",
            data: {
              properties: parameters.properties,
              builds: parameters.builds,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteBuildsByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/builds/0.1/bulkByProperties",
            method: "DELETE",
            params: {
              _updateSequenceNumber: parameters.updateSequenceNumber
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBuildByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/builds/0.1/pipelines/${parameters.pipelineId}/builds/${parameters.buildNumber}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteBuildByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/builds/0.1/pipelines/${parameters.pipelineId}/builds/${parameters.buildNumber}`,
            method: "DELETE",
            params: {
              _updateSequenceNumber: parameters.updateSequenceNumber
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Builds = Builds;
  }
});

// node_modules/jira.js/out/agile/deployments.js
var require_deployments = __commonJS({
  "node_modules/jira.js/out/agile/deployments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Deployments = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Deployments = class {
      constructor(client) {
        this.client = client;
      }
      submitDeployments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/deployments/0.1/bulk",
            method: "POST",
            data: {
              properties: parameters.properties,
              deployments: parameters.deployments,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDeploymentsByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/deployments/0.1/bulkByProperties",
            method: "DELETE",
            params: {
              _updateSequenceNumber: parameters.updateSequenceNumber
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDeploymentByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/deployments/0.1/pipelines/${parameters.pipelineId}/environments/${parameters.environmentId}/deployments/${parameters.deploymentSequenceNumber}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDeploymentByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/deployments/0.1/pipelines/${parameters.pipelineId}/environments/${parameters.environmentId}/deployments/${parameters.deploymentSequenceNumber}`,
            method: "DELETE",
            params: {
              _updateSequenceNumber: parameters.updateSequenceNumber
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDeploymentGatingStatusByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/deployments/0.1/pipelines/${parameters.pipelineId}/environments/${parameters.environmentId}/deployments/${parameters.deploymentSequenceNumber}/gating-status`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Deployments = Deployments;
  }
});

// node_modules/jira.js/out/agile/developmentInformation.js
var require_developmentInformation = __commonJS({
  "node_modules/jira.js/out/agile/developmentInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DevelopmentInformation = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var DevelopmentInformation = class {
      constructor(client) {
        this.client = client;
      }
      storeDevelopmentInformation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/devinfo/0.10/bulk",
            method: "POST",
            data: {
              repositories: parameters.repositories,
              preventTransitions: parameters.preventTransitions,
              operationType: parameters.operationType,
              properties: parameters.properties,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRepository(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/devinfo/0.10/repository/${parameters.repositoryId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRepository(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/devinfo/0.10/repository/${parameters.repositoryId}`,
            method: "DELETE",
            params: {
              _updateSequenceId: parameters.updateSequenceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteByProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/devinfo/0.10/bulkByProperties",
            method: "DELETE",
            params: {
              _updateSequenceId: parameters.updateSequenceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      existsByProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/devinfo/0.10/existsByProperties",
            method: "GET",
            params: {
              _updateSequenceId: parameters.updateSequenceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/devinfo/0.10/repository/${parameters.repositoryId}/${parameters.entityType}/${parameters.entityId}`,
            method: "DELETE",
            params: {
              _updateSequenceId: parameters.updateSequenceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.DevelopmentInformation = DevelopmentInformation;
  }
});

// node_modules/jira.js/out/agile/devopsComponents.js
var require_devopsComponents = __commonJS({
  "node_modules/jira.js/out/agile/devopsComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DevopsComponents = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var DevopsComponents = class {
      constructor(client) {
        this.client = client;
      }
      submitComponents(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/devopscomponents/1.0/bulk",
            method: "POST",
            data: {
              properties: parameters.properties,
              components: parameters.components,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteComponentsByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/devopscomponents/1.0/bulkByProperties",
            method: "DELETE",
            params: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComponentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/devopscomponents/1.0/${parameters.componentId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteComponentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/devopscomponents/1.0/${parameters.componentId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.DevopsComponents = DevopsComponents;
  }
});

// node_modules/jira.js/out/agile/epic.js
var require_epic = __commonJS({
  "node_modules/jira.js/out/agile/epic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Epic = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Epic = class {
      constructor(client) {
        this.client = client;
      }
      getIssuesWithoutEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/epic/none/issue",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              jql: parameters === null || parameters === void 0 ? void 0 : parameters.jql,
              validateQuery: parameters === null || parameters === void 0 ? void 0 : parameters.validateQuery,
              fields: parameters === null || parameters === void 0 ? void 0 : parameters.fields,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssuesFromEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/epic/none/issue",
            method: "POST",
            data: {
              issues: parameters === null || parameters === void 0 ? void 0 : parameters.issues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/epic/${parameters.epicIdOrKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      partiallyUpdateEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/epic/${parameters.epicIdOrKey}`,
            method: "POST",
            data: {
              color: parameters.color,
              done: parameters.done,
              name: parameters.name,
              summary: parameters.summary
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuesForEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/epic/${parameters.epicIdOrKey}/issue`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveIssuesToEpic(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/epic/${parameters.epicIdOrKey}/issue`,
            method: "POST",
            data: {
              issues: parameters.issues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      rankEpics(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/epic/${parameters.epicIdOrKey}/rank`,
            method: "PUT",
            data: {
              rankAfterEpic: parameters.rankAfterEpic,
              rankBeforeEpic: parameters.rankBeforeEpic,
              rankCustomFieldId: parameters.rankCustomFieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Epic = Epic;
  }
});

// node_modules/jira.js/out/agile/featureFlags.js
var require_featureFlags = __commonJS({
  "node_modules/jira.js/out/agile/featureFlags.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FeatureFlags = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var FeatureFlags = class {
      constructor(client) {
        this.client = client;
      }
      submitFeatureFlags(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/featureflags/0.1/bulk",
            method: "POST",
            data: {
              properties: parameters.properties,
              flags: parameters.flags,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFeatureFlagsByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/featureflags/0.1/bulkByProperties",
            method: "DELETE",
            params: {
              _updateSequenceId: parameters.updateSequenceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFeatureFlagById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/featureflags/0.1/flag/${parameters.featureFlagId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFeatureFlagById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/featureflags/0.1/flag/${parameters.featureFlagId}`,
            method: "DELETE",
            params: {
              _updateSequenceId: parameters.updateSequenceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.FeatureFlags = FeatureFlags;
  }
});

// node_modules/jira.js/out/agile/issue.js
var require_issue = __commonJS({
  "node_modules/jira.js/out/agile/issue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Issue = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Issue = class {
      constructor(client) {
        this.client = client;
      }
      rankIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/issue/rank",
            method: "PUT",
            data: {
              issues: parameters.issues,
              rankAfterIssue: parameters.rankAfterIssue,
              rankBeforeIssue: parameters.rankBeforeIssue,
              rankCustomFieldId: parameters.rankCustomFieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/issue/${parameters.issueIdOrKey}`,
            method: "GET",
            params: {
              fields: parameters.fields,
              expand: parameters.expand,
              updateHistory: parameters.updateHistory
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueEstimationForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/issue/${parameters.issueIdOrKey}/estimation`,
            method: "GET",
            params: {
              boardId: parameters.boardId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      estimateIssueForBoard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/issue/${parameters.issueIdOrKey}/estimation`,
            method: "PUT",
            params: {
              boardId: parameters.boardId
            },
            data: {
              value: parameters.value
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Issue = Issue;
  }
});

// node_modules/jira.js/out/agile/operations.js
var require_operations = __commonJS({
  "node_modules/jira.js/out/agile/operations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Operations = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Operations = class {
      constructor(client) {
        this.client = client;
      }
      submitOperationsWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/operations/1.0/linkedWorkspaces/bulk",
            method: "POST",
            data: {
              workspaceIds: parameters.workspaceIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/operations/1.0/linkedWorkspaces/bulk",
            method: "DELETE",
            params: {
              workspaceIds: parameters.workspaceIds.join(",")
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/operations/1.0/linkedWorkspaces",
            method: "GET",
            params: {
              workspaceId: parameters.workspaceId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      submitEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/operations/1.0/bulk",
            method: "POST",
            data: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteEntityByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/operations/1.0/bulkByProperties",
            method: "DELETE",
            params: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIncidentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/operations/1.0/incidents/${parameters.incidentId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIncidentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/operations/1.0/incidents/${parameters.incidentId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getReviewById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/operations/1.0/post-incident-reviews/${parameters.reviewId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteReviewById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/operations/1.0/post-incident-reviews/${parameters.reviewId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Operations = Operations;
  }
});

// node_modules/jira.js/out/agile/remoteLinks.js
var require_remoteLinks = __commonJS({
  "node_modules/jira.js/out/agile/remoteLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RemoteLinks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var RemoteLinks = class {
      constructor(client) {
        this.client = client;
      }
      submitRemoteLinks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/remotelinks/1.0/bulk",
            method: "POST",
            data: {
              properties: parameters.properties,
              remoteLinks: parameters.remoteLinks,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRemoteLinksByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/remotelinks/1.0/bulkByProperties",
            method: "DELETE",
            params: {
              _updateSequenceNumber: parameters.updateSequenceNumber,
              params: parameters.params
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRemoteLinkById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/remotelinks/1.0/remotelink/${parameters.remoteLinkId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRemoteLinkById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/remotelinks/1.0/remotelink/${parameters.remoteLinkId}`,
            method: "DELETE",
            params: {
              _updateSequenceNumber: parameters.updateSequenceNumber
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.RemoteLinks = RemoteLinks;
  }
});

// node_modules/jira.js/out/agile/securityInformation.js
var require_securityInformation = __commonJS({
  "node_modules/jira.js/out/agile/securityInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SecurityInformation = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var SecurityInformation = class {
      constructor(client) {
        this.client = client;
      }
      submitWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/security/1.0/linkedWorkspaces/bulk",
            method: "POST",
            data: {
              workspaceIds: parameters.workspaceIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteLinkedWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/security/1.0/linkedWorkspaces/bulk",
            method: "DELETE",
            params: {
              workspaceIds: parameters.workspaceIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getLinkedWorkspaces(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/security/1.0/linkedWorkspaces",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getLinkedWorkspaceById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/security/1.0/linkedWorkspaces/${parameters.workspaceId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      submitVulnerabilities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/security/1.0/bulk",
            method: "POST",
            data: {
              operationType: parameters.operationType,
              properties: parameters.properties,
              vulnerabilities: parameters.vulnerabilities,
              providerMetadata: parameters.providerMetadata
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteVulnerabilitiesByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/security/1.0/bulkByProperties",
            method: "DELETE",
            params: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVulnerabilityById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/security/1.0/vulnerability/${parameters.vulnerabilityId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteVulnerabilityById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/security/1.0/vulnerability/${parameters.vulnerabilityId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.SecurityInformation = SecurityInformation;
  }
});

// node_modules/jira.js/out/agile/sprint.js
var require_sprint = __commonJS({
  "node_modules/jira.js/out/agile/sprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Sprint = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Sprint = class {
      constructor(client) {
        this.client = client;
      }
      createSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/agile/1.0/sprint",
            method: "POST",
            data: {
              endDate: parameters.endDate,
              goal: parameters.goal,
              name: parameters.name,
              originBoardId: parameters.originBoardId,
              startDate: parameters.startDate
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      partiallyUpdateSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}`,
            method: "POST",
            data: {
              completeDate: parameters.completeDate,
              createdDate: parameters.createdDate,
              endDate: parameters.endDate,
              goal: parameters.goal,
              id: parameters.id,
              name: parameters.name,
              originBoardId: parameters.originBoardId,
              self: parameters.self,
              startDate: parameters.startDate,
              state: parameters.state
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}`,
            method: "PUT",
            data: {
              completeDate: parameters.completeDate,
              createdDate: parameters.createdDate,
              endDate: parameters.endDate,
              goal: parameters.goal,
              id: parameters.id,
              name: parameters.name,
              originBoardId: parameters.originBoardId,
              self: parameters.self,
              startDate: parameters.startDate,
              state: parameters.state
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuesForSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/issue`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              jql: parameters.jql,
              validateQuery: parameters.validateQuery,
              fields: parameters.fields,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveIssuesToSprintAndRank(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/issue`,
            method: "POST",
            data: {
              issues: parameters.issues,
              rankAfterIssue: parameters.rankAfterIssue,
              rankBeforeIssue: parameters.rankBeforeIssue,
              rankCustomFieldId: parameters.rankCustomFieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPropertiesKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/properties/${parameters.propertyKey}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      swapSprint(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/agile/1.0/sprint/${parameters.sprintId}/swap`,
            method: "POST",
            data: {
              sprintToSwapWith: parameters.sprintToSwapWith
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Sprint = Sprint;
  }
});

// node_modules/jira.js/out/agile/models/avatarUrls.js
var require_avatarUrls = __commonJS({
  "node_modules/jira.js/out/agile/models/avatarUrls.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/board.js
var require_board2 = __commonJS({
  "node_modules/jira.js/out/agile/models/board.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/createBoard.js
var require_createBoard = __commonJS({
  "node_modules/jira.js/out/agile/models/createBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/epic.js
var require_epic2 = __commonJS({
  "node_modules/jira.js/out/agile/models/epic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/existsByProperties.js
var require_existsByProperties = __commonJS({
  "node_modules/jira.js/out/agile/models/existsByProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/fields.js
var require_fields = __commonJS({
  "node_modules/jira.js/out/agile/models/fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/fixVersion.js
var require_fixVersion = __commonJS({
  "node_modules/jira.js/out/agile/models/fixVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getAllBoards.js
var require_getAllBoards = __commonJS({
  "node_modules/jira.js/out/agile/models/getAllBoards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getAllQuickFilters.js
var require_getAllQuickFilters = __commonJS({
  "node_modules/jira.js/out/agile/models/getAllQuickFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getBoard.js
var require_getBoard = __commonJS({
  "node_modules/jira.js/out/agile/models/getBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getBoardByFilterId.js
var require_getBoardByFilterId = __commonJS({
  "node_modules/jira.js/out/agile/models/getBoardByFilterId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getBuildByKey.js
var require_getBuildByKey = __commonJS({
  "node_modules/jira.js/out/agile/models/getBuildByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getComponentById.js
var require_getComponentById = __commonJS({
  "node_modules/jira.js/out/agile/models/getComponentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getConfiguration.js
var require_getConfiguration = __commonJS({
  "node_modules/jira.js/out/agile/models/getConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getDeploymentByKey.js
var require_getDeploymentByKey = __commonJS({
  "node_modules/jira.js/out/agile/models/getDeploymentByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getDeploymentGatingStatusByKey.js
var require_getDeploymentGatingStatusByKey = __commonJS({
  "node_modules/jira.js/out/agile/models/getDeploymentGatingStatusByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getFeatureFlagById.js
var require_getFeatureFlagById = __commonJS({
  "node_modules/jira.js/out/agile/models/getFeatureFlagById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getFeaturesForBoard.js
var require_getFeaturesForBoard = __commonJS({
  "node_modules/jira.js/out/agile/models/getFeaturesForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getIncidentById.js
var require_getIncidentById = __commonJS({
  "node_modules/jira.js/out/agile/models/getIncidentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getLinkedWorkspaceById.js
var require_getLinkedWorkspaceById = __commonJS({
  "node_modules/jira.js/out/agile/models/getLinkedWorkspaceById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getLinkedWorkspaces.js
var require_getLinkedWorkspaces = __commonJS({
  "node_modules/jira.js/out/agile/models/getLinkedWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getQuickFilter.js
var require_getQuickFilter = __commonJS({
  "node_modules/jira.js/out/agile/models/getQuickFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getRemoteLinkById.js
var require_getRemoteLinkById = __commonJS({
  "node_modules/jira.js/out/agile/models/getRemoteLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getReportsForBoard.js
var require_getReportsForBoard = __commonJS({
  "node_modules/jira.js/out/agile/models/getReportsForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getRepository.js
var require_getRepository = __commonJS({
  "node_modules/jira.js/out/agile/models/getRepository.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getReviewById.js
var require_getReviewById = __commonJS({
  "node_modules/jira.js/out/agile/models/getReviewById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getVulnerabilityById.js
var require_getVulnerabilityById = __commonJS({
  "node_modules/jira.js/out/agile/models/getVulnerabilityById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/getWorkspaces.js
var require_getWorkspaces = __commonJS({
  "node_modules/jira.js/out/agile/models/getWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/group.js
var require_group = __commonJS({
  "node_modules/jira.js/out/agile/models/group.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/issue.js
var require_issue2 = __commonJS({
  "node_modules/jira.js/out/agile/models/issue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/issueTransition.js
var require_issueTransition = __commonJS({
  "node_modules/jira.js/out/agile/models/issueTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/issueType.js
var require_issueType = __commonJS({
  "node_modules/jira.js/out/agile/models/issueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/jsonType.js
var require_jsonType = __commonJS({
  "node_modules/jira.js/out/agile/models/jsonType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/linkedSecurityWorkspaceIds.js
var require_linkedSecurityWorkspaceIds = __commonJS({
  "node_modules/jira.js/out/agile/models/linkedSecurityWorkspaceIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/linkedWorkspace.js
var require_linkedWorkspace = __commonJS({
  "node_modules/jira.js/out/agile/models/linkedWorkspace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/linkGroup.js
var require_linkGroup = __commonJS({
  "node_modules/jira.js/out/agile/models/linkGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/operations.js
var require_operations2 = __commonJS({
  "node_modules/jira.js/out/agile/models/operations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/scope.js
var require_scope = __commonJS({
  "node_modules/jira.js/out/agile/models/scope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/progress.js
var require_progress = __commonJS({
  "node_modules/jira.js/out/agile/models/progress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/project.js
var require_project = __commonJS({
  "node_modules/jira.js/out/agile/models/project.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/projects.js
var require_projects = __commonJS({
  "node_modules/jira.js/out/agile/models/projects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/searchResults.js
var require_searchResults = __commonJS({
  "node_modules/jira.js/out/agile/models/searchResults.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/sprint.js
var require_sprint2 = __commonJS({
  "node_modules/jira.js/out/agile/models/sprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/status.js
var require_status = __commonJS({
  "node_modules/jira.js/out/agile/models/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/statusCategory.js
var require_statusCategory = __commonJS({
  "node_modules/jira.js/out/agile/models/statusCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/storeDevelopmentInformation.js
var require_storeDevelopmentInformation = __commonJS({
  "node_modules/jira.js/out/agile/models/storeDevelopmentInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitBuilds.js
var require_submitBuilds = __commonJS({
  "node_modules/jira.js/out/agile/models/submitBuilds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitComponents.js
var require_submitComponents = __commonJS({
  "node_modules/jira.js/out/agile/models/submitComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitDeployments.js
var require_submitDeployments = __commonJS({
  "node_modules/jira.js/out/agile/models/submitDeployments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitEntity.js
var require_submitEntity = __commonJS({
  "node_modules/jira.js/out/agile/models/submitEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitFeatureFlags.js
var require_submitFeatureFlags = __commonJS({
  "node_modules/jira.js/out/agile/models/submitFeatureFlags.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitOperationsWorkspaces.js
var require_submitOperationsWorkspaces = __commonJS({
  "node_modules/jira.js/out/agile/models/submitOperationsWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitRemoteLinks.js
var require_submitRemoteLinks = __commonJS({
  "node_modules/jira.js/out/agile/models/submitRemoteLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/submitVulnerabilities.js
var require_submitVulnerabilities = __commonJS({
  "node_modules/jira.js/out/agile/models/submitVulnerabilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/toggleFeatures.js
var require_toggleFeatures = __commonJS({
  "node_modules/jira.js/out/agile/models/toggleFeatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/user.js
var require_user = __commonJS({
  "node_modules/jira.js/out/agile/models/user.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/version.js
var require_version = __commonJS({
  "node_modules/jira.js/out/agile/models/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/vulnerability.js
var require_vulnerability = __commonJS({
  "node_modules/jira.js/out/agile/models/vulnerability.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/models/index.js
var require_models = __commonJS({
  "node_modules/jira.js/out/agile/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_avatarUrls(), exports2);
    tslib_1.__exportStar(require_board2(), exports2);
    tslib_1.__exportStar(require_createBoard(), exports2);
    tslib_1.__exportStar(require_epic2(), exports2);
    tslib_1.__exportStar(require_existsByProperties(), exports2);
    tslib_1.__exportStar(require_fields(), exports2);
    tslib_1.__exportStar(require_fixVersion(), exports2);
    tslib_1.__exportStar(require_getAllBoards(), exports2);
    tslib_1.__exportStar(require_getAllQuickFilters(), exports2);
    tslib_1.__exportStar(require_getBoard(), exports2);
    tslib_1.__exportStar(require_getBoardByFilterId(), exports2);
    tslib_1.__exportStar(require_getBuildByKey(), exports2);
    tslib_1.__exportStar(require_getComponentById(), exports2);
    tslib_1.__exportStar(require_getConfiguration(), exports2);
    tslib_1.__exportStar(require_getDeploymentByKey(), exports2);
    tslib_1.__exportStar(require_getDeploymentGatingStatusByKey(), exports2);
    tslib_1.__exportStar(require_getFeatureFlagById(), exports2);
    tslib_1.__exportStar(require_getFeaturesForBoard(), exports2);
    tslib_1.__exportStar(require_getIncidentById(), exports2);
    tslib_1.__exportStar(require_getLinkedWorkspaceById(), exports2);
    tslib_1.__exportStar(require_getLinkedWorkspaces(), exports2);
    tslib_1.__exportStar(require_getQuickFilter(), exports2);
    tslib_1.__exportStar(require_getRemoteLinkById(), exports2);
    tslib_1.__exportStar(require_getReportsForBoard(), exports2);
    tslib_1.__exportStar(require_getRepository(), exports2);
    tslib_1.__exportStar(require_getReviewById(), exports2);
    tslib_1.__exportStar(require_getVulnerabilityById(), exports2);
    tslib_1.__exportStar(require_getWorkspaces(), exports2);
    tslib_1.__exportStar(require_group(), exports2);
    tslib_1.__exportStar(require_issue2(), exports2);
    tslib_1.__exportStar(require_issueTransition(), exports2);
    tslib_1.__exportStar(require_issueType(), exports2);
    tslib_1.__exportStar(require_jsonType(), exports2);
    tslib_1.__exportStar(require_linkedSecurityWorkspaceIds(), exports2);
    tslib_1.__exportStar(require_linkedWorkspace(), exports2);
    tslib_1.__exportStar(require_linkGroup(), exports2);
    tslib_1.__exportStar(require_operations2(), exports2);
    tslib_1.__exportStar(require_scope(), exports2);
    tslib_1.__exportStar(require_progress(), exports2);
    tslib_1.__exportStar(require_project(), exports2);
    tslib_1.__exportStar(require_projects(), exports2);
    tslib_1.__exportStar(require_searchResults(), exports2);
    tslib_1.__exportStar(require_sprint2(), exports2);
    tslib_1.__exportStar(require_status(), exports2);
    tslib_1.__exportStar(require_statusCategory(), exports2);
    tslib_1.__exportStar(require_storeDevelopmentInformation(), exports2);
    tslib_1.__exportStar(require_submitBuilds(), exports2);
    tslib_1.__exportStar(require_submitComponents(), exports2);
    tslib_1.__exportStar(require_submitDeployments(), exports2);
    tslib_1.__exportStar(require_submitEntity(), exports2);
    tslib_1.__exportStar(require_submitFeatureFlags(), exports2);
    tslib_1.__exportStar(require_submitOperationsWorkspaces(), exports2);
    tslib_1.__exportStar(require_submitRemoteLinks(), exports2);
    tslib_1.__exportStar(require_submitVulnerabilities(), exports2);
    tslib_1.__exportStar(require_toggleFeatures(), exports2);
    tslib_1.__exportStar(require_user(), exports2);
    tslib_1.__exportStar(require_version(), exports2);
    tslib_1.__exportStar(require_vulnerability(), exports2);
  }
});

// node_modules/jira.js/out/agile/parameters/createBoard.js
var require_createBoard2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/createBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/createSprint.js
var require_createSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/createSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteBoard.js
var require_deleteBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteBoardProperty.js
var require_deleteBoardProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteBoardProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteBuildByKey.js
var require_deleteBuildByKey = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteBuildByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteBuildsByProperty.js
var require_deleteBuildsByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteBuildsByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteByProperties.js
var require_deleteByProperties = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteByProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteDeploymentByKey.js
var require_deleteDeploymentByKey = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteDeploymentByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteDeploymentsByProperty.js
var require_deleteDeploymentsByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteDeploymentsByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteEntity.js
var require_deleteEntity = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteFeatureFlagById.js
var require_deleteFeatureFlagById = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteFeatureFlagById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteFeatureFlagsByProperty.js
var require_deleteFeatureFlagsByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteFeatureFlagsByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteLinkedWorkspaces.js
var require_deleteLinkedWorkspaces = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteLinkedWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteProperty.js
var require_deleteProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteRemoteLinkById.js
var require_deleteRemoteLinkById = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteRemoteLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteRemoteLinksByProperty.js
var require_deleteRemoteLinksByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteRemoteLinksByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteRepository.js
var require_deleteRepository = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteRepository.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteSprint.js
var require_deleteSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteVulnerabilitiesByProperty.js
var require_deleteVulnerabilitiesByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteVulnerabilitiesByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteVulnerabilityById.js
var require_deleteVulnerabilityById = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteVulnerabilityById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/estimateIssueForBoard.js
var require_estimateIssueForBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/estimateIssueForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/existsByProperties.js
var require_existsByProperties2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/existsByProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getAllBoards.js
var require_getAllBoards2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getAllBoards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getAllQuickFilters.js
var require_getAllQuickFilters2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getAllQuickFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getAllSprints.js
var require_getAllSprints = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getAllSprints.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getAllVersions.js
var require_getAllVersions = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getAllVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBoard.js
var require_getBoard2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBoardByFilterId.js
var require_getBoardByFilterId2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBoardByFilterId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBoardIssuesForEpic.js
var require_getBoardIssuesForEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBoardIssuesForEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBoardIssuesForSprint.js
var require_getBoardIssuesForSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBoardIssuesForSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBoardProperty.js
var require_getBoardProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBoardProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBoardPropertyKeys.js
var require_getBoardPropertyKeys = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBoardPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getBuildByKey.js
var require_getBuildByKey2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getBuildByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getConfiguration.js
var require_getConfiguration2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getDeploymentByKey.js
var require_getDeploymentByKey2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getDeploymentByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getDeploymentGatingStatusByKey.js
var require_getDeploymentGatingStatusByKey2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getDeploymentGatingStatusByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getEpic.js
var require_getEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getEpics.js
var require_getEpics = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getEpics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getFeatureFlagById.js
var require_getFeatureFlagById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getFeatureFlagById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getFeaturesForBoard.js
var require_getFeaturesForBoard2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getFeaturesForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssue.js
var require_getIssue = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssueEstimationForBoard.js
var require_getIssueEstimationForBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssueEstimationForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssuesForBacklog.js
var require_getIssuesForBacklog = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssuesForBacklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssuesForBoard.js
var require_getIssuesForBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssuesForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssuesForEpic.js
var require_getIssuesForEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssuesForEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssuesForSprint.js
var require_getIssuesForSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssuesForSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssuesWithoutEpic.js
var require_getIssuesWithoutEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssuesWithoutEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIssuesWithoutEpicForBoard.js
var require_getIssuesWithoutEpicForBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIssuesWithoutEpicForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getLinkedWorkspaceById.js
var require_getLinkedWorkspaceById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getLinkedWorkspaceById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getProjects.js
var require_getProjects = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getProjectsFull.js
var require_getProjectsFull = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getProjectsFull.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getPropertiesKeys.js
var require_getPropertiesKeys = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getPropertiesKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getProperty.js
var require_getProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getQuickFilter.js
var require_getQuickFilter2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getQuickFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getRemoteLinkById.js
var require_getRemoteLinkById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getRemoteLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getReportsForBoard.js
var require_getReportsForBoard2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getReportsForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getRepository.js
var require_getRepository2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getRepository.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getSprint.js
var require_getSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getVulnerabilityById.js
var require_getVulnerabilityById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getVulnerabilityById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/moveIssuesToBacklog.js
var require_moveIssuesToBacklog = __commonJS({
  "node_modules/jira.js/out/agile/parameters/moveIssuesToBacklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/moveIssuesToBacklogForBoard.js
var require_moveIssuesToBacklogForBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/moveIssuesToBacklogForBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/moveIssuesToBoard.js
var require_moveIssuesToBoard = __commonJS({
  "node_modules/jira.js/out/agile/parameters/moveIssuesToBoard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/moveIssuesToEpic.js
var require_moveIssuesToEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/moveIssuesToEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/moveIssuesToSprintAndRank.js
var require_moveIssuesToSprintAndRank = __commonJS({
  "node_modules/jira.js/out/agile/parameters/moveIssuesToSprintAndRank.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/partiallyUpdateEpic.js
var require_partiallyUpdateEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/partiallyUpdateEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/partiallyUpdateSprint.js
var require_partiallyUpdateSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/partiallyUpdateSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/rankEpics.js
var require_rankEpics = __commonJS({
  "node_modules/jira.js/out/agile/parameters/rankEpics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/rankIssues.js
var require_rankIssues = __commonJS({
  "node_modules/jira.js/out/agile/parameters/rankIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/removeIssuesFromEpic.js
var require_removeIssuesFromEpic = __commonJS({
  "node_modules/jira.js/out/agile/parameters/removeIssuesFromEpic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/searchEpics.js
var require_searchEpics = __commonJS({
  "node_modules/jira.js/out/agile/parameters/searchEpics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/setBoardProperty.js
var require_setBoardProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/setBoardProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/setProperty.js
var require_setProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/setProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/storeDevelopmentInformation.js
var require_storeDevelopmentInformation2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/storeDevelopmentInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitBuilds.js
var require_submitBuilds2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitBuilds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitDeployments.js
var require_submitDeployments2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitDeployments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitFeatureFlags.js
var require_submitFeatureFlags2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitFeatureFlags.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitRemoteLinks.js
var require_submitRemoteLinks2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitRemoteLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitVulnerabilities.js
var require_submitVulnerabilities2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitVulnerabilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitWorkspaces.js
var require_submitWorkspaces = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/swapSprint.js
var require_swapSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/swapSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/toggleFeatures.js
var require_toggleFeatures2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/toggleFeatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/updateSprint.js
var require_updateSprint = __commonJS({
  "node_modules/jira.js/out/agile/parameters/updateSprint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getIncidentById.js
var require_getIncidentById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getIncidentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteIncidentById.js
var require_deleteIncidentById = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteIncidentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteReviewById.js
var require_deleteReviewById = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteReviewById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getReviewById.js
var require_getReviewById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getReviewById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteEntityByProperty.js
var require_deleteEntityByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteEntityByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitEntity.js
var require_submitEntity2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getWorkspaces.js
var require_getWorkspaces2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteWorkspaces.js
var require_deleteWorkspaces = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitOperationsWorkspaces.js
var require_submitOperationsWorkspaces2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitOperationsWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/submitComponents.js
var require_submitComponents2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/submitComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteComponentById.js
var require_deleteComponentById = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteComponentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/deleteComponentsByProperty.js
var require_deleteComponentsByProperty = __commonJS({
  "node_modules/jira.js/out/agile/parameters/deleteComponentsByProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/getComponentById.js
var require_getComponentById2 = __commonJS({
  "node_modules/jira.js/out/agile/parameters/getComponentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/agile/parameters/index.js
var require_parameters = __commonJS({
  "node_modules/jira.js/out/agile/parameters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createBoard2(), exports2);
    tslib_1.__exportStar(require_createSprint(), exports2);
    tslib_1.__exportStar(require_deleteBoard(), exports2);
    tslib_1.__exportStar(require_deleteBoardProperty(), exports2);
    tslib_1.__exportStar(require_deleteBuildByKey(), exports2);
    tslib_1.__exportStar(require_deleteBuildsByProperty(), exports2);
    tslib_1.__exportStar(require_deleteByProperties(), exports2);
    tslib_1.__exportStar(require_deleteDeploymentByKey(), exports2);
    tslib_1.__exportStar(require_deleteDeploymentsByProperty(), exports2);
    tslib_1.__exportStar(require_deleteEntity(), exports2);
    tslib_1.__exportStar(require_deleteFeatureFlagById(), exports2);
    tslib_1.__exportStar(require_deleteFeatureFlagsByProperty(), exports2);
    tslib_1.__exportStar(require_deleteLinkedWorkspaces(), exports2);
    tslib_1.__exportStar(require_deleteProperty(), exports2);
    tslib_1.__exportStar(require_deleteRemoteLinkById(), exports2);
    tslib_1.__exportStar(require_deleteRemoteLinksByProperty(), exports2);
    tslib_1.__exportStar(require_deleteRepository(), exports2);
    tslib_1.__exportStar(require_deleteSprint(), exports2);
    tslib_1.__exportStar(require_deleteVulnerabilitiesByProperty(), exports2);
    tslib_1.__exportStar(require_deleteVulnerabilityById(), exports2);
    tslib_1.__exportStar(require_estimateIssueForBoard(), exports2);
    tslib_1.__exportStar(require_existsByProperties2(), exports2);
    tslib_1.__exportStar(require_getAllBoards2(), exports2);
    tslib_1.__exportStar(require_getAllQuickFilters2(), exports2);
    tslib_1.__exportStar(require_getAllSprints(), exports2);
    tslib_1.__exportStar(require_getAllVersions(), exports2);
    tslib_1.__exportStar(require_getBoard2(), exports2);
    tslib_1.__exportStar(require_getBoardByFilterId2(), exports2);
    tslib_1.__exportStar(require_getBoardIssuesForEpic(), exports2);
    tslib_1.__exportStar(require_getBoardIssuesForSprint(), exports2);
    tslib_1.__exportStar(require_getBoardProperty(), exports2);
    tslib_1.__exportStar(require_getBoardPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getBuildByKey2(), exports2);
    tslib_1.__exportStar(require_getConfiguration2(), exports2);
    tslib_1.__exportStar(require_getDeploymentByKey2(), exports2);
    tslib_1.__exportStar(require_getDeploymentGatingStatusByKey2(), exports2);
    tslib_1.__exportStar(require_getEpic(), exports2);
    tslib_1.__exportStar(require_getEpics(), exports2);
    tslib_1.__exportStar(require_getFeatureFlagById2(), exports2);
    tslib_1.__exportStar(require_getFeaturesForBoard2(), exports2);
    tslib_1.__exportStar(require_getIssue(), exports2);
    tslib_1.__exportStar(require_getIssueEstimationForBoard(), exports2);
    tslib_1.__exportStar(require_getIssuesForBacklog(), exports2);
    tslib_1.__exportStar(require_getIssuesForBoard(), exports2);
    tslib_1.__exportStar(require_getIssuesForEpic(), exports2);
    tslib_1.__exportStar(require_getIssuesForSprint(), exports2);
    tslib_1.__exportStar(require_getIssuesWithoutEpic(), exports2);
    tslib_1.__exportStar(require_getIssuesWithoutEpicForBoard(), exports2);
    tslib_1.__exportStar(require_getLinkedWorkspaceById2(), exports2);
    tslib_1.__exportStar(require_getProjects(), exports2);
    tslib_1.__exportStar(require_getProjectsFull(), exports2);
    tslib_1.__exportStar(require_getPropertiesKeys(), exports2);
    tslib_1.__exportStar(require_getProperty(), exports2);
    tslib_1.__exportStar(require_getQuickFilter2(), exports2);
    tslib_1.__exportStar(require_getRemoteLinkById2(), exports2);
    tslib_1.__exportStar(require_getReportsForBoard2(), exports2);
    tslib_1.__exportStar(require_getRepository2(), exports2);
    tslib_1.__exportStar(require_getSprint(), exports2);
    tslib_1.__exportStar(require_getVulnerabilityById2(), exports2);
    tslib_1.__exportStar(require_moveIssuesToBacklog(), exports2);
    tslib_1.__exportStar(require_moveIssuesToBacklogForBoard(), exports2);
    tslib_1.__exportStar(require_moveIssuesToBoard(), exports2);
    tslib_1.__exportStar(require_moveIssuesToEpic(), exports2);
    tslib_1.__exportStar(require_moveIssuesToSprintAndRank(), exports2);
    tslib_1.__exportStar(require_partiallyUpdateEpic(), exports2);
    tslib_1.__exportStar(require_partiallyUpdateSprint(), exports2);
    tslib_1.__exportStar(require_rankEpics(), exports2);
    tslib_1.__exportStar(require_rankIssues(), exports2);
    tslib_1.__exportStar(require_removeIssuesFromEpic(), exports2);
    tslib_1.__exportStar(require_searchEpics(), exports2);
    tslib_1.__exportStar(require_setBoardProperty(), exports2);
    tslib_1.__exportStar(require_setProperty(), exports2);
    tslib_1.__exportStar(require_storeDevelopmentInformation2(), exports2);
    tslib_1.__exportStar(require_submitBuilds2(), exports2);
    tslib_1.__exportStar(require_submitDeployments2(), exports2);
    tslib_1.__exportStar(require_submitFeatureFlags2(), exports2);
    tslib_1.__exportStar(require_submitRemoteLinks2(), exports2);
    tslib_1.__exportStar(require_submitVulnerabilities2(), exports2);
    tslib_1.__exportStar(require_submitWorkspaces(), exports2);
    tslib_1.__exportStar(require_swapSprint(), exports2);
    tslib_1.__exportStar(require_toggleFeatures2(), exports2);
    tslib_1.__exportStar(require_updateSprint(), exports2);
    tslib_1.__exportStar(require_getIncidentById2(), exports2);
    tslib_1.__exportStar(require_deleteIncidentById(), exports2);
    tslib_1.__exportStar(require_deleteReviewById(), exports2);
    tslib_1.__exportStar(require_getReviewById2(), exports2);
    tslib_1.__exportStar(require_deleteEntityByProperty(), exports2);
    tslib_1.__exportStar(require_submitEntity2(), exports2);
    tslib_1.__exportStar(require_getWorkspaces2(), exports2);
    tslib_1.__exportStar(require_deleteWorkspaces(), exports2);
    tslib_1.__exportStar(require_submitOperationsWorkspaces2(), exports2);
    tslib_1.__exportStar(require_submitComponents2(), exports2);
    tslib_1.__exportStar(require_deleteComponentById(), exports2);
    tslib_1.__exportStar(require_deleteComponentsByProperty(), exports2);
    tslib_1.__exportStar(require_getComponentById2(), exports2);
  }
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "node_modules/delayed-stream/lib/delayed_stream.js"(exports2, module2) {
    var Stream = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "node_modules/combined-stream/lib/combined_stream.js"(exports2, module2) {
    var util = require("util");
    var Stream = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self2 = this;
      stream.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self2.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  "node_modules/mime-db/db.json"(exports2, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "node_modules/mime-db/index.js"(exports2, module2) {
    module2.exports = require_db();
  }
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "node_modules/mime-types/index.js"(exports2) {
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports2.charset = charset;
    exports2.charsets = { lookup: charset };
    exports2.contentType = contentType;
    exports2.extension = extension;
    exports2.extensions = /* @__PURE__ */ Object.create(null);
    exports2.lookup = lookup;
    exports2.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports2.extensions, exports2.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports2.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports2.charset(mime);
        if (charset2) mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports2.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path3) {
      if (!path3 || typeof path3 !== "string") {
        return false;
      }
      var extension2 = extname("x." + path3).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports2.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "node_modules/asynckit/lib/defer.js"(exports2, module2) {
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "node_modules/asynckit/lib/async.js"(exports2, module2) {
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "node_modules/asynckit/lib/abort.js"(exports2, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "node_modules/asynckit/lib/iterate.js"(exports2, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "node_modules/asynckit/lib/state.js"(exports2, module2) {
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "node_modules/asynckit/lib/terminator.js"(exports2, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "node_modules/asynckit/parallel.js"(exports2, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "node_modules/asynckit/serialOrdered.js"(exports2, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "node_modules/asynckit/serial.js"(exports2, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "node_modules/asynckit/index.js"(exports2, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "node_modules/form-data/lib/populate.js"(exports2, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "node_modules/form-data/lib/form_data.js"(exports2, module2) {
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path3 = require("path");
    var http = require("http");
    var https = require("https");
    var parseUrl = require("url").parse;
    var fs6 = require("fs");
    var Stream = require("stream").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData2;
    util.inherits(FormData2, CombinedStream);
    function FormData2(options) {
      if (!(this instanceof FormData2)) {
        return new FormData2(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData2.LINE_BREAK = "\r\n";
    FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData2.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == "string") {
        options = { filename: options };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (Array.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options);
    };
    FormData2.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData2.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs6.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData2.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == "string") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options.header == "object") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop)) continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
    };
    FormData2.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === "string") {
        filename = path3.normalize(options.filepath).replace(/\\/g, "/");
      } else if (options.filename || value.name || value.path) {
        filename = path3.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path3.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData2.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData2.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData2.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData2.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData2.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
    };
    FormData2.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData2.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData2.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData2.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== "function") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData2.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData2.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData2.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData2.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData2.prototype.submit = function(params, cb) {
      var request, options, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options = populate(params, defaults);
        if (!options.port) {
          options.port = options.protocol == "https:" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == "https:") {
        request = https.request(options);
      } else {
        request = http.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== "Unknown stream") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader("Content-Length", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error, responce) {
            request.removeListener("error", callback);
            request.removeListener("response", onResponse);
            return cb.call(this, error, responce);
          };
          onResponse = callback.bind(this, null);
          request.on("error", callback);
          request.on("response", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData2.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData2.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  "node_modules/proxy-from-env/index.js"(exports2) {
    "use strict";
    var parseUrl = require("url").parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var stringEndsWith = String.prototype.endsWith || function(s) {
      return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
    };
    function getProxyForUrl(url) {
      var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
        return "";
      }
      proto = proto.split(":", 1)[0];
      hostname = hostname.replace(/:\d*$/, "");
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return "";
      }
      var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
      if (proxy && proxy.indexOf("://") === -1) {
        proxy = proto + "://" + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === "*") {
        return false;
      }
      return NO_PROXY.split(/[,\s]/).every(function(proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === "*") {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key) {
      return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || "";
    }
    exports2.getProxyForUrl = getProxyForUrl;
  }
});

// node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "node_modules/follow-redirects/debug.js"(exports2, module2) {
    var debug;
    module2.exports = function() {
      if (!debug) {
        try {
          debug = require("debug")("follow-redirects");
        } catch (error) {
        }
        if (typeof debug !== "function") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "node_modules/follow-redirects/index.js"(exports2, module2) {
    var url = require("url");
    var URL2 = url.URL;
    var http = require("http");
    var https = require("https");
    var Writable = require("stream").Writable;
    var assert = require("assert");
    var debug = require_debug();
    (function detectUnsupportedEnvironment() {
      var looksLikeNode = typeof process !== "undefined";
      var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
      var looksLikeV8 = isFunction(Error.captureStackTrace);
      if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
        console.warn("The follow-redirects package should be excluded from browser builds.");
      }
    })();
    var useNativeURL = false;
    try {
      assert(new URL2(""));
    } catch (error) {
      useNativeURL = error.code === "ERR_INVALID_URL";
    }
    var preservedUrlFields = [
      "auth",
      "host",
      "hostname",
      "href",
      "path",
      "pathname",
      "port",
      "protocol",
      "query",
      "search",
      "hash"
    ];
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      "ERR_INVALID_URL",
      "Invalid URL",
      TypeError
    );
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded",
      RedirectionError
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );
    var destroy = Writable.prototype.destroy || noop;
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        try {
          self2._processResponse(response);
        } catch (cause) {
          self2.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
        }
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      destroyRequest(this._currentRequest);
      this._currentRequest.abort();
      this.emit("abort");
    };
    RedirectableRequest.prototype.destroy = function(error) {
      destroyRequest(this._currentRequest, error);
      destroy.call(this, error);
      return this;
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener("abort", clearTimer);
        self2.removeListener("error", clearTimer);
        self2.removeListener("response", clearTimer);
        self2.removeListener("close", clearTimer);
        if (callback) {
          self2.removeListener("timeout", callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (callback) {
        this.on("timeout", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);
      this.on("close", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        throw new TypeError("Unsupported protocol " + protocol);
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit("error", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
        return;
      }
      destroyRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        throw new TooManyRedirectsError();
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader("host")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = parseUrl(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl = resolveUrl(location, currentUrl);
      debug("redirecting to", redirectUrl.href);
      this._isRedirect = true;
      spreadUrlObject(redirectUrl, this._options);
      if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
        removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        beforeRedirect(this._options, responseDetails, requestDetails);
        this._sanitizeOptions(this._options);
      }
      this._performRequest();
    };
    function wrap(protocols) {
      var exports3 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports3[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isURL(input)) {
            input = spreadUrlObject(input);
          } else if (isString(input)) {
            input = spreadUrlObject(parseUrl(input));
          } else {
            callback = options;
            options = validateUrl(input);
            input = { protocol };
          }
          if (isFunction(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports3.maxRedirects,
            maxBodyLength: exports3.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString(options.host) && !isString(options.hostname)) {
            options.hostname = "::1";
          }
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports3;
    }
    function noop() {
    }
    function parseUrl(input) {
      var parsed;
      if (useNativeURL) {
        parsed = new URL2(input);
      } else {
        parsed = validateUrl(url.parse(input));
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
      }
      return parsed;
    }
    function resolveUrl(relative, base) {
      return useNativeURL ? new URL2(relative, base) : parseUrl(url.resolve(base, relative));
    }
    function validateUrl(input) {
      if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      return input;
    }
    function spreadUrlObject(urlObject, target) {
      var spread = target || {};
      for (var key of preservedUrlFields) {
        spread[key] = urlObject[key];
      }
      if (spread.hostname.startsWith("[")) {
        spread.hostname = spread.hostname.slice(1, -1);
      }
      if (spread.port !== "") {
        spread.port = Number(spread.port);
      }
      spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
      return spread;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        if (isFunction(Error.captureStackTrace)) {
          Error.captureStackTrace(this, this.constructor);
        }
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      Object.defineProperties(CustomError.prototype, {
        constructor: {
          value: CustomError,
          enumerable: false
        },
        name: {
          value: "Error [" + code + "]",
          enumerable: false
        }
      });
      return CustomError;
    }
    function destroyRequest(request, error) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on("error", noop);
      request.destroy(error);
    }
    function isSubdomain(subdomain, domain) {
      assert(isString(subdomain) && isString(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }
    function isString(value) {
      return typeof value === "string" || value instanceof String;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isBuffer(value) {
      return typeof value === "object" && "length" in value;
    }
    function isURL(value) {
      return URL2 && value instanceof URL2;
    }
    module2.exports = wrap({ http, https });
    module2.exports.wrap = wrap;
  }
});

// node_modules/axios/dist/node/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/node/axios.cjs"(exports2, module2) {
    "use strict";
    var FormData$1 = require_form_data();
    var url = require("url");
    var proxyFromEnv = require_proxy_from_env();
    var http = require("http");
    var https = require("https");
    var util = require("util");
    var followRedirects = require_follow_redirects();
    var zlib = require("zlib");
    var stream = require("stream");
    var events = require("events");
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var FormData__default = /* @__PURE__ */ _interopDefaultLegacy(FormData$1);
    var url__default = /* @__PURE__ */ _interopDefaultLegacy(url);
    var proxyFromEnv__default = /* @__PURE__ */ _interopDefaultLegacy(proxyFromEnv);
    var http__default = /* @__PURE__ */ _interopDefaultLegacy(http);
    var https__default = /* @__PURE__ */ _interopDefaultLegacy(https);
    var util__default = /* @__PURE__ */ _interopDefaultLegacy(util);
    var followRedirects__default = /* @__PURE__ */ _interopDefaultLegacy(followRedirects);
    var zlib__default = /* @__PURE__ */ _interopDefaultLegacy(zlib);
    var stream__default = /* @__PURE__ */ _interopDefaultLegacy(stream);
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context2) => !isUndefined(context2) && context2 !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path3, key, dots) {
      if (!path3) return key;
      return path3.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new (FormData__default["default"] || FormData)();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path3) {
        let arr = value;
        if (value && !path3 && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path3, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path3) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path3.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path3,
            exposedHelpers
          );
          if (result === true) {
            build(el, path3 ? path3.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url2, params, options) {
      if (!params) {
        return url2;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url2.indexOf("#");
        if (hashmarkIndex !== -1) {
          url2 = url2.slice(0, hashmarkIndex);
        }
        url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url2;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams2 = url__default["default"].URLSearchParams;
    var platform$1 = {
      isNode: true,
      classes: {
        URLSearchParams: URLSearchParams2,
        FormData: FormData__default["default"],
        Blob: typeof Blob !== "undefined" && Blob || null
      },
      protocols: ["http", "https", "file", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path3, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path3, value, target, index) {
        let name = path3[index++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path3.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path3, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context2, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context2 = response || config;
      const headers = AxiosHeaders$1.from(context2.headers);
      let data = context2.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function isAbsoluteURL(url2) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var VERSION = "1.7.8";
    function parseProtocol(url2) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
      return match && match[1] || "";
    }
    var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
    function fromDataURI(uri, asBlob, options) {
      const _Blob = options && options.Blob || platform.classes.Blob;
      const protocol = parseProtocol(uri);
      if (asBlob === void 0 && _Blob) {
        asBlob = true;
      }
      if (protocol === "data") {
        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
        const match = DATA_URL_PATTERN.exec(uri);
        if (!match) {
          throw new AxiosError("Invalid URL", AxiosError.ERR_INVALID_URL);
        }
        const mime = match[1];
        const isBase64 = match[2];
        const body = match[3];
        const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
        if (asBlob) {
          if (!_Blob) {
            throw new AxiosError("Blob is not supported", AxiosError.ERR_NOT_SUPPORT);
          }
          return new _Blob([buffer], { type: mime });
        }
        return buffer;
      }
      throw new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_NOT_SUPPORT);
    }
    var kInternals = Symbol("internals");
    var AxiosTransformStream = class extends stream__default["default"].Transform {
      constructor(options) {
        options = utils$1.toFlatObject(options, {
          maxRate: 0,
          chunkSize: 64 * 1024,
          minChunkSize: 100,
          timeWindow: 500,
          ticksRate: 2,
          samplesCount: 15
        }, null, (prop, source) => {
          return !utils$1.isUndefined(source[prop]);
        });
        super({
          readableHighWaterMark: options.chunkSize
        });
        const internals = this[kInternals] = {
          timeWindow: options.timeWindow,
          chunkSize: options.chunkSize,
          maxRate: options.maxRate,
          minChunkSize: options.minChunkSize,
          bytesSeen: 0,
          isCaptured: false,
          notifiedBytesLoaded: 0,
          ts: Date.now(),
          bytes: 0,
          onReadCallback: null
        };
        this.on("newListener", (event) => {
          if (event === "progress") {
            if (!internals.isCaptured) {
              internals.isCaptured = true;
            }
          }
        });
      }
      _read(size) {
        const internals = this[kInternals];
        if (internals.onReadCallback) {
          internals.onReadCallback();
        }
        return super._read(size);
      }
      _transform(chunk, encoding, callback) {
        const internals = this[kInternals];
        const maxRate = internals.maxRate;
        const readableHighWaterMark = this.readableHighWaterMark;
        const timeWindow = internals.timeWindow;
        const divider = 1e3 / timeWindow;
        const bytesThreshold = maxRate / divider;
        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
        const pushChunk = (_chunk, _callback) => {
          const bytes = Buffer.byteLength(_chunk);
          internals.bytesSeen += bytes;
          internals.bytes += bytes;
          internals.isCaptured && this.emit("progress", internals.bytesSeen);
          if (this.push(_chunk)) {
            process.nextTick(_callback);
          } else {
            internals.onReadCallback = () => {
              internals.onReadCallback = null;
              process.nextTick(_callback);
            };
          }
        };
        const transformChunk = (_chunk, _callback) => {
          const chunkSize = Buffer.byteLength(_chunk);
          let chunkRemainder = null;
          let maxChunkSize = readableHighWaterMark;
          let bytesLeft;
          let passed = 0;
          if (maxRate) {
            const now = Date.now();
            if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
              internals.ts = now;
              bytesLeft = bytesThreshold - internals.bytes;
              internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
              passed = 0;
            }
            bytesLeft = bytesThreshold - internals.bytes;
          }
          if (maxRate) {
            if (bytesLeft <= 0) {
              return setTimeout(() => {
                _callback(null, _chunk);
              }, timeWindow - passed);
            }
            if (bytesLeft < maxChunkSize) {
              maxChunkSize = bytesLeft;
            }
          }
          if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
            chunkRemainder = _chunk.subarray(maxChunkSize);
            _chunk = _chunk.subarray(0, maxChunkSize);
          }
          pushChunk(_chunk, chunkRemainder ? () => {
            process.nextTick(_callback, null, chunkRemainder);
          } : _callback);
        };
        transformChunk(chunk, function transformNextChunk(err, _chunk) {
          if (err) {
            return callback(err);
          }
          if (_chunk) {
            transformChunk(_chunk, transformNextChunk);
          } else {
            callback(null);
          }
        });
      }
    };
    var AxiosTransformStream$1 = AxiosTransformStream;
    var { asyncIterator } = Symbol;
    var readBlob = async function* (blob) {
      if (blob.stream) {
        yield* blob.stream();
      } else if (blob.arrayBuffer) {
        yield await blob.arrayBuffer();
      } else if (blob[asyncIterator]) {
        yield* blob[asyncIterator]();
      } else {
        yield blob;
      }
    };
    var readBlob$1 = readBlob;
    var BOUNDARY_ALPHABET = utils$1.ALPHABET.ALPHA_DIGIT + "-_";
    var textEncoder = typeof TextEncoder === "function" ? new TextEncoder() : new util__default["default"].TextEncoder();
    var CRLF = "\r\n";
    var CRLF_BYTES = textEncoder.encode(CRLF);
    var CRLF_BYTES_COUNT = 2;
    var FormDataPart = class {
      constructor(name, value) {
        const { escapeName } = this.constructor;
        const isStringValue = utils$1.isString(value);
        let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
        if (isStringValue) {
          value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
        } else {
          headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
        }
        this.headers = textEncoder.encode(headers + CRLF);
        this.contentLength = isStringValue ? value.byteLength : value.size;
        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
        this.name = name;
        this.value = value;
      }
      async *encode() {
        yield this.headers;
        const { value } = this;
        if (utils$1.isTypedArray(value)) {
          yield value;
        } else {
          yield* readBlob$1(value);
        }
        yield CRLF_BYTES;
      }
      static escapeName(name) {
        return String(name).replace(/[\r\n"]/g, (match) => ({
          "\r": "%0D",
          "\n": "%0A",
          '"': "%22"
        })[match]);
      }
    };
    var formDataToStream = (form, headersHandler, options) => {
      const {
        tag = "form-data-boundary",
        size = 25,
        boundary = tag + "-" + utils$1.generateString(size, BOUNDARY_ALPHABET)
      } = options || {};
      if (!utils$1.isFormData(form)) {
        throw TypeError("FormData instance required");
      }
      if (boundary.length < 1 || boundary.length > 70) {
        throw Error("boundary must be 10-70 characters long");
      }
      const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
      const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF + CRLF);
      let contentLength = footerBytes.byteLength;
      const parts = Array.from(form.entries()).map(([name, value]) => {
        const part = new FormDataPart(name, value);
        contentLength += part.size;
        return part;
      });
      contentLength += boundaryBytes.byteLength * parts.length;
      contentLength = utils$1.toFiniteNumber(contentLength);
      const computedHeaders = {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      };
      if (Number.isFinite(contentLength)) {
        computedHeaders["Content-Length"] = contentLength;
      }
      headersHandler && headersHandler(computedHeaders);
      return stream.Readable.from(async function* () {
        for (const part of parts) {
          yield boundaryBytes;
          yield* part.encode();
        }
        yield footerBytes;
      }());
    };
    var formDataToStream$1 = formDataToStream;
    var ZlibHeaderTransformStream = class extends stream__default["default"].Transform {
      __transform(chunk, encoding, callback) {
        this.push(chunk);
        callback();
      }
      _transform(chunk, encoding, callback) {
        if (chunk.length !== 0) {
          this._transform = this.__transform;
          if (chunk[0] !== 120) {
            const header = Buffer.alloc(2);
            header[0] = 120;
            header[1] = 156;
            this.push(header, encoding);
          }
        }
        this.__transform(chunk, encoding, callback);
      }
    };
    var ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;
    var callbackify = (fn, reducer) => {
      return utils$1.isAsyncFn(fn) ? function(...args) {
        const cb = args.pop();
        fn.apply(this, args).then((value) => {
          try {
            reducer ? cb(null, ...reducer(value)) : cb(null, value);
          } catch (err) {
            cb(err);
          }
        }, cb);
      } : fn;
    };
    var callbackify$1 = callbackify;
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var zlibOptions = {
      flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
      finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
    };
    var brotliOptions = {
      flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
      finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
    };
    var isBrotliSupported = utils$1.isFunction(zlib__default["default"].createBrotliDecompress);
    var { http: httpFollow, https: httpsFollow } = followRedirects__default["default"];
    var isHttps = /https:?/;
    var supportedProtocols = platform.protocols.map((protocol) => {
      return protocol + ":";
    });
    var flushOnFinish = (stream2, [throttled, flush]) => {
      stream2.on("end", flush).on("error", flush);
      return throttled;
    };
    function dispatchBeforeRedirect(options, responseDetails) {
      if (options.beforeRedirects.proxy) {
        options.beforeRedirects.proxy(options);
      }
      if (options.beforeRedirects.config) {
        options.beforeRedirects.config(options, responseDetails);
      }
    }
    function setProxy(options, configProxy, location) {
      let proxy = configProxy;
      if (!proxy && proxy !== false) {
        const proxyUrl = proxyFromEnv__default["default"].getProxyForUrl(location);
        if (proxyUrl) {
          proxy = new URL(proxyUrl);
        }
      }
      if (proxy) {
        if (proxy.username) {
          proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
        }
        if (proxy.auth) {
          if (proxy.auth.username || proxy.auth.password) {
            proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
          }
          const base64 = Buffer.from(proxy.auth, "utf8").toString("base64");
          options.headers["Proxy-Authorization"] = "Basic " + base64;
        }
        options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
        const proxyHost = proxy.hostname || proxy.host;
        options.hostname = proxyHost;
        options.host = proxyHost;
        options.port = proxy.port;
        options.path = location;
        if (proxy.protocol) {
          options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
        }
      }
      options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
        setProxy(redirectOptions, configProxy, redirectOptions.href);
      };
    }
    var isHttpAdapterSupported = typeof process !== "undefined" && utils$1.kindOf(process) === "process";
    var wrapAsync = (asyncExecutor) => {
      return new Promise((resolve, reject) => {
        let onDone;
        let isDone;
        const done = (value, isRejected) => {
          if (isDone) return;
          isDone = true;
          onDone && onDone(value, isRejected);
        };
        const _resolve = (value) => {
          done(value);
          resolve(value);
        };
        const _reject = (reason) => {
          done(reason, true);
          reject(reason);
        };
        asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
      });
    };
    var resolveFamily = ({ address, family }) => {
      if (!utils$1.isString(address)) {
        throw TypeError("address must be a string");
      }
      return {
        address,
        family: family || (address.indexOf(".") < 0 ? 6 : 4)
      };
    };
    var buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : { address, family });
    var httpAdapter = isHttpAdapterSupported && function httpAdapter2(config) {
      return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
        let { data, lookup, family } = config;
        const { responseType, responseEncoding } = config;
        const method = config.method.toUpperCase();
        let isDone;
        let rejected = false;
        let req;
        if (lookup) {
          const _lookup = callbackify$1(lookup, (value) => utils$1.isArray(value) ? value : [value]);
          lookup = (hostname, opt, cb) => {
            _lookup(hostname, opt, (err, arg0, arg1) => {
              if (err) {
                return cb(err);
              }
              const addresses = utils$1.isArray(arg0) ? arg0.map((addr) => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
              opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
            });
          };
        }
        const emitter = new events.EventEmitter();
        const onFinished = () => {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(abort);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", abort);
          }
          emitter.removeAllListeners();
        };
        onDone((value, isRejected) => {
          isDone = true;
          if (isRejected) {
            rejected = true;
            onFinished();
          }
        });
        function abort(reason) {
          emitter.emit("abort", !reason || reason.type ? new CanceledError(null, config, req) : reason);
        }
        emitter.once("abort", reject);
        if (config.cancelToken || config.signal) {
          config.cancelToken && config.cancelToken.subscribe(abort);
          if (config.signal) {
            config.signal.aborted ? abort() : config.signal.addEventListener("abort", abort);
          }
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : void 0);
        const protocol = parsed.protocol || supportedProtocols[0];
        if (protocol === "data:") {
          let convertedData;
          if (method !== "GET") {
            return settle(resolve, reject, {
              status: 405,
              statusText: "method not allowed",
              headers: {},
              config
            });
          }
          try {
            convertedData = fromDataURI(config.url, responseType === "blob", {
              Blob: config.env && config.env.Blob
            });
          } catch (err) {
            throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);
          }
          if (responseType === "text") {
            convertedData = convertedData.toString(responseEncoding);
            if (!responseEncoding || responseEncoding === "utf8") {
              convertedData = utils$1.stripBOM(convertedData);
            }
          } else if (responseType === "stream") {
            convertedData = stream__default["default"].Readable.from(convertedData);
          }
          return settle(resolve, reject, {
            data: convertedData,
            status: 200,
            statusText: "OK",
            headers: new AxiosHeaders$1(),
            config
          });
        }
        if (supportedProtocols.indexOf(protocol) === -1) {
          return reject(new AxiosError(
            "Unsupported protocol " + protocol,
            AxiosError.ERR_BAD_REQUEST,
            config
          ));
        }
        const headers = AxiosHeaders$1.from(config.headers).normalize();
        headers.set("User-Agent", "axios/" + VERSION, false);
        const { onUploadProgress, onDownloadProgress } = config;
        const maxRate = config.maxRate;
        let maxUploadRate = void 0;
        let maxDownloadRate = void 0;
        if (utils$1.isSpecCompliantForm(data)) {
          const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
          data = formDataToStream$1(data, (formHeaders) => {
            headers.set(formHeaders);
          }, {
            tag: `axios-${VERSION}-boundary`,
            boundary: userBoundary && userBoundary[1] || void 0
          });
        } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
          headers.set(data.getHeaders());
          if (!headers.hasContentLength()) {
            try {
              const knownLength = await util__default["default"].promisify(data.getLength).call(data);
              Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
            } catch (e) {
            }
          }
        } else if (utils$1.isBlob(data) || utils$1.isFile(data)) {
          data.size && headers.setContentType(data.type || "application/octet-stream");
          headers.setContentLength(data.size || 0);
          data = stream__default["default"].Readable.from(readBlob$1(data));
        } else if (data && !utils$1.isStream(data)) {
          if (Buffer.isBuffer(data)) ;
          else if (utils$1.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils$1.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(new AxiosError(
              "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
              AxiosError.ERR_BAD_REQUEST,
              config
            ));
          }
          headers.setContentLength(data.length, false);
          if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
            return reject(new AxiosError(
              "Request body larger than maxBodyLength limit",
              AxiosError.ERR_BAD_REQUEST,
              config
            ));
          }
        }
        const contentLength = utils$1.toFiniteNumber(headers.getContentLength());
        if (utils$1.isArray(maxRate)) {
          maxUploadRate = maxRate[0];
          maxDownloadRate = maxRate[1];
        } else {
          maxUploadRate = maxDownloadRate = maxRate;
        }
        if (data && (onUploadProgress || maxUploadRate)) {
          if (!utils$1.isStream(data)) {
            data = stream__default["default"].Readable.from(data, { objectMode: false });
          }
          data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
            maxRate: utils$1.toFiniteNumber(maxUploadRate)
          })], utils$1.noop);
          onUploadProgress && data.on("progress", flushOnFinish(
            data,
            progressEventDecorator(
              contentLength,
              progressEventReducer(asyncDecorator(onUploadProgress), false, 3)
            )
          ));
        }
        let auth = void 0;
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password || "";
          auth = username + ":" + password;
        }
        if (!auth && parsed.username) {
          const urlUsername = parsed.username;
          const urlPassword = parsed.password;
          auth = urlUsername + ":" + urlPassword;
        }
        auth && headers.delete("authorization");
        let path3;
        try {
          path3 = buildURL(
            parsed.pathname + parsed.search,
            config.params,
            config.paramsSerializer
          ).replace(/^\?/, "");
        } catch (err) {
          const customErr = new Error(err.message);
          customErr.config = config;
          customErr.url = config.url;
          customErr.exists = true;
          return reject(customErr);
        }
        headers.set(
          "Accept-Encoding",
          "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""),
          false
        );
        const options = {
          path: path3,
          method,
          headers: headers.toJSON(),
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth,
          protocol,
          family,
          beforeRedirect: dispatchBeforeRedirect,
          beforeRedirects: {}
        };
        !utils$1.isUndefined(lookup) && (options.lookup = lookup);
        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
          options.port = parsed.port;
          setProxy(options, config.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        let transport;
        const isHttpsRequest = isHttps.test(options.protocol);
        options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsRequest ? https__default["default"] : http__default["default"];
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          if (config.beforeRedirect) {
            options.beforeRedirects.config = config.beforeRedirect;
          }
          transport = isHttpsRequest ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        } else {
          options.maxBodyLength = Infinity;
        }
        if (config.insecureHTTPParser) {
          options.insecureHTTPParser = config.insecureHTTPParser;
        }
        req = transport.request(options, function handleResponse(res) {
          if (req.destroyed) return;
          const streams = [res];
          const responseLength = +res.headers["content-length"];
          if (onDownloadProgress || maxDownloadRate) {
            const transformStream = new AxiosTransformStream$1({
              maxRate: utils$1.toFiniteNumber(maxDownloadRate)
            });
            onDownloadProgress && transformStream.on("progress", flushOnFinish(
              transformStream,
              progressEventDecorator(
                responseLength,
                progressEventReducer(asyncDecorator(onDownloadProgress), true, 3)
              )
            ));
            streams.push(transformStream);
          }
          let responseStream = res;
          const lastRequest = res.req || req;
          if (config.decompress !== false && res.headers["content-encoding"]) {
            if (method === "HEAD" || res.statusCode === 204) {
              delete res.headers["content-encoding"];
            }
            switch ((res.headers["content-encoding"] || "").toLowerCase()) {
              /*eslint default-case:0*/
              case "gzip":
              case "x-gzip":
              case "compress":
              case "x-compress":
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "deflate":
                streams.push(new ZlibHeaderTransformStream$1());
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "br":
                if (isBrotliSupported) {
                  streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
                  delete res.headers["content-encoding"];
                }
            }
          }
          responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$1.noop) : streams[0];
          const offListeners = stream__default["default"].finished(responseStream, () => {
            offListeners();
            onFinished();
          });
          const response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: new AxiosHeaders$1(res.headers),
            config,
            request: lastRequest
          };
          if (responseType === "stream") {
            response.data = responseStream;
            settle(resolve, reject, response);
          } else {
            const responseBuffer = [];
            let totalResponseBytes = 0;
            responseStream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                rejected = true;
                responseStream.destroy();
                reject(new AxiosError(
                  "maxContentLength size of " + config.maxContentLength + " exceeded",
                  AxiosError.ERR_BAD_RESPONSE,
                  config,
                  lastRequest
                ));
              }
            });
            responseStream.on("aborted", function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              const err = new AxiosError(
                "stream has been aborted",
                AxiosError.ERR_BAD_RESPONSE,
                config,
                lastRequest
              );
              responseStream.destroy(err);
              reject(err);
            });
            responseStream.on("error", function handleStreamError(err) {
              if (req.destroyed) return;
              reject(AxiosError.from(err, null, config, lastRequest));
            });
            responseStream.on("end", function handleStreamEnd() {
              try {
                let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (responseType !== "arraybuffer") {
                  responseData = responseData.toString(responseEncoding);
                  if (!responseEncoding || responseEncoding === "utf8") {
                    responseData = utils$1.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                return reject(AxiosError.from(err, null, config, response.request, response));
              }
              settle(resolve, reject, response);
            });
          }
          emitter.once("abort", (err) => {
            if (!responseStream.destroyed) {
              responseStream.emit("error", err);
              responseStream.destroy();
            }
          });
        });
        emitter.once("abort", (err) => {
          reject(err);
          req.destroy(err);
        });
        req.on("error", function handleRequestError(err) {
          reject(AxiosError.from(err, null, config, req));
        });
        req.on("socket", function handleRequestSocket(socket) {
          socket.setKeepAlive(true, 1e3 * 60);
        });
        if (config.timeout) {
          const timeout = parseInt(config.timeout, 10);
          if (Number.isNaN(timeout)) {
            reject(new AxiosError(
              "error trying to parse `config.timeout` to int",
              AxiosError.ERR_BAD_OPTION_VALUE,
              config,
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            if (isDone) return;
            let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(new AxiosError(
              timeoutErrorMessage,
              transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
              config,
              req
            ));
            abort();
          });
        }
        if (utils$1.isStream(data)) {
          let ended = false;
          let errored = false;
          data.on("end", () => {
            ended = true;
          });
          data.once("error", (err) => {
            errored = true;
            req.destroy(err);
          });
          data.on("close", () => {
            if (!ended && !errored) {
              abort(new CanceledError("Request stream has been aborted", config, req));
            }
          });
          data.pipe(req);
        } else {
          req.end(data);
        }
      });
    };
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url2) => {
      url2 = new URL(url2, platform.origin);
      return origin2.protocol === url2.protocol && origin2.host === url2.host && (isMSIE || origin2.port === url2.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path3, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path3) && cookie.push("path=" + path3);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, prop, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, prop, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream2) {
      if (stream2[Symbol.asyncIterator]) {
        yield* stream2;
        return;
      }
      const reader = stream2.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream2, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream2, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url: url2,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url2, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url2, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url2, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url: url2,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url2, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url: url2,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context2 = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context2);
      utils$1.extend(instance, Axios$1.prototype, context2, { allOwnKeys: true });
      utils$1.extend(instance, context2, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises6) {
      return Promise.all(promises6);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/jira.js/out/services/authenticationService/base64Encoder.js
var require_base64Encoder = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/base64Encoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Base64Encoder = void 0;
    var Base64Encoder;
    (function(Base64Encoder2) {
      const base64Sequence = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      const utf8Encode = (value) => {
        value = value.replace(/\r\n/g, "\n");
        let utftext = "";
        for (let n = 0; n < value.length; n++) {
          const c = value.charCodeAt(n);
          if (c < 128) {
            utftext += String.fromCharCode(c);
          } else if (c > 127 && c < 2048) {
            utftext += String.fromCharCode(c >> 6 | 192);
            utftext += String.fromCharCode(c & 63 | 128);
          } else {
            utftext += String.fromCharCode(c >> 12 | 224);
            utftext += String.fromCharCode(c >> 6 & 63 | 128);
            utftext += String.fromCharCode(c & 63 | 128);
          }
        }
        return utftext;
      };
      Base64Encoder2.encode = (input) => {
        let output = "";
        let chr1;
        let chr2;
        let chr3;
        let enc1;
        let enc2;
        let enc3;
        let enc4;
        let i = 0;
        input = utf8Encode(input);
        while (i < input.length) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = (chr1 & 3) << 4 | chr2 >> 4;
          enc3 = (chr2 & 15) << 2 | chr3 >> 6;
          enc4 = chr3 & 63;
          if (isNaN(chr2)) {
            enc3 = enc4 = 64;
          } else if (isNaN(chr3)) {
            enc4 = 64;
          }
          output += `${base64Sequence.charAt(enc1)}${base64Sequence.charAt(enc2)}${base64Sequence.charAt(enc3)}${base64Sequence.charAt(enc4)}`;
        }
        return output;
      };
    })(Base64Encoder || (exports2.Base64Encoder = Base64Encoder = {}));
  }
});

// node_modules/jira.js/out/services/authenticationService/authentications/createBasicAuthenticationToken.js
var require_createBasicAuthenticationToken = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/authentications/createBasicAuthenticationToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createBasicAuthenticationToken = createBasicAuthenticationToken;
    var base64Encoder_1 = require_base64Encoder();
    function createBasicAuthenticationToken(authenticationData) {
      let login;
      let secret;
      if ("username" in authenticationData) {
        login = authenticationData.username;
        secret = authenticationData.password;
      } else {
        login = authenticationData.email;
        secret = authenticationData.apiToken;
      }
      const token = base64Encoder_1.Base64Encoder.encode(`${login}:${secret}`);
      return `Basic ${token}`;
    }
  }
});

// node_modules/jira.js/out/services/authenticationService/authentications/createOAuth2AuthenticationToken.js
var require_createOAuth2AuthenticationToken = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/authentications/createOAuth2AuthenticationToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createOAuth2AuthenticationToken = createOAuth2AuthenticationToken;
    function createOAuth2AuthenticationToken(authenticationData) {
      return `Bearer ${authenticationData.accessToken}`;
    }
  }
});

// node_modules/jira.js/out/services/authenticationService/authentications/createPATAuthentication.js
var require_createPATAuthentication = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/authentications/createPATAuthentication.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPATAuthentication = createPATAuthentication;
    function createPATAuthentication(pat) {
      return `Bearer ${pat}`;
    }
  }
});

// node_modules/jira.js/out/services/authenticationService/authentications/index.js
var require_authentications = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/authentications/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createBasicAuthenticationToken(), exports2);
    tslib_1.__exportStar(require_createOAuth2AuthenticationToken(), exports2);
    tslib_1.__exportStar(require_createPATAuthentication(), exports2);
  }
});

// node_modules/jira.js/out/services/authenticationService/getAuthenticationToken.js
var require_getAuthenticationToken = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/getAuthenticationToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAuthenticationToken = getAuthenticationToken;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var authentications_1 = require_authentications();
    function getAuthenticationToken(authentication) {
      return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!authentication) {
          return void 0;
        }
        if (authentication.basic) {
          return (0, authentications_1.createBasicAuthenticationToken)(authentication.basic);
        }
        if (authentication.oauth2) {
          return (0, authentications_1.createOAuth2AuthenticationToken)(authentication.oauth2);
        }
        if (authentication.personalAccessToken) {
          return (0, authentications_1.createPATAuthentication)(authentication.personalAccessToken);
        }
        return void 0;
      });
    }
  }
});

// node_modules/jira.js/out/services/authenticationService/index.js
var require_authenticationService = __commonJS({
  "node_modules/jira.js/out/services/authenticationService/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getAuthenticationToken(), exports2);
  }
});

// node_modules/jira.js/out/clients/httpException.js
var require_httpException = __commonJS({
  "node_modules/jira.js/out/clients/httpException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpException = exports2.DEFAULT_EXCEPTION_STATUS_TEXT = exports2.DEFAULT_EXCEPTION_CODE = exports2.DEFAULT_EXCEPTION_MESSAGE = exports2.DEFAULT_EXCEPTION_STATUS = exports2.isNumber = exports2.isString = exports2.isObject = exports2.isNil = exports2.isUndefined = void 0;
    var isUndefined = (obj) => typeof obj === "undefined";
    exports2.isUndefined = isUndefined;
    var isNil = (val) => (0, exports2.isUndefined)(val) || val === null;
    exports2.isNil = isNil;
    var isObject = (fn) => !(0, exports2.isNil)(fn) && typeof fn === "object";
    exports2.isObject = isObject;
    var isString = (val) => typeof val === "string";
    exports2.isString = isString;
    var isNumber = (val) => typeof val === "number";
    exports2.isNumber = isNumber;
    exports2.DEFAULT_EXCEPTION_STATUS = 500;
    exports2.DEFAULT_EXCEPTION_MESSAGE = "Something went wrong";
    exports2.DEFAULT_EXCEPTION_CODE = "INTERNAL_SERVER_ERROR";
    exports2.DEFAULT_EXCEPTION_STATUS_TEXT = "Internal server error";
    var HttpException = class extends Error {
      /**
       * Instantiate a plain HTTP Exception.
       *
       * @example
       *   throw new HttpException('message', HttpStatus.BAD_REQUEST);
       *   throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {
       *     cause: new Error('Cause Error'),
       *   });
       *
       * @param response String, object describing the error condition or the error cause.
       * @param status HTTP response status code.
       * @param options An object used to add an error cause. Configures error chaining support
       * @usageNotes
       * The constructor arguments define the response and the HTTP response status code.
       * - The `response` argument (required) defines the JSON response body. alternatively, it can also be
       *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).
       * - The `status` argument (optional) defines the HTTP Status Code.
       * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,
       *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`
       *
       * By default, the JSON response body contains two properties:
       * - `statusCode`: the Http Status Code.
       * - `message`: a short description of the HTTP error by default; override this
       * by supplying a string in the `response` parameter.
       *
       * The `status` argument is required, and should be a valid HTTP status code.
       * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.
       * @see https://nodejs.org/en/blog/release/v16.9.0/#error-cause
       * @see https://github.com/microsoft/TypeScript/issues/45167
       */
      constructor(response, status, options) {
        super();
        this.response = response;
        this.name = this.initName();
        this.cause = this.initCause(response, options);
        this.code = this.initCode(response);
        this.message = this.initMessage(response);
        this.status = this.initStatus(response, status);
        this.statusText = this.initStatusText(response, this.status);
      }
      initMessage(response) {
        var _a, _b;
        if ((0, exports2.isString)(response)) {
          return response;
        }
        if ((0, exports2.isObject)(response) && (0, exports2.isString)(response.message)) {
          return response.message;
        }
        if (this.constructor) {
          return (_b = (_a = this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g)) === null || _a === void 0 ? void 0 : _a.join(" ")) !== null && _b !== void 0 ? _b : "Error";
        }
        return exports2.DEFAULT_EXCEPTION_MESSAGE;
      }
      initCause(response, options) {
        if (options === null || options === void 0 ? void 0 : options.cause) {
          return options.cause;
        }
        if ((0, exports2.isObject)(response) && (0, exports2.isObject)(response.cause)) {
          return response.cause;
        }
        return void 0;
      }
      initCode(response) {
        if ((0, exports2.isObject)(response) && (0, exports2.isString)(response.code)) {
          return response.code;
        }
        return exports2.DEFAULT_EXCEPTION_CODE;
      }
      initName() {
        return this.constructor.name;
      }
      initStatus(response, status) {
        if (status) {
          return status;
        }
        if ((0, exports2.isObject)(response) && (0, exports2.isNumber)(response.status)) {
          return response.status;
        }
        if ((0, exports2.isObject)(response) && (0, exports2.isNumber)(response.statusCode)) {
          return response.statusCode;
        }
        return exports2.DEFAULT_EXCEPTION_STATUS;
      }
      initStatusText(response, status) {
        if ((0, exports2.isObject)(response) && (0, exports2.isString)(response.statusText)) {
          return response.statusText;
        }
        return status ? void 0 : exports2.DEFAULT_EXCEPTION_STATUS_TEXT;
      }
    };
    exports2.HttpException = HttpException;
  }
});

// node_modules/jira.js/out/clients/baseClient.js
var require_baseClient = __commonJS({
  "node_modules/jira.js/out/clients/baseClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseClient = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var axios_1 = require_axios();
    var authenticationService_1 = require_authenticationService();
    var httpException_1 = require_httpException();
    var STRICT_GDPR_FLAG = "x-atlassian-force-account-id";
    var ATLASSIAN_TOKEN_CHECK_FLAG = "X-Atlassian-Token";
    var ATLASSIAN_TOKEN_CHECK_NOCHECK_VALUE = "no-check";
    var BaseClient = class {
      constructor(config) {
        var _a;
        this.config = config;
        try {
          new URL(config.host);
        } catch (e) {
          throw new Error("Couldn't parse the host URL. Perhaps you forgot to add 'http://' or 'https://' at the beginning of the URL?");
        }
        this.instance = axios_1.default.create(Object.assign(Object.assign({ paramsSerializer: this.paramSerializer.bind(this) }, config.baseRequestConfig), { baseURL: config.host, headers: this.removeUndefinedProperties(Object.assign({ [STRICT_GDPR_FLAG]: config.strictGDPR, [ATLASSIAN_TOKEN_CHECK_FLAG]: config.noCheckAtlassianToken ? ATLASSIAN_TOKEN_CHECK_NOCHECK_VALUE : void 0 }, (_a = config.baseRequestConfig) === null || _a === void 0 ? void 0 : _a.headers)) }));
      }
      paramSerializer(parameters) {
        const parts = [];
        Object.entries(parameters).forEach(([key, value]) => {
          if (value === null || typeof value === "undefined") {
            return;
          }
          if (Array.isArray(value)) {
            value = value.join(",");
          }
          if (value instanceof Date) {
            value = value.toISOString();
          } else if (value !== null && typeof value === "object") {
            value = JSON.stringify(value);
          } else if (value instanceof Function) {
            const part = value();
            return part && parts.push(part);
          }
          parts.push(`${this.encode(key)}=${this.encode(value)}`);
        });
        return parts.join("&");
      }
      encode(value) {
        return encodeURIComponent(value).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      removeUndefinedProperties(obj) {
        return Object.entries(obj).filter(([, value]) => typeof value !== "undefined").reduce((accumulator, [key, value]) => Object.assign(Object.assign({}, accumulator), { [key]: value }), {});
      }
      sendRequest(requestConfig, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          try {
            const response = yield this.sendRequestFullResponse(requestConfig);
            return this.handleSuccessResponse(response.data, callback);
          } catch (e) {
            return this.handleFailedResponse(e, callback);
          }
        });
      }
      sendRequestFullResponse(requestConfig) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const modifiedRequestConfig = Object.assign(Object.assign({}, requestConfig), { headers: this.removeUndefinedProperties(Object.assign({ Authorization: yield (0, authenticationService_1.getAuthenticationToken)(this.config.authentication) }, requestConfig.headers)) });
          return this.instance.request(modifiedRequestConfig);
        });
      }
      handleSuccessResponse(response, callback) {
        var _a, _b;
        const callbackResponseHandler = callback && ((data) => callback(null, data));
        const defaultResponseHandler = (data) => data;
        const responseHandler = callbackResponseHandler !== null && callbackResponseHandler !== void 0 ? callbackResponseHandler : defaultResponseHandler;
        (_b = (_a = this.config.middlewares) === null || _a === void 0 ? void 0 : _a.onResponse) === null || _b === void 0 ? void 0 : _b.call(_a, response.data);
        return responseHandler(response);
      }
      handleFailedResponse(e, callback) {
        var _a, _b;
        const err = this.buildErrorHandlingResponse(e);
        const callbackErrorHandler = callback && ((error) => callback(error));
        const defaultErrorHandler = (error) => {
          throw error;
        };
        const errorHandler = callbackErrorHandler !== null && callbackErrorHandler !== void 0 ? callbackErrorHandler : defaultErrorHandler;
        (_b = (_a = this.config.middlewares) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, err);
        return errorHandler(err);
      }
      buildErrorHandlingResponse(e) {
        var _a, _b;
        if (axios_1.default.isAxiosError(e) && e.response) {
          return new httpException_1.HttpException({
            code: e.code,
            message: e.message,
            data: e.response.data,
            status: (_a = e.response) === null || _a === void 0 ? void 0 : _a.status,
            statusText: (_b = e.response) === null || _b === void 0 ? void 0 : _b.statusText
          }, e.response.status, { cause: e });
        }
        if (axios_1.default.isAxiosError(e)) {
          return e;
        }
        if ((0, httpException_1.isObject)(e) && (0, httpException_1.isObject)(e.response)) {
          return new httpException_1.HttpException(e.response);
        }
        if (e instanceof Error) {
          return new httpException_1.HttpException(e);
        }
        return new httpException_1.HttpException("Unknown error occurred.", 500, { cause: e });
      }
    };
    exports2.BaseClient = BaseClient;
  }
});

// node_modules/jira.js/out/clients/client.js
var require_client2 = __commonJS({
  "node_modules/jira.js/out/clients/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/announcementBanner.js
var require_announcementBanner = __commonJS({
  "node_modules/jira.js/out/version2/announcementBanner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AnnouncementBanner = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AnnouncementBanner = class {
      constructor(client) {
        this.client = client;
      }
      getBanner(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/announcementBanner",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setBanner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/announcementBanner",
            method: "PUT",
            data: {
              isDismissible: parameters.isDismissible,
              isEnabled: parameters.isEnabled,
              message: parameters.message,
              visibility: parameters.visibility
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AnnouncementBanner = AnnouncementBanner;
  }
});

// node_modules/jira.js/out/version2/applicationRoles.js
var require_applicationRoles = __commonJS({
  "node_modules/jira.js/out/version2/applicationRoles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApplicationRoles = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ApplicationRoles = class {
      constructor(client) {
        this.client = client;
      }
      getAllApplicationRoles(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/applicationrole",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApplicationRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const key = typeof parameters === "string" ? parameters : parameters.key;
          const config = {
            url: `/rest/api/2/applicationrole/${key}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ApplicationRoles = ApplicationRoles;
  }
});

// node_modules/jira.js/out/version2/appMigration.js
var require_appMigration = __commonJS({
  "node_modules/jira.js/out/version2/appMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AppMigration = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AppMigration = class {
      constructor(client) {
        this.client = client;
      }
      updateIssueFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/migration/field",
            method: "PUT",
            headers: {
              "Atlassian-Account-Id": parameters.accountId,
              "Atlassian-Transfer-Id": parameters.transferId
            },
            data: {
              updateValueList: parameters.updateValueList
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateEntityPropertiesValue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/migration/properties/${parameters.entityType}`,
            method: "PUT",
            headers: {
              "Atlassian-Account-Id": parameters.accountId,
              "Atlassian-Transfer-Id": parameters.transferId,
              "Content-Type": "application/json"
            },
            data: parameters.entities
          };
          return this.client.sendRequest(config, callback);
        });
      }
      workflowRuleSearch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/migration/workflow/rule/search",
            method: "POST",
            headers: {
              "Atlassian-Transfer-Id": parameters.transferId
            },
            data: {
              expand: parameters.expand,
              ruleIds: parameters.ruleIds,
              workflowEntityId: parameters.workflowEntityId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AppMigration = AppMigration;
  }
});

// node_modules/jira.js/out/version2/appProperties.js
var require_appProperties = __commonJS({
  "node_modules/jira.js/out/version2/appProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AppProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AppProperties = class {
      constructor(client) {
        this.client = client;
      }
      getAddonProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const addonKey = typeof parameters === "string" ? parameters : parameters.addonKey;
          const config = {
            url: `/rest/atlassian-connect/1/addons/${addonKey}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAddonProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/addons/${parameters.addonKey}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      putAddonProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/addons/${parameters.addonKey}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAddonProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/addons/${parameters.addonKey}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      putAppProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/forge/1/app/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAppProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/forge/1/app/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AppProperties = AppProperties;
  }
});

// node_modules/jira.js/out/version2/auditRecords.js
var require_auditRecords = __commonJS({
  "node_modules/jira.js/out/version2/auditRecords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuditRecords = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AuditRecords = class {
      constructor(client) {
        this.client = client;
      }
      getAuditRecords(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/auditing/record",
            method: "GET",
            params: {
              offset: parameters === null || parameters === void 0 ? void 0 : parameters.offset,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
              filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter,
              from: parameters === null || parameters === void 0 ? void 0 : parameters.from,
              to: parameters === null || parameters === void 0 ? void 0 : parameters.to
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AuditRecords = AuditRecords;
  }
});

// node_modules/jira.js/out/version2/avatars.js
var require_avatars = __commonJS({
  "node_modules/jira.js/out/version2/avatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Avatars = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Avatars = class {
      constructor(client) {
        this.client = client;
      }
      getAllSystemAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const type = typeof parameters === "string" ? parameters : parameters.type;
          const config = {
            url: `/rest/api/2/avatar/${type}/system`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/universal_avatar/type/${parameters.type}/owner/${parameters.entityId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      storeAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/universal_avatar/type/${parameters.type}/owner/${parameters.entityId}`,
            method: "POST",
            params: {
              x: parameters.x,
              y: parameters.y,
              size: parameters.size
            },
            data: parameters.avatar
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/universal_avatar/type/${parameters.type}/owner/${parameters.owningObjectId}/avatar/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvatarImageByType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const type = typeof parameters === "string" ? parameters : parameters.type;
          const config = {
            url: `/rest/api/2/universal_avatar/view/type/${type}`,
            method: "GET",
            responseType: "arraybuffer",
            params: {
              size: typeof parameters !== "string" && parameters.size,
              format: typeof parameters !== "string" && parameters.format
            }
          };
          const { data: avatar, headers: { "content-type": contentTypeWithEncoding } } = yield this.client.sendRequestFullResponse(config);
          const contentType = contentTypeWithEncoding.split(";")[0].trim();
          return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
      }
      getAvatarImageByID(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/universal_avatar/view/type/${parameters.type}/avatar/${parameters.id}`,
            method: "GET",
            responseType: "arraybuffer",
            params: {
              size: parameters.size,
              format: parameters.format
            }
          };
          const { data: avatar, headers: { "content-type": contentTypeWithEncoding } } = yield this.client.sendRequestFullResponse(config);
          const contentType = contentTypeWithEncoding.split(";")[0].trim();
          return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
      }
      getAvatarImageByOwner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/universal_avatar/view/type/${parameters.type}/owner/${parameters.entityId}`,
            method: "GET",
            responseType: "arraybuffer",
            params: {
              size: parameters.size,
              format: parameters.format
            }
          };
          const { data: avatar, headers: { "content-type": contentTypeWithEncoding } } = yield this.client.sendRequestFullResponse(config);
          const contentType = contentTypeWithEncoding.split(";")[0].trim();
          return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
      }
    };
    exports2.Avatars = Avatars;
  }
});

// node_modules/jira.js/out/paramSerializer.js
var require_paramSerializer = __commonJS({
  "node_modules/jira.js/out/paramSerializer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paramSerializer = paramSerializer;
    function paramSerializer(key, values) {
      if (typeof values === "string" || typeof values === "number") {
        return `${key}=${values}`;
      }
      if (!values || !values.length) {
        return void 0;
      }
      return () => values.map((value) => `${key}=${value}`).join("&");
    }
  }
});

// node_modules/jira.js/out/version2/dashboards.js
var require_dashboards = __commonJS({
  "node_modules/jira.js/out/version2/dashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Dashboards = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var Dashboards = class {
      constructor(client) {
        this.client = client;
      }
      getAllDashboards(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/dashboard",
            method: "GET",
            params: {
              filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/dashboard",
            method: "POST",
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              name: parameters.name,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkEditDashboards(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/dashboard/bulk/edit",
            method: "PUT",
            data: {
              action: parameters.action,
              changeOwnerDetails: parameters.changeOwnerDetails,
              entityIds: parameters.entityIds,
              extendAdminPermissions: parameters.extendAdminPermissions,
              permissionDetails: parameters.permissionDetails
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllAvailableDashboardGadgets(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/dashboard/gadgets",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboardsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/dashboard/search",
            method: "GET",
            params: {
              dashboardName: parameters === null || parameters === void 0 ? void 0 : parameters.dashboardName,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllGadgets(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/gadget`,
            method: "GET",
            params: {
              moduleKey: (0, paramSerializer_1.paramSerializer)("moduleKey", parameters.moduleKey),
              uri: parameters.uri,
              gadgetId: (0, paramSerializer_1.paramSerializer)("gadgetId", parameters.gadgetId)
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/gadget`,
            method: "POST",
            data: {
              color: parameters.color,
              ignoreUriAndModuleKeyValidation: parameters.ignoreUriAndModuleKeyValidation,
              moduleKey: parameters.moduleKey,
              position: parameters.position,
              title: parameters.title,
              uri: parameters.uri
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/gadget/${parameters.gadgetId}`,
            method: "PUT",
            data: {
              color: parameters.color,
              position: parameters.position,
              title: parameters.title
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/gadget/${parameters.gadgetId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboardItemPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
            method: "PUT",
            headers: {
              "Content-Type": "application/json"
            },
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/dashboard/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              name: parameters.name,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/dashboard/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      copyDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/dashboard/${parameters.id}/copy`,
            method: "POST",
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              name: parameters.name,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Dashboards = Dashboards;
  }
});

// node_modules/jira.js/out/version2/dynamicModules.js
var require_dynamicModules = __commonJS({
  "node_modules/jira.js/out/version2/dynamicModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DynamicModules = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var DynamicModules = class {
      constructor(client) {
        this.client = client;
      }
      getModules(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/app/module/dynamic",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      registerModules(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/app/module/dynamic",
            method: "POST",
            data: {
              modules: parameters === null || parameters === void 0 ? void 0 : parameters.modules
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeModules(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/app/module/dynamic",
            method: "DELETE",
            params: {
              moduleKey: parameters === null || parameters === void 0 ? void 0 : parameters.moduleKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.DynamicModules = DynamicModules;
  }
});

// node_modules/jira.js/out/version2/filters.js
var require_filters = __commonJS({
  "node_modules/jira.js/out/version2/filters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Filters = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Filters = class {
      constructor(client) {
        this.client = client;
      }
      createFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/filter",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              overrideSharePermissions: parameters === null || parameters === void 0 ? void 0 : parameters.overrideSharePermissions
            },
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              favourite: parameters.favourite,
              favouritedCount: parameters.favouritedCount,
              id: parameters.id,
              jql: parameters.jql,
              name: parameters.name,
              owner: parameters.owner,
              searchUrl: parameters.searchUrl,
              self: parameters.self,
              sharePermissions: parameters.sharePermissions,
              sharedUsers: parameters.sharedUsers,
              subscriptions: parameters.subscriptions,
              viewUrl: parameters.viewUrl
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFavouriteFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/filter/favourite",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getMyFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/filter/my",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              includeFavourites: parameters === null || parameters === void 0 ? void 0 : parameters.includeFavourites
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFiltersPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/filter/search",
            method: "GET",
            params: {
              filterName: parameters === null || parameters === void 0 ? void 0 : parameters.filterName,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              overrideSharePermissions: parameters === null || parameters === void 0 ? void 0 : parameters.overrideSharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/filter/${id}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand,
              overrideSharePermissions: typeof parameters !== "string" && parameters.overrideSharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}`,
            method: "PUT",
            params: {
              expand: parameters.expand,
              overrideSharePermissions: parameters.overrideSharePermissions
            },
            data: {
              name: parameters.name,
              description: parameters.description,
              jql: parameters.jql,
              favourite: parameters.favourite,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/filter/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/filter/${id}/columns`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}/columns`,
            method: "PUT",
            data: parameters.columns
          };
          return this.client.sendRequest(config, callback);
        });
      }
      resetColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}/columns`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setFavouriteForFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/filter/${id}/favourite`,
            method: "PUT",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFavouriteForFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/filter/${id}/favourite`,
            method: "DELETE",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      changeFilterOwner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}/owner`,
            method: "PUT",
            data: {
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Filters = Filters;
  }
});

// node_modules/jira.js/out/version2/filterSharing.js
var require_filterSharing = __commonJS({
  "node_modules/jira.js/out/version2/filterSharing.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterSharing = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var FilterSharing = class {
      constructor(client) {
        this.client = client;
      }
      getDefaultShareScope(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/filter/defaultShareScope",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultShareScope(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const scope = typeof parameters === "string" ? parameters : parameters.scope;
          const config = {
            url: "/rest/api/2/filter/defaultShareScope",
            method: "PUT",
            data: {
              scope
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSharePermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/filter/${id}/permission`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}/permission`,
            method: "POST",
            data: {
              type: parameters.type,
              projectId: parameters.projectId,
              groupname: parameters.groupname,
              projectRoleId: parameters.projectRoleId,
              accountId: parameters.accountId,
              rights: parameters.rights,
              groupId: parameters.groupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}/permission/${parameters.permissionId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/filter/${parameters.id}/permission/${parameters.permissionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.FilterSharing = FilterSharing;
  }
});

// node_modules/jira.js/out/version2/groupAndUserPicker.js
var require_groupAndUserPicker = __commonJS({
  "node_modules/jira.js/out/version2/groupAndUserPicker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GroupAndUserPicker = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var GroupAndUserPicker = class {
      constructor(client) {
        this.client = client;
      }
      findUsersAndGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/groupuserpicker",
            method: "GET",
            params: {
              query: parameters.query,
              maxResults: parameters.maxResults,
              showAvatar: parameters.showAvatar,
              fieldId: parameters.fieldId,
              projectId: parameters.projectId,
              issueTypeId: parameters.issueTypeId,
              avatarSize: parameters.avatarSize,
              caseInsensitive: parameters.caseInsensitive,
              excludeConnectAddons: parameters.excludeConnectAddons
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.GroupAndUserPicker = GroupAndUserPicker;
  }
});

// node_modules/jira.js/out/version2/groups.js
var require_groups = __commonJS({
  "node_modules/jira.js/out/version2/groups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Groups = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Groups = class {
      constructor(client) {
        this.client = client;
      }
      createGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/group",
            method: "POST",
            data: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/group",
            method: "DELETE",
            params: {
              groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              swapGroup: parameters === null || parameters === void 0 ? void 0 : parameters.swapGroup,
              swapGroupId: parameters === null || parameters === void 0 ? void 0 : parameters.swapGroupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkGetGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/group/bulk",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              groupName: parameters === null || parameters === void 0 ? void 0 : parameters.groupName,
              accessType: parameters === null || parameters === void 0 ? void 0 : parameters.accessType,
              applicationKey: parameters === null || parameters === void 0 ? void 0 : parameters.applicationKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUsersFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/group/member",
            method: "GET",
            params: {
              groupname: parameters.groupname,
              groupId: parameters.groupId,
              includeInactiveUsers: parameters.includeInactiveUsers,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addUserToGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/group/user",
            method: "POST",
            params: {
              groupname: parameters.groupName,
              groupId: parameters.groupId
            },
            data: {
              name: parameters.name,
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeUserFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/group/user",
            method: "DELETE",
            params: {
              groupname: parameters.groupname,
              groupId: parameters.groupId,
              username: parameters.username,
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/groups/picker",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              exclude: parameters === null || parameters === void 0 ? void 0 : parameters.exclude,
              excludeId: parameters === null || parameters === void 0 ? void 0 : parameters.excludeId,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              caseInsensitive: parameters === null || parameters === void 0 ? void 0 : parameters.caseInsensitive
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Groups = Groups;
  }
});

// node_modules/jira.js/out/version2/issueAttachments.js
var require_issueAttachments = __commonJS({
  "node_modules/jira.js/out/version2/issueAttachments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueAttachments = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var form_data_1 = require_form_data();
    var IssueAttachments = class {
      constructor(client) {
        this.client = client;
      }
      getAttachmentContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/attachment/content/${id}`,
            method: "GET",
            params: {
              redirect: typeof parameters !== "string" && parameters.redirect
            },
            responseType: "arraybuffer"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentMeta(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/attachment/meta",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentThumbnail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/attachment/thumbnail/${id}`,
            method: "GET",
            params: {
              redirect: typeof parameters !== "string" && parameters.redirect,
              fallbackToDefault: typeof parameters !== "string" && parameters.fallbackToDefault,
              width: typeof parameters !== "string" && parameters.width,
              height: typeof parameters !== "string" && parameters.height
            },
            responseType: "arraybuffer"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/attachment/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/attachment/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      expandAttachmentForHumans(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/attachment/${id}/expand/human`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      expandAttachmentForMachines(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/attachment/${id}/expand/raw`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          var _a;
          const formData = new form_data_1.default();
          const attachments = Array.isArray(parameters.attachment) ? parameters.attachment : [parameters.attachment];
          attachments.forEach((attachment) => formData.append("file", attachment.file, attachment.filename));
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/attachments`,
            method: "POST",
            headers: Object.assign({ "X-Atlassian-Token": "no-check", "Content-Type": "multipart/form-data" }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
            data: formData,
            maxBodyLength: Infinity,
            maxContentLength: Infinity
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueAttachments = IssueAttachments;
  }
});

// node_modules/jira.js/out/version2/issueCommentProperties.js
var require_issueCommentProperties = __commonJS({
  "node_modules/jira.js/out/version2/issueCommentProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCommentProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCommentProperties = class {
      constructor(client) {
        this.client = client;
      }
      getCommentPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const commentId = typeof parameters === "string" ? parameters : parameters.commentId;
          const config = {
            url: `/rest/api/2/comment/${commentId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCommentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/comment/${parameters.commentId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setCommentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/comment/${parameters.commentId}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.property
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCommentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/comment/${parameters.commentId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCommentProperties = IssueCommentProperties;
  }
});

// node_modules/jira.js/out/version2/issueComments.js
var require_issueComments = __commonJS({
  "node_modules/jira.js/out/version2/issueComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueComments = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueComments = class {
      constructor(client) {
        this.client = client;
      }
      getCommentsByIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/comment/list",
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              ids: parameters.ids
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/comment`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              orderBy: typeof parameters !== "string" && parameters.orderBy,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment`,
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              self: parameters.self,
              id: parameters.id,
              author: parameters.author,
              body: parameters.comment,
              renderedBody: parameters.renderedBody,
              updateAuthor: parameters.updateAuthor,
              created: parameters.created,
              updated: parameters.updated,
              visibility: parameters.visibility,
              jsdPublic: parameters.jsdPublic,
              jsdAuthorCanSeeRequest: parameters.jsdAuthorCanSeeRequest,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
            method: "PUT",
            params: {
              notifyUsers: parameters.notifyUsers,
              overrideEditableFlag: parameters.overrideEditableFlag,
              expand: parameters.expand
            },
            data: {
              body: parameters.comment,
              visibility: parameters.visibility,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueComments = IssueComments;
  }
});

// node_modules/jira.js/out/version2/issueCustomFieldConfigurationApps.js
var require_issueCustomFieldConfigurationApps = __commonJS({
  "node_modules/jira.js/out/version2/issueCustomFieldConfigurationApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldConfigurationApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldConfigurationApps = class {
      constructor(client) {
        this.client = client;
      }
      getCustomFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/app/field/${parameters.fieldIdOrKey}/context/configuration`,
            method: "GET",
            params: {
              id: parameters.id,
              fieldContextId: parameters.fieldContextId,
              issueId: parameters.issueId,
              projectKeyOrId: parameters.projectKeyOrId,
              issueTypeId: parameters.issueTypeId,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/app/field/${parameters.fieldIdOrKey}/context/configuration`,
            method: "PUT",
            data: {
              configurations: parameters.configurations
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldConfigurationApps = IssueCustomFieldConfigurationApps;
  }
});

// node_modules/jira.js/out/version2/issueCustomFieldContexts.js
var require_issueCustomFieldContexts = __commonJS({
  "node_modules/jira.js/out/version2/issueCustomFieldContexts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldContexts = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldContexts = class {
      constructor(client) {
        this.client = client;
      }
      getContextsForField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/2/field/${fieldId}/context`,
            method: "GET",
            params: {
              isAnyIssueType: typeof parameters !== "string" && parameters.isAnyIssueType,
              isGlobalContext: typeof parameters !== "string" && parameters.isGlobalContext,
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context`,
            method: "POST",
            data: {
              id: parameters.id,
              name: parameters.name,
              description: parameters.description,
              projectIds: parameters.projectIds,
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDefaultValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/2/field/${fieldId}/context/defaultValue`,
            method: "GET",
            params: {
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/defaultValue`,
            method: "PUT",
            data: {
              defaultValues: parameters.defaultValues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeMappingsForContexts(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/2/field/${fieldId}/context/issuetypemapping`,
            method: "GET",
            params: {
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCustomFieldContextsForProjectsAndIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/mapping`,
            method: "POST",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            },
            data: {
              mappings: parameters.mappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectContextMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/2/field/${fieldId}/context/projectmapping`,
            method: "GET",
            params: {
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addIssueTypesToContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/issuetype`,
            method: "PUT",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssueTypesFromContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/issuetype/remove`,
            method: "POST",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignProjectsToCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/project`,
            method: "PUT",
            data: {
              projectIds: parameters.projectIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeCustomFieldContextFromProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/project/remove`,
            method: "POST",
            data: {
              projectIds: parameters.projectIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldContexts = IssueCustomFieldContexts;
  }
});

// node_modules/jira.js/out/version2/issueCustomFieldOptions.js
var require_issueCustomFieldOptions = __commonJS({
  "node_modules/jira.js/out/version2/issueCustomFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldOptions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldOptions = class {
      constructor(client) {
        this.client = client;
      }
      getCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/customFieldOption/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getOptionsForContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/option`,
            method: "GET",
            params: {
              optionId: parameters.optionId,
              onlyOptions: parameters.onlyOptions,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/option`,
            method: "POST",
            data: {
              options: parameters.options
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/option`,
            method: "PUT",
            data: {
              options: parameters.options
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      reorderCustomFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/option/move`,
            method: "PUT",
            data: {
              customFieldOptionIds: parameters.customFieldOptionIds,
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/option/${parameters.optionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldOptions = IssueCustomFieldOptions;
  }
});

// node_modules/jira.js/out/version2/issueCustomFieldOptionsApps.js
var require_issueCustomFieldOptionsApps = __commonJS({
  "node_modules/jira.js/out/version2/issueCustomFieldOptionsApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldOptionsApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldOptionsApps = class {
      constructor(client) {
        this.client = client;
      }
      getAllIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldKey = typeof parameters === "string" ? parameters : parameters.fieldKey;
          const config = {
            url: `/rest/api/2/field/${fieldKey}/option`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldKey}/option`,
            method: "POST",
            data: {
              value: parameters.value,
              properties: parameters.properties,
              config: parameters.config
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSelectableIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldKey = typeof parameters === "string" ? parameters : parameters.fieldKey;
          const config = {
            url: `/rest/api/2/field/${fieldKey}/option/suggestions/edit`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              projectId: typeof parameters !== "string" && parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVisibleIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldKey = typeof parameters === "string" ? parameters : parameters.fieldKey;
          const config = {
            url: `/rest/api/2/field/${fieldKey}/option/suggestions/search`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              projectId: typeof parameters !== "string" && parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldKey}/option/${parameters.optionId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldKey}/option/${parameters.optionId}`,
            method: "PUT",
            data: {
              id: parameters.id,
              value: parameters.value,
              properties: parameters.properties,
              config: parameters.config
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldKey}/option/${parameters.optionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      replaceIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldKey}/option/${parameters.optionId}/issue`,
            method: "DELETE",
            params: {
              replaceWith: parameters.replaceWith,
              jql: parameters.jql,
              overrideScreenSecurity: parameters.overrideScreenSecurity,
              overrideEditableFlag: parameters.overrideEditableFlag
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldOptionsApps = IssueCustomFieldOptionsApps;
  }
});

// node_modules/jira.js/out/version2/issueCustomFieldValuesApps.js
var require_issueCustomFieldValuesApps = __commonJS({
  "node_modules/jira.js/out/version2/issueCustomFieldValuesApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldValuesApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldValuesApps = class {
      constructor(client) {
        this.client = client;
      }
      updateMultipleCustomFieldValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/app/field/value",
            method: "POST",
            params: {
              generateChangelog: parameters.generateChangelog
            },
            data: {
              updates: parameters.updates
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldValue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/app/field/${parameters.fieldIdOrKey}/value`,
            method: "PUT",
            params: {
              generateChangelog: parameters.generateChangelog
            },
            data: {
              updates: parameters.updates
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldValuesApps = IssueCustomFieldValuesApps;
  }
});

// node_modules/jira.js/out/version2/issueFieldConfigurations.js
var require_issueFieldConfigurations = __commonJS({
  "node_modules/jira.js/out/version2/issueFieldConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueFieldConfigurations = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueFieldConfigurations = class {
      constructor(client) {
        this.client = client;
      }
      getAllFieldConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfiguration",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              isDefault: parameters === null || parameters === void 0 ? void 0 : parameters.isDefault,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfiguration",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/fieldconfiguration/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/fieldconfiguration/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldConfigurationItems(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/fieldconfiguration/${id}/fields`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFieldConfigurationItems(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/fieldconfiguration/${parameters.id}/fields`,
            method: "PUT",
            data: {
              fieldConfigurationItems: parameters.fieldConfigurationItems
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllFieldConfigurationSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfigurationscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfigurationscheme",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldConfigurationSchemeMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfigurationscheme/mapping",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              fieldConfigurationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.fieldConfigurationSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldConfigurationSchemeProjectMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfigurationscheme/project",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignFieldConfigurationSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/fieldconfigurationscheme/project",
            method: "PUT",
            data: {
              fieldConfigurationSchemeId: parameters.fieldConfigurationSchemeId,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/fieldconfigurationscheme/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/fieldconfigurationscheme/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setFieldConfigurationSchemeMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/fieldconfigurationscheme/${parameters.id}/mapping`,
            method: "PUT",
            data: {
              mappings: parameters.mappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssueTypesFromGlobalFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/fieldconfigurationscheme/${parameters.id}/mapping/delete`,
            method: "POST",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueFieldConfigurations = IssueFieldConfigurations;
  }
});

// node_modules/jira.js/out/version2/issueFields.js
var require_issueFields = __commonJS({
  "node_modules/jira.js/out/version2/issueFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueFields = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueFields = class {
      constructor(client) {
        this.client = client;
      }
      getFields(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/field",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/field",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
              searcherKey: parameters === null || parameters === void 0 ? void 0 : parameters.searcherKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/field/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getTrashedFieldsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/field/search/trashed",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.fieldId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              searcherKey: parameters.searcherKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      restoreCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.id}/restore`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      trashCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/field/${parameters.id}/trash`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueFields = IssueFields;
  }
});

// node_modules/jira.js/out/version2/issueLinks.js
var require_issueLinks = __commonJS({
  "node_modules/jira.js/out/version2/issueLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueLinks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueLinks = class {
      constructor(client) {
        this.client = client;
      }
      linkIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issueLink",
            method: "POST",
            data: {
              type: parameters.type,
              inwardIssue: parameters.inwardIssue,
              outwardIssue: parameters.outwardIssue,
              comment: parameters.comment
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const linkId = typeof parameters === "string" ? parameters : parameters.linkId;
          const config = {
            url: `/rest/api/2/issueLink/${linkId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const linkId = typeof parameters === "string" ? parameters : parameters.linkId;
          const config = {
            url: `/rest/api/2/issueLink/${linkId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueLinks = IssueLinks;
  }
});

// node_modules/jira.js/out/version2/issueLinkTypes.js
var require_issueLinkTypes = __commonJS({
  "node_modules/jira.js/out/version2/issueLinkTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueLinkTypes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueLinkTypes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueLinkTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issueLinkType",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issueLinkType",
            method: "POST",
            data: {
              id: parameters.id,
              inward: parameters.inward,
              name: parameters.name,
              outward: parameters.outward,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueLinkTypeId = typeof parameters === "string" ? parameters : parameters.issueLinkTypeId;
          const config = {
            url: `/rest/api/2/issueLinkType/${issueLinkTypeId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issueLinkType/${parameters.issueLinkTypeId}`,
            method: "PUT",
            data: {
              id: parameters.id,
              inward: parameters.inward,
              name: parameters.name,
              outward: parameters.outward,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueLinkTypeId = typeof parameters === "string" ? parameters : parameters.issueLinkTypeId;
          const config = {
            url: `/rest/api/2/issueLinkType/${issueLinkTypeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueLinkTypes = IssueLinkTypes;
  }
});

// node_modules/jira.js/out/version2/issueNavigatorSettings.js
var require_issueNavigatorSettings = __commonJS({
  "node_modules/jira.js/out/version2/issueNavigatorSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueNavigatorSettings = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueNavigatorSettings = class {
      constructor(client) {
        this.client = client;
      }
      getIssueNavigatorDefaultColumns(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/settings/columns",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setIssueNavigatorDefaultColumns(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/settings/columns",
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueNavigatorSettings = IssueNavigatorSettings;
  }
});

// node_modules/jira.js/out/version2/issueNotificationSchemes.js
var require_issueNotificationSchemes = __commonJS({
  "node_modules/jira.js/out/version2/issueNotificationSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueNotificationSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueNotificationSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getNotificationSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/notificationscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/notificationscheme",
            method: "POST",
            data: {
              description: parameters.description,
              name: parameters.name,
              notificationSchemeEvents: parameters.notificationSchemeEvents
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getNotificationSchemeToProjectMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/notificationscheme/project",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              notificationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.notificationSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/notificationscheme/${id}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/notificationscheme/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/notificationscheme/${parameters.notificationSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeNotificationFromNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/notificationscheme/${parameters.notificationSchemeId}/notification/${parameters.notificationId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueNotificationSchemes = IssueNotificationSchemes;
  }
});

// node_modules/jira.js/out/version2/issuePriorities.js
var require_issuePriorities = __commonJS({
  "node_modules/jira.js/out/version2/issuePriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssuePriorities = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var IssuePriorities = class {
      constructor(client) {
        this.client = client;
      }
      getPriorities(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/priority",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/priority",
            method: "POST",
            data: {
              description: parameters.description,
              iconUrl: parameters.iconUrl,
              name: parameters.name,
              statusColor: parameters.statusColor
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/priority/default",
            method: "PUT",
            data: {
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      movePriorities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/priority/move",
            method: "PUT",
            data: {
              ids: parameters.ids,
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchPriorities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/priority/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              projectId: (0, paramSerializer_1.paramSerializer)("projectId", parameters === null || parameters === void 0 ? void 0 : parameters.projectId),
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/priority/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updatePriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/priority/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              iconUrl: parameters.iconUrl,
              name: parameters.name,
              statusColor: parameters.statusColor
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssuePriorities = IssuePriorities;
  }
});

// node_modules/jira.js/out/version2/issueProperties.js
var require_issueProperties = __commonJS({
  "node_modules/jira.js/out/version2/issueProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueProperties = class {
      constructor(client) {
        this.client = client;
      }
      bulkSetIssuesProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/properties",
            method: "POST",
            data: {
              entitiesIds: parameters === null || parameters === void 0 ? void 0 : parameters.entitiesIds,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkSetIssuePropertiesByIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/properties/multi",
            method: "POST",
            data: {
              issues: parameters === null || parameters === void 0 ? void 0 : parameters.issues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkSetIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: {
              value: parameters.value,
              expression: parameters.expression,
              filter: parameters.filter
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkDeleteIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/properties/${parameters.propertyKey}`,
            method: "DELETE",
            data: {
              entityIds: parameters.entityIds,
              currentValue: parameters.currentValue
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuePropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueProperties = IssueProperties;
  }
});

// node_modules/jira.js/out/version2/issueRemoteLinks.js
var require_issueRemoteLinks = __commonJS({
  "node_modules/jira.js/out/version2/issueRemoteLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueRemoteLinks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueRemoteLinks = class {
      constructor(client) {
        this.client = client;
      }
      getRemoteIssueLinks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/remotelink`,
            method: "GET",
            params: {
              globalId: typeof parameters !== "string" && parameters.globalId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createOrUpdateRemoteIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/remotelink`,
            method: "POST",
            data: {
              globalId: parameters.globalId,
              application: parameters.application,
              relationship: parameters.relationship,
              object: parameters.object
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRemoteIssueLinkByGlobalId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/remotelink`,
            method: "DELETE",
            params: {
              globalId: typeof parameters !== "string" && parameters.globalId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRemoteIssueLinkById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/remotelink/${parameters.linkId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateRemoteIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/remotelink/${parameters.linkId}`,
            method: "PUT",
            data: {
              globalId: parameters.globalId,
              application: parameters.application,
              relationship: parameters.relationship,
              object: parameters.object
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRemoteIssueLinkById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/remotelink/${parameters.linkId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueRemoteLinks = IssueRemoteLinks;
  }
});

// node_modules/jira.js/out/version2/issueResolutions.js
var require_issueResolutions = __commonJS({
  "node_modules/jira.js/out/version2/issueResolutions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueResolutions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueResolutions = class {
      constructor(client) {
        this.client = client;
      }
      createResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/resolution",
            method: "POST",
            data: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/resolution/default",
            method: "PUT",
            data: {
              id: parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveResolutions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/resolution/move",
            method: "PUT",
            data: {
              ids: parameters.ids,
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchResolutions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/resolution/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/resolution/${parameters.id}`,
            method: "PUT",
            data: Object.assign(Object.assign({}, parameters), { name: parameters.name, description: parameters.description, id: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/resolution/${parameters.id}`,
            method: "DELETE",
            params: {
              replaceWith: parameters.replaceWith
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueResolutions = IssueResolutions;
  }
});

// node_modules/jira.js/out/version2/issues.js
var require_issues = __commonJS({
  "node_modules/jira.js/out/version2/issues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Issues = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Issues = class {
      constructor(client) {
        this.client = client;
      }
      getEvents(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/events",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue",
            method: "POST",
            params: {
              updateHistory: parameters.updateHistory
            },
            data: {
              fields: parameters.fields,
              historyMetadata: parameters.historyMetadata,
              properties: parameters.properties,
              transition: parameters.transition,
              update: parameters.update
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      archiveIssuesAsync(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/archive",
            method: "POST",
            data: {
              jql: parameters.jql
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      archiveIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/archive",
            method: "PUT",
            data: {
              issueIdsOrKeys: parameters.issueIdsOrKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/bulk",
            method: "POST",
            data: {
              issueUpdates: parameters === null || parameters === void 0 ? void 0 : parameters.issueUpdates
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCreateIssueMeta(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/createmeta",
            method: "GET",
            params: {
              projectIds: parameters === null || parameters === void 0 ? void 0 : parameters.projectIds,
              projectKeys: parameters === null || parameters === void 0 ? void 0 : parameters.projectKeys,
              issuetypeIds: parameters === null || parameters === void 0 ? void 0 : parameters.issuetypeIds,
              issuetypeNames: parameters === null || parameters === void 0 ? void 0 : parameters.issuetypeNames,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      unarchiveIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/unarchive",
            method: "PUT",
            data: {
              issueIdsOrKeys: parameters.issueIdsOrKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}`,
            method: "GET",
            params: {
              fields: typeof parameters !== "string" && parameters.fields,
              fieldsByKeys: typeof parameters !== "string" && parameters.fieldsByKeys,
              expand: typeof parameters !== "string" && parameters.expand,
              properties: typeof parameters !== "string" && parameters.properties,
              updateHistory: typeof parameters !== "string" && parameters.updateHistory
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      editIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}`,
            method: "PUT",
            params: {
              notifyUsers: parameters.notifyUsers,
              overrideScreenSecurity: parameters.overrideScreenSecurity,
              overrideEditableFlag: parameters.overrideEditableFlag,
              returnIssue: parameters.returnIssue,
              expand: parameters.expand
            },
            data: {
              fields: parameters.fields,
              historyMetadata: parameters.historyMetadata,
              properties: parameters.properties,
              transition: parameters.transition,
              update: parameters.update
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}`,
            method: "DELETE",
            params: {
              deleteSubtasks: typeof parameters !== "string" && parameters.deleteSubtasks
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/assignee`,
            method: "PUT",
            data: {
              accountId: parameters.accountId,
              accountType: parameters.accountType,
              active: parameters.active,
              applicationRoles: parameters.applicationRoles,
              avatarUrls: parameters.avatarUrls,
              displayName: parameters.displayName,
              emailAddress: parameters.emailAddress,
              expand: parameters.expand,
              groups: parameters.groups,
              key: parameters.key,
              locale: parameters.locale,
              name: parameters.name,
              self: parameters.self,
              timeZone: parameters.timeZone
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getChangeLogs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/changelog`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getChangeLogsByIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/changelog/list`,
            method: "POST",
            data: {
              changelogIds: parameters.changelogIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getEditIssueMeta(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/editmeta`,
            method: "GET",
            params: {
              overrideScreenSecurity: typeof parameters !== "string" && parameters.overrideScreenSecurity,
              overrideEditableFlag: typeof parameters !== "string" && parameters.overrideEditableFlag
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      notify(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/notify`,
            method: "POST",
            data: {
              htmlBody: parameters.htmlBody,
              restrict: parameters.restrict,
              subject: parameters.subject,
              textBody: parameters.textBody,
              to: parameters.to
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getTransitions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/transitions`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand,
              transitionId: typeof parameters !== "string" && parameters.transitionId,
              skipRemoteOnlyCondition: typeof parameters !== "string" && parameters.skipRemoteOnlyCondition,
              includeUnavailableTransitions: typeof parameters !== "string" && parameters.includeUnavailableTransitions,
              sortByOpsBarAndStatus: typeof parameters !== "string" && parameters.sortByOpsBarAndStatus
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      doTransition(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/transitions`,
            method: "POST",
            data: {
              fields: parameters.fields,
              historyMetadata: parameters.historyMetadata,
              properties: parameters.properties,
              transition: parameters.transition,
              update: parameters.update
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      exportArchivedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issues/archive/export",
            method: "PUT",
            data: {
              archivedBy: parameters.archivedBy,
              archivedDateRange: parameters.archivedDateRange,
              issueTypes: parameters.issueTypes,
              projects: parameters.projects,
              reporters: parameters.reporters
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Issues = Issues;
  }
});

// node_modules/jira.js/out/version2/issueSearch.js
var require_issueSearch = __commonJS({
  "node_modules/jira.js/out/version2/issueSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueSearch = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueSearch = class {
      constructor(client) {
        this.client = client;
      }
      getIssuePickerResource(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/picker",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              currentJQL: parameters === null || parameters === void 0 ? void 0 : parameters.currentJQL,
              currentIssueKey: parameters === null || parameters === void 0 ? void 0 : parameters.currentIssueKey,
              currentProjectId: parameters === null || parameters === void 0 ? void 0 : parameters.currentProjectId,
              showSubTasks: parameters === null || parameters === void 0 ? void 0 : parameters.showSubTasks,
              showSubTaskParent: parameters === null || parameters === void 0 ? void 0 : parameters.showSubTaskParent
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      matchIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/match",
            method: "POST",
            data: {
              jqls: parameters === null || parameters === void 0 ? void 0 : parameters.jqls,
              issueIds: parameters === null || parameters === void 0 ? void 0 : parameters.issueIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchForIssuesUsingJql(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/search",
            method: "GET",
            params: {
              jql: parameters === null || parameters === void 0 ? void 0 : parameters.jql,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              validateQuery: parameters === null || parameters === void 0 ? void 0 : parameters.validateQuery,
              fields: parameters === null || parameters === void 0 ? void 0 : parameters.fields,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
              fieldsByKeys: parameters === null || parameters === void 0 ? void 0 : parameters.fieldsByKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchForIssuesUsingJqlPost(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/search",
            method: "POST",
            data: {
              jql: parameters === null || parameters === void 0 ? void 0 : parameters.jql,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              fields: parameters === null || parameters === void 0 ? void 0 : parameters.fields,
              validateQuery: parameters === null || parameters === void 0 ? void 0 : parameters.validateQuery,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
              fieldsByKeys: parameters === null || parameters === void 0 ? void 0 : parameters.fieldsByKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueSearch = IssueSearch;
  }
});

// node_modules/jira.js/out/version2/issueSecurityLevel.js
var require_issueSecurityLevel = __commonJS({
  "node_modules/jira.js/out/version2/issueSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueSecurityLevel = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueSecurityLevel = class {
      constructor(client) {
        this.client = client;
      }
      getIssueSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueSecuritySchemeId = typeof parameters === "string" ? parameters : parameters.issueSecuritySchemeId;
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${issueSecuritySchemeId}/members`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              issueSecurityLevelId: typeof parameters !== "string" && parameters.issueSecurityLevelId,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/securitylevel/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueSecurityLevel = IssueSecurityLevel;
  }
});

// node_modules/jira.js/out/version2/issueSecuritySchemes.js
var require_issueSecuritySchemes = __commonJS({
  "node_modules/jira.js/out/version2/issueSecuritySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueSecuritySchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var IssueSecuritySchemes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueSecuritySchemes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes",
            method: "POST",
            data: {
              description: parameters.description,
              levels: parameters.levels,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSecurityLevels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes/level",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: (0, paramSerializer_1.paramSerializer)("id", parameters === null || parameters === void 0 ? void 0 : parameters.id),
              schemeId: (0, paramSerializer_1.paramSerializer)("schemeId", parameters === null || parameters === void 0 ? void 0 : parameters.schemeId),
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultLevels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes/level/default",
            method: "PUT",
            data: {
              defaultValues: parameters === null || parameters === void 0 ? void 0 : parameters.defaultValues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes/level/member",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: (0, paramSerializer_1.paramSerializer)("id", parameters === null || parameters === void 0 ? void 0 : parameters.id),
              schemeId: (0, paramSerializer_1.paramSerializer)("schemeId", parameters === null || parameters === void 0 ? void 0 : parameters.schemeId),
              levelId: (0, paramSerializer_1.paramSerializer)("levelId", parameters === null || parameters === void 0 ? void 0 : parameters.levelId),
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchProjectsUsingSecuritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes/project",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              issueSecuritySchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueSecuritySchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      associateSchemesToProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes/project",
            method: "PUT",
            data: {
              oldToNewSecurityLevelMappings: parameters.oldToNewSecurityLevelMappings,
              projectId: parameters.projectId,
              schemeId: parameters.schemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchSecuritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuesecurityschemes/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: (0, paramSerializer_1.paramSerializer)("id", parameters === null || parameters === void 0 ? void 0 : parameters.id),
              projectId: (0, paramSerializer_1.paramSerializer)("projectId", parameters === null || parameters === void 0 ? void 0 : parameters.projectId)
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.schemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.schemeId}/level`,
            method: "PUT",
            data: {
              levels: parameters.levels
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}`,
            method: "DELETE",
            params: {
              replaceWith: parameters.replaceWith
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}/member`,
            method: "PUT",
            data: {
              members: parameters.members
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeMemberFromSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}/member/${parameters.memberId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueSecuritySchemes = IssueSecuritySchemes;
  }
});

// node_modules/jira.js/out/version2/issueTypeProperties.js
var require_issueTypeProperties = __commonJS({
  "node_modules/jira.js/out/version2/issueTypeProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypeProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypeProperties = class {
      constructor(client) {
        this.client = client;
      }
      getIssueTypePropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueTypeId = typeof parameters === "string" ? parameters : parameters.issueTypeId;
          const config = {
            url: `/rest/api/2/issuetype/${issueTypeId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetype/${parameters.issueTypeId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setIssueTypeProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetype/${parameters.issueTypeId}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueTypeProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetype/${parameters.issueTypeId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypeProperties = IssueTypeProperties;
  }
});

// node_modules/jira.js/out/version2/issueTypes.js
var require_issueTypes = __commonJS({
  "node_modules/jira.js/out/version2/issueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueAllTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetype",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetype",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              hierarchyLevel: parameters === null || parameters === void 0 ? void 0 : parameters.hierarchyLevel
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypesForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetype/project",
            method: "GET",
            params: {
              projectId: parameters.projectId,
              level: parameters.level
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/issuetype/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetype/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              avatarId: parameters.avatarId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/issuetype/${id}`,
            method: "DELETE",
            params: {
              alternativeIssueTypeId: typeof parameters !== "string" && parameters.alternativeIssueTypeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAlternativeIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/issuetype/${id}/alternatives`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueTypeAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetype/${parameters.id}/avatar2`,
            method: "POST",
            params: {
              x: parameters.x,
              y: parameters.y,
              size: parameters.size
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypes = IssueTypes;
  }
});

// node_modules/jira.js/out/version2/issueTypeSchemes.js
var require_issueTypeSchemes = __commonJS({
  "node_modules/jira.js/out/version2/issueTypeSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypeSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypeSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getAllIssueTypeSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescheme",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              defaultIssueTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.defaultIssueTypeId,
              issueTypeIds: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeSchemesMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescheme/mapping",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              issueTypeSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeSchemeForProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescheme/project",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignIssueTypeSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescheme/project",
            method: "PUT",
            data: {
              issueTypeSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescheme/${parameters.issueTypeSchemeId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              defaultIssueTypeId: parameters.defaultIssueTypeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueTypeSchemeId = typeof parameters === "string" ? parameters : parameters.issueTypeSchemeId;
          const config = {
            url: `/rest/api/2/issuetypescheme/${issueTypeSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addIssueTypesToIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype`,
            method: "PUT",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      reorderIssueTypesInIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype/move`,
            method: "PUT",
            data: {
              issueTypeIds: parameters.issueTypeIds,
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssueTypeFromIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype/${parameters.issueTypeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypeSchemes = IssueTypeSchemes;
  }
});

// node_modules/jira.js/out/version2/issueTypeScreenSchemes.js
var require_issueTypeScreenSchemes = __commonJS({
  "node_modules/jira.js/out/version2/issueTypeScreenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypeScreenSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypeScreenSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueTypeScreenSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescreenscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescreenscheme",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              issueTypeMappings: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeMappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeScreenSchemeMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescreenscheme/mapping",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              issueTypeScreenSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeScreenSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeScreenSchemeProjectAssociations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescreenscheme/project",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignIssueTypeScreenSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issuetypescreenscheme/project",
            method: "PUT",
            data: {
              issueTypeScreenSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeScreenSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueTypeScreenSchemeId = typeof parameters === "string" ? parameters : parameters.issueTypeScreenSchemeId;
          const config = {
            url: `/rest/api/2/issuetypescreenscheme/${issueTypeScreenSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      appendMappingsForIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping`,
            method: "PUT",
            data: {
              issueTypeMappings: parameters.issueTypeMappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDefaultScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping/default`,
            method: "PUT",
            data: {
              screenSchemeId: parameters.screenSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeMappingsFromIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping/remove`,
            method: "POST",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectsForIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueTypeScreenSchemeId = typeof parameters === "string" ? parameters : parameters.issueTypeScreenSchemeId;
          const config = {
            url: `/rest/api/2/issuetypescreenscheme/${issueTypeScreenSchemeId}/project`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              query: typeof parameters !== "string" && parameters.query
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypeScreenSchemes = IssueTypeScreenSchemes;
  }
});

// node_modules/jira.js/out/version2/issueVotes.js
var require_issueVotes = __commonJS({
  "node_modules/jira.js/out/version2/issueVotes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueVotes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueVotes = class {
      constructor(client) {
        this.client = client;
      }
      getVotes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/votes`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addVote(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/votes`,
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeVote(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/votes`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueVotes = IssueVotes;
  }
});

// node_modules/jira.js/out/version2/issueWatchers.js
var require_issueWatchers = __commonJS({
  "node_modules/jira.js/out/version2/issueWatchers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueWatchers = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueWatchers = class {
      constructor(client) {
        this.client = client;
      }
      getIsWatchingIssueBulk(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/issue/watching",
            method: "POST",
            data: {
              issueIds: parameters === null || parameters === void 0 ? void 0 : parameters.issueIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueWatchers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/watchers`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/watchers`,
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            data: parameters.accountId
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/watchers`,
            method: "DELETE",
            params: {
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueWatchers = IssueWatchers;
  }
});

// node_modules/jira.js/out/version2/issueWorklogProperties.js
var require_issueWorklogProperties = __commonJS({
  "node_modules/jira.js/out/version2/issueWorklogProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueWorklogProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueWorklogProperties = class {
      constructor(client) {
        this.client = client;
      }
      getWorklogPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorklogProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setWorklogProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties/${parameters.propertyKey}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorklogProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueWorklogProperties = IssueWorklogProperties;
  }
});

// node_modules/jira.js/out/version2/issueWorklogs.js
var require_issueWorklogs = __commonJS({
  "node_modules/jira.js/out/version2/issueWorklogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueWorklogs = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueWorklogs = class {
      constructor(client) {
        this.client = client;
      }
      getIssueWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/2/issue/${issueIdOrKey}/worklog`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              startedAfter: typeof parameters !== "string" && parameters.startedAfter,
              startedBefore: typeof parameters !== "string" && parameters.startedBefore,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog`,
            method: "POST",
            params: {
              notifyUsers: parameters.notifyUsers,
              adjustEstimate: parameters.adjustEstimate,
              newEstimate: parameters.newEstimate,
              reduceBy: parameters.reduceBy,
              expand: parameters.expand,
              overrideEditableFlag: parameters.overrideEditableFlag
            },
            data: {
              self: parameters.self,
              author: parameters.author,
              updateAuthor: parameters.updateAuthor,
              comment: parameters.comment,
              created: parameters.created,
              updated: parameters.updated,
              visibility: parameters.visibility,
              started: parameters.started,
              timeSpent: parameters.timeSpent,
              timeSpentSeconds: parameters.timeSpentSeconds,
              id: parameters.id,
              issueId: parameters.issueId,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
            method: "PUT",
            params: {
              notifyUsers: parameters.notifyUsers,
              adjustEstimate: parameters.adjustEstimate,
              newEstimate: parameters.newEstimate,
              expand: parameters.expand,
              overrideEditableFlag: parameters.overrideEditableFlag
            },
            data: {
              comment: parameters.comment,
              visibility: parameters.visibility,
              started: parameters.started,
              timeSpent: parameters.timeSpent,
              timeSpentSeconds: parameters.timeSpentSeconds,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
            method: "DELETE",
            params: {
              notifyUsers: parameters.notifyUsers,
              adjustEstimate: parameters.adjustEstimate,
              newEstimate: parameters.newEstimate,
              increaseBy: parameters.increaseBy,
              overrideEditableFlag: parameters.overrideEditableFlag
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIdsOfWorklogsDeletedSince(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/worklog/deleted",
            method: "GET",
            params: {
              since: parameters === null || parameters === void 0 ? void 0 : parameters.since
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorklogsForIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/worklog/list",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            },
            data: {
              ids: parameters === null || parameters === void 0 ? void 0 : parameters.ids
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIdsOfWorklogsModifiedSince(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/worklog/updated",
            method: "GET",
            params: {
              since: parameters === null || parameters === void 0 ? void 0 : parameters.since,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueWorklogs = IssueWorklogs;
  }
});

// node_modules/jira.js/out/version2/jiraExpressions.js
var require_jiraExpressions = __commonJS({
  "node_modules/jira.js/out/version2/jiraExpressions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JiraExpressions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JiraExpressions = class {
      constructor(client) {
        this.client = client;
      }
      analyseExpression(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/expression/analyse",
            method: "POST",
            params: {
              check: parameters === null || parameters === void 0 ? void 0 : parameters.check
            },
            data: {
              expressions: parameters === null || parameters === void 0 ? void 0 : parameters.expressions,
              contextVariables: parameters === null || parameters === void 0 ? void 0 : parameters.contextVariables
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      evaluateJiraExpression(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/expression/eval",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            },
            data: {
              expression: parameters === null || parameters === void 0 ? void 0 : parameters.expression,
              context: parameters === null || parameters === void 0 ? void 0 : parameters.context
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JiraExpressions = JiraExpressions;
  }
});

// node_modules/jira.js/out/version2/jiraSettings.js
var require_jiraSettings = __commonJS({
  "node_modules/jira.js/out/version2/jiraSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JiraSettings = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JiraSettings = class {
      constructor(client) {
        this.client = client;
      }
      getApplicationProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/application-properties",
            method: "GET",
            params: {
              key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
              permissionLevel: parameters === null || parameters === void 0 ? void 0 : parameters.permissionLevel,
              keyFilter: parameters === null || parameters === void 0 ? void 0 : parameters.keyFilter
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAdvancedSettings(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/application-properties/advanced-settings",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setApplicationProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/application-properties/${parameters.id}`,
            method: "PUT",
            data: parameters.body
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getConfiguration(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/configuration",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JiraSettings = JiraSettings;
  }
});

// node_modules/jira.js/out/version2/jQL.js
var require_jQL = __commonJS({
  "node_modules/jira.js/out/version2/jQL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JQL = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JQL = class {
      constructor(client) {
        this.client = client;
      }
      getAutoComplete(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/autocompletedata",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAutoCompletePost(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/autocompletedata",
            method: "POST",
            data: {
              includeCollapsedFields: parameters === null || parameters === void 0 ? void 0 : parameters.includeCollapsedFields,
              projectIds: parameters === null || parameters === void 0 ? void 0 : parameters.projectIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldAutoCompleteForQueryString(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/autocompletedata/suggestions",
            method: "GET",
            params: {
              fieldName: parameters === null || parameters === void 0 ? void 0 : parameters.fieldName,
              fieldValue: parameters === null || parameters === void 0 ? void 0 : parameters.fieldValue,
              predicateName: parameters === null || parameters === void 0 ? void 0 : parameters.predicateName,
              predicateValue: parameters === null || parameters === void 0 ? void 0 : parameters.predicateValue
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      parseJqlQueries(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/parse",
            method: "POST",
            params: {
              validation: parameters === null || parameters === void 0 ? void 0 : parameters.validation
            },
            data: {
              queries: parameters === null || parameters === void 0 ? void 0 : parameters.queries
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      migrateQueries(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/pdcleaner",
            method: "POST",
            data: {
              queryStrings: parameters === null || parameters === void 0 ? void 0 : parameters.queryStrings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      sanitiseJqlQueries(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/sanitize",
            method: "POST",
            data: {
              queries: parameters === null || parameters === void 0 ? void 0 : parameters.queries
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JQL = JQL;
  }
});

// node_modules/jira.js/out/version2/jqlFunctionsApps.js
var require_jqlFunctionsApps = __commonJS({
  "node_modules/jira.js/out/version2/jqlFunctionsApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JqlFunctionsApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JqlFunctionsApps = class {
      constructor(client) {
        this.client = client;
      }
      getPrecomputations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/function/computation",
            method: "GET",
            params: {
              functionKey: parameters === null || parameters === void 0 ? void 0 : parameters.functionKey,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updatePrecomputations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/jql/function/computation",
            method: "POST",
            data: {
              values: parameters === null || parameters === void 0 ? void 0 : parameters.values
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JqlFunctionsApps = JqlFunctionsApps;
  }
});

// node_modules/jira.js/out/version2/labels.js
var require_labels = __commonJS({
  "node_modules/jira.js/out/version2/labels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Labels = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Labels = class {
      constructor(client) {
        this.client = client;
      }
      getAllLabels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/label",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Labels = Labels;
  }
});

// node_modules/jira.js/out/version2/licenseMetrics.js
var require_licenseMetrics = __commonJS({
  "node_modules/jira.js/out/version2/licenseMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LicenseMetrics = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var LicenseMetrics = class {
      constructor(client) {
        this.client = client;
      }
      getLicense(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/instance/license",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApproximateLicenseCount(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/license/approximateLicenseCount",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApproximateApplicationLicenseCount(applicationKey, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/license/approximateLicenseCount/product/${applicationKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.LicenseMetrics = LicenseMetrics;
  }
});

// node_modules/jira.js/out/version2/myself.js
var require_myself = __commonJS({
  "node_modules/jira.js/out/version2/myself.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Myself = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Myself = class {
      constructor(client) {
        this.client = client;
      }
      getPreference(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/mypreferences",
            method: "GET",
            params: {
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setPreference(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/mypreferences",
            method: "PUT",
            headers: {
              "Content-Type": typeof parameters.value === "string" ? "text/plain" : "application/json"
            },
            params: {
              key: parameters.key
            },
            data: parameters.value
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removePreference(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/mypreferences",
            method: "DELETE",
            params: {
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getLocale(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/mypreferences/locale",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCurrentUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/myself",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Myself = Myself;
  }
});

// node_modules/jira.js/out/version2/permissions.js
var require_permissions = __commonJS({
  "node_modules/jira.js/out/version2/permissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Permissions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Permissions = class {
      constructor(client) {
        this.client = client;
      }
      getMyPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/mypermissions",
            method: "GET",
            params: {
              projectKey: parameters === null || parameters === void 0 ? void 0 : parameters.projectKey,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
              issueId: parameters === null || parameters === void 0 ? void 0 : parameters.issueId,
              permissions: parameters === null || parameters === void 0 ? void 0 : parameters.permissions,
              projectUuid: parameters === null || parameters === void 0 ? void 0 : parameters.projectUuid,
              projectConfigurationUuid: parameters === null || parameters === void 0 ? void 0 : parameters.projectConfigurationUuid,
              commentId: parameters === null || parameters === void 0 ? void 0 : parameters.commentId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllPermissions(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/permissions",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBulkPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/permissions/check",
            method: "POST",
            data: {
              projectPermissions: parameters === null || parameters === void 0 ? void 0 : parameters.projectPermissions,
              globalPermissions: parameters === null || parameters === void 0 ? void 0 : parameters.globalPermissions,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermittedProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/permissions/project",
            method: "POST",
            data: {
              permissions: parameters === null || parameters === void 0 ? void 0 : parameters.permissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Permissions = Permissions;
  }
});

// node_modules/jira.js/out/version2/permissionSchemes.js
var require_permissionSchemes = __commonJS({
  "node_modules/jira.js/out/version2/permissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PermissionSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var PermissionSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getAllPermissionSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/permissionscheme",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/permissionscheme",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            },
            data: Object.assign(Object.assign({}, parameters), { expand: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const schemeId = typeof parameters === "string" ? parameters : parameters.schemeId;
          const config = {
            url: `/rest/api/2/permissionscheme/${schemeId}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updatePermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/permissionscheme/${parameters.schemeId}`,
            method: "PUT",
            params: {
              expand: parameters.expand
            },
            data: Object.assign(Object.assign({}, parameters), { schemeId: void 0, expand: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deletePermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/permissionscheme/${parameters.schemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermissionSchemeGrants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createPermissionGrant(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission`,
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              id: parameters.id,
              self: parameters.self,
              holder: parameters.holder,
              permission: parameters.permission
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermissionSchemeGrant(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission/${parameters.permissionId}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deletePermissionSchemeEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission/${parameters.permissionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.PermissionSchemes = PermissionSchemes;
  }
});

// node_modules/jira.js/out/version2/projectAvatars.js
var require_projectAvatars = __commonJS({
  "node_modules/jira.js/out/version2/projectAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectAvatars = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectAvatars = class {
      constructor(client) {
        this.client = client;
      }
      updateProjectAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/avatar`,
            method: "PUT",
            data: {
              fileName: parameters.fileName,
              id: parameters.id,
              isDeletable: parameters.isDeletable,
              isSelected: parameters.isSelected,
              isSystemAvatar: parameters.isSystemAvatar,
              owner: parameters.owner,
              urls: parameters.urls
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/avatar/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createProjectAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/avatar2`,
            method: "POST",
            params: {
              x: parameters.x,
              y: parameters.y,
              size: parameters.size
            },
            data: parameters.avatar
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllProjectAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/avatars`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectAvatars = ProjectAvatars;
  }
});

// node_modules/jira.js/out/version2/projectCategories.js
var require_projectCategories = __commonJS({
  "node_modules/jira.js/out/version2/projectCategories.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectCategories = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectCategories = class {
      constructor(client) {
        this.client = client;
      }
      getAllProjectCategories(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/projectCategory",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createProjectCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/projectCategory",
            method: "POST",
            data: {
              description: parameters.description,
              id: parameters.id,
              name: parameters.name,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectCategoryById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/projectCategory/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateProjectCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/projectCategory/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeProjectCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/projectCategory/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectCategories = ProjectCategories;
  }
});

// node_modules/jira.js/out/version2/projectComponents.js
var require_projectComponents = __commonJS({
  "node_modules/jira.js/out/version2/projectComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectComponents = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectComponents = class {
      constructor(client) {
        this.client = client;
      }
      createComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/component",
            method: "POST",
            data: {
              assignee: parameters.assignee,
              assigneeType: parameters.assigneeType,
              description: parameters.description,
              id: parameters.id,
              isAssigneeTypeValid: parameters.isAssigneeTypeValid,
              lead: parameters.lead,
              leadAccountId: parameters.leadAccountId,
              leadUserName: parameters.leadUserName,
              name: parameters.name,
              project: parameters.project,
              projectId: parameters.projectId,
              realAssignee: parameters.realAssignee,
              realAssigneeType: parameters.realAssigneeType,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/component/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/component/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              leadUserName: parameters.leadUserName,
              leadAccountId: parameters.leadAccountId,
              assigneeType: parameters.assigneeType,
              project: parameters.project
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/component/${id}`,
            method: "DELETE",
            params: {
              moveIssuesTo: typeof parameters !== "string" && parameters.moveIssuesTo
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComponentRelatedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/component/${id}/relatedIssueCounts`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectComponentsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/component`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              orderBy: parameters.orderBy,
              query: parameters.query
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectComponents(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/components`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectComponents = ProjectComponents;
  }
});

// node_modules/jira.js/out/version2/projectEmail.js
var require_projectEmail = __commonJS({
  "node_modules/jira.js/out/version2/projectEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectEmail = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectEmail = class {
      constructor(client) {
        this.client = client;
      }
      getProjectEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectId = typeof parameters === "string" ? parameters : parameters.projectId;
          const config = {
            url: `/rest/api/2/project/${projectId}/email`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateProjectEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectId}/email`,
            method: "PUT",
            data: {
              emailAddress: parameters.emailAddress,
              emailAddressStatus: parameters.emailAddressStatus
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectEmail = ProjectEmail;
  }
});

// node_modules/jira.js/out/version2/projectFeatures.js
var require_projectFeatures = __commonJS({
  "node_modules/jira.js/out/version2/projectFeatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectFeatures = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectFeatures = class {
      constructor(client) {
        this.client = client;
      }
      getFeaturesForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/features`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      toggleFeatureForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/features/${parameters.featureKey}`,
            method: "PUT",
            data: {
              state: parameters.state
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectFeatures = ProjectFeatures;
  }
});

// node_modules/jira.js/out/version2/projectKeyAndNameValidation.js
var require_projectKeyAndNameValidation = __commonJS({
  "node_modules/jira.js/out/version2/projectKeyAndNameValidation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectKeyAndNameValidation = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectKeyAndNameValidation = class {
      constructor(client) {
        this.client = client;
      }
      validateProjectKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const key = typeof parameters === "string" ? parameters : parameters === null || parameters === void 0 ? void 0 : parameters.key;
          const config = {
            url: "/rest/api/2/projectvalidate/key",
            method: "GET",
            params: {
              key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getValidProjectKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const key = typeof parameters === "string" ? parameters : parameters === null || parameters === void 0 ? void 0 : parameters.key;
          const config = {
            url: "/rest/api/2/projectvalidate/validProjectKey",
            method: "GET",
            params: {
              key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getValidProjectName(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const name = typeof parameters === "string" ? parameters : parameters.name;
          const config = {
            url: "/rest/api/2/projectvalidate/validProjectName",
            method: "GET",
            params: {
              name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectKeyAndNameValidation = ProjectKeyAndNameValidation;
  }
});

// node_modules/jira.js/out/version2/projectPermissionSchemes.js
var require_projectPermissionSchemes = __commonJS({
  "node_modules/jira.js/out/version2/projectPermissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectPermissionSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectPermissionSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getProjectIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/2/project/${projectKeyOrId}/issuesecuritylevelscheme`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAssignedPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/2/project/${projectKeyOrId}/permissionscheme`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectKeyOrId}/permissionscheme`,
            method: "PUT",
            params: {
              expand: parameters.expand
            },
            data: {
              id: parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSecurityLevelsForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/2/project/${projectKeyOrId}/securitylevel`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectPermissionSchemes = ProjectPermissionSchemes;
  }
});

// node_modules/jira.js/out/version2/projectProperties.js
var require_projectProperties = __commonJS({
  "node_modules/jira.js/out/version2/projectProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectProperties = class {
      constructor(client) {
        this.client = client;
      }
      getProjectPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setProjectProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectProperties = ProjectProperties;
  }
});

// node_modules/jira.js/out/version2/projectRoleActors.js
var require_projectRoleActors = __commonJS({
  "node_modules/jira.js/out/version2/projectRoleActors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectRoleActors = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectRoleActors = class {
      constructor(client) {
        this.client = client;
      }
      addActorUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "POST",
            data: {
              user: parameters.user,
              group: parameters.group,
              groupId: parameters.groupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setActors(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "PUT",
            data: {
              categorisedActors: parameters.categorisedActors
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteActor(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "DELETE",
            params: {
              user: parameters.user,
              group: parameters.group,
              groupId: parameters.groupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRoleActorsForRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/role/${id}/actors`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addProjectRoleActorsToRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/role/${parameters.id}/actors`,
            method: "POST",
            data: {
              user: parameters.user,
              groupId: parameters.groupId,
              group: parameters.group
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectRoleActorsFromRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/role/${parameters.id}/actors`,
            method: "DELETE",
            params: {
              user: parameters.user,
              groupId: parameters.groupId,
              group: parameters.group
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectRoleActors = ProjectRoleActors;
  }
});

// node_modules/jira.js/out/version2/projectRoles.js
var require_projectRoles = __commonJS({
  "node_modules/jira.js/out/version2/projectRoles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectRoles = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectRoles = class {
      constructor(client) {
        this.client = client;
      }
      getProjectRoles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/role`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "GET",
            params: {
              excludeInactiveUsers: parameters.excludeInactiveUsers
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRoleDetails(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/roledetails`,
            method: "GET",
            params: {
              currentMember: typeof parameters !== "string" && parameters.currentMember,
              excludeConnectAddons: typeof parameters !== "string" && parameters.excludeConnectAddons
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllProjectRoles(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/role",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/role",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRoleById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/role/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      partialUpdateProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/role/${parameters.id}`,
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      fullyUpdateProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/role/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/role/${id}`,
            method: "DELETE",
            params: {
              swap: typeof parameters !== "string" && parameters.swap
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectRoles = ProjectRoles;
  }
});

// node_modules/jira.js/out/version2/projects.js
var require_projects2 = __commonJS({
  "node_modules/jira.js/out/version2/projects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Projects = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Projects = class {
      constructor(client) {
        this.client = client;
      }
      createProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/project",
            method: "POST",
            data: {
              assigneeType: parameters.assigneeType,
              avatarId: parameters.avatarId,
              categoryId: parameters.categoryId,
              description: parameters.description,
              fieldConfigurationScheme: parameters.fieldConfigurationScheme,
              issueSecurityScheme: parameters.issueSecurityScheme,
              issueTypeScheme: parameters.issueTypeScheme,
              issueTypeScreenScheme: parameters.issueTypeScreenScheme,
              key: parameters.key,
              leadAccountId: parameters.leadAccountId,
              name: parameters.name,
              notificationScheme: parameters.notificationScheme,
              permissionScheme: parameters.permissionScheme,
              projectTemplateKey: parameters.projectTemplateKey,
              projectTypeKey: parameters.projectTypeKey,
              url: parameters.url,
              workflowScheme: parameters.workflowScheme
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRecent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/project/recent",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/project/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              keys: parameters === null || parameters === void 0 ? void 0 : parameters.keys,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              typeKey: parameters === null || parameters === void 0 ? void 0 : parameters.typeKey,
              categoryId: parameters === null || parameters === void 0 ? void 0 : parameters.categoryId,
              action: parameters === null || parameters === void 0 ? void 0 : parameters.action,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
              propertyQuery: parameters === null || parameters === void 0 ? void 0 : parameters.propertyQuery
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand,
              properties: typeof parameters !== "string" && parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/project/${parameters.projectIdOrKey}`,
            method: "PUT",
            params: {
              expand: parameters.expand
            },
            data: {
              assigneeType: parameters.assigneeType,
              avatarId: parameters.avatarId,
              categoryId: parameters.categoryId,
              description: parameters.description,
              issueSecurityScheme: parameters.issueSecurityScheme,
              key: parameters.key,
              leadAccountId: parameters.leadAccountId,
              name: parameters.name,
              notificationScheme: parameters.notificationScheme,
              permissionScheme: parameters.permissionScheme,
              projectTemplateKey: parameters.projectTemplateKey,
              projectTypeKey: parameters.projectTypeKey,
              url: parameters.url
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}`,
            method: "DELETE",
            params: {
              enableUndo: typeof parameters !== "string" && parameters.enableUndo
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      archiveProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/archive`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectAsynchronously(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/delete`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      restore(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/restore`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/statuses`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getHierarchy(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectId = typeof parameters === "string" ? parameters : parameters.projectId;
          const config = {
            url: `/rest/api/2/project/${projectId}/hierarchy`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getNotificationSchemeForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/2/project/${projectKeyOrId}/notificationscheme`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Projects = Projects;
  }
});

// node_modules/jira.js/out/version2/projectTypes.js
var require_projectTypes = __commonJS({
  "node_modules/jira.js/out/version2/projectTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectTypes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectTypes = class {
      constructor(client) {
        this.client = client;
      }
      getAllProjectTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/project/type",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllAccessibleProjectTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/project/type/accessible",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectTypeByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectTypeKey = typeof parameters === "string" ? parameters : parameters.projectTypeKey;
          const config = {
            url: `/rest/api/2/project/type/${projectTypeKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAccessibleProjectTypeByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectTypeKey = typeof parameters === "string" ? parameters : parameters.projectTypeKey;
          const config = {
            url: `/rest/api/2/project/type/${projectTypeKey}/accessible`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectTypes = ProjectTypes;
  }
});

// node_modules/jira.js/out/version2/projectVersions.js
var require_projectVersions = __commonJS({
  "node_modules/jira.js/out/version2/projectVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectVersions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectVersions = class {
      constructor(client) {
        this.client = client;
      }
      getProjectVersionsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/version`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              orderBy: typeof parameters !== "string" && parameters.orderBy,
              query: typeof parameters !== "string" && parameters.query,
              status: typeof parameters !== "string" && parameters.status,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/2/project/${projectIdOrKey}/versions`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/version",
            method: "POST",
            data: {
              expand: parameters.expand,
              self: parameters.self,
              id: parameters.id,
              description: parameters.description,
              name: parameters.name,
              archived: parameters.archived,
              released: parameters.released,
              startDate: parameters.startDate,
              releaseDate: parameters.releaseDate,
              overdue: parameters.overdue,
              userStartDate: parameters.userStartDate,
              userReleaseDate: parameters.userReleaseDate,
              projectId: parameters.projectId,
              moveUnfixedIssuesTo: parameters.moveUnfixedIssuesTo,
              operations: parameters.operations,
              issuesStatusForFixVersion: parameters.issuesStatusForFixVersion
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/version/${id}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/version/${parameters.id}`,
            method: "PUT",
            data: {
              expand: parameters.expand,
              description: parameters.description,
              name: parameters.name,
              archived: parameters.archived,
              released: parameters.released,
              startDate: parameters.startDate,
              releaseDate: parameters.releaseDate,
              projectId: parameters.projectId,
              moveUnfixedIssuesTo: parameters.moveUnfixedIssuesTo
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      mergeVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/version/${parameters.id}/mergeto/${parameters.moveIssuesTo}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/version/${parameters.id}/move`,
            method: "POST",
            data: {
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVersionRelatedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/version/${id}/relatedIssueCounts`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAndReplaceVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/version/${parameters.id}/removeAndSwap`,
            method: "POST",
            data: {
              moveFixIssuesTo: parameters.moveFixIssuesTo,
              moveAffectedIssuesTo: parameters.moveAffectedIssuesTo,
              customFieldReplacementList: parameters.customFieldReplacementList
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVersionUnresolvedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/version/${id}/unresolvedIssueCount`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectVersions = ProjectVersions;
  }
});

// node_modules/jira.js/out/version2/screens.js
var require_screens = __commonJS({
  "node_modules/jira.js/out/version2/screens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Screens = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Screens = class {
      constructor(client) {
        this.client = client;
      }
      getScreensForField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/2/field/${fieldId}/screens`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getScreens(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/screens",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              scope: parameters === null || parameters === void 0 ? void 0 : parameters.scope,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/screens",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addFieldToDefaultScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/2/screens/addToDefault/${fieldId}`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenId = typeof parameters === "string" ? parameters : parameters.screenId;
          const config = {
            url: `/rest/api/2/screens/${screenId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvailableScreenFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenId = typeof parameters === "string" ? parameters : parameters.screenId;
          const config = {
            url: `/rest/api/2/screens/${screenId}/availableFields`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Screens = Screens;
  }
});

// node_modules/jira.js/out/version2/screenSchemes.js
var require_screenSchemes = __commonJS({
  "node_modules/jira.js/out/version2/screenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScreenSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ScreenSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getScreenSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/screenscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const name = typeof parameters === "string" ? parameters : parameters.name;
          const config = {
            url: "/rest/api/2/screenscheme",
            method: "POST",
            data: {
              name,
              description: typeof parameters !== "string" && parameters.description,
              screens: typeof parameters !== "string" && parameters.screens
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screenscheme/${parameters.screenSchemeId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              screens: parameters.screens
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenSchemeId = typeof parameters === "string" ? parameters : parameters.screenSchemeId;
          const config = {
            url: `/rest/api/2/screenscheme/${screenSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ScreenSchemes = ScreenSchemes;
  }
});

// node_modules/jira.js/out/version2/screenTabFields.js
var require_screenTabFields = __commonJS({
  "node_modules/jira.js/out/version2/screenTabFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScreenTabFields = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ScreenTabFields = class {
      constructor(client) {
        this.client = client;
      }
      getAllScreenTabFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields`,
            method: "GET",
            params: {
              projectKey: parameters.projectKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addScreenTabField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields`,
            method: "POST",
            data: {
              fieldId: parameters.fieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeScreenTabField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveScreenTabField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields/${parameters.id}/move`,
            method: "POST",
            data: {
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ScreenTabFields = ScreenTabFields;
  }
});

// node_modules/jira.js/out/version2/screenTabs.js
var require_screenTabs = __commonJS({
  "node_modules/jira.js/out/version2/screenTabs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScreenTabs = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ScreenTabs = class {
      constructor(client) {
        this.client = client;
      }
      getAllScreenTabs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenId = typeof parameters === "string" ? parameters : parameters.screenId;
          const config = {
            url: `/rest/api/2/screens/${screenId}/tabs`,
            method: "GET",
            params: {
              projectKey: typeof parameters !== "string" && parameters.projectKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs`,
            method: "POST",
            data: {
              id: parameters.id,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      renameScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}`,
            method: "PUT",
            data: {
              id: parameters.id,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}/move/${parameters.pos}`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ScreenTabs = ScreenTabs;
  }
});

// node_modules/jira.js/out/version2/serverInfo.js
var require_serverInfo = __commonJS({
  "node_modules/jira.js/out/version2/serverInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServerInfo = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ServerInfo = class {
      constructor(client) {
        this.client = client;
      }
      getServerInfo(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/serverInfo",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ServerInfo = ServerInfo;
  }
});

// node_modules/jira.js/out/version2/status.js
var require_status2 = __commonJS({
  "node_modules/jira.js/out/version2/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Status = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Status = class {
      constructor(client) {
        this.client = client;
      }
      getStatusesById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: "/rest/api/2/statuses",
            method: "GET",
            params: {
              id,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/statuses",
            method: "POST",
            data: {
              statuses: parameters.statuses,
              scope: parameters.scope
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/statuses",
            method: "PUT",
            data: {
              statuses: parameters.statuses
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteStatusesById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: "/rest/api/2/statuses",
            method: "DELETE",
            params: {
              id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      search(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/statuses/search",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              searchString: parameters === null || parameters === void 0 ? void 0 : parameters.searchString,
              statusCategory: parameters === null || parameters === void 0 ? void 0 : parameters.statusCategory
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Status = Status;
  }
});

// node_modules/jira.js/out/version2/tasks.js
var require_tasks = __commonJS({
  "node_modules/jira.js/out/version2/tasks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Tasks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Tasks = class {
      constructor(client) {
        this.client = client;
      }
      getTask(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const taskId = typeof parameters === "string" ? parameters : parameters.taskId;
          const config = {
            url: `/rest/api/2/task/${taskId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      cancelTask(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const taskId = typeof parameters === "string" ? parameters : parameters.taskId;
          const config = {
            url: `/rest/api/2/task/${taskId}/cancel`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Tasks = Tasks;
  }
});

// node_modules/jira.js/out/version2/timeTracking.js
var require_timeTracking = __commonJS({
  "node_modules/jira.js/out/version2/timeTracking.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimeTracking = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var TimeTracking = class {
      constructor(client) {
        this.client = client;
      }
      getSelectedTimeTrackingImplementation(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/configuration/timetracking",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      selectTimeTrackingImplementation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/configuration/timetracking",
            method: "PUT",
            data: {
              key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              url: parameters === null || parameters === void 0 ? void 0 : parameters.url
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvailableTimeTrackingImplementations(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/configuration/timetracking/list",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSharedTimeTrackingConfiguration(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/configuration/timetracking/options",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setSharedTimeTrackingConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/configuration/timetracking/options",
            method: "PUT",
            data: {
              workingHoursPerDay: parameters === null || parameters === void 0 ? void 0 : parameters.workingHoursPerDay,
              workingDaysPerWeek: parameters === null || parameters === void 0 ? void 0 : parameters.workingDaysPerWeek,
              timeFormat: parameters === null || parameters === void 0 ? void 0 : parameters.timeFormat,
              defaultUnit: parameters === null || parameters === void 0 ? void 0 : parameters.defaultUnit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.TimeTracking = TimeTracking;
  }
});

// node_modules/jira.js/out/version2/uIModificationsApps.js
var require_uIModificationsApps = __commonJS({
  "node_modules/jira.js/out/version2/uIModificationsApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UIModificationsApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var UIModificationsApps = class {
      constructor(client) {
        this.client = client;
      }
      getUiModifications(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/uiModifications",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createUiModification(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/uiModifications",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description,
              data: parameters.data,
              contexts: parameters.contexts
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateUiModification(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/uiModifications/${parameters.uiModificationId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              data: parameters.data,
              contexts: parameters.contexts
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteUiModification(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const uiModificationId = typeof parameters === "string" ? parameters : parameters.uiModificationId;
          const config = {
            url: `/rest/api/2/uiModifications/${uiModificationId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.UIModificationsApps = UIModificationsApps;
  }
});

// node_modules/jira.js/out/version2/userProperties.js
var require_userProperties = __commonJS({
  "node_modules/jira.js/out/version2/userProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var UserProperties = class {
      constructor(client) {
        this.client = client;
      }
      getUserPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/properties",
            method: "GET",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              userKey: parameters === null || parameters === void 0 ? void 0 : parameters.userKey,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/user/properties/${parameters.propertyKey}`,
            method: "GET",
            params: {
              accountId: parameters.accountId,
              userKey: parameters.userKey,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/user/properties/${parameters.propertyKey}`,
            method: "PUT",
            params: {
              accountId: parameters.accountId
            },
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/user/properties/${parameters.propertyKey}`,
            method: "DELETE",
            params: {
              accountId: parameters.accountId,
              userKey: parameters.userKey,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.UserProperties = UserProperties;
  }
});

// node_modules/jira.js/out/version2/users.js
var require_users = __commonJS({
  "node_modules/jira.js/out/version2/users.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Users = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var Users = class {
      constructor(client) {
        this.client = client;
      }
      getUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user",
            method: "GET",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user",
            method: "POST",
            data: {
              emailAddress: parameters.emailAddress,
              key: parameters.key,
              name: parameters.name,
              password: parameters.password,
              products: parameters.products,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user",
            method: "DELETE",
            params: {
              accountId: parameters.accountId,
              username: parameters.username,
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkGetUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/bulk",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              accountId: (0, paramSerializer_1.paramSerializer)("accountId", parameters.accountId)
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkGetUsersMigration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/bulk/migration",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              username: (0, paramSerializer_1.paramSerializer)("username", parameters.username),
              key: (0, paramSerializer_1.paramSerializer)("key", parameters.key)
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserDefaultColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/columns",
            method: "GET",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setUserColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/columns",
            method: "PUT",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId
            },
            data: parameters === null || parameters === void 0 ? void 0 : parameters.columns
          };
          return this.client.sendRequest(config, callback);
        });
      }
      resetUserColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/columns",
            method: "DELETE",
            params: {
              accountId: parameters.accountId,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const accountId = typeof parameters === "string" ? parameters : parameters.accountId;
          const config = {
            url: "/rest/api/2/user/email",
            method: "GET",
            params: {
              accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserEmailBulk(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const accountId = typeof parameters === "string" ? parameters : parameters.accountId;
          const config = {
            url: "/rest/api/2/user/email/bulk",
            method: "GET",
            params: {
              accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/groups",
            method: "GET",
            params: {
              accountId: parameters.accountId,
              username: parameters.username,
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllUsersDefault(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/users",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/users/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Users = Users;
  }
});

// node_modules/jira.js/out/version2/userSearch.js
var require_userSearch = __commonJS({
  "node_modules/jira.js/out/version2/userSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserSearch = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var UserSearch = class {
      constructor(client) {
        this.client = client;
      }
      findBulkAssignableUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/assignable/multiProjectSearch",
            method: "GET",
            params: {
              query: parameters.query,
              username: parameters.username,
              accountId: parameters.accountId,
              projectKeys: parameters.projectKeys,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findAssignableUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/assignable/search",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              sessionId: parameters === null || parameters === void 0 ? void 0 : parameters.sessionId,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              project: parameters === null || parameters === void 0 ? void 0 : parameters.project,
              issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              actionDescriptorId: parameters === null || parameters === void 0 ? void 0 : parameters.actionDescriptorId,
              recommend: parameters === null || parameters === void 0 ? void 0 : parameters.recommend
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersWithAllPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/permission/search",
            method: "GET",
            params: {
              query: parameters.query,
              username: parameters.username,
              accountId: parameters.accountId,
              permissions: parameters.permissions,
              issueKey: parameters.issueKey,
              projectKey: parameters.projectKey,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersForPicker(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/picker",
            method: "GET",
            params: {
              query: parameters.query,
              maxResults: parameters.maxResults,
              showAvatar: parameters.showAvatar,
              excludeAccountIds: (0, paramSerializer_1.paramSerializer)("excludeAccountIds", parameters.excludeAccountIds),
              avatarSize: parameters.avatarSize,
              excludeConnectUsers: parameters.excludeConnectUsers
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/search",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              property: parameters === null || parameters === void 0 ? void 0 : parameters.property
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersByQuery(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/search/query",
            method: "GET",
            params: {
              query: parameters.query,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUserKeysByQuery(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/search/query/key",
            method: "GET",
            params: {
              query: parameters.query,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersWithBrowsePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/user/viewissue/search",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
              projectKey: parameters === null || parameters === void 0 ? void 0 : parameters.projectKey,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.UserSearch = UserSearch;
  }
});

// node_modules/jira.js/out/version2/webhooks.js
var require_webhooks = __commonJS({
  "node_modules/jira.js/out/version2/webhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Webhooks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Webhooks = class {
      constructor(client) {
        this.client = client;
      }
      getDynamicWebhooksForApp(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/webhook",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      registerDynamicWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/webhook",
            method: "POST",
            data: {
              webhooks: parameters.webhooks,
              url: parameters.url
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWebhookById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/webhook",
            method: "DELETE",
            data: {
              webhookIds: parameters.webhookIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFailedWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/webhook/failed",
            method: "GET",
            params: {
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              after: parameters === null || parameters === void 0 ? void 0 : parameters.after
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      refreshWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/webhook/refresh",
            method: "PUT",
            data: {
              webhookIds: parameters.webhookIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Webhooks = Webhooks;
  }
});

// node_modules/jira.js/out/version2/workflows.js
var require_workflows = __commonJS({
  "node_modules/jira.js/out/version2/workflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Workflows = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var Workflows = class {
      constructor(client) {
        this.client = client;
      }
      createWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflow",
            method: "POST",
            data: {
              description: parameters.description,
              name: parameters.name,
              statuses: parameters.statuses,
              transitions: parameters.transitions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflow/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              workflowName: (0, paramSerializer_1.paramSerializer)("workflowName", parameters === null || parameters === void 0 ? void 0 : parameters.workflowName),
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteInactiveWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const entityId = typeof parameters === "string" ? parameters : parameters.entityId;
          const config = {
            url: `/rest/api/2/workflow/${entityId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      readWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflows",
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              projectAndIssueTypes: parameters.projectAndIssueTypes,
              workflowIds: parameters.workflowIds,
              workflowNames: parameters.workflowNames
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      workflowCapabilities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflows/capabilities",
            method: "GET",
            params: {
              workflowId: parameters.workflowId,
              projectId: parameters.projectId,
              issueTypeId: parameters.issueTypeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflows/create",
            method: "POST",
            data: {
              scope: parameters.scope,
              statuses: parameters.statuses,
              workflows: parameters.workflows
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      validateCreateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflows/create/validation",
            method: "POST",
            data: {
              payload: parameters.payload,
              validationOptions: parameters.validationOptions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflows/update",
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              statuses: parameters.statuses,
              workflows: parameters.workflows
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      validateUpdateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflows/update/validation",
            method: "POST",
            data: {
              payload: parameters.payload,
              validationOptions: parameters.validationOptions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Workflows = Workflows;
  }
});

// node_modules/jira.js/out/version2/workflowSchemeDrafts.js
var require_workflowSchemeDrafts = __commonJS({
  "node_modules/jira.js/out/version2/workflowSchemeDrafts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowSchemeDrafts = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowSchemeDrafts = class {
      constructor(client) {
        this.client = client;
      }
      createWorkflowSchemeDraftFromParent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/createdraft`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowSchemeDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/draft`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowSchemeDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              defaultWorkflow: parameters.defaultWorkflow,
              issueTypeMappings: parameters.issueTypeMappings,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowSchemeDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/draft`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDraftDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/draft/default`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDraftDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/default`,
            method: "PUT",
            data: {
              workflow: parameters.workflow,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDraftDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/draft/default`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowSchemeDraftIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/issuetype/${parameters.issueType}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setWorkflowSchemeDraftIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/issuetype/${parameters.issueType}`,
            method: "PUT",
            data: parameters.details
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowSchemeDraftIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/issuetype/${parameters.issueType}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      publishDraftWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/draft/publish`,
            method: "POST",
            params: {
              validateOnly: typeof parameters !== "string" && parameters.validateOnly
            },
            data: {
              statusMappings: typeof parameters !== "string" && parameters.statusMappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDraftWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/workflow`,
            method: "GET",
            params: {
              workflowName: parameters.workflowName
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDraftWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/workflow`,
            method: "PUT",
            params: {
              workflowName: parameters.workflowName
            },
            data: {
              workflow: parameters.workflow,
              issueTypes: parameters.issueTypes,
              defaultMapping: parameters.defaultMapping,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDraftWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/draft/workflow`,
            method: "DELETE",
            params: {
              workflowName: parameters.workflowName
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowSchemeDrafts = WorkflowSchemeDrafts;
  }
});

// node_modules/jira.js/out/version2/workflowSchemeProjectAssociations.js
var require_workflowSchemeProjectAssociations = __commonJS({
  "node_modules/jira.js/out/version2/workflowSchemeProjectAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowSchemeProjectAssociations = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowSchemeProjectAssociations = class {
      constructor(client) {
        this.client = client;
      }
      getWorkflowSchemeProjectAssociations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflowscheme/project",
            method: "GET",
            params: {
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflowscheme/project",
            method: "PUT",
            data: {
              workflowSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.workflowSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowSchemeProjectAssociations = WorkflowSchemeProjectAssociations;
  }
});

// node_modules/jira.js/out/version2/workflowSchemes.js
var require_workflowSchemes = __commonJS({
  "node_modules/jira.js/out/version2/workflowSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getAllWorkflowSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflowscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflowscheme",
            method: "POST",
            data: {
              defaultWorkflow: parameters.defaultWorkflow,
              description: parameters.description,
              draft: parameters.draft,
              id: parameters.id,
              issueTypeMappings: parameters.issueTypeMappings,
              issueTypes: parameters.issueTypes,
              lastModified: parameters.lastModified,
              lastModifiedUser: parameters.lastModifiedUser,
              name: parameters.name,
              originalDefaultWorkflow: parameters.originalDefaultWorkflow,
              originalIssueTypeMappings: parameters.originalIssueTypeMappings,
              self: parameters.self,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}`,
            method: "GET",
            params: {
              returnDraftIfExists: typeof parameters !== "string" && parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              defaultWorkflow: parameters.defaultWorkflow,
              issueTypeMappings: parameters.issueTypeMappings,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/default`,
            method: "GET",
            params: {
              returnDraftIfExists: typeof parameters !== "string" && parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/default`,
            method: "PUT",
            data: {
              updateDraftIfNeeded: parameters.updateDraftIfNeeded,
              workflow: parameters.workflow
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/default`,
            method: "DELETE",
            params: {
              updateDraftIfNeeded: typeof parameters !== "string" && parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowSchemeIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/issuetype/${parameters.issueType}`,
            method: "GET",
            params: {
              returnDraftIfExists: parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setWorkflowSchemeIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/issuetype/${parameters.issueType}`,
            method: "PUT",
            data: parameters.details
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowSchemeIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/issuetype/${parameters.issueType}`,
            method: "DELETE",
            params: {
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/workflow`,
            method: "GET",
            params: {
              workflowName: typeof parameters !== "string" && parameters.workflowName,
              returnDraftIfExists: typeof parameters !== "string" && parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflowscheme/${parameters.id}/workflow`,
            method: "PUT",
            params: {
              workflowName: parameters.workflowName
            },
            data: {
              defaultMapping: parameters.defaultMapping,
              issueTypes: parameters.issueTypes,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded,
              workflow: parameters.workflow
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/2/workflowscheme/${id}/workflow`,
            method: "DELETE",
            params: {
              workflowName: typeof parameters !== "string" && parameters.workflowName,
              updateDraftIfNeeded: typeof parameters !== "string" && parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowSchemes = WorkflowSchemes;
  }
});

// node_modules/jira.js/out/version2/workflowStatusCategories.js
var require_workflowStatusCategories = __commonJS({
  "node_modules/jira.js/out/version2/workflowStatusCategories.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStatusCategories = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowStatusCategories = class {
      constructor(client) {
        this.client = client;
      }
      getStatusCategories(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/statuscategory",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getStatusCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const idOrKey = typeof parameters === "string" ? parameters : parameters.idOrKey;
          const config = {
            url: `/rest/api/2/statuscategory/${idOrKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowStatusCategories = WorkflowStatusCategories;
  }
});

// node_modules/jira.js/out/version2/workflowStatuses.js
var require_workflowStatuses = __commonJS({
  "node_modules/jira.js/out/version2/workflowStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStatuses = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowStatuses = class {
      constructor(client) {
        this.client = client;
      }
      getStatuses(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/status",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const idOrName = typeof parameters === "string" ? parameters : parameters.idOrName;
          const config = {
            url: `/rest/api/2/status/${idOrName}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowStatuses = WorkflowStatuses;
  }
});

// node_modules/jira.js/out/version2/workflowTransitionProperties.js
var require_workflowTransitionProperties = __commonJS({
  "node_modules/jira.js/out/version2/workflowTransitionProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowTransitionProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowTransitionProperties = class {
      constructor(client) {
        this.client = client;
      }
      getWorkflowTransitionProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
            method: "GET",
            params: {
              includeReservedKeys: parameters.includeReservedKeys,
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
            method: "POST",
            params: {
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            },
            data: Object.assign(Object.assign({}, parameters), { transitionId: void 0, key: void 0, workflowName: void 0, workflowMode: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
            method: "PUT",
            params: {
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            },
            data: Object.assign(Object.assign({}, parameters), { transitionId: void 0, key: void 0, workflowName: void 0, workflowMode: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
            method: "DELETE",
            params: {
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowTransitionProperties = WorkflowTransitionProperties;
  }
});

// node_modules/jira.js/out/version2/workflowTransitionRules.js
var require_workflowTransitionRules = __commonJS({
  "node_modules/jira.js/out/version2/workflowTransitionRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowTransitionRules = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowTransitionRules = class {
      constructor(client) {
        this.client = client;
      }
      getWorkflowTransitionRuleConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflow/rule/config",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              types: parameters.types,
              keys: parameters.keys,
              workflowNames: parameters.workflowNames,
              withTags: parameters.withTags,
              draft: parameters.draft,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowTransitionRuleConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflow/rule/config",
            method: "PUT",
            data: {
              workflows: parameters.workflows
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowTransitionRuleConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/2/workflow/rule/config/delete",
            method: "PUT",
            data: {
              workflows: parameters === null || parameters === void 0 ? void 0 : parameters.workflows
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowTransitionRules = WorkflowTransitionRules;
  }
});

// node_modules/jira.js/out/version2/models/actorInput.js
var require_actorInput = __commonJS({
  "node_modules/jira.js/out/version2/models/actorInput.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/actorsMap.js
var require_actorsMap = __commonJS({
  "node_modules/jira.js/out/version2/models/actorsMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/addField.js
var require_addField = __commonJS({
  "node_modules/jira.js/out/version2/models/addField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/addGroup.js
var require_addGroup = __commonJS({
  "node_modules/jira.js/out/version2/models/addGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/addSecuritySchemeLevelsRequest.js
var require_addSecuritySchemeLevelsRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/addSecuritySchemeLevelsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/announcementBannerConfiguration.js
var require_announcementBannerConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/announcementBannerConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/announcementBannerConfigurationUpdate.js
var require_announcementBannerConfigurationUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/announcementBannerConfigurationUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/application.js
var require_application = __commonJS({
  "node_modules/jira.js/out/version2/models/application.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/applicationProperty.js
var require_applicationProperty = __commonJS({
  "node_modules/jira.js/out/version2/models/applicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/applicationRole.js
var require_applicationRole = __commonJS({
  "node_modules/jira.js/out/version2/models/applicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/associatedItem.js
var require_associatedItem = __commonJS({
  "node_modules/jira.js/out/version2/models/associatedItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/associateFieldConfigurationsWithIssueTypesRequest.js
var require_associateFieldConfigurationsWithIssueTypesRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/associateFieldConfigurationsWithIssueTypesRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachment.js
var require_attachment = __commonJS({
  "node_modules/jira.js/out/version2/models/attachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachmentArchiveEntry.js
var require_attachmentArchiveEntry = __commonJS({
  "node_modules/jira.js/out/version2/models/attachmentArchiveEntry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachmentArchiveImpl.js
var require_attachmentArchiveImpl = __commonJS({
  "node_modules/jira.js/out/version2/models/attachmentArchiveImpl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachmentArchiveItemReadable.js
var require_attachmentArchiveItemReadable = __commonJS({
  "node_modules/jira.js/out/version2/models/attachmentArchiveItemReadable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachmentArchiveMetadataReadable.js
var require_attachmentArchiveMetadataReadable = __commonJS({
  "node_modules/jira.js/out/version2/models/attachmentArchiveMetadataReadable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachmentMetadata.js
var require_attachmentMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/attachmentMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/attachmentSettings.js
var require_attachmentSettings = __commonJS({
  "node_modules/jira.js/out/version2/models/attachmentSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/auditRecord.js
var require_auditRecord = __commonJS({
  "node_modules/jira.js/out/version2/models/auditRecord.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/auditRecords.js
var require_auditRecords2 = __commonJS({
  "node_modules/jira.js/out/version2/models/auditRecords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/autoCompleteSuggestion.js
var require_autoCompleteSuggestion = __commonJS({
  "node_modules/jira.js/out/version2/models/autoCompleteSuggestion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/autoCompleteSuggestions.js
var require_autoCompleteSuggestions = __commonJS({
  "node_modules/jira.js/out/version2/models/autoCompleteSuggestions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableDashboardGadget.js
var require_availableDashboardGadget = __commonJS({
  "node_modules/jira.js/out/version2/models/availableDashboardGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableDashboardGadgetsResponse.js
var require_availableDashboardGadgetsResponse = __commonJS({
  "node_modules/jira.js/out/version2/models/availableDashboardGadgetsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableWorkflowConnectRule.js
var require_availableWorkflowConnectRule = __commonJS({
  "node_modules/jira.js/out/version2/models/availableWorkflowConnectRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableWorkflowForgeRule.js
var require_availableWorkflowForgeRule = __commonJS({
  "node_modules/jira.js/out/version2/models/availableWorkflowForgeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableWorkflowSystemRule.js
var require_availableWorkflowSystemRule = __commonJS({
  "node_modules/jira.js/out/version2/models/availableWorkflowSystemRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableWorkflowTriggers.js
var require_availableWorkflowTriggers = __commonJS({
  "node_modules/jira.js/out/version2/models/availableWorkflowTriggers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/availableWorkflowTriggerTypes.js
var require_availableWorkflowTriggerTypes = __commonJS({
  "node_modules/jira.js/out/version2/models/availableWorkflowTriggerTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/avatar.js
var require_avatar = __commonJS({
  "node_modules/jira.js/out/version2/models/avatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/avatars.js
var require_avatars2 = __commonJS({
  "node_modules/jira.js/out/version2/models/avatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/avatarUrls.js
var require_avatarUrls2 = __commonJS({
  "node_modules/jira.js/out/version2/models/avatarUrls.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/avatarWithDetails.js
var require_avatarWithDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/avatarWithDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkChangeOwnerDetails.js
var require_bulkChangeOwnerDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkChangeOwnerDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkCustomFieldOptionCreateRequest.js
var require_bulkCustomFieldOptionCreateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkCustomFieldOptionCreateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkCustomFieldOptionUpdateRequest.js
var require_bulkCustomFieldOptionUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkCustomFieldOptionUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkEditShareableEntity.js
var require_bulkEditShareableEntity = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkEditShareableEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkIssueIsWatching.js
var require_bulkIssueIsWatching = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkIssueIsWatching.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkIssuePropertyUpdateRequest.js
var require_bulkIssuePropertyUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkIssuePropertyUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkOperationErrorResult.js
var require_bulkOperationErrorResult = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkOperationErrorResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkPermissionGrants.js
var require_bulkPermissionGrants = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkPermissionGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkPermissionsRequest.js
var require_bulkPermissionsRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkPermissionsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkProjectPermissionGrants.js
var require_bulkProjectPermissionGrants = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkProjectPermissionGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/bulkProjectPermissions.js
var require_bulkProjectPermissions = __commonJS({
  "node_modules/jira.js/out/version2/models/bulkProjectPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/changeDetails.js
var require_changeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/changeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/changedValue.js
var require_changedValue = __commonJS({
  "node_modules/jira.js/out/version2/models/changedValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/changedWorklog.js
var require_changedWorklog = __commonJS({
  "node_modules/jira.js/out/version2/models/changedWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/changedWorklogs.js
var require_changedWorklogs = __commonJS({
  "node_modules/jira.js/out/version2/models/changedWorklogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/changelog.js
var require_changelog = __commonJS({
  "node_modules/jira.js/out/version2/models/changelog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/columnItem.js
var require_columnItem = __commonJS({
  "node_modules/jira.js/out/version2/models/columnItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/comment.js
var require_comment = __commonJS({
  "node_modules/jira.js/out/version2/models/comment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/componentIssuesCount.js
var require_componentIssuesCount = __commonJS({
  "node_modules/jira.js/out/version2/models/componentIssuesCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/componentWithIssueCount.js
var require_componentWithIssueCount = __commonJS({
  "node_modules/jira.js/out/version2/models/componentWithIssueCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/conditionGroupConfiguration.js
var require_conditionGroupConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/conditionGroupConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/conditionGroupUpdate.js
var require_conditionGroupUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/conditionGroupUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/configuration.js
var require_configuration = __commonJS({
  "node_modules/jira.js/out/version2/models/configuration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/connectCustomFieldValue.js
var require_connectCustomFieldValue = __commonJS({
  "node_modules/jira.js/out/version2/models/connectCustomFieldValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/connectCustomFieldValues.js
var require_connectCustomFieldValues = __commonJS({
  "node_modules/jira.js/out/version2/models/connectCustomFieldValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/connectModule.js
var require_connectModule = __commonJS({
  "node_modules/jira.js/out/version2/models/connectModule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/connectModules.js
var require_connectModules = __commonJS({
  "node_modules/jira.js/out/version2/models/connectModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/connectWorkflowTransitionRule.js
var require_connectWorkflowTransitionRule = __commonJS({
  "node_modules/jira.js/out/version2/models/connectWorkflowTransitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/containerForProjectFeatures.js
var require_containerForProjectFeatures = __commonJS({
  "node_modules/jira.js/out/version2/models/containerForProjectFeatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/containerForRegisteredWebhooks.js
var require_containerForRegisteredWebhooks = __commonJS({
  "node_modules/jira.js/out/version2/models/containerForRegisteredWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/containerForWebhookIDs.js
var require_containerForWebhookIDs = __commonJS({
  "node_modules/jira.js/out/version2/models/containerForWebhookIDs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/containerOfWorkflowSchemeAssociations.js
var require_containerOfWorkflowSchemeAssociations = __commonJS({
  "node_modules/jira.js/out/version2/models/containerOfWorkflowSchemeAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/contextForProjectAndIssueType.js
var require_contextForProjectAndIssueType = __commonJS({
  "node_modules/jira.js/out/version2/models/contextForProjectAndIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/contextualConfiguration.js
var require_contextualConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/contextualConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/convertedJQLQueries.js
var require_convertedJQLQueries = __commonJS({
  "node_modules/jira.js/out/version2/models/convertedJQLQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createCustomFieldContext.js
var require_createCustomFieldContext = __commonJS({
  "node_modules/jira.js/out/version2/models/createCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createdIssue.js
var require_createdIssue = __commonJS({
  "node_modules/jira.js/out/version2/models/createdIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createdIssues.js
var require_createdIssues = __commonJS({
  "node_modules/jira.js/out/version2/models/createdIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createIssueSecuritySchemeDetails.js
var require_createIssueSecuritySchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createIssueSecuritySchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createNotificationSchemeDetails.js
var require_createNotificationSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createNotificationSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createPriorityDetails.js
var require_createPriorityDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createPriorityDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createProjectDetails.js
var require_createProjectDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createProjectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createResolutionDetails.js
var require_createResolutionDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createResolutionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createUiModificationDetails.js
var require_createUiModificationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createUiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createUpdateRoleRequest.js
var require_createUpdateRoleRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/createUpdateRoleRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowCondition.js
var require_createWorkflowCondition = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowDetails.js
var require_createWorkflowDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowStatusDetails.js
var require_createWorkflowStatusDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowStatusDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowTransitionDetails.js
var require_createWorkflowTransitionDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowTransitionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowTransitionRule.js
var require_createWorkflowTransitionRule = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowTransitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowTransitionRulesDetails.js
var require_createWorkflowTransitionRulesDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowTransitionRulesDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/createWorkflowTransitionScreenDetails.js
var require_createWorkflowTransitionScreenDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/createWorkflowTransitionScreenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customContextVariable.js
var require_customContextVariable = __commonJS({
  "node_modules/jira.js/out/version2/models/customContextVariable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldConfigurations.js
var require_customFieldConfigurations = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldContext.js
var require_customFieldContext = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldContextDefaultValue.js
var require_customFieldContextDefaultValue = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldContextDefaultValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldContextDefaultValueUpdate.js
var require_customFieldContextDefaultValueUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldContextDefaultValueUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldContextOption.js
var require_customFieldContextOption = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldContextOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldContextProjectMapping.js
var require_customFieldContextProjectMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldContextProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldContextUpdateDetails.js
var require_customFieldContextUpdateDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldContextUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldCreatedContextOptionsList.js
var require_customFieldCreatedContextOptionsList = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldCreatedContextOptionsList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldDefinitionJson.js
var require_customFieldDefinitionJson = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldDefinitionJson.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldOption.js
var require_customFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldOptionCreate.js
var require_customFieldOptionCreate = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldOptionCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldOptionUpdate.js
var require_customFieldOptionUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldOptionUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldReplacement.js
var require_customFieldReplacement = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldReplacement.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldUpdatedContextOptionsList.js
var require_customFieldUpdatedContextOptionsList = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldUpdatedContextOptionsList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldValueUpdate.js
var require_customFieldValueUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldValueUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/customFieldValueUpdateDetails.js
var require_customFieldValueUpdateDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/customFieldValueUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboard.js
var require_dashboard = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardDetails.js
var require_dashboardDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardGadget.js
var require_dashboardGadget = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardGadgetPosition.js
var require_dashboardGadgetPosition = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardGadgetPosition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardGadgetResponse.js
var require_dashboardGadgetResponse = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardGadgetResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardGadgetSettings.js
var require_dashboardGadgetSettings = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardGadgetSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardGadgetUpdateRequest.js
var require_dashboardGadgetUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardGadgetUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dashboardUser.js
var require_dashboardUser = __commonJS({
  "node_modules/jira.js/out/version2/models/dashboardUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/dateRangeFilter.js
var require_dateRangeFilter = __commonJS({
  "node_modules/jira.js/out/version2/models/dateRangeFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/defaultLevelValue.js
var require_defaultLevelValue = __commonJS({
  "node_modules/jira.js/out/version2/models/defaultLevelValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/defaultShareScope.js
var require_defaultShareScope = __commonJS({
  "node_modules/jira.js/out/version2/models/defaultShareScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/defaultWorkflow.js
var require_defaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/models/defaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/documentVersion.js
var require_documentVersion = __commonJS({
  "node_modules/jira.js/out/version2/models/documentVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/entityProperty.js
var require_entityProperty = __commonJS({
  "node_modules/jira.js/out/version2/models/entityProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/entityPropertyDetails.js
var require_entityPropertyDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/entityPropertyDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/error.js
var require_error = __commonJS({
  "node_modules/jira.js/out/version2/models/error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/errorCollection.js
var require_errorCollection = __commonJS({
  "node_modules/jira.js/out/version2/models/errorCollection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/errors.js
var require_errors2 = __commonJS({
  "node_modules/jira.js/out/version2/models/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/eventNotification.js
var require_eventNotification = __commonJS({
  "node_modules/jira.js/out/version2/models/eventNotification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/exportArchivedIssuesTaskProgress.js
var require_exportArchivedIssuesTaskProgress = __commonJS({
  "node_modules/jira.js/out/version2/models/exportArchivedIssuesTaskProgress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/failedWebhook.js
var require_failedWebhook = __commonJS({
  "node_modules/jira.js/out/version2/models/failedWebhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/failedWebhooks.js
var require_failedWebhooks = __commonJS({
  "node_modules/jira.js/out/version2/models/failedWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/field.js
var require_field = __commonJS({
  "node_modules/jira.js/out/version2/models/field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfiguration.js
var require_fieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationDetails.js
var require_fieldConfigurationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationIssueTypeItem.js
var require_fieldConfigurationIssueTypeItem = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationIssueTypeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationItem.js
var require_fieldConfigurationItem = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationItemsDetails.js
var require_fieldConfigurationItemsDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationItemsDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationScheme.js
var require_fieldConfigurationScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationSchemeProjectAssociation.js
var require_fieldConfigurationSchemeProjectAssociation = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationSchemeProjects.js
var require_fieldConfigurationSchemeProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldConfigurationToIssueTypeMapping.js
var require_fieldConfigurationToIssueTypeMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldConfigurationToIssueTypeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldDetails.js
var require_fieldDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldLastUsed.js
var require_fieldLastUsed = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldLastUsed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldMetadata.js
var require_fieldMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fieldReferenceData.js
var require_fieldReferenceData = __commonJS({
  "node_modules/jira.js/out/version2/models/fieldReferenceData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fields.js
var require_fields2 = __commonJS({
  "node_modules/jira.js/out/version2/models/fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/filter.js
var require_filter = __commonJS({
  "node_modules/jira.js/out/version2/models/filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/filterDetails.js
var require_filterDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/filterDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/filterSubscription.js
var require_filterSubscription = __commonJS({
  "node_modules/jira.js/out/version2/models/filterSubscription.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/filterSubscriptionsList.js
var require_filterSubscriptionsList = __commonJS({
  "node_modules/jira.js/out/version2/models/filterSubscriptionsList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/fixVersion.js
var require_fixVersion2 = __commonJS({
  "node_modules/jira.js/out/version2/models/fixVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/foundGroup.js
var require_foundGroup = __commonJS({
  "node_modules/jira.js/out/version2/models/foundGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/foundGroups.js
var require_foundGroups = __commonJS({
  "node_modules/jira.js/out/version2/models/foundGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/foundUsers.js
var require_foundUsers = __commonJS({
  "node_modules/jira.js/out/version2/models/foundUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/foundUsersAndGroups.js
var require_foundUsersAndGroups = __commonJS({
  "node_modules/jira.js/out/version2/models/foundUsersAndGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/functionReferenceData.js
var require_functionReferenceData = __commonJS({
  "node_modules/jira.js/out/version2/models/functionReferenceData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/globalScope.js
var require_globalScope = __commonJS({
  "node_modules/jira.js/out/version2/models/globalScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/group.js
var require_group2 = __commonJS({
  "node_modules/jira.js/out/version2/models/group.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/groupDetails.js
var require_groupDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/groupDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/groupLabel.js
var require_groupLabel = __commonJS({
  "node_modules/jira.js/out/version2/models/groupLabel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/groupName.js
var require_groupName = __commonJS({
  "node_modules/jira.js/out/version2/models/groupName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/hierarchy.js
var require_hierarchy = __commonJS({
  "node_modules/jira.js/out/version2/models/hierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/hierarchyLevel.js
var require_hierarchyLevel = __commonJS({
  "node_modules/jira.js/out/version2/models/hierarchyLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/historyMetadata.js
var require_historyMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/historyMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/historyMetadataParticipant.js
var require_historyMetadataParticipant = __commonJS({
  "node_modules/jira.js/out/version2/models/historyMetadataParticipant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/icon.js
var require_icon = __commonJS({
  "node_modules/jira.js/out/version2/models/icon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/id.js
var require_id = __commonJS({
  "node_modules/jira.js/out/version2/models/id.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/idOrKey.js
var require_idOrKey = __commonJS({
  "node_modules/jira.js/out/version2/models/idOrKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/includedFields.js
var require_includedFields = __commonJS({
  "node_modules/jira.js/out/version2/models/includedFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issue.js
var require_issue3 = __commonJS({
  "node_modules/jira.js/out/version2/models/issue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueArchivalSync.js
var require_issueArchivalSync = __commonJS({
  "node_modules/jira.js/out/version2/models/issueArchivalSync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueChangelogIds.js
var require_issueChangelogIds = __commonJS({
  "node_modules/jira.js/out/version2/models/issueChangelogIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueCommentListRequest.js
var require_issueCommentListRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/issueCommentListRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueCreateMetadata.js
var require_issueCreateMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/issueCreateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueEntityProperties.js
var require_issueEntityProperties = __commonJS({
  "node_modules/jira.js/out/version2/models/issueEntityProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueEntityPropertiesForMultiUpdate.js
var require_issueEntityPropertiesForMultiUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/issueEntityPropertiesForMultiUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueEvent.js
var require_issueEvent = __commonJS({
  "node_modules/jira.js/out/version2/models/issueEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueFieldOption.js
var require_issueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/models/issueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueFieldOptionConfiguration.js
var require_issueFieldOptionConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/issueFieldOptionConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueFieldOptionCreate.js
var require_issueFieldOptionCreate = __commonJS({
  "node_modules/jira.js/out/version2/models/issueFieldOptionCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueFieldOptionScope.js
var require_issueFieldOptionScope = __commonJS({
  "node_modules/jira.js/out/version2/models/issueFieldOptionScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueFilterForBulkPropertyDelete.js
var require_issueFilterForBulkPropertyDelete = __commonJS({
  "node_modules/jira.js/out/version2/models/issueFilterForBulkPropertyDelete.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueFilterForBulkPropertySet.js
var require_issueFilterForBulkPropertySet = __commonJS({
  "node_modules/jira.js/out/version2/models/issueFilterForBulkPropertySet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueLink.js
var require_issueLink = __commonJS({
  "node_modules/jira.js/out/version2/models/issueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueLinkType.js
var require_issueLinkType = __commonJS({
  "node_modules/jira.js/out/version2/models/issueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueLinkTypes.js
var require_issueLinkTypes2 = __commonJS({
  "node_modules/jira.js/out/version2/models/issueLinkTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueList.js
var require_issueList = __commonJS({
  "node_modules/jira.js/out/version2/models/issueList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueMatches.js
var require_issueMatches = __commonJS({
  "node_modules/jira.js/out/version2/models/issueMatches.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueMatchesForJQL.js
var require_issueMatchesForJQL = __commonJS({
  "node_modules/jira.js/out/version2/models/issueMatchesForJQL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issuePickerSuggestions.js
var require_issuePickerSuggestions = __commonJS({
  "node_modules/jira.js/out/version2/models/issuePickerSuggestions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issuePickerSuggestionsIssueType.js
var require_issuePickerSuggestionsIssueType = __commonJS({
  "node_modules/jira.js/out/version2/models/issuePickerSuggestionsIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issuesAndJQLQueries.js
var require_issuesAndJQLQueries = __commonJS({
  "node_modules/jira.js/out/version2/models/issuesAndJQLQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueSecurityLevelMember.js
var require_issueSecurityLevelMember = __commonJS({
  "node_modules/jira.js/out/version2/models/issueSecurityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueSecuritySchemeToProjectMapping.js
var require_issueSecuritySchemeToProjectMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/issueSecuritySchemeToProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issuesJqlMetaData.js
var require_issuesJqlMetaData = __commonJS({
  "node_modules/jira.js/out/version2/models/issuesJqlMetaData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issuesMeta.js
var require_issuesMeta = __commonJS({
  "node_modules/jira.js/out/version2/models/issuesMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issuesUpdate.js
var require_issuesUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/issuesUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTransition.js
var require_issueTransition2 = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeCreate.js
var require_issueTypeCreate = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeDetails.js
var require_issueTypeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeIds.js
var require_issueTypeIds = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeIdsToRemove.js
var require_issueTypeIdsToRemove = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeIdsToRemove.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeInfo.js
var require_issueTypeInfo = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeIssueCreateMetadata.js
var require_issueTypeIssueCreateMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeIssueCreateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScheme.js
var require_issueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeSchemeDetails.js
var require_issueTypeSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeSchemeID.js
var require_issueTypeSchemeID = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeSchemeID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeSchemeMapping.js
var require_issueTypeSchemeMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeSchemeProjectAssociation.js
var require_issueTypeSchemeProjectAssociation = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeSchemeProjects.js
var require_issueTypeSchemeProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeSchemeUpdateDetails.js
var require_issueTypeSchemeUpdateDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeSchemeUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenScheme.js
var require_issueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeDetails.js
var require_issueTypeScreenSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeId.js
var require_issueTypeScreenSchemeId = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeItem.js
var require_issueTypeScreenSchemeItem = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeMapping.js
var require_issueTypeScreenSchemeMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeMappingDetails.js
var require_issueTypeScreenSchemeMappingDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeMappingDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeProjectAssociation.js
var require_issueTypeScreenSchemeProjectAssociation = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemesProjects.js
var require_issueTypeScreenSchemesProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemesProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeScreenSchemeUpdateDetails.js
var require_issueTypeScreenSchemeUpdateDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeScreenSchemeUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypesWorkflowMapping.js
var require_issueTypesWorkflowMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypesWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeToContextMapping.js
var require_issueTypeToContextMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeToContextMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeUpdate.js
var require_issueTypeUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeWithStatus.js
var require_issueTypeWithStatus = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeWithStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueTypeWorkflowMapping.js
var require_issueTypeWorkflowMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/issueTypeWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueUpdateDetails.js
var require_issueUpdateDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/issueUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/issueUpdateMetadata.js
var require_issueUpdateMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/issueUpdateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jexpIssues.js
var require_jexpIssues = __commonJS({
  "node_modules/jira.js/out/version2/models/jexpIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jexpJqlIssues.js
var require_jexpJqlIssues = __commonJS({
  "node_modules/jira.js/out/version2/models/jexpJqlIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionAnalysis.js
var require_jiraExpressionAnalysis = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionComplexity.js
var require_jiraExpressionComplexity = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionComplexity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionEvalContext.js
var require_jiraExpressionEvalContext = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionEvalContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionEvalRequest.js
var require_jiraExpressionEvalRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionEvalRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionEvaluationMetaData.js
var require_jiraExpressionEvaluationMetaData = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionEvaluationMetaData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionForAnalysis.js
var require_jiraExpressionForAnalysis = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionForAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionResult.js
var require_jiraExpressionResult = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionsAnalysis.js
var require_jiraExpressionsAnalysis = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionsAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionsComplexity.js
var require_jiraExpressionsComplexity = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionsComplexity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionsComplexityValue.js
var require_jiraExpressionsComplexityValue = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionsComplexityValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraExpressionValidationError.js
var require_jiraExpressionValidationError = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraExpressionValidationError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraStatus.js
var require_jiraStatus = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraWorkflow.js
var require_jiraWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jiraWorkflowStatus.js
var require_jiraWorkflowStatus = __commonJS({
  "node_modules/jira.js/out/version2/models/jiraWorkflowStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlFunctionPrecomputation.js
var require_jqlFunctionPrecomputation = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlFunctionPrecomputation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlFunctionPrecomputationUpdate.js
var require_jqlFunctionPrecomputationUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlFunctionPrecomputationUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlFunctionPrecomputationUpdateRequest.js
var require_jqlFunctionPrecomputationUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlFunctionPrecomputationUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jQLPersonalDataMigrationRequest.js
var require_jQLPersonalDataMigrationRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/jQLPersonalDataMigrationRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueriesToParse.js
var require_jqlQueriesToParse = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueriesToParse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueriesToSanitize.js
var require_jqlQueriesToSanitize = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueriesToSanitize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQuery.js
var require_jqlQuery = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueryClause.js
var require_jqlQueryClause = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueryClause.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueryField.js
var require_jqlQueryField = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueryField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueryFieldEntityProperty.js
var require_jqlQueryFieldEntityProperty = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueryFieldEntityProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueryOrderByClause.js
var require_jqlQueryOrderByClause = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueryOrderByClause.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueryOrderByClauseElement.js
var require_jqlQueryOrderByClauseElement = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueryOrderByClauseElement.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jqlQueryToSanitize.js
var require_jqlQueryToSanitize = __commonJS({
  "node_modules/jira.js/out/version2/models/jqlQueryToSanitize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jQLQueryWithUnknownUsers.js
var require_jQLQueryWithUnknownUsers = __commonJS({
  "node_modules/jira.js/out/version2/models/jQLQueryWithUnknownUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jQLReferenceData.js
var require_jQLReferenceData = __commonJS({
  "node_modules/jira.js/out/version2/models/jQLReferenceData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/jsonType.js
var require_jsonType2 = __commonJS({
  "node_modules/jira.js/out/version2/models/jsonType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/license.js
var require_license = __commonJS({
  "node_modules/jira.js/out/version2/models/license.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/licensedApplication.js
var require_licensedApplication = __commonJS({
  "node_modules/jira.js/out/version2/models/licensedApplication.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/licenseMetric.js
var require_licenseMetric = __commonJS({
  "node_modules/jira.js/out/version2/models/licenseMetric.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/linkedIssue.js
var require_linkedIssue = __commonJS({
  "node_modules/jira.js/out/version2/models/linkedIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/linkGroup.js
var require_linkGroup2 = __commonJS({
  "node_modules/jira.js/out/version2/models/linkGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/linkIssueRequestJson.js
var require_linkIssueRequestJson = __commonJS({
  "node_modules/jira.js/out/version2/models/linkIssueRequestJson.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/listWrapperCallbackApplicationRole.js
var require_listWrapperCallbackApplicationRole = __commonJS({
  "node_modules/jira.js/out/version2/models/listWrapperCallbackApplicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/listWrapperCallbackGroupName.js
var require_listWrapperCallbackGroupName = __commonJS({
  "node_modules/jira.js/out/version2/models/listWrapperCallbackGroupName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/locale.js
var require_locale = __commonJS({
  "node_modules/jira.js/out/version2/models/locale.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/moveField.js
var require_moveField = __commonJS({
  "node_modules/jira.js/out/version2/models/moveField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/multiIssueEntityProperties.js
var require_multiIssueEntityProperties = __commonJS({
  "node_modules/jira.js/out/version2/models/multiIssueEntityProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/multipleCustomFieldValuesUpdate.js
var require_multipleCustomFieldValuesUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/multipleCustomFieldValuesUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/multipleCustomFieldValuesUpdateDetails.js
var require_multipleCustomFieldValuesUpdateDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/multipleCustomFieldValuesUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/nestedResponse.js
var require_nestedResponse = __commonJS({
  "node_modules/jira.js/out/version2/models/nestedResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/newUserDetails.js
var require_newUserDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/newUserDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notification.js
var require_notification = __commonJS({
  "node_modules/jira.js/out/version2/models/notification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationEvent.js
var require_notificationEvent = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationRecipients.js
var require_notificationRecipients = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationRecipients.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationRecipientsRestrictions.js
var require_notificationRecipientsRestrictions = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationRecipientsRestrictions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationScheme.js
var require_notificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeAndProjectMapping.js
var require_notificationSchemeAndProjectMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeAndProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeAndProjectMappingPage.js
var require_notificationSchemeAndProjectMappingPage = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeAndProjectMappingPage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeEvent.js
var require_notificationSchemeEvent = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeEventDetails.js
var require_notificationSchemeEventDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeEventDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeEventTypeId.js
var require_notificationSchemeEventTypeId = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeEventTypeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeId.js
var require_notificationSchemeId = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/notificationSchemeNotificationDetails.js
var require_notificationSchemeNotificationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/notificationSchemeNotificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/oldToNewSecurityLevelMappings.js
var require_oldToNewSecurityLevelMappings = __commonJS({
  "node_modules/jira.js/out/version2/models/oldToNewSecurityLevelMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/operationMessage.js
var require_operationMessage = __commonJS({
  "node_modules/jira.js/out/version2/models/operationMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/operations.js
var require_operations3 = __commonJS({
  "node_modules/jira.js/out/version2/models/operations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/orderOfCustomFieldOptions.js
var require_orderOfCustomFieldOptions = __commonJS({
  "node_modules/jira.js/out/version2/models/orderOfCustomFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/orderOfIssueTypes.js
var require_orderOfIssueTypes = __commonJS({
  "node_modules/jira.js/out/version2/models/orderOfIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageChangelog.js
var require_pageChangelog = __commonJS({
  "node_modules/jira.js/out/version2/models/pageChangelog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageComment.js
var require_pageComment = __commonJS({
  "node_modules/jira.js/out/version2/models/pageComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageComponentWithIssueCount.js
var require_pageComponentWithIssueCount = __commonJS({
  "node_modules/jira.js/out/version2/models/pageComponentWithIssueCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageContextForProjectAndIssueType.js
var require_pageContextForProjectAndIssueType = __commonJS({
  "node_modules/jira.js/out/version2/models/pageContextForProjectAndIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageContextualConfiguration.js
var require_pageContextualConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/pageContextualConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageCustomFieldContext.js
var require_pageCustomFieldContext = __commonJS({
  "node_modules/jira.js/out/version2/models/pageCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageCustomFieldContextDefaultValue.js
var require_pageCustomFieldContextDefaultValue = __commonJS({
  "node_modules/jira.js/out/version2/models/pageCustomFieldContextDefaultValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageCustomFieldContextOption.js
var require_pageCustomFieldContextOption = __commonJS({
  "node_modules/jira.js/out/version2/models/pageCustomFieldContextOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageCustomFieldContextProjectMapping.js
var require_pageCustomFieldContextProjectMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/pageCustomFieldContextProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageDashboard.js
var require_pageDashboard = __commonJS({
  "node_modules/jira.js/out/version2/models/pageDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pagedListUserDetailsApplicationUser.js
var require_pagedListUserDetailsApplicationUser = __commonJS({
  "node_modules/jira.js/out/version2/models/pagedListUserDetailsApplicationUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageField.js
var require_pageField = __commonJS({
  "node_modules/jira.js/out/version2/models/pageField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageFieldConfiguration.js
var require_pageFieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/pageFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageFieldConfigurationIssueTypeItem.js
var require_pageFieldConfigurationIssueTypeItem = __commonJS({
  "node_modules/jira.js/out/version2/models/pageFieldConfigurationIssueTypeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageFieldConfigurationItem.js
var require_pageFieldConfigurationItem = __commonJS({
  "node_modules/jira.js/out/version2/models/pageFieldConfigurationItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageFieldConfigurationScheme.js
var require_pageFieldConfigurationScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/pageFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageFieldConfigurationSchemeProjects.js
var require_pageFieldConfigurationSchemeProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/pageFieldConfigurationSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageFilterDetails.js
var require_pageFilterDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/pageFilterDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageGroupDetails.js
var require_pageGroupDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/pageGroupDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueFieldOption.js
var require_pageIssueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueSecurityLevelMember.js
var require_pageIssueSecurityLevelMember = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueSecurityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueSecuritySchemeToProjectMapping.js
var require_pageIssueSecuritySchemeToProjectMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueSecuritySchemeToProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeScheme.js
var require_pageIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeSchemeMapping.js
var require_pageIssueTypeSchemeMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeSchemeProjects.js
var require_pageIssueTypeSchemeProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeScreenScheme.js
var require_pageIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeScreenSchemeItem.js
var require_pageIssueTypeScreenSchemeItem = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeScreenSchemeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeScreenSchemesProjects.js
var require_pageIssueTypeScreenSchemesProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeScreenSchemesProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageIssueTypeToContextMapping.js
var require_pageIssueTypeToContextMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/pageIssueTypeToContextMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageJqlFunctionPrecomputation.js
var require_pageJqlFunctionPrecomputation = __commonJS({
  "node_modules/jira.js/out/version2/models/pageJqlFunctionPrecomputation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageNotificationScheme.js
var require_pageNotificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/pageNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageOfChangelogs.js
var require_pageOfChangelogs = __commonJS({
  "node_modules/jira.js/out/version2/models/pageOfChangelogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageOfComments.js
var require_pageOfComments = __commonJS({
  "node_modules/jira.js/out/version2/models/pageOfComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageOfDashboards.js
var require_pageOfDashboards = __commonJS({
  "node_modules/jira.js/out/version2/models/pageOfDashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageOfStatuses.js
var require_pageOfStatuses = __commonJS({
  "node_modules/jira.js/out/version2/models/pageOfStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageOfWorklogs.js
var require_pageOfWorklogs = __commonJS({
  "node_modules/jira.js/out/version2/models/pageOfWorklogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pagePriority.js
var require_pagePriority = __commonJS({
  "node_modules/jira.js/out/version2/models/pagePriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageProject.js
var require_pageProject = __commonJS({
  "node_modules/jira.js/out/version2/models/pageProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageProjectDetails.js
var require_pageProjectDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/pageProjectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageResolution.js
var require_pageResolution = __commonJS({
  "node_modules/jira.js/out/version2/models/pageResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageScreen.js
var require_pageScreen = __commonJS({
  "node_modules/jira.js/out/version2/models/pageScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageScreenScheme.js
var require_pageScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/pageScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageScreenWithTab.js
var require_pageScreenWithTab = __commonJS({
  "node_modules/jira.js/out/version2/models/pageScreenWithTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageSecurityLevel.js
var require_pageSecurityLevel = __commonJS({
  "node_modules/jira.js/out/version2/models/pageSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageSecurityLevelMember.js
var require_pageSecurityLevelMember = __commonJS({
  "node_modules/jira.js/out/version2/models/pageSecurityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageSecuritySchemeWithProjects.js
var require_pageSecuritySchemeWithProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/pageSecuritySchemeWithProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageString.js
var require_pageString = __commonJS({
  "node_modules/jira.js/out/version2/models/pageString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageUiModificationDetails.js
var require_pageUiModificationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/pageUiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageUser.js
var require_pageUser = __commonJS({
  "node_modules/jira.js/out/version2/models/pageUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageUserDetails.js
var require_pageUserDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/pageUserDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageUserKey.js
var require_pageUserKey = __commonJS({
  "node_modules/jira.js/out/version2/models/pageUserKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageVersion.js
var require_pageVersion = __commonJS({
  "node_modules/jira.js/out/version2/models/pageVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageWebhook.js
var require_pageWebhook = __commonJS({
  "node_modules/jira.js/out/version2/models/pageWebhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageWorkflow.js
var require_pageWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/models/pageWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageWorkflowScheme.js
var require_pageWorkflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/pageWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/pageWorkflowTransitionRules.js
var require_pageWorkflowTransitionRules = __commonJS({
  "node_modules/jira.js/out/version2/models/pageWorkflowTransitionRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/parsedJqlQueries.js
var require_parsedJqlQueries = __commonJS({
  "node_modules/jira.js/out/version2/models/parsedJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/parsedJqlQuery.js
var require_parsedJqlQuery = __commonJS({
  "node_modules/jira.js/out/version2/models/parsedJqlQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionDetails.js
var require_permissionDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionGrant.js
var require_permissionGrant = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionGrant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionGrants.js
var require_permissionGrants = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionHolder.js
var require_permissionHolder = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionHolder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissions.js
var require_permissions2 = __commonJS({
  "node_modules/jira.js/out/version2/models/permissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionScheme.js
var require_permissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionSchemes.js
var require_permissionSchemes2 = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permissionsKeys.js
var require_permissionsKeys = __commonJS({
  "node_modules/jira.js/out/version2/models/permissionsKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/permittedProjects.js
var require_permittedProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/permittedProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/priority.js
var require_priority = __commonJS({
  "node_modules/jira.js/out/version2/models/priority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/priorityId.js
var require_priorityId = __commonJS({
  "node_modules/jira.js/out/version2/models/priorityId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/project.js
var require_project2 = __commonJS({
  "node_modules/jira.js/out/version2/models/project.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectAndIssueTypePair.js
var require_projectAndIssueTypePair = __commonJS({
  "node_modules/jira.js/out/version2/models/projectAndIssueTypePair.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectAvatars.js
var require_projectAvatars2 = __commonJS({
  "node_modules/jira.js/out/version2/models/projectAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectCategory.js
var require_projectCategory = __commonJS({
  "node_modules/jira.js/out/version2/models/projectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectComponent.js
var require_projectComponent = __commonJS({
  "node_modules/jira.js/out/version2/models/projectComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectDetails.js
var require_projectDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/projectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectEmailAddress.js
var require_projectEmailAddress = __commonJS({
  "node_modules/jira.js/out/version2/models/projectEmailAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectFeature.js
var require_projectFeature = __commonJS({
  "node_modules/jira.js/out/version2/models/projectFeature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectFeatureToggleRequest.js
var require_projectFeatureToggleRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/projectFeatureToggleRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectId.js
var require_projectId = __commonJS({
  "node_modules/jira.js/out/version2/models/projectId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIdentifier.js
var require_projectIdentifier = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIdentifier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIdentifiers.js
var require_projectIdentifiers = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIdentifiers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIds.js
var require_projectIds = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectInsight.js
var require_projectInsight = __commonJS({
  "node_modules/jira.js/out/version2/models/projectInsight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueCreateMetadata.js
var require_projectIssueCreateMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueCreateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueSecurityLevels.js
var require_projectIssueSecurityLevels = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueSecurityLevels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueTypeHierarchy.js
var require_projectIssueTypeHierarchy = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueTypeHierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueTypeMapping.js
var require_projectIssueTypeMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueTypeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueTypeMappings.js
var require_projectIssueTypeMappings = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueTypeMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueTypes.js
var require_projectIssueTypes = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectIssueTypesHierarchyLevel.js
var require_projectIssueTypesHierarchyLevel = __commonJS({
  "node_modules/jira.js/out/version2/models/projectIssueTypesHierarchyLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectLandingPageInfo.js
var require_projectLandingPageInfo = __commonJS({
  "node_modules/jira.js/out/version2/models/projectLandingPageInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectPermissions.js
var require_projectPermissions = __commonJS({
  "node_modules/jira.js/out/version2/models/projectPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectRole.js
var require_projectRole = __commonJS({
  "node_modules/jira.js/out/version2/models/projectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectRoleActorsUpdate.js
var require_projectRoleActorsUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/projectRoleActorsUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectRoleDetails.js
var require_projectRoleDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/projectRoleDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectRoleGroup.js
var require_projectRoleGroup = __commonJS({
  "node_modules/jira.js/out/version2/models/projectRoleGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectRoleUser.js
var require_projectRoleUser = __commonJS({
  "node_modules/jira.js/out/version2/models/projectRoleUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectScope.js
var require_projectScope = __commonJS({
  "node_modules/jira.js/out/version2/models/projectScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/projectType.js
var require_projectType = __commonJS({
  "node_modules/jira.js/out/version2/models/projectType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/propertyKey.js
var require_propertyKey = __commonJS({
  "node_modules/jira.js/out/version2/models/propertyKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/propertyKeys.js
var require_propertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/models/propertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/publishedWorkflowId.js
var require_publishedWorkflowId = __commonJS({
  "node_modules/jira.js/out/version2/models/publishedWorkflowId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/registeredWebhook.js
var require_registeredWebhook = __commonJS({
  "node_modules/jira.js/out/version2/models/registeredWebhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/remoteIssueLink.js
var require_remoteIssueLink = __commonJS({
  "node_modules/jira.js/out/version2/models/remoteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/remoteIssueLinkIdentifies.js
var require_remoteIssueLinkIdentifies = __commonJS({
  "node_modules/jira.js/out/version2/models/remoteIssueLinkIdentifies.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/remoteIssueLinkRequest.js
var require_remoteIssueLinkRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/remoteIssueLinkRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/remoteObject.js
var require_remoteObject = __commonJS({
  "node_modules/jira.js/out/version2/models/remoteObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/reorderIssuePriorities.js
var require_reorderIssuePriorities = __commonJS({
  "node_modules/jira.js/out/version2/models/reorderIssuePriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/reorderIssueResolutionsRequest.js
var require_reorderIssueResolutionsRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/reorderIssueResolutionsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/resolution.js
var require_resolution = __commonJS({
  "node_modules/jira.js/out/version2/models/resolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/resolutionId.js
var require_resolutionId = __commonJS({
  "node_modules/jira.js/out/version2/models/resolutionId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/restrictedPermission.js
var require_restrictedPermission = __commonJS({
  "node_modules/jira.js/out/version2/models/restrictedPermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/richText.js
var require_richText = __commonJS({
  "node_modules/jira.js/out/version2/models/richText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/roleActor.js
var require_roleActor = __commonJS({
  "node_modules/jira.js/out/version2/models/roleActor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/ruleConfiguration.js
var require_ruleConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/ruleConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/sanitizedJqlQueries.js
var require_sanitizedJqlQueries = __commonJS({
  "node_modules/jira.js/out/version2/models/sanitizedJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/sanitizedJqlQuery.js
var require_sanitizedJqlQuery = __commonJS({
  "node_modules/jira.js/out/version2/models/sanitizedJqlQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/scope.js
var require_scope2 = __commonJS({
  "node_modules/jira.js/out/version2/models/scope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screen.js
var require_screen = __commonJS({
  "node_modules/jira.js/out/version2/models/screen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenableField.js
var require_screenableField = __commonJS({
  "node_modules/jira.js/out/version2/models/screenableField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenableTab.js
var require_screenableTab = __commonJS({
  "node_modules/jira.js/out/version2/models/screenableTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenDetails.js
var require_screenDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/screenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenScheme.js
var require_screenScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/screenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenSchemeDetails.js
var require_screenSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/screenSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenSchemeId.js
var require_screenSchemeId = __commonJS({
  "node_modules/jira.js/out/version2/models/screenSchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenTypes.js
var require_screenTypes = __commonJS({
  "node_modules/jira.js/out/version2/models/screenTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/screenWithTab.js
var require_screenWithTab = __commonJS({
  "node_modules/jira.js/out/version2/models/screenWithTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/searchAutoComplete.js
var require_searchAutoComplete = __commonJS({
  "node_modules/jira.js/out/version2/models/searchAutoComplete.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/searchRequest.js
var require_searchRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/searchRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/searchResults.js
var require_searchResults2 = __commonJS({
  "node_modules/jira.js/out/version2/models/searchResults.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securityLevel.js
var require_securityLevel = __commonJS({
  "node_modules/jira.js/out/version2/models/securityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securityLevelMember.js
var require_securityLevelMember = __commonJS({
  "node_modules/jira.js/out/version2/models/securityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securityScheme.js
var require_securityScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/securityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securitySchemeId.js
var require_securitySchemeId = __commonJS({
  "node_modules/jira.js/out/version2/models/securitySchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securitySchemeLevel.js
var require_securitySchemeLevel = __commonJS({
  "node_modules/jira.js/out/version2/models/securitySchemeLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securitySchemeLevelMember.js
var require_securitySchemeLevelMember = __commonJS({
  "node_modules/jira.js/out/version2/models/securitySchemeLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securitySchemeMembersRequest.js
var require_securitySchemeMembersRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/securitySchemeMembersRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securitySchemes.js
var require_securitySchemes = __commonJS({
  "node_modules/jira.js/out/version2/models/securitySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/securitySchemeWithProjects.js
var require_securitySchemeWithProjects = __commonJS({
  "node_modules/jira.js/out/version2/models/securitySchemeWithProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/serverInformation.js
var require_serverInformation = __commonJS({
  "node_modules/jira.js/out/version2/models/serverInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/setDefaultLevelsRequest.js
var require_setDefaultLevelsRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/setDefaultLevelsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/setDefaultPriorityRequest.js
var require_setDefaultPriorityRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/setDefaultPriorityRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/setDefaultResolutionRequest.js
var require_setDefaultResolutionRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/setDefaultResolutionRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/sharePermission.js
var require_sharePermission = __commonJS({
  "node_modules/jira.js/out/version2/models/sharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/sharePermissionInput.js
var require_sharePermissionInput = __commonJS({
  "node_modules/jira.js/out/version2/models/sharePermissionInput.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/simpleApplicationProperty.js
var require_simpleApplicationProperty = __commonJS({
  "node_modules/jira.js/out/version2/models/simpleApplicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/simpleLink.js
var require_simpleLink = __commonJS({
  "node_modules/jira.js/out/version2/models/simpleLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/simpleListWrapperApplicationRole.js
var require_simpleListWrapperApplicationRole = __commonJS({
  "node_modules/jira.js/out/version2/models/simpleListWrapperApplicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/simpleListWrapperGroupName.js
var require_simpleListWrapperGroupName = __commonJS({
  "node_modules/jira.js/out/version2/models/simpleListWrapperGroupName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/status.js
var require_status3 = __commonJS({
  "node_modules/jira.js/out/version2/models/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusCategory.js
var require_statusCategory2 = __commonJS({
  "node_modules/jira.js/out/version2/models/statusCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusCreate.js
var require_statusCreate = __commonJS({
  "node_modules/jira.js/out/version2/models/statusCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusCreateRequest.js
var require_statusCreateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/statusCreateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusDetails.js
var require_statusDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/statusDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusLayoutUpdate.js
var require_statusLayoutUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/statusLayoutUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusMapping.js
var require_statusMapping = __commonJS({
  "node_modules/jira.js/out/version2/models/statusMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusMappingDTO.js
var require_statusMappingDTO = __commonJS({
  "node_modules/jira.js/out/version2/models/statusMappingDTO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusMigration.js
var require_statusMigration = __commonJS({
  "node_modules/jira.js/out/version2/models/statusMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusReferenceAndPort.js
var require_statusReferenceAndPort = __commonJS({
  "node_modules/jira.js/out/version2/models/statusReferenceAndPort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusScope.js
var require_statusScope = __commonJS({
  "node_modules/jira.js/out/version2/models/statusScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusUpdate.js
var require_statusUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/statusUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/statusUpdateRequest.js
var require_statusUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/statusUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/suggestedIssue.js
var require_suggestedIssue = __commonJS({
  "node_modules/jira.js/out/version2/models/suggestedIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/systemAvatars.js
var require_systemAvatars = __commonJS({
  "node_modules/jira.js/out/version2/models/systemAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/tabMetadata.js
var require_tabMetadata = __commonJS({
  "node_modules/jira.js/out/version2/models/tabMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/taskProgressObject.js
var require_taskProgressObject = __commonJS({
  "node_modules/jira.js/out/version2/models/taskProgressObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/timeTrackingConfiguration.js
var require_timeTrackingConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/timeTrackingConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/timeTrackingDetails.js
var require_timeTrackingDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/timeTrackingDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/timeTrackingProvider.js
var require_timeTrackingProvider = __commonJS({
  "node_modules/jira.js/out/version2/models/timeTrackingProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/transition.js
var require_transition = __commonJS({
  "node_modules/jira.js/out/version2/models/transition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/transitions.js
var require_transitions = __commonJS({
  "node_modules/jira.js/out/version2/models/transitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/transitionScreenDetails.js
var require_transitionScreenDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/transitionScreenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/transitionUpdateDTO.js
var require_transitionUpdateDTO = __commonJS({
  "node_modules/jira.js/out/version2/models/transitionUpdateDTO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/uiModificationContextDetails.js
var require_uiModificationContextDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/uiModificationContextDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/uiModificationDetails.js
var require_uiModificationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/uiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/uiModificationIdentifiers.js
var require_uiModificationIdentifiers = __commonJS({
  "node_modules/jira.js/out/version2/models/uiModificationIdentifiers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/unrestrictedUserEmail.js
var require_unrestrictedUserEmail = __commonJS({
  "node_modules/jira.js/out/version2/models/unrestrictedUserEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateCustomFieldDetails.js
var require_updateCustomFieldDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateCustomFieldDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updatedProjectCategory.js
var require_updatedProjectCategory = __commonJS({
  "node_modules/jira.js/out/version2/models/updatedProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateFieldConfigurationSchemeDetails.js
var require_updateFieldConfigurationSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateFieldConfigurationSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateIssueSecurityLevelDetails.js
var require_updateIssueSecurityLevelDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateIssueSecurityLevelDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateIssueSecuritySchemeRequest.js
var require_updateIssueSecuritySchemeRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/updateIssueSecuritySchemeRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateNotificationSchemeDetails.js
var require_updateNotificationSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateNotificationSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updatePriorityDetails.js
var require_updatePriorityDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updatePriorityDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateProjectDetails.js
var require_updateProjectDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateProjectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateResolutionDetails.js
var require_updateResolutionDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateResolutionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateScreenDetails.js
var require_updateScreenDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateScreenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateScreenSchemeDetails.js
var require_updateScreenSchemeDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateScreenSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateScreenTypes.js
var require_updateScreenTypes = __commonJS({
  "node_modules/jira.js/out/version2/models/updateScreenTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateUiModificationDetails.js
var require_updateUiModificationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/updateUiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/updateUserToGroup.js
var require_updateUserToGroup = __commonJS({
  "node_modules/jira.js/out/version2/models/updateUserToGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/user.js
var require_user2 = __commonJS({
  "node_modules/jira.js/out/version2/models/user.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/userAvatarUrls.js
var require_userAvatarUrls = __commonJS({
  "node_modules/jira.js/out/version2/models/userAvatarUrls.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/userDetails.js
var require_userDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/userDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/userKey.js
var require_userKey = __commonJS({
  "node_modules/jira.js/out/version2/models/userKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/userList.js
var require_userList = __commonJS({
  "node_modules/jira.js/out/version2/models/userList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/userMigration.js
var require_userMigration = __commonJS({
  "node_modules/jira.js/out/version2/models/userMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/userPickerUser.js
var require_userPickerUser = __commonJS({
  "node_modules/jira.js/out/version2/models/userPickerUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/validationOptionsForCreate.js
var require_validationOptionsForCreate = __commonJS({
  "node_modules/jira.js/out/version2/models/validationOptionsForCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/validationOptionsForUpdate.js
var require_validationOptionsForUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/validationOptionsForUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/version.js
var require_version2 = __commonJS({
  "node_modules/jira.js/out/version2/models/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/versionIssueCounts.js
var require_versionIssueCounts = __commonJS({
  "node_modules/jira.js/out/version2/models/versionIssueCounts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/versionIssuesStatus.js
var require_versionIssuesStatus = __commonJS({
  "node_modules/jira.js/out/version2/models/versionIssuesStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/versionMove.js
var require_versionMove = __commonJS({
  "node_modules/jira.js/out/version2/models/versionMove.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/versionUnresolvedIssuesCount.js
var require_versionUnresolvedIssuesCount = __commonJS({
  "node_modules/jira.js/out/version2/models/versionUnresolvedIssuesCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/versionUsageInCustomField.js
var require_versionUsageInCustomField = __commonJS({
  "node_modules/jira.js/out/version2/models/versionUsageInCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/visibility.js
var require_visibility = __commonJS({
  "node_modules/jira.js/out/version2/models/visibility.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/votes.js
var require_votes = __commonJS({
  "node_modules/jira.js/out/version2/models/votes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/warningCollection.js
var require_warningCollection = __commonJS({
  "node_modules/jira.js/out/version2/models/warningCollection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/watchers.js
var require_watchers = __commonJS({
  "node_modules/jira.js/out/version2/models/watchers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/webhook.js
var require_webhook = __commonJS({
  "node_modules/jira.js/out/version2/models/webhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/webhookDetails.js
var require_webhookDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/webhookDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/webhookRegistrationDetails.js
var require_webhookRegistrationDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/webhookRegistrationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/webhooksExpirationDate.js
var require_webhooksExpirationDate = __commonJS({
  "node_modules/jira.js/out/version2/models/webhooksExpirationDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflow.js
var require_workflow = __commonJS({
  "node_modules/jira.js/out/version2/models/workflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowCapabilities.js
var require_workflowCapabilities = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowCapabilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowCondition.js
var require_workflowCondition = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowCreate.js
var require_workflowCreate = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowCreateRequest.js
var require_workflowCreateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowCreateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowCreateResponse.js
var require_workflowCreateResponse = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowCreateResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowElementReference.js
var require_workflowElementReference = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowElementReference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowId.js
var require_workflowId = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowLayout.js
var require_workflowLayout = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowLayout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowOperations.js
var require_workflowOperations = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowOperations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowRead.js
var require_workflowRead = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowRead.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowReferenceStatus.js
var require_workflowReferenceStatus = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowReferenceStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowRuleConfiguration.js
var require_workflowRuleConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowRuleConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowRules.js
var require_workflowRules = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowRulesSearch.js
var require_workflowRulesSearch = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowRulesSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowRulesSearchDetails.js
var require_workflowRulesSearchDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowRulesSearchDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowScheme.js
var require_workflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowSchemeAssociations.js
var require_workflowSchemeAssociations = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowSchemeAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowSchemeIdName.js
var require_workflowSchemeIdName = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowSchemeIdName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowSchemeProjectAssociation.js
var require_workflowSchemeProjectAssociation = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowScope.js
var require_workflowScope = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowStatus.js
var require_workflowStatus = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowStatusAndPort.js
var require_workflowStatusAndPort = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowStatusAndPort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowStatusLayout.js
var require_workflowStatusLayout = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowStatusLayout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowStatusProperties.js
var require_workflowStatusProperties = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowStatusProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowStatusUpdate.js
var require_workflowStatusUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowStatusUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowsWithTransitionRulesDetails.js
var require_workflowsWithTransitionRulesDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowsWithTransitionRulesDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransition.js
var require_workflowTransition = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionProperty.js
var require_workflowTransitionProperty = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionRule.js
var require_workflowTransitionRule = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionRules.js
var require_workflowTransitionRules2 = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionRulesDetails.js
var require_workflowTransitionRulesDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionRulesDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionRulesUpdate.js
var require_workflowTransitionRulesUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionRulesUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionRulesUpdateErrorDetails.js
var require_workflowTransitionRulesUpdateErrorDetails = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionRulesUpdateErrorDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitionRulesUpdateErrors.js
var require_workflowTransitionRulesUpdateErrors = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitionRulesUpdateErrors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTransitions.js
var require_workflowTransitions = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTransitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowTrigger.js
var require_workflowTrigger = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowTrigger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowUpdate.js
var require_workflowUpdate = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowUpdateRequest.js
var require_workflowUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowUpdateResponse.js
var require_workflowUpdateResponse = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowUpdateResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowValidationError.js
var require_workflowValidationError = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowValidationError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/workflowValidationErrorList.js
var require_workflowValidationErrorList = __commonJS({
  "node_modules/jira.js/out/version2/models/workflowValidationErrorList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/worklog.js
var require_worklog = __commonJS({
  "node_modules/jira.js/out/version2/models/worklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/worklogIdsRequest.js
var require_worklogIdsRequest = __commonJS({
  "node_modules/jira.js/out/version2/models/worklogIdsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/models/index.js
var require_models2 = __commonJS({
  "node_modules/jira.js/out/version2/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_actorInput(), exports2);
    tslib_1.__exportStar(require_actorsMap(), exports2);
    tslib_1.__exportStar(require_addField(), exports2);
    tslib_1.__exportStar(require_addGroup(), exports2);
    tslib_1.__exportStar(require_addSecuritySchemeLevelsRequest(), exports2);
    tslib_1.__exportStar(require_announcementBannerConfiguration(), exports2);
    tslib_1.__exportStar(require_announcementBannerConfigurationUpdate(), exports2);
    tslib_1.__exportStar(require_application(), exports2);
    tslib_1.__exportStar(require_applicationProperty(), exports2);
    tslib_1.__exportStar(require_applicationRole(), exports2);
    tslib_1.__exportStar(require_associatedItem(), exports2);
    tslib_1.__exportStar(require_associateFieldConfigurationsWithIssueTypesRequest(), exports2);
    tslib_1.__exportStar(require_attachment(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveEntry(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveImpl(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveItemReadable(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveMetadataReadable(), exports2);
    tslib_1.__exportStar(require_attachmentMetadata(), exports2);
    tslib_1.__exportStar(require_attachmentSettings(), exports2);
    tslib_1.__exportStar(require_auditRecord(), exports2);
    tslib_1.__exportStar(require_auditRecords2(), exports2);
    tslib_1.__exportStar(require_autoCompleteSuggestion(), exports2);
    tslib_1.__exportStar(require_autoCompleteSuggestions(), exports2);
    tslib_1.__exportStar(require_availableDashboardGadget(), exports2);
    tslib_1.__exportStar(require_availableDashboardGadgetsResponse(), exports2);
    tslib_1.__exportStar(require_availableWorkflowConnectRule(), exports2);
    tslib_1.__exportStar(require_availableWorkflowForgeRule(), exports2);
    tslib_1.__exportStar(require_availableWorkflowSystemRule(), exports2);
    tslib_1.__exportStar(require_availableWorkflowTriggers(), exports2);
    tslib_1.__exportStar(require_availableWorkflowTriggerTypes(), exports2);
    tslib_1.__exportStar(require_avatar(), exports2);
    tslib_1.__exportStar(require_avatars2(), exports2);
    tslib_1.__exportStar(require_avatarUrls2(), exports2);
    tslib_1.__exportStar(require_avatarWithDetails(), exports2);
    tslib_1.__exportStar(require_bulkChangeOwnerDetails(), exports2);
    tslib_1.__exportStar(require_bulkCustomFieldOptionCreateRequest(), exports2);
    tslib_1.__exportStar(require_bulkCustomFieldOptionUpdateRequest(), exports2);
    tslib_1.__exportStar(require_bulkEditShareableEntity(), exports2);
    tslib_1.__exportStar(require_bulkIssueIsWatching(), exports2);
    tslib_1.__exportStar(require_bulkIssuePropertyUpdateRequest(), exports2);
    tslib_1.__exportStar(require_bulkOperationErrorResult(), exports2);
    tslib_1.__exportStar(require_bulkPermissionGrants(), exports2);
    tslib_1.__exportStar(require_bulkPermissionsRequest(), exports2);
    tslib_1.__exportStar(require_bulkProjectPermissionGrants(), exports2);
    tslib_1.__exportStar(require_bulkProjectPermissions(), exports2);
    tslib_1.__exportStar(require_changeDetails(), exports2);
    tslib_1.__exportStar(require_changedValue(), exports2);
    tslib_1.__exportStar(require_changedWorklog(), exports2);
    tslib_1.__exportStar(require_changedWorklogs(), exports2);
    tslib_1.__exportStar(require_changelog(), exports2);
    tslib_1.__exportStar(require_columnItem(), exports2);
    tslib_1.__exportStar(require_comment(), exports2);
    tslib_1.__exportStar(require_componentIssuesCount(), exports2);
    tslib_1.__exportStar(require_componentWithIssueCount(), exports2);
    tslib_1.__exportStar(require_conditionGroupConfiguration(), exports2);
    tslib_1.__exportStar(require_conditionGroupUpdate(), exports2);
    tslib_1.__exportStar(require_configuration(), exports2);
    tslib_1.__exportStar(require_connectCustomFieldValue(), exports2);
    tslib_1.__exportStar(require_connectCustomFieldValues(), exports2);
    tslib_1.__exportStar(require_connectModule(), exports2);
    tslib_1.__exportStar(require_connectModules(), exports2);
    tslib_1.__exportStar(require_connectWorkflowTransitionRule(), exports2);
    tslib_1.__exportStar(require_containerForProjectFeatures(), exports2);
    tslib_1.__exportStar(require_containerForRegisteredWebhooks(), exports2);
    tslib_1.__exportStar(require_containerForWebhookIDs(), exports2);
    tslib_1.__exportStar(require_containerOfWorkflowSchemeAssociations(), exports2);
    tslib_1.__exportStar(require_contextForProjectAndIssueType(), exports2);
    tslib_1.__exportStar(require_contextualConfiguration(), exports2);
    tslib_1.__exportStar(require_convertedJQLQueries(), exports2);
    tslib_1.__exportStar(require_createCustomFieldContext(), exports2);
    tslib_1.__exportStar(require_createdIssue(), exports2);
    tslib_1.__exportStar(require_createdIssues(), exports2);
    tslib_1.__exportStar(require_createIssueSecuritySchemeDetails(), exports2);
    tslib_1.__exportStar(require_createNotificationSchemeDetails(), exports2);
    tslib_1.__exportStar(require_createPriorityDetails(), exports2);
    tslib_1.__exportStar(require_createProjectDetails(), exports2);
    tslib_1.__exportStar(require_createResolutionDetails(), exports2);
    tslib_1.__exportStar(require_createUiModificationDetails(), exports2);
    tslib_1.__exportStar(require_createUpdateRoleRequest(), exports2);
    tslib_1.__exportStar(require_createWorkflowCondition(), exports2);
    tslib_1.__exportStar(require_createWorkflowDetails(), exports2);
    tslib_1.__exportStar(require_createWorkflowStatusDetails(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionDetails(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionRule(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionRulesDetails(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionScreenDetails(), exports2);
    tslib_1.__exportStar(require_customContextVariable(), exports2);
    tslib_1.__exportStar(require_customFieldConfigurations(), exports2);
    tslib_1.__exportStar(require_customFieldContext(), exports2);
    tslib_1.__exportStar(require_customFieldContextDefaultValue(), exports2);
    tslib_1.__exportStar(require_customFieldContextDefaultValueUpdate(), exports2);
    tslib_1.__exportStar(require_customFieldContextOption(), exports2);
    tslib_1.__exportStar(require_customFieldContextProjectMapping(), exports2);
    tslib_1.__exportStar(require_customFieldContextUpdateDetails(), exports2);
    tslib_1.__exportStar(require_customFieldCreatedContextOptionsList(), exports2);
    tslib_1.__exportStar(require_customFieldDefinitionJson(), exports2);
    tslib_1.__exportStar(require_customFieldOption(), exports2);
    tslib_1.__exportStar(require_customFieldOptionCreate(), exports2);
    tslib_1.__exportStar(require_customFieldOptionUpdate(), exports2);
    tslib_1.__exportStar(require_customFieldReplacement(), exports2);
    tslib_1.__exportStar(require_customFieldUpdatedContextOptionsList(), exports2);
    tslib_1.__exportStar(require_customFieldValueUpdate(), exports2);
    tslib_1.__exportStar(require_customFieldValueUpdateDetails(), exports2);
    tslib_1.__exportStar(require_dashboard(), exports2);
    tslib_1.__exportStar(require_dashboardDetails(), exports2);
    tslib_1.__exportStar(require_dashboardGadget(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetPosition(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetResponse(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetSettings(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetUpdateRequest(), exports2);
    tslib_1.__exportStar(require_dashboardUser(), exports2);
    tslib_1.__exportStar(require_dateRangeFilter(), exports2);
    tslib_1.__exportStar(require_defaultLevelValue(), exports2);
    tslib_1.__exportStar(require_defaultShareScope(), exports2);
    tslib_1.__exportStar(require_defaultWorkflow(), exports2);
    tslib_1.__exportStar(require_documentVersion(), exports2);
    tslib_1.__exportStar(require_entityProperty(), exports2);
    tslib_1.__exportStar(require_entityPropertyDetails(), exports2);
    tslib_1.__exportStar(require_error(), exports2);
    tslib_1.__exportStar(require_errorCollection(), exports2);
    tslib_1.__exportStar(require_errors2(), exports2);
    tslib_1.__exportStar(require_eventNotification(), exports2);
    tslib_1.__exportStar(require_exportArchivedIssuesTaskProgress(), exports2);
    tslib_1.__exportStar(require_failedWebhook(), exports2);
    tslib_1.__exportStar(require_failedWebhooks(), exports2);
    tslib_1.__exportStar(require_field(), exports2);
    tslib_1.__exportStar(require_fieldConfiguration(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationDetails(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationIssueTypeItem(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationItem(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationItemsDetails(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationScheme(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationSchemeProjectAssociation(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationSchemeProjects(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationToIssueTypeMapping(), exports2);
    tslib_1.__exportStar(require_fieldDetails(), exports2);
    tslib_1.__exportStar(require_fieldLastUsed(), exports2);
    tslib_1.__exportStar(require_fieldMetadata(), exports2);
    tslib_1.__exportStar(require_fieldReferenceData(), exports2);
    tslib_1.__exportStar(require_fields2(), exports2);
    tslib_1.__exportStar(require_filter(), exports2);
    tslib_1.__exportStar(require_filterDetails(), exports2);
    tslib_1.__exportStar(require_filterSubscription(), exports2);
    tslib_1.__exportStar(require_filterSubscriptionsList(), exports2);
    tslib_1.__exportStar(require_fixVersion2(), exports2);
    tslib_1.__exportStar(require_foundGroup(), exports2);
    tslib_1.__exportStar(require_foundGroups(), exports2);
    tslib_1.__exportStar(require_foundUsers(), exports2);
    tslib_1.__exportStar(require_foundUsersAndGroups(), exports2);
    tslib_1.__exportStar(require_functionReferenceData(), exports2);
    tslib_1.__exportStar(require_globalScope(), exports2);
    tslib_1.__exportStar(require_group2(), exports2);
    tslib_1.__exportStar(require_groupDetails(), exports2);
    tslib_1.__exportStar(require_groupLabel(), exports2);
    tslib_1.__exportStar(require_groupName(), exports2);
    tslib_1.__exportStar(require_hierarchy(), exports2);
    tslib_1.__exportStar(require_hierarchyLevel(), exports2);
    tslib_1.__exportStar(require_historyMetadata(), exports2);
    tslib_1.__exportStar(require_historyMetadataParticipant(), exports2);
    tslib_1.__exportStar(require_icon(), exports2);
    tslib_1.__exportStar(require_id(), exports2);
    tslib_1.__exportStar(require_idOrKey(), exports2);
    tslib_1.__exportStar(require_includedFields(), exports2);
    tslib_1.__exportStar(require_issue3(), exports2);
    tslib_1.__exportStar(require_issueArchivalSync(), exports2);
    tslib_1.__exportStar(require_issueChangelogIds(), exports2);
    tslib_1.__exportStar(require_issueCommentListRequest(), exports2);
    tslib_1.__exportStar(require_issueCreateMetadata(), exports2);
    tslib_1.__exportStar(require_issueEntityProperties(), exports2);
    tslib_1.__exportStar(require_issueEntityPropertiesForMultiUpdate(), exports2);
    tslib_1.__exportStar(require_issueEvent(), exports2);
    tslib_1.__exportStar(require_issueFieldOption(), exports2);
    tslib_1.__exportStar(require_issueFieldOptionConfiguration(), exports2);
    tslib_1.__exportStar(require_issueFieldOptionCreate(), exports2);
    tslib_1.__exportStar(require_issueFieldOptionScope(), exports2);
    tslib_1.__exportStar(require_issueFilterForBulkPropertyDelete(), exports2);
    tslib_1.__exportStar(require_issueFilterForBulkPropertySet(), exports2);
    tslib_1.__exportStar(require_issueLink(), exports2);
    tslib_1.__exportStar(require_issueLinkType(), exports2);
    tslib_1.__exportStar(require_issueLinkTypes2(), exports2);
    tslib_1.__exportStar(require_issueList(), exports2);
    tslib_1.__exportStar(require_issueMatches(), exports2);
    tslib_1.__exportStar(require_issueMatchesForJQL(), exports2);
    tslib_1.__exportStar(require_issuePickerSuggestions(), exports2);
    tslib_1.__exportStar(require_issuePickerSuggestionsIssueType(), exports2);
    tslib_1.__exportStar(require_issuesAndJQLQueries(), exports2);
    tslib_1.__exportStar(require_issueSecurityLevelMember(), exports2);
    tslib_1.__exportStar(require_issueSecuritySchemeToProjectMapping(), exports2);
    tslib_1.__exportStar(require_issuesJqlMetaData(), exports2);
    tslib_1.__exportStar(require_issuesMeta(), exports2);
    tslib_1.__exportStar(require_issuesUpdate(), exports2);
    tslib_1.__exportStar(require_issueTransition2(), exports2);
    tslib_1.__exportStar(require_issueTypeCreate(), exports2);
    tslib_1.__exportStar(require_issueTypeDetails(), exports2);
    tslib_1.__exportStar(require_issueTypeIds(), exports2);
    tslib_1.__exportStar(require_issueTypeIdsToRemove(), exports2);
    tslib_1.__exportStar(require_issueTypeInfo(), exports2);
    tslib_1.__exportStar(require_issueTypeIssueCreateMetadata(), exports2);
    tslib_1.__exportStar(require_issueTypeScheme(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeDetails(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeID(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeMapping(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeProjectAssociation(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeProjects(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeUpdateDetails(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeDetails(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeId(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeItem(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeMapping(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeMappingDetails(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeProjectAssociation(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemesProjects(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeUpdateDetails(), exports2);
    tslib_1.__exportStar(require_issueTypesWorkflowMapping(), exports2);
    tslib_1.__exportStar(require_issueTypeToContextMapping(), exports2);
    tslib_1.__exportStar(require_issueTypeUpdate(), exports2);
    tslib_1.__exportStar(require_issueTypeWithStatus(), exports2);
    tslib_1.__exportStar(require_issueTypeWorkflowMapping(), exports2);
    tslib_1.__exportStar(require_issueUpdateDetails(), exports2);
    tslib_1.__exportStar(require_issueUpdateMetadata(), exports2);
    tslib_1.__exportStar(require_jexpIssues(), exports2);
    tslib_1.__exportStar(require_jexpJqlIssues(), exports2);
    tslib_1.__exportStar(require_jiraExpressionAnalysis(), exports2);
    tslib_1.__exportStar(require_jiraExpressionComplexity(), exports2);
    tslib_1.__exportStar(require_jiraExpressionEvalContext(), exports2);
    tslib_1.__exportStar(require_jiraExpressionEvalRequest(), exports2);
    tslib_1.__exportStar(require_jiraExpressionEvaluationMetaData(), exports2);
    tslib_1.__exportStar(require_jiraExpressionForAnalysis(), exports2);
    tslib_1.__exportStar(require_jiraExpressionResult(), exports2);
    tslib_1.__exportStar(require_jiraExpressionsAnalysis(), exports2);
    tslib_1.__exportStar(require_jiraExpressionsComplexity(), exports2);
    tslib_1.__exportStar(require_jiraExpressionsComplexityValue(), exports2);
    tslib_1.__exportStar(require_jiraExpressionValidationError(), exports2);
    tslib_1.__exportStar(require_jiraStatus(), exports2);
    tslib_1.__exportStar(require_jiraWorkflow(), exports2);
    tslib_1.__exportStar(require_jiraWorkflowStatus(), exports2);
    tslib_1.__exportStar(require_jqlFunctionPrecomputation(), exports2);
    tslib_1.__exportStar(require_jqlFunctionPrecomputationUpdate(), exports2);
    tslib_1.__exportStar(require_jqlFunctionPrecomputationUpdateRequest(), exports2);
    tslib_1.__exportStar(require_jQLPersonalDataMigrationRequest(), exports2);
    tslib_1.__exportStar(require_jqlQueriesToParse(), exports2);
    tslib_1.__exportStar(require_jqlQueriesToSanitize(), exports2);
    tslib_1.__exportStar(require_jqlQuery(), exports2);
    tslib_1.__exportStar(require_jqlQueryClause(), exports2);
    tslib_1.__exportStar(require_jqlQueryField(), exports2);
    tslib_1.__exportStar(require_jqlQueryFieldEntityProperty(), exports2);
    tslib_1.__exportStar(require_jqlQueryOrderByClause(), exports2);
    tslib_1.__exportStar(require_jqlQueryOrderByClauseElement(), exports2);
    tslib_1.__exportStar(require_jqlQueryToSanitize(), exports2);
    tslib_1.__exportStar(require_jQLQueryWithUnknownUsers(), exports2);
    tslib_1.__exportStar(require_jQLReferenceData(), exports2);
    tslib_1.__exportStar(require_jsonType2(), exports2);
    tslib_1.__exportStar(require_license(), exports2);
    tslib_1.__exportStar(require_licensedApplication(), exports2);
    tslib_1.__exportStar(require_licenseMetric(), exports2);
    tslib_1.__exportStar(require_linkedIssue(), exports2);
    tslib_1.__exportStar(require_linkGroup2(), exports2);
    tslib_1.__exportStar(require_linkIssueRequestJson(), exports2);
    tslib_1.__exportStar(require_listWrapperCallbackApplicationRole(), exports2);
    tslib_1.__exportStar(require_listWrapperCallbackGroupName(), exports2);
    tslib_1.__exportStar(require_locale(), exports2);
    tslib_1.__exportStar(require_moveField(), exports2);
    tslib_1.__exportStar(require_multiIssueEntityProperties(), exports2);
    tslib_1.__exportStar(require_multipleCustomFieldValuesUpdate(), exports2);
    tslib_1.__exportStar(require_multipleCustomFieldValuesUpdateDetails(), exports2);
    tslib_1.__exportStar(require_nestedResponse(), exports2);
    tslib_1.__exportStar(require_newUserDetails(), exports2);
    tslib_1.__exportStar(require_notification(), exports2);
    tslib_1.__exportStar(require_notificationEvent(), exports2);
    tslib_1.__exportStar(require_notificationRecipients(), exports2);
    tslib_1.__exportStar(require_notificationRecipientsRestrictions(), exports2);
    tslib_1.__exportStar(require_notificationScheme(), exports2);
    tslib_1.__exportStar(require_notificationSchemeAndProjectMapping(), exports2);
    tslib_1.__exportStar(require_notificationSchemeAndProjectMappingPage(), exports2);
    tslib_1.__exportStar(require_notificationSchemeEvent(), exports2);
    tslib_1.__exportStar(require_notificationSchemeEventDetails(), exports2);
    tslib_1.__exportStar(require_notificationSchemeEventTypeId(), exports2);
    tslib_1.__exportStar(require_notificationSchemeId(), exports2);
    tslib_1.__exportStar(require_notificationSchemeNotificationDetails(), exports2);
    tslib_1.__exportStar(require_oldToNewSecurityLevelMappings(), exports2);
    tslib_1.__exportStar(require_operationMessage(), exports2);
    tslib_1.__exportStar(require_operations3(), exports2);
    tslib_1.__exportStar(require_orderOfCustomFieldOptions(), exports2);
    tslib_1.__exportStar(require_orderOfIssueTypes(), exports2);
    tslib_1.__exportStar(require_pageChangelog(), exports2);
    tslib_1.__exportStar(require_pageComment(), exports2);
    tslib_1.__exportStar(require_pageComponentWithIssueCount(), exports2);
    tslib_1.__exportStar(require_pageContextForProjectAndIssueType(), exports2);
    tslib_1.__exportStar(require_pageContextualConfiguration(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContext(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContextDefaultValue(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContextOption(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContextProjectMapping(), exports2);
    tslib_1.__exportStar(require_pageDashboard(), exports2);
    tslib_1.__exportStar(require_pagedListUserDetailsApplicationUser(), exports2);
    tslib_1.__exportStar(require_pageField(), exports2);
    tslib_1.__exportStar(require_pageFieldConfiguration(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationIssueTypeItem(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationItem(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationScheme(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationSchemeProjects(), exports2);
    tslib_1.__exportStar(require_pageFilterDetails(), exports2);
    tslib_1.__exportStar(require_pageGroupDetails(), exports2);
    tslib_1.__exportStar(require_pageIssueFieldOption(), exports2);
    tslib_1.__exportStar(require_pageIssueSecurityLevelMember(), exports2);
    tslib_1.__exportStar(require_pageIssueSecuritySchemeToProjectMapping(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeSchemeMapping(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeSchemeProjects(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScreenSchemeItem(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScreenSchemesProjects(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeToContextMapping(), exports2);
    tslib_1.__exportStar(require_pageJqlFunctionPrecomputation(), exports2);
    tslib_1.__exportStar(require_pageNotificationScheme(), exports2);
    tslib_1.__exportStar(require_pageOfChangelogs(), exports2);
    tslib_1.__exportStar(require_pageOfComments(), exports2);
    tslib_1.__exportStar(require_pageOfDashboards(), exports2);
    tslib_1.__exportStar(require_pageOfStatuses(), exports2);
    tslib_1.__exportStar(require_pageOfWorklogs(), exports2);
    tslib_1.__exportStar(require_pagePriority(), exports2);
    tslib_1.__exportStar(require_pageProject(), exports2);
    tslib_1.__exportStar(require_pageProjectDetails(), exports2);
    tslib_1.__exportStar(require_pageResolution(), exports2);
    tslib_1.__exportStar(require_pageScreen(), exports2);
    tslib_1.__exportStar(require_pageScreenScheme(), exports2);
    tslib_1.__exportStar(require_pageScreenWithTab(), exports2);
    tslib_1.__exportStar(require_pageSecurityLevel(), exports2);
    tslib_1.__exportStar(require_pageSecurityLevelMember(), exports2);
    tslib_1.__exportStar(require_pageSecuritySchemeWithProjects(), exports2);
    tslib_1.__exportStar(require_pageString(), exports2);
    tslib_1.__exportStar(require_pageUiModificationDetails(), exports2);
    tslib_1.__exportStar(require_pageUser(), exports2);
    tslib_1.__exportStar(require_pageUserDetails(), exports2);
    tslib_1.__exportStar(require_pageUserKey(), exports2);
    tslib_1.__exportStar(require_pageVersion(), exports2);
    tslib_1.__exportStar(require_pageWebhook(), exports2);
    tslib_1.__exportStar(require_pageWorkflow(), exports2);
    tslib_1.__exportStar(require_pageWorkflowScheme(), exports2);
    tslib_1.__exportStar(require_pageWorkflowTransitionRules(), exports2);
    tslib_1.__exportStar(require_parsedJqlQueries(), exports2);
    tslib_1.__exportStar(require_parsedJqlQuery(), exports2);
    tslib_1.__exportStar(require_permissionDetails(), exports2);
    tslib_1.__exportStar(require_permissionGrant(), exports2);
    tslib_1.__exportStar(require_permissionGrants(), exports2);
    tslib_1.__exportStar(require_permissionHolder(), exports2);
    tslib_1.__exportStar(require_permissions2(), exports2);
    tslib_1.__exportStar(require_permissionScheme(), exports2);
    tslib_1.__exportStar(require_permissionSchemes2(), exports2);
    tslib_1.__exportStar(require_permissionsKeys(), exports2);
    tslib_1.__exportStar(require_permittedProjects(), exports2);
    tslib_1.__exportStar(require_priority(), exports2);
    tslib_1.__exportStar(require_priorityId(), exports2);
    tslib_1.__exportStar(require_project2(), exports2);
    tslib_1.__exportStar(require_projectAndIssueTypePair(), exports2);
    tslib_1.__exportStar(require_projectAvatars2(), exports2);
    tslib_1.__exportStar(require_projectCategory(), exports2);
    tslib_1.__exportStar(require_projectComponent(), exports2);
    tslib_1.__exportStar(require_projectDetails(), exports2);
    tslib_1.__exportStar(require_projectEmailAddress(), exports2);
    tslib_1.__exportStar(require_projectFeature(), exports2);
    tslib_1.__exportStar(require_projectFeatureToggleRequest(), exports2);
    tslib_1.__exportStar(require_projectId(), exports2);
    tslib_1.__exportStar(require_projectIdentifier(), exports2);
    tslib_1.__exportStar(require_projectIdentifiers(), exports2);
    tslib_1.__exportStar(require_projectIds(), exports2);
    tslib_1.__exportStar(require_projectInsight(), exports2);
    tslib_1.__exportStar(require_projectIssueCreateMetadata(), exports2);
    tslib_1.__exportStar(require_projectIssueSecurityLevels(), exports2);
    tslib_1.__exportStar(require_projectIssueTypeHierarchy(), exports2);
    tslib_1.__exportStar(require_projectIssueTypeMapping(), exports2);
    tslib_1.__exportStar(require_projectIssueTypeMappings(), exports2);
    tslib_1.__exportStar(require_projectIssueTypes(), exports2);
    tslib_1.__exportStar(require_projectIssueTypesHierarchyLevel(), exports2);
    tslib_1.__exportStar(require_projectLandingPageInfo(), exports2);
    tslib_1.__exportStar(require_projectPermissions(), exports2);
    tslib_1.__exportStar(require_projectRole(), exports2);
    tslib_1.__exportStar(require_projectRoleActorsUpdate(), exports2);
    tslib_1.__exportStar(require_projectRoleDetails(), exports2);
    tslib_1.__exportStar(require_projectRoleGroup(), exports2);
    tslib_1.__exportStar(require_projectRoleUser(), exports2);
    tslib_1.__exportStar(require_projectScope(), exports2);
    tslib_1.__exportStar(require_projectType(), exports2);
    tslib_1.__exportStar(require_propertyKey(), exports2);
    tslib_1.__exportStar(require_propertyKeys(), exports2);
    tslib_1.__exportStar(require_publishedWorkflowId(), exports2);
    tslib_1.__exportStar(require_registeredWebhook(), exports2);
    tslib_1.__exportStar(require_remoteIssueLink(), exports2);
    tslib_1.__exportStar(require_remoteIssueLinkIdentifies(), exports2);
    tslib_1.__exportStar(require_remoteIssueLinkRequest(), exports2);
    tslib_1.__exportStar(require_remoteObject(), exports2);
    tslib_1.__exportStar(require_reorderIssuePriorities(), exports2);
    tslib_1.__exportStar(require_reorderIssueResolutionsRequest(), exports2);
    tslib_1.__exportStar(require_resolution(), exports2);
    tslib_1.__exportStar(require_resolutionId(), exports2);
    tslib_1.__exportStar(require_restrictedPermission(), exports2);
    tslib_1.__exportStar(require_richText(), exports2);
    tslib_1.__exportStar(require_roleActor(), exports2);
    tslib_1.__exportStar(require_ruleConfiguration(), exports2);
    tslib_1.__exportStar(require_sanitizedJqlQueries(), exports2);
    tslib_1.__exportStar(require_sanitizedJqlQuery(), exports2);
    tslib_1.__exportStar(require_scope2(), exports2);
    tslib_1.__exportStar(require_screen(), exports2);
    tslib_1.__exportStar(require_screenableField(), exports2);
    tslib_1.__exportStar(require_screenableTab(), exports2);
    tslib_1.__exportStar(require_screenDetails(), exports2);
    tslib_1.__exportStar(require_screenScheme(), exports2);
    tslib_1.__exportStar(require_screenSchemeDetails(), exports2);
    tslib_1.__exportStar(require_screenSchemeId(), exports2);
    tslib_1.__exportStar(require_screenTypes(), exports2);
    tslib_1.__exportStar(require_screenWithTab(), exports2);
    tslib_1.__exportStar(require_searchAutoComplete(), exports2);
    tslib_1.__exportStar(require_searchRequest(), exports2);
    tslib_1.__exportStar(require_searchResults2(), exports2);
    tslib_1.__exportStar(require_securityLevel(), exports2);
    tslib_1.__exportStar(require_securityLevelMember(), exports2);
    tslib_1.__exportStar(require_securityScheme(), exports2);
    tslib_1.__exportStar(require_securitySchemeId(), exports2);
    tslib_1.__exportStar(require_securitySchemeLevel(), exports2);
    tslib_1.__exportStar(require_securitySchemeLevelMember(), exports2);
    tslib_1.__exportStar(require_securitySchemeMembersRequest(), exports2);
    tslib_1.__exportStar(require_securitySchemes(), exports2);
    tslib_1.__exportStar(require_securitySchemeWithProjects(), exports2);
    tslib_1.__exportStar(require_serverInformation(), exports2);
    tslib_1.__exportStar(require_setDefaultLevelsRequest(), exports2);
    tslib_1.__exportStar(require_setDefaultPriorityRequest(), exports2);
    tslib_1.__exportStar(require_setDefaultResolutionRequest(), exports2);
    tslib_1.__exportStar(require_sharePermission(), exports2);
    tslib_1.__exportStar(require_sharePermissionInput(), exports2);
    tslib_1.__exportStar(require_simpleApplicationProperty(), exports2);
    tslib_1.__exportStar(require_simpleLink(), exports2);
    tslib_1.__exportStar(require_simpleListWrapperApplicationRole(), exports2);
    tslib_1.__exportStar(require_simpleListWrapperGroupName(), exports2);
    tslib_1.__exportStar(require_status3(), exports2);
    tslib_1.__exportStar(require_statusCategory2(), exports2);
    tslib_1.__exportStar(require_statusCreate(), exports2);
    tslib_1.__exportStar(require_statusCreateRequest(), exports2);
    tslib_1.__exportStar(require_statusDetails(), exports2);
    tslib_1.__exportStar(require_statusLayoutUpdate(), exports2);
    tslib_1.__exportStar(require_statusMapping(), exports2);
    tslib_1.__exportStar(require_statusMappingDTO(), exports2);
    tslib_1.__exportStar(require_statusMigration(), exports2);
    tslib_1.__exportStar(require_statusReferenceAndPort(), exports2);
    tslib_1.__exportStar(require_statusScope(), exports2);
    tslib_1.__exportStar(require_statusUpdate(), exports2);
    tslib_1.__exportStar(require_statusUpdateRequest(), exports2);
    tslib_1.__exportStar(require_suggestedIssue(), exports2);
    tslib_1.__exportStar(require_systemAvatars(), exports2);
    tslib_1.__exportStar(require_tabMetadata(), exports2);
    tslib_1.__exportStar(require_taskProgressObject(), exports2);
    tslib_1.__exportStar(require_timeTrackingConfiguration(), exports2);
    tslib_1.__exportStar(require_timeTrackingDetails(), exports2);
    tslib_1.__exportStar(require_timeTrackingProvider(), exports2);
    tslib_1.__exportStar(require_transition(), exports2);
    tslib_1.__exportStar(require_transitions(), exports2);
    tslib_1.__exportStar(require_transitionScreenDetails(), exports2);
    tslib_1.__exportStar(require_transitionUpdateDTO(), exports2);
    tslib_1.__exportStar(require_uiModificationContextDetails(), exports2);
    tslib_1.__exportStar(require_uiModificationDetails(), exports2);
    tslib_1.__exportStar(require_uiModificationIdentifiers(), exports2);
    tslib_1.__exportStar(require_unrestrictedUserEmail(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldDetails(), exports2);
    tslib_1.__exportStar(require_updatedProjectCategory(), exports2);
    tslib_1.__exportStar(require_updateFieldConfigurationSchemeDetails(), exports2);
    tslib_1.__exportStar(require_updateIssueSecurityLevelDetails(), exports2);
    tslib_1.__exportStar(require_updateIssueSecuritySchemeRequest(), exports2);
    tslib_1.__exportStar(require_updateNotificationSchemeDetails(), exports2);
    tslib_1.__exportStar(require_updatePriorityDetails(), exports2);
    tslib_1.__exportStar(require_updateProjectDetails(), exports2);
    tslib_1.__exportStar(require_updateResolutionDetails(), exports2);
    tslib_1.__exportStar(require_updateScreenDetails(), exports2);
    tslib_1.__exportStar(require_updateScreenSchemeDetails(), exports2);
    tslib_1.__exportStar(require_updateScreenTypes(), exports2);
    tslib_1.__exportStar(require_updateUiModificationDetails(), exports2);
    tslib_1.__exportStar(require_updateUserToGroup(), exports2);
    tslib_1.__exportStar(require_user2(), exports2);
    tslib_1.__exportStar(require_userAvatarUrls(), exports2);
    tslib_1.__exportStar(require_userDetails(), exports2);
    tslib_1.__exportStar(require_userKey(), exports2);
    tslib_1.__exportStar(require_userList(), exports2);
    tslib_1.__exportStar(require_userMigration(), exports2);
    tslib_1.__exportStar(require_userPickerUser(), exports2);
    tslib_1.__exportStar(require_validationOptionsForCreate(), exports2);
    tslib_1.__exportStar(require_validationOptionsForUpdate(), exports2);
    tslib_1.__exportStar(require_version2(), exports2);
    tslib_1.__exportStar(require_versionIssueCounts(), exports2);
    tslib_1.__exportStar(require_versionIssuesStatus(), exports2);
    tslib_1.__exportStar(require_versionMove(), exports2);
    tslib_1.__exportStar(require_versionUnresolvedIssuesCount(), exports2);
    tslib_1.__exportStar(require_versionUsageInCustomField(), exports2);
    tslib_1.__exportStar(require_visibility(), exports2);
    tslib_1.__exportStar(require_votes(), exports2);
    tslib_1.__exportStar(require_warningCollection(), exports2);
    tslib_1.__exportStar(require_watchers(), exports2);
    tslib_1.__exportStar(require_webhook(), exports2);
    tslib_1.__exportStar(require_webhookDetails(), exports2);
    tslib_1.__exportStar(require_webhookRegistrationDetails(), exports2);
    tslib_1.__exportStar(require_webhooksExpirationDate(), exports2);
    tslib_1.__exportStar(require_workflow(), exports2);
    tslib_1.__exportStar(require_workflowCapabilities(), exports2);
    tslib_1.__exportStar(require_workflowCondition(), exports2);
    tslib_1.__exportStar(require_workflowCreate(), exports2);
    tslib_1.__exportStar(require_workflowCreateRequest(), exports2);
    tslib_1.__exportStar(require_workflowCreateResponse(), exports2);
    tslib_1.__exportStar(require_workflowElementReference(), exports2);
    tslib_1.__exportStar(require_workflowId(), exports2);
    tslib_1.__exportStar(require_workflowLayout(), exports2);
    tslib_1.__exportStar(require_workflowOperations(), exports2);
    tslib_1.__exportStar(require_workflowRead(), exports2);
    tslib_1.__exportStar(require_workflowReferenceStatus(), exports2);
    tslib_1.__exportStar(require_workflowRuleConfiguration(), exports2);
    tslib_1.__exportStar(require_workflowRules(), exports2);
    tslib_1.__exportStar(require_workflowRulesSearch(), exports2);
    tslib_1.__exportStar(require_workflowRulesSearchDetails(), exports2);
    tslib_1.__exportStar(require_workflowScheme(), exports2);
    tslib_1.__exportStar(require_workflowSchemeAssociations(), exports2);
    tslib_1.__exportStar(require_workflowSchemeIdName(), exports2);
    tslib_1.__exportStar(require_workflowSchemeProjectAssociation(), exports2);
    tslib_1.__exportStar(require_workflowScope(), exports2);
    tslib_1.__exportStar(require_workflowStatus(), exports2);
    tslib_1.__exportStar(require_workflowStatusAndPort(), exports2);
    tslib_1.__exportStar(require_workflowStatusLayout(), exports2);
    tslib_1.__exportStar(require_workflowStatusProperties(), exports2);
    tslib_1.__exportStar(require_workflowStatusUpdate(), exports2);
    tslib_1.__exportStar(require_workflowsWithTransitionRulesDetails(), exports2);
    tslib_1.__exportStar(require_workflowTransition(), exports2);
    tslib_1.__exportStar(require_workflowTransitionProperty(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRule(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRules2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesDetails(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesUpdate(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesUpdateErrorDetails(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesUpdateErrors(), exports2);
    tslib_1.__exportStar(require_workflowTransitions(), exports2);
    tslib_1.__exportStar(require_workflowTrigger(), exports2);
    tslib_1.__exportStar(require_workflowUpdate(), exports2);
    tslib_1.__exportStar(require_workflowUpdateRequest(), exports2);
    tslib_1.__exportStar(require_workflowUpdateResponse(), exports2);
    tslib_1.__exportStar(require_workflowValidationError(), exports2);
    tslib_1.__exportStar(require_workflowValidationErrorList(), exports2);
    tslib_1.__exportStar(require_worklog(), exports2);
    tslib_1.__exportStar(require_worklogIdsRequest(), exports2);
  }
});

// node_modules/jira.js/out/version2/parameters/addActorUsers.js
var require_addActorUsers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addActorUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addAttachment.js
var require_addAttachment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addComment.js
var require_addComment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addFieldToDefaultScreen.js
var require_addFieldToDefaultScreen = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addFieldToDefaultScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addGadget.js
var require_addGadget = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addIssueTypesToContext.js
var require_addIssueTypesToContext = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addIssueTypesToContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addIssueTypesToIssueTypeScheme.js
var require_addIssueTypesToIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addIssueTypesToIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addProjectRoleActorsToRole.js
var require_addProjectRoleActorsToRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addProjectRoleActorsToRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addScreenTab.js
var require_addScreenTab = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addScreenTabField.js
var require_addScreenTabField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addScreenTabField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addSecurityLevel.js
var require_addSecurityLevel = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addSecurityLevelMembers.js
var require_addSecurityLevelMembers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addSecurityLevelMembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addSharePermission.js
var require_addSharePermission = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addSharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addUserToGroup.js
var require_addUserToGroup = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addUserToGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addVote.js
var require_addVote = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addVote.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addWatcher.js
var require_addWatcher = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addWatcher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/addWorklog.js
var require_addWorklog = __commonJS({
  "node_modules/jira.js/out/version2/parameters/addWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/analyseExpression.js
var require_analyseExpression = __commonJS({
  "node_modules/jira.js/out/version2/parameters/analyseExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/appendMappingsForIssueTypeScreenScheme.js
var require_appendMappingsForIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/appendMappingsForIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/archiveIssues.js
var require_archiveIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/archiveIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/archiveIssuesAsync.js
var require_archiveIssuesAsync = __commonJS({
  "node_modules/jira.js/out/version2/parameters/archiveIssuesAsync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/archiveProject.js
var require_archiveProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/archiveProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignFieldConfigurationSchemeToProject.js
var require_assignFieldConfigurationSchemeToProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignFieldConfigurationSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignIssue.js
var require_assignIssue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignIssueTypeSchemeToProject.js
var require_assignIssueTypeSchemeToProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignIssueTypeSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignIssueTypeScreenSchemeToProject.js
var require_assignIssueTypeScreenSchemeToProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignIssueTypeScreenSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignPermissionScheme.js
var require_assignPermissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignProjectsToCustomFieldContext.js
var require_assignProjectsToCustomFieldContext = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignProjectsToCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/assignSchemeToProject.js
var require_assignSchemeToProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/assignSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/associateSchemesToProjects.js
var require_associateSchemesToProjects = __commonJS({
  "node_modules/jira.js/out/version2/parameters/associateSchemesToProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkDeleteIssueProperty.js
var require_bulkDeleteIssueProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkDeleteIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkEditDashboards.js
var require_bulkEditDashboards = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkEditDashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkGetGroups.js
var require_bulkGetGroups = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkGetGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkGetUsers.js
var require_bulkGetUsers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkGetUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkGetUsersMigration.js
var require_bulkGetUsersMigration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkGetUsersMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkSetIssuePropertiesByIssue.js
var require_bulkSetIssuePropertiesByIssue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkSetIssuePropertiesByIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkSetIssueProperty.js
var require_bulkSetIssueProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkSetIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/bulkSetIssuesProperties.js
var require_bulkSetIssuesProperties = __commonJS({
  "node_modules/jira.js/out/version2/parameters/bulkSetIssuesProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/cancelTask.js
var require_cancelTask = __commonJS({
  "node_modules/jira.js/out/version2/parameters/cancelTask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/changeFilterOwner.js
var require_changeFilterOwner = __commonJS({
  "node_modules/jira.js/out/version2/parameters/changeFilterOwner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/copyDashboard.js
var require_copyDashboard = __commonJS({
  "node_modules/jira.js/out/version2/parameters/copyDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createComponent.js
var require_createComponent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createCustomField.js
var require_createCustomField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createCustomFieldContext.js
var require_createCustomFieldContext2 = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createCustomFieldOption.js
var require_createCustomFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createDashboard.js
var require_createDashboard = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createFieldConfiguration.js
var require_createFieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createFieldConfigurationScheme.js
var require_createFieldConfigurationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createFilter.js
var require_createFilter = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createGroup.js
var require_createGroup = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssue.js
var require_createIssue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueFieldOption.js
var require_createIssueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueLinkType.js
var require_createIssueLinkType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssues.js
var require_createIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueSecurityScheme.js
var require_createIssueSecurityScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueType.js
var require_createIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueTypeAvatar.js
var require_createIssueTypeAvatar = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueTypeAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueTypeScheme.js
var require_createIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createIssueTypeScreenScheme.js
var require_createIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createNotificationScheme.js
var require_createNotificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createOrUpdateRemoteIssueLink.js
var require_createOrUpdateRemoteIssueLink = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createOrUpdateRemoteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createPermissionGrant.js
var require_createPermissionGrant = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createPermissionGrant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createPermissionScheme.js
var require_createPermissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createPriority.js
var require_createPriority = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createProject.js
var require_createProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createProjectAvatar.js
var require_createProjectAvatar = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createProjectAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createProjectCategory.js
var require_createProjectCategory = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createProjectRole.js
var require_createProjectRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createResolution.js
var require_createResolution = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createScreen.js
var require_createScreen = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createScreenScheme.js
var require_createScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createStatuses.js
var require_createStatuses = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createUiModification.js
var require_createUiModification = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createUiModification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createUser.js
var require_createUser = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createVersion.js
var require_createVersion = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createWorkflow.js
var require_createWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createWorkflows.js
var require_createWorkflows = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createWorkflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createWorkflowScheme.js
var require_createWorkflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createWorkflowSchemeDraftFromParent.js
var require_createWorkflowSchemeDraftFromParent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createWorkflowSchemeDraftFromParent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/createWorkflowTransitionProperty.js
var require_createWorkflowTransitionProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/createWorkflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteActor.js
var require_deleteActor = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteActor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteAddonProperty.js
var require_deleteAddonProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteAddonProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteAndReplaceVersion.js
var require_deleteAndReplaceVersion = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteAndReplaceVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteAppProperty.js
var require_deleteAppProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteAppProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteAvatar.js
var require_deleteAvatar = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteComment.js
var require_deleteComment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteCommentProperty.js
var require_deleteCommentProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteCommentProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteComponent.js
var require_deleteComponent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteCustomField.js
var require_deleteCustomField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteCustomFieldContext.js
var require_deleteCustomFieldContext = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteCustomFieldOption.js
var require_deleteCustomFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteDashboard.js
var require_deleteDashboard = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteDashboardItemProperty.js
var require_deleteDashboardItemProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteDashboardItemProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteDefaultWorkflow.js
var require_deleteDefaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteDraftDefaultWorkflow.js
var require_deleteDraftDefaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteDraftDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteDraftWorkflowMapping.js
var require_deleteDraftWorkflowMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteDraftWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteFavouriteForFilter.js
var require_deleteFavouriteForFilter = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteFavouriteForFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteFieldConfiguration.js
var require_deleteFieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteFieldConfigurationScheme.js
var require_deleteFieldConfigurationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteFilter.js
var require_deleteFilter = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteInactiveWorkflow.js
var require_deleteInactiveWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteInactiveWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssue.js
var require_deleteIssue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueFieldOption.js
var require_deleteIssueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueLink.js
var require_deleteIssueLink = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueLinkType.js
var require_deleteIssueLinkType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueProperty.js
var require_deleteIssueProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueType.js
var require_deleteIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueTypeProperty.js
var require_deleteIssueTypeProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueTypeProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueTypeScheme.js
var require_deleteIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteIssueTypeScreenScheme.js
var require_deleteIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteNotificationScheme.js
var require_deleteNotificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deletePermissionScheme.js
var require_deletePermissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deletePermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deletePermissionSchemeEntity.js
var require_deletePermissionSchemeEntity = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deletePermissionSchemeEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteProject.js
var require_deleteProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteProjectAsynchronously.js
var require_deleteProjectAsynchronously = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteProjectAsynchronously.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteProjectAvatar.js
var require_deleteProjectAvatar = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteProjectAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteProjectProperty.js
var require_deleteProjectProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteProjectProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteProjectRole.js
var require_deleteProjectRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteProjectRoleActorsFromRole.js
var require_deleteProjectRoleActorsFromRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteProjectRoleActorsFromRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteRemoteIssueLinkByGlobalId.js
var require_deleteRemoteIssueLinkByGlobalId = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteRemoteIssueLinkByGlobalId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteRemoteIssueLinkById.js
var require_deleteRemoteIssueLinkById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteRemoteIssueLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteResolution.js
var require_deleteResolution = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteScreen.js
var require_deleteScreen = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteScreenScheme.js
var require_deleteScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteScreenTab.js
var require_deleteScreenTab = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteSecurityScheme.js
var require_deleteSecurityScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteSharePermission.js
var require_deleteSharePermission = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteSharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteStatusesById.js
var require_deleteStatusesById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteStatusesById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteUiModification.js
var require_deleteUiModification = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteUiModification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteUserProperty.js
var require_deleteUserProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteUserProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWebhookById.js
var require_deleteWebhookById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWebhookById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowMapping.js
var require_deleteWorkflowMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowScheme.js
var require_deleteWorkflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowSchemeDraft.js
var require_deleteWorkflowSchemeDraft = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowSchemeDraft.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowSchemeDraftIssueType.js
var require_deleteWorkflowSchemeDraftIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowSchemeDraftIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowSchemeIssueType.js
var require_deleteWorkflowSchemeIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowSchemeIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowTransitionProperty.js
var require_deleteWorkflowTransitionProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorkflowTransitionRuleConfigurations.js
var require_deleteWorkflowTransitionRuleConfigurations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorkflowTransitionRuleConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorklog.js
var require_deleteWorklog = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/deleteWorklogProperty.js
var require_deleteWorklogProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/deleteWorklogProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/doTransition.js
var require_doTransition = __commonJS({
  "node_modules/jira.js/out/version2/parameters/doTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/editIssue.js
var require_editIssue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/editIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/evaluateJiraExpression.js
var require_evaluateJiraExpression = __commonJS({
  "node_modules/jira.js/out/version2/parameters/evaluateJiraExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/expandAttachmentForHumans.js
var require_expandAttachmentForHumans = __commonJS({
  "node_modules/jira.js/out/version2/parameters/expandAttachmentForHumans.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/expandAttachmentForMachines.js
var require_expandAttachmentForMachines = __commonJS({
  "node_modules/jira.js/out/version2/parameters/expandAttachmentForMachines.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/exportArchivedIssues.js
var require_exportArchivedIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/exportArchivedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findAssignableUsers.js
var require_findAssignableUsers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findAssignableUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findBulkAssignableUsers.js
var require_findBulkAssignableUsers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findBulkAssignableUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findGroups.js
var require_findGroups = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUserKeysByQuery.js
var require_findUserKeysByQuery = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUserKeysByQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUsers.js
var require_findUsers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUsersAndGroups.js
var require_findUsersAndGroups = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUsersAndGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUsersByQuery.js
var require_findUsersByQuery = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUsersByQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUsersForPicker.js
var require_findUsersForPicker = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUsersForPicker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUsersWithAllPermissions.js
var require_findUsersWithAllPermissions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUsersWithAllPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/findUsersWithBrowsePermission.js
var require_findUsersWithBrowsePermission = __commonJS({
  "node_modules/jira.js/out/version2/parameters/findUsersWithBrowsePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/fullyUpdateProjectRole.js
var require_fullyUpdateProjectRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/fullyUpdateProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAccessibleProjectTypeByKey.js
var require_getAccessibleProjectTypeByKey = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAccessibleProjectTypeByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAddonProperties.js
var require_getAddonProperties = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAddonProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAddonProperty.js
var require_getAddonProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAddonProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllDashboards.js
var require_getAllDashboards = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllDashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllFieldConfigurations.js
var require_getAllFieldConfigurations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllFieldConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllFieldConfigurationSchemes.js
var require_getAllFieldConfigurationSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllFieldConfigurationSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllGadgets.js
var require_getAllGadgets = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllGadgets.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllIssueFieldOptions.js
var require_getAllIssueFieldOptions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllIssueFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllIssueTypeSchemes.js
var require_getAllIssueTypeSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllIssueTypeSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllLabels.js
var require_getAllLabels = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllLabels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllPermissionSchemes.js
var require_getAllPermissionSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllPermissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllProjectAvatars.js
var require_getAllProjectAvatars = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllProjectAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllScreenTabFields.js
var require_getAllScreenTabFields = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllScreenTabFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllScreenTabs.js
var require_getAllScreenTabs = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllScreenTabs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllStatuses.js
var require_getAllStatuses = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllSystemAvatars.js
var require_getAllSystemAvatars = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllSystemAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllUsers.js
var require_getAllUsers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllUsersDefault.js
var require_getAllUsersDefault = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllUsersDefault.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAllWorkflowSchemes.js
var require_getAllWorkflowSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAllWorkflowSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAlternativeIssueTypes.js
var require_getAlternativeIssueTypes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAlternativeIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getApplicationProperty.js
var require_getApplicationProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getApplicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getApplicationRole.js
var require_getApplicationRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getApplicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAssignedPermissionScheme.js
var require_getAssignedPermissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAssignedPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAttachment.js
var require_getAttachment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAttachmentContent.js
var require_getAttachmentContent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAttachmentContent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAttachmentThumbnail.js
var require_getAttachmentThumbnail = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAttachmentThumbnail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAuditRecords.js
var require_getAuditRecords = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAuditRecords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAutoCompletePost.js
var require_getAutoCompletePost = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAutoCompletePost.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAvailableScreenFields.js
var require_getAvailableScreenFields = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAvailableScreenFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAvatarImageByID.js
var require_getAvatarImageByID = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAvatarImageByID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAvatarImageByOwner.js
var require_getAvatarImageByOwner = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAvatarImageByOwner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAvatarImageByType.js
var require_getAvatarImageByType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAvatarImageByType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getAvatars.js
var require_getAvatars = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getBulkPermissions.js
var require_getBulkPermissions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getBulkPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getChangeLogs.js
var require_getChangeLogs = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getChangeLogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getChangeLogsByIds.js
var require_getChangeLogsByIds = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getChangeLogsByIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getColumns.js
var require_getColumns = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getComment.js
var require_getComment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCommentProperty.js
var require_getCommentProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCommentProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCommentPropertyKeys.js
var require_getCommentPropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCommentPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getComments.js
var require_getComments = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCommentsByIds.js
var require_getCommentsByIds = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCommentsByIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getComponent.js
var require_getComponent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getComponentRelatedIssues.js
var require_getComponentRelatedIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getComponentRelatedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getContextsForField.js
var require_getContextsForField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getContextsForField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCreateIssueMeta.js
var require_getCreateIssueMeta = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCreateIssueMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCurrentUser.js
var require_getCurrentUser = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCurrentUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCustomFieldConfiguration.js
var require_getCustomFieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCustomFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCustomFieldContextsForProjectsAndIssueTypes.js
var require_getCustomFieldContextsForProjectsAndIssueTypes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCustomFieldContextsForProjectsAndIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getCustomFieldOption.js
var require_getCustomFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDashboard.js
var require_getDashboard = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDashboardItemProperty.js
var require_getDashboardItemProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDashboardItemProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDashboardItemPropertyKeys.js
var require_getDashboardItemPropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDashboardItemPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDashboardsPaginated.js
var require_getDashboardsPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDashboardsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDefaultValues.js
var require_getDefaultValues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDefaultValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDefaultWorkflow.js
var require_getDefaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDraftDefaultWorkflow.js
var require_getDraftDefaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDraftDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDraftWorkflow.js
var require_getDraftWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDraftWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getDynamicWebhooksForApp.js
var require_getDynamicWebhooksForApp = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getDynamicWebhooksForApp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getEditIssueMeta.js
var require_getEditIssueMeta = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getEditIssueMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFailedWebhooks.js
var require_getFailedWebhooks = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFailedWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFavouriteFilters.js
var require_getFavouriteFilters = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFavouriteFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFeaturesForProject.js
var require_getFeaturesForProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFeaturesForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFieldAutoCompleteForQueryString.js
var require_getFieldAutoCompleteForQueryString = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFieldAutoCompleteForQueryString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFieldConfigurationItems.js
var require_getFieldConfigurationItems = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFieldConfigurationItems.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFieldConfigurationSchemeMappings.js
var require_getFieldConfigurationSchemeMappings = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFieldConfigurationSchemeMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFieldConfigurationSchemeProjectMapping.js
var require_getFieldConfigurationSchemeProjectMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFieldConfigurationSchemeProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFieldsPaginated.js
var require_getFieldsPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFieldsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFilter.js
var require_getFilter = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getFiltersPaginated.js
var require_getFiltersPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getFiltersPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getHierarchy.js
var require_getHierarchy = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getHierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIdsOfWorklogsDeletedSince.js
var require_getIdsOfWorklogsDeletedSince = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIdsOfWorklogsDeletedSince.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIdsOfWorklogsModifiedSince.js
var require_getIdsOfWorklogsModifiedSince = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIdsOfWorklogsModifiedSince.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssue.js
var require_getIssue2 = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueFieldOption.js
var require_getIssueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueLink.js
var require_getIssueLink = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueLinkType.js
var require_getIssueLinkType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssuePickerResource.js
var require_getIssuePickerResource = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssuePickerResource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueProperty.js
var require_getIssueProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssuePropertyKeys.js
var require_getIssuePropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssuePropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueSecurityLevel.js
var require_getIssueSecurityLevel = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueSecurityLevelMembers.js
var require_getIssueSecurityLevelMembers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueSecurityLevelMembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueSecurityScheme.js
var require_getIssueSecurityScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueType.js
var require_getIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeMappingsForContexts.js
var require_getIssueTypeMappingsForContexts = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeMappingsForContexts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeProperty.js
var require_getIssueTypeProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypePropertyKeys.js
var require_getIssueTypePropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypePropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeSchemeForProjects.js
var require_getIssueTypeSchemeForProjects = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeSchemeForProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeSchemesMapping.js
var require_getIssueTypeSchemesMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeSchemesMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeScreenSchemeMappings.js
var require_getIssueTypeScreenSchemeMappings = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeScreenSchemeMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeScreenSchemeProjectAssociations.js
var require_getIssueTypeScreenSchemeProjectAssociations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeScreenSchemeProjectAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypeScreenSchemes.js
var require_getIssueTypeScreenSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypeScreenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueTypesForProject.js
var require_getIssueTypesForProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueTypesForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueWatchers.js
var require_getIssueWatchers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueWatchers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIssueWorklog.js
var require_getIssueWorklog = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIssueWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getIsWatchingIssueBulk.js
var require_getIsWatchingIssueBulk = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getIsWatchingIssueBulk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getMyFilters.js
var require_getMyFilters = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getMyFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getMyPermissions.js
var require_getMyPermissions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getMyPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getNotificationScheme.js
var require_getNotificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getNotificationSchemeForProject.js
var require_getNotificationSchemeForProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getNotificationSchemeForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getNotificationSchemes.js
var require_getNotificationSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getNotificationSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getNotificationSchemeToProjectMappings.js
var require_getNotificationSchemeToProjectMappings = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getNotificationSchemeToProjectMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getOptionsForContext.js
var require_getOptionsForContext = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getOptionsForContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPermissionScheme.js
var require_getPermissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPermissionSchemeGrant.js
var require_getPermissionSchemeGrant = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPermissionSchemeGrant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPermissionSchemeGrants.js
var require_getPermissionSchemeGrants = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPermissionSchemeGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPermittedProjects.js
var require_getPermittedProjects = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPermittedProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPrecomputations.js
var require_getPrecomputations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPrecomputations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPreference.js
var require_getPreference = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPreference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getPriority.js
var require_getPriority = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProject.js
var require_getProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectCategoryById.js
var require_getProjectCategoryById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectCategoryById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectComponents.js
var require_getProjectComponents = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectComponentsPaginated.js
var require_getProjectComponentsPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectComponentsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectContextMapping.js
var require_getProjectContextMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectContextMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectEmail.js
var require_getProjectEmail = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectIssueSecurityScheme.js
var require_getProjectIssueSecurityScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectProperty.js
var require_getProjectProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectPropertyKeys.js
var require_getProjectPropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectRole.js
var require_getProjectRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectRoleActorsForRole.js
var require_getProjectRoleActorsForRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectRoleActorsForRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectRoleById.js
var require_getProjectRoleById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectRoleById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectRoleDetails.js
var require_getProjectRoleDetails = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectRoleDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectRoles.js
var require_getProjectRoles = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectRoles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectsForIssueTypeScreenScheme.js
var require_getProjectsForIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectsForIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectTypeByKey.js
var require_getProjectTypeByKey = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectTypeByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectVersions.js
var require_getProjectVersions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getProjectVersionsPaginated.js
var require_getProjectVersionsPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getProjectVersionsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getRecent.js
var require_getRecent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getRecent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getRemoteIssueLinkById.js
var require_getRemoteIssueLinkById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getRemoteIssueLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getRemoteIssueLinks.js
var require_getRemoteIssueLinks = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getRemoteIssueLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getScreens.js
var require_getScreens = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getScreens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getScreenSchemes.js
var require_getScreenSchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getScreenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getScreensForField.js
var require_getScreensForField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getScreensForField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getSecurityLevelMembers.js
var require_getSecurityLevelMembers = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getSecurityLevelMembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getSecurityLevels.js
var require_getSecurityLevels = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getSecurityLevels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getSecurityLevelsForProject.js
var require_getSecurityLevelsForProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getSecurityLevelsForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getSelectableIssueFieldOptions.js
var require_getSelectableIssueFieldOptions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getSelectableIssueFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getSharePermission.js
var require_getSharePermission = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getSharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getSharePermissions.js
var require_getSharePermissions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getSharePermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getStatus.js
var require_getStatus = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getStatusCategory.js
var require_getStatusCategory = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getStatusCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getStatusesById.js
var require_getStatusesById = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getStatusesById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getTask.js
var require_getTask = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getTask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getTransitions.js
var require_getTransitions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getTransitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getTrashedFieldsPaginated.js
var require_getTrashedFieldsPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getTrashedFieldsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUiModifications.js
var require_getUiModifications = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUiModifications.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUser.js
var require_getUser = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUserDefaultColumns.js
var require_getUserDefaultColumns = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUserDefaultColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUserEmail.js
var require_getUserEmail = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUserEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUserEmailBulk.js
var require_getUserEmailBulk = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUserEmailBulk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUserGroups.js
var require_getUserGroups = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUserGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUserProperty.js
var require_getUserProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUserProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUserPropertyKeys.js
var require_getUserPropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUserPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getUsersFromGroup.js
var require_getUsersFromGroup = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getUsersFromGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getValidProjectKey.js
var require_getValidProjectKey = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getValidProjectKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getValidProjectName.js
var require_getValidProjectName = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getValidProjectName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getVersion.js
var require_getVersion = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getVersionRelatedIssues.js
var require_getVersionRelatedIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getVersionRelatedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getVersionUnresolvedIssues.js
var require_getVersionUnresolvedIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getVersionUnresolvedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getVisibleIssueFieldOptions.js
var require_getVisibleIssueFieldOptions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getVisibleIssueFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getVotes.js
var require_getVotes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getVotes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflow.js
var require_getWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowScheme.js
var require_getWorkflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowSchemeDraft.js
var require_getWorkflowSchemeDraft = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowSchemeDraft.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowSchemeDraftIssueType.js
var require_getWorkflowSchemeDraftIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowSchemeDraftIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowSchemeIssueType.js
var require_getWorkflowSchemeIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowSchemeIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowSchemeProjectAssociations.js
var require_getWorkflowSchemeProjectAssociations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowSchemeProjectAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowsPaginated.js
var require_getWorkflowsPaginated = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowTransitionProperties.js
var require_getWorkflowTransitionProperties = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowTransitionProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorkflowTransitionRuleConfigurations.js
var require_getWorkflowTransitionRuleConfigurations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorkflowTransitionRuleConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorklog.js
var require_getWorklog = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorklogProperty.js
var require_getWorklogProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorklogProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorklogPropertyKeys.js
var require_getWorklogPropertyKeys = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorklogPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/getWorklogsForIds.js
var require_getWorklogsForIds = __commonJS({
  "node_modules/jira.js/out/version2/parameters/getWorklogsForIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/linkIssues.js
var require_linkIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/linkIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/matchIssues.js
var require_matchIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/matchIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/mergeVersions.js
var require_mergeVersions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/mergeVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/migrateQueries.js
var require_migrateQueries = __commonJS({
  "node_modules/jira.js/out/version2/parameters/migrateQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/movePriorities.js
var require_movePriorities = __commonJS({
  "node_modules/jira.js/out/version2/parameters/movePriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/moveResolutions.js
var require_moveResolutions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/moveResolutions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/moveScreenTab.js
var require_moveScreenTab = __commonJS({
  "node_modules/jira.js/out/version2/parameters/moveScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/moveScreenTabField.js
var require_moveScreenTabField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/moveScreenTabField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/moveVersion.js
var require_moveVersion = __commonJS({
  "node_modules/jira.js/out/version2/parameters/moveVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/notify.js
var require_notify = __commonJS({
  "node_modules/jira.js/out/version2/parameters/notify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/parseJqlQueries.js
var require_parseJqlQueries = __commonJS({
  "node_modules/jira.js/out/version2/parameters/parseJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/partialUpdateProjectRole.js
var require_partialUpdateProjectRole = __commonJS({
  "node_modules/jira.js/out/version2/parameters/partialUpdateProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/publishDraftWorkflowScheme.js
var require_publishDraftWorkflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/publishDraftWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/putAddonProperty.js
var require_putAddonProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/putAddonProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/putAppProperty.js
var require_putAppProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/putAppProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/readWorkflows.js
var require_readWorkflows = __commonJS({
  "node_modules/jira.js/out/version2/parameters/readWorkflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/refreshWebhooks.js
var require_refreshWebhooks = __commonJS({
  "node_modules/jira.js/out/version2/parameters/refreshWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/registerDynamicWebhooks.js
var require_registerDynamicWebhooks = __commonJS({
  "node_modules/jira.js/out/version2/parameters/registerDynamicWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/registerModules.js
var require_registerModules = __commonJS({
  "node_modules/jira.js/out/version2/parameters/registerModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeAttachment.js
var require_removeAttachment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeCustomFieldContextFromProjects.js
var require_removeCustomFieldContextFromProjects = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeCustomFieldContextFromProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeGadget.js
var require_removeGadget = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeGroup.js
var require_removeGroup = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeIssueTypeFromIssueTypeScheme.js
var require_removeIssueTypeFromIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeIssueTypeFromIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeIssueTypesFromContext.js
var require_removeIssueTypesFromContext = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeIssueTypesFromContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeIssueTypesFromGlobalFieldConfigurationScheme.js
var require_removeIssueTypesFromGlobalFieldConfigurationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeIssueTypesFromGlobalFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeLevel.js
var require_removeLevel = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeMappingsFromIssueTypeScreenScheme.js
var require_removeMappingsFromIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeMappingsFromIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeMemberFromSecurityLevel.js
var require_removeMemberFromSecurityLevel = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeMemberFromSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeModules.js
var require_removeModules = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeNotificationFromNotificationScheme.js
var require_removeNotificationFromNotificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeNotificationFromNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removePreference.js
var require_removePreference = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removePreference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeProjectCategory.js
var require_removeProjectCategory = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeScreenTabField.js
var require_removeScreenTabField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeScreenTabField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeUser.js
var require_removeUser = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeUserFromGroup.js
var require_removeUserFromGroup = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeUserFromGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeVote.js
var require_removeVote = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeVote.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/removeWatcher.js
var require_removeWatcher = __commonJS({
  "node_modules/jira.js/out/version2/parameters/removeWatcher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/renameScreenTab.js
var require_renameScreenTab = __commonJS({
  "node_modules/jira.js/out/version2/parameters/renameScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/reorderCustomFieldOptions.js
var require_reorderCustomFieldOptions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/reorderCustomFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/reorderIssueTypesInIssueTypeScheme.js
var require_reorderIssueTypesInIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/reorderIssueTypesInIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/replaceIssueFieldOption.js
var require_replaceIssueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/replaceIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/resetColumns.js
var require_resetColumns = __commonJS({
  "node_modules/jira.js/out/version2/parameters/resetColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/resetUserColumns.js
var require_resetUserColumns = __commonJS({
  "node_modules/jira.js/out/version2/parameters/resetUserColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/restore.js
var require_restore = __commonJS({
  "node_modules/jira.js/out/version2/parameters/restore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/restoreCustomField.js
var require_restoreCustomField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/restoreCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/sanitiseJqlQueries.js
var require_sanitiseJqlQueries = __commonJS({
  "node_modules/jira.js/out/version2/parameters/sanitiseJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/search.js
var require_search = __commonJS({
  "node_modules/jira.js/out/version2/parameters/search.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchForIssuesUsingJql.js
var require_searchForIssuesUsingJql = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchForIssuesUsingJql.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchForIssuesUsingJqlPost.js
var require_searchForIssuesUsingJqlPost = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchForIssuesUsingJqlPost.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchPriorities.js
var require_searchPriorities = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchPriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchProjects.js
var require_searchProjects = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchProjectsUsingSecuritySchemes.js
var require_searchProjectsUsingSecuritySchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchProjectsUsingSecuritySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchResolutions.js
var require_searchResolutions = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchResolutions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/searchSecuritySchemes.js
var require_searchSecuritySchemes = __commonJS({
  "node_modules/jira.js/out/version2/parameters/searchSecuritySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/selectTimeTrackingImplementation.js
var require_selectTimeTrackingImplementation = __commonJS({
  "node_modules/jira.js/out/version2/parameters/selectTimeTrackingImplementation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setActors.js
var require_setActors = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setActors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setApplicationProperty.js
var require_setApplicationProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setApplicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setBanner.js
var require_setBanner = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setBanner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setColumns.js
var require_setColumns = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setCommentProperty.js
var require_setCommentProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setCommentProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setDashboardItemProperty.js
var require_setDashboardItemProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setDashboardItemProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setDefaultLevels.js
var require_setDefaultLevels = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setDefaultLevels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setDefaultPriority.js
var require_setDefaultPriority = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setDefaultPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setDefaultResolution.js
var require_setDefaultResolution = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setDefaultResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setDefaultShareScope.js
var require_setDefaultShareScope = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setDefaultShareScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setDefaultValues.js
var require_setDefaultValues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setDefaultValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setFavouriteForFilter.js
var require_setFavouriteForFilter = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setFavouriteForFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setFieldConfigurationSchemeMapping.js
var require_setFieldConfigurationSchemeMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setFieldConfigurationSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setIssueProperty.js
var require_setIssueProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setIssueTypeProperty.js
var require_setIssueTypeProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setIssueTypeProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setPreference.js
var require_setPreference = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setPreference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setProjectProperty.js
var require_setProjectProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setProjectProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setSharedTimeTrackingConfiguration.js
var require_setSharedTimeTrackingConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setSharedTimeTrackingConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setUserColumns.js
var require_setUserColumns = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setUserColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setUserProperty.js
var require_setUserProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setUserProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setWorkflowSchemeDraftIssueType.js
var require_setWorkflowSchemeDraftIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setWorkflowSchemeDraftIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setWorkflowSchemeIssueType.js
var require_setWorkflowSchemeIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setWorkflowSchemeIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/setWorklogProperty.js
var require_setWorklogProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/setWorklogProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/storeAvatar.js
var require_storeAvatar = __commonJS({
  "node_modules/jira.js/out/version2/parameters/storeAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/toggleFeatureForProject.js
var require_toggleFeatureForProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/toggleFeatureForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/trashCustomField.js
var require_trashCustomField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/trashCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/unarchiveIssues.js
var require_unarchiveIssues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/unarchiveIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateComment.js
var require_updateComment = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateComponent.js
var require_updateComponent = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateCustomField.js
var require_updateCustomField = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateCustomFieldConfiguration.js
var require_updateCustomFieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateCustomFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateCustomFieldContext.js
var require_updateCustomFieldContext = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateCustomFieldOption.js
var require_updateCustomFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateCustomFieldValue.js
var require_updateCustomFieldValue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateCustomFieldValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateDashboard.js
var require_updateDashboard = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateDefaultScreenScheme.js
var require_updateDefaultScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateDefaultScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateDefaultWorkflow.js
var require_updateDefaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateDraftDefaultWorkflow.js
var require_updateDraftDefaultWorkflow = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateDraftDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateDraftWorkflowMapping.js
var require_updateDraftWorkflowMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateDraftWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateEntityPropertiesValue.js
var require_updateEntityPropertiesValue = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateEntityPropertiesValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateFieldConfiguration.js
var require_updateFieldConfiguration = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateFieldConfigurationItems.js
var require_updateFieldConfigurationItems = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateFieldConfigurationItems.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateFieldConfigurationScheme.js
var require_updateFieldConfigurationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateFilter.js
var require_updateFilter = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateGadget.js
var require_updateGadget = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueFieldOption.js
var require_updateIssueFieldOption = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueFields.js
var require_updateIssueFields = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueLinkType.js
var require_updateIssueLinkType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueSecurityScheme.js
var require_updateIssueSecurityScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueType.js
var require_updateIssueType = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueTypeScheme.js
var require_updateIssueTypeScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateIssueTypeScreenScheme.js
var require_updateIssueTypeScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateMultipleCustomFieldValues.js
var require_updateMultipleCustomFieldValues = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateMultipleCustomFieldValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateNotificationScheme.js
var require_updateNotificationScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updatePermissionScheme.js
var require_updatePermissionScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updatePermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updatePrecomputations.js
var require_updatePrecomputations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updatePrecomputations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updatePriority.js
var require_updatePriority = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updatePriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateProject.js
var require_updateProject = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateProjectAvatar.js
var require_updateProjectAvatar = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateProjectAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateProjectCategory.js
var require_updateProjectCategory = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateProjectEmail.js
var require_updateProjectEmail = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateProjectEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateRemoteIssueLink.js
var require_updateRemoteIssueLink = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateRemoteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateResolution.js
var require_updateResolution = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateScreen.js
var require_updateScreen = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateScreenScheme.js
var require_updateScreenScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateSecurityLevel.js
var require_updateSecurityLevel = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateStatuses.js
var require_updateStatuses = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateUiModification.js
var require_updateUiModification = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateUiModification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateVersion.js
var require_updateVersion = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorkflowMapping.js
var require_updateWorkflowMapping = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorkflows.js
var require_updateWorkflows = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorkflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorkflowScheme.js
var require_updateWorkflowScheme = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorkflowSchemeDraft.js
var require_updateWorkflowSchemeDraft = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorkflowSchemeDraft.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorkflowTransitionProperty.js
var require_updateWorkflowTransitionProperty = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorkflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorkflowTransitionRuleConfigurations.js
var require_updateWorkflowTransitionRuleConfigurations = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorkflowTransitionRuleConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/updateWorklog.js
var require_updateWorklog = __commonJS({
  "node_modules/jira.js/out/version2/parameters/updateWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/validateCreateWorkflows.js
var require_validateCreateWorkflows = __commonJS({
  "node_modules/jira.js/out/version2/parameters/validateCreateWorkflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/validateProjectKey.js
var require_validateProjectKey = __commonJS({
  "node_modules/jira.js/out/version2/parameters/validateProjectKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/validateUpdateWorkflows.js
var require_validateUpdateWorkflows = __commonJS({
  "node_modules/jira.js/out/version2/parameters/validateUpdateWorkflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/workflowCapabilities.js
var require_workflowCapabilities2 = __commonJS({
  "node_modules/jira.js/out/version2/parameters/workflowCapabilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/workflowRuleSearch.js
var require_workflowRuleSearch = __commonJS({
  "node_modules/jira.js/out/version2/parameters/workflowRuleSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version2/parameters/index.js
var require_parameters2 = __commonJS({
  "node_modules/jira.js/out/version2/parameters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_addActorUsers(), exports2);
    tslib_1.__exportStar(require_addAttachment(), exports2);
    tslib_1.__exportStar(require_addComment(), exports2);
    tslib_1.__exportStar(require_addFieldToDefaultScreen(), exports2);
    tslib_1.__exportStar(require_addGadget(), exports2);
    tslib_1.__exportStar(require_addIssueTypesToContext(), exports2);
    tslib_1.__exportStar(require_addIssueTypesToIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_addProjectRoleActorsToRole(), exports2);
    tslib_1.__exportStar(require_addScreenTab(), exports2);
    tslib_1.__exportStar(require_addScreenTabField(), exports2);
    tslib_1.__exportStar(require_addSecurityLevel(), exports2);
    tslib_1.__exportStar(require_addSecurityLevelMembers(), exports2);
    tslib_1.__exportStar(require_addSharePermission(), exports2);
    tslib_1.__exportStar(require_addUserToGroup(), exports2);
    tslib_1.__exportStar(require_addVote(), exports2);
    tslib_1.__exportStar(require_addWatcher(), exports2);
    tslib_1.__exportStar(require_addWorklog(), exports2);
    tslib_1.__exportStar(require_analyseExpression(), exports2);
    tslib_1.__exportStar(require_appendMappingsForIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_archiveIssues(), exports2);
    tslib_1.__exportStar(require_archiveIssuesAsync(), exports2);
    tslib_1.__exportStar(require_archiveProject(), exports2);
    tslib_1.__exportStar(require_assignFieldConfigurationSchemeToProject(), exports2);
    tslib_1.__exportStar(require_assignIssue(), exports2);
    tslib_1.__exportStar(require_assignIssueTypeSchemeToProject(), exports2);
    tslib_1.__exportStar(require_assignIssueTypeScreenSchemeToProject(), exports2);
    tslib_1.__exportStar(require_assignPermissionScheme(), exports2);
    tslib_1.__exportStar(require_assignProjectsToCustomFieldContext(), exports2);
    tslib_1.__exportStar(require_assignSchemeToProject(), exports2);
    tslib_1.__exportStar(require_associateSchemesToProjects(), exports2);
    tslib_1.__exportStar(require_bulkDeleteIssueProperty(), exports2);
    tslib_1.__exportStar(require_bulkEditDashboards(), exports2);
    tslib_1.__exportStar(require_bulkGetGroups(), exports2);
    tslib_1.__exportStar(require_bulkGetUsers(), exports2);
    tslib_1.__exportStar(require_bulkGetUsersMigration(), exports2);
    tslib_1.__exportStar(require_bulkSetIssuePropertiesByIssue(), exports2);
    tslib_1.__exportStar(require_bulkSetIssueProperty(), exports2);
    tslib_1.__exportStar(require_bulkSetIssuesProperties(), exports2);
    tslib_1.__exportStar(require_cancelTask(), exports2);
    tslib_1.__exportStar(require_changeFilterOwner(), exports2);
    tslib_1.__exportStar(require_copyDashboard(), exports2);
    tslib_1.__exportStar(require_createComponent(), exports2);
    tslib_1.__exportStar(require_createCustomField(), exports2);
    tslib_1.__exportStar(require_createCustomFieldContext2(), exports2);
    tslib_1.__exportStar(require_createCustomFieldOption(), exports2);
    tslib_1.__exportStar(require_createDashboard(), exports2);
    tslib_1.__exportStar(require_createFieldConfiguration(), exports2);
    tslib_1.__exportStar(require_createFieldConfigurationScheme(), exports2);
    tslib_1.__exportStar(require_createFilter(), exports2);
    tslib_1.__exportStar(require_createGroup(), exports2);
    tslib_1.__exportStar(require_createIssue(), exports2);
    tslib_1.__exportStar(require_createIssueFieldOption(), exports2);
    tslib_1.__exportStar(require_createIssueLinkType(), exports2);
    tslib_1.__exportStar(require_createIssues(), exports2);
    tslib_1.__exportStar(require_createIssueSecurityScheme(), exports2);
    tslib_1.__exportStar(require_createIssueType(), exports2);
    tslib_1.__exportStar(require_createIssueTypeAvatar(), exports2);
    tslib_1.__exportStar(require_createIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_createIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_createNotificationScheme(), exports2);
    tslib_1.__exportStar(require_createOrUpdateRemoteIssueLink(), exports2);
    tslib_1.__exportStar(require_createPermissionGrant(), exports2);
    tslib_1.__exportStar(require_createPermissionScheme(), exports2);
    tslib_1.__exportStar(require_createPriority(), exports2);
    tslib_1.__exportStar(require_createProject(), exports2);
    tslib_1.__exportStar(require_createProjectAvatar(), exports2);
    tslib_1.__exportStar(require_createProjectCategory(), exports2);
    tslib_1.__exportStar(require_createProjectRole(), exports2);
    tslib_1.__exportStar(require_createResolution(), exports2);
    tslib_1.__exportStar(require_createScreen(), exports2);
    tslib_1.__exportStar(require_createScreenScheme(), exports2);
    tslib_1.__exportStar(require_createStatuses(), exports2);
    tslib_1.__exportStar(require_createUiModification(), exports2);
    tslib_1.__exportStar(require_createUser(), exports2);
    tslib_1.__exportStar(require_createVersion(), exports2);
    tslib_1.__exportStar(require_createWorkflow(), exports2);
    tslib_1.__exportStar(require_createWorkflows(), exports2);
    tslib_1.__exportStar(require_createWorkflowScheme(), exports2);
    tslib_1.__exportStar(require_createWorkflowSchemeDraftFromParent(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionProperty(), exports2);
    tslib_1.__exportStar(require_deleteActor(), exports2);
    tslib_1.__exportStar(require_deleteAddonProperty(), exports2);
    tslib_1.__exportStar(require_deleteAndReplaceVersion(), exports2);
    tslib_1.__exportStar(require_deleteAppProperty(), exports2);
    tslib_1.__exportStar(require_deleteAvatar(), exports2);
    tslib_1.__exportStar(require_deleteComment(), exports2);
    tslib_1.__exportStar(require_deleteCommentProperty(), exports2);
    tslib_1.__exportStar(require_deleteComponent(), exports2);
    tslib_1.__exportStar(require_deleteCustomField(), exports2);
    tslib_1.__exportStar(require_deleteCustomFieldContext(), exports2);
    tslib_1.__exportStar(require_deleteCustomFieldOption(), exports2);
    tslib_1.__exportStar(require_deleteDashboard(), exports2);
    tslib_1.__exportStar(require_deleteDashboardItemProperty(), exports2);
    tslib_1.__exportStar(require_deleteDefaultWorkflow(), exports2);
    tslib_1.__exportStar(require_deleteDraftDefaultWorkflow(), exports2);
    tslib_1.__exportStar(require_deleteDraftWorkflowMapping(), exports2);
    tslib_1.__exportStar(require_deleteFavouriteForFilter(), exports2);
    tslib_1.__exportStar(require_deleteFieldConfiguration(), exports2);
    tslib_1.__exportStar(require_deleteFieldConfigurationScheme(), exports2);
    tslib_1.__exportStar(require_deleteFilter(), exports2);
    tslib_1.__exportStar(require_deleteInactiveWorkflow(), exports2);
    tslib_1.__exportStar(require_deleteIssue(), exports2);
    tslib_1.__exportStar(require_deleteIssueFieldOption(), exports2);
    tslib_1.__exportStar(require_deleteIssueLink(), exports2);
    tslib_1.__exportStar(require_deleteIssueLinkType(), exports2);
    tslib_1.__exportStar(require_deleteIssueProperty(), exports2);
    tslib_1.__exportStar(require_deleteIssueType(), exports2);
    tslib_1.__exportStar(require_deleteIssueTypeProperty(), exports2);
    tslib_1.__exportStar(require_deleteIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_deleteIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_deleteNotificationScheme(), exports2);
    tslib_1.__exportStar(require_deletePermissionScheme(), exports2);
    tslib_1.__exportStar(require_deletePermissionSchemeEntity(), exports2);
    tslib_1.__exportStar(require_deleteProject(), exports2);
    tslib_1.__exportStar(require_deleteProjectAsynchronously(), exports2);
    tslib_1.__exportStar(require_deleteProjectAvatar(), exports2);
    tslib_1.__exportStar(require_deleteProjectProperty(), exports2);
    tslib_1.__exportStar(require_deleteProjectRole(), exports2);
    tslib_1.__exportStar(require_deleteProjectRoleActorsFromRole(), exports2);
    tslib_1.__exportStar(require_deleteRemoteIssueLinkByGlobalId(), exports2);
    tslib_1.__exportStar(require_deleteRemoteIssueLinkById(), exports2);
    tslib_1.__exportStar(require_deleteResolution(), exports2);
    tslib_1.__exportStar(require_deleteScreen(), exports2);
    tslib_1.__exportStar(require_deleteScreenScheme(), exports2);
    tslib_1.__exportStar(require_deleteScreenTab(), exports2);
    tslib_1.__exportStar(require_deleteSecurityScheme(), exports2);
    tslib_1.__exportStar(require_deleteSharePermission(), exports2);
    tslib_1.__exportStar(require_deleteStatusesById(), exports2);
    tslib_1.__exportStar(require_deleteUiModification(), exports2);
    tslib_1.__exportStar(require_deleteUserProperty(), exports2);
    tslib_1.__exportStar(require_deleteWebhookById(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowMapping(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowScheme(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowSchemeDraft(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowSchemeDraftIssueType(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowSchemeIssueType(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowTransitionProperty(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowTransitionRuleConfigurations(), exports2);
    tslib_1.__exportStar(require_deleteWorklog(), exports2);
    tslib_1.__exportStar(require_deleteWorklogProperty(), exports2);
    tslib_1.__exportStar(require_doTransition(), exports2);
    tslib_1.__exportStar(require_editIssue(), exports2);
    tslib_1.__exportStar(require_evaluateJiraExpression(), exports2);
    tslib_1.__exportStar(require_expandAttachmentForHumans(), exports2);
    tslib_1.__exportStar(require_expandAttachmentForMachines(), exports2);
    tslib_1.__exportStar(require_exportArchivedIssues(), exports2);
    tslib_1.__exportStar(require_findAssignableUsers(), exports2);
    tslib_1.__exportStar(require_findBulkAssignableUsers(), exports2);
    tslib_1.__exportStar(require_findGroups(), exports2);
    tslib_1.__exportStar(require_findUserKeysByQuery(), exports2);
    tslib_1.__exportStar(require_findUsers(), exports2);
    tslib_1.__exportStar(require_findUsersAndGroups(), exports2);
    tslib_1.__exportStar(require_findUsersByQuery(), exports2);
    tslib_1.__exportStar(require_findUsersForPicker(), exports2);
    tslib_1.__exportStar(require_findUsersWithAllPermissions(), exports2);
    tslib_1.__exportStar(require_findUsersWithBrowsePermission(), exports2);
    tslib_1.__exportStar(require_fullyUpdateProjectRole(), exports2);
    tslib_1.__exportStar(require_getAccessibleProjectTypeByKey(), exports2);
    tslib_1.__exportStar(require_getAddonProperties(), exports2);
    tslib_1.__exportStar(require_getAddonProperty(), exports2);
    tslib_1.__exportStar(require_getAllDashboards(), exports2);
    tslib_1.__exportStar(require_getAllFieldConfigurations(), exports2);
    tslib_1.__exportStar(require_getAllFieldConfigurationSchemes(), exports2);
    tslib_1.__exportStar(require_getAllGadgets(), exports2);
    tslib_1.__exportStar(require_getAllIssueFieldOptions(), exports2);
    tslib_1.__exportStar(require_getAllIssueTypeSchemes(), exports2);
    tslib_1.__exportStar(require_getAllLabels(), exports2);
    tslib_1.__exportStar(require_getAllPermissionSchemes(), exports2);
    tslib_1.__exportStar(require_getAllProjectAvatars(), exports2);
    tslib_1.__exportStar(require_getAllScreenTabFields(), exports2);
    tslib_1.__exportStar(require_getAllScreenTabs(), exports2);
    tslib_1.__exportStar(require_getAllStatuses(), exports2);
    tslib_1.__exportStar(require_getAllSystemAvatars(), exports2);
    tslib_1.__exportStar(require_getAllUsers(), exports2);
    tslib_1.__exportStar(require_getAllUsersDefault(), exports2);
    tslib_1.__exportStar(require_getAllWorkflowSchemes(), exports2);
    tslib_1.__exportStar(require_getAlternativeIssueTypes(), exports2);
    tslib_1.__exportStar(require_getApplicationProperty(), exports2);
    tslib_1.__exportStar(require_getApplicationRole(), exports2);
    tslib_1.__exportStar(require_getAssignedPermissionScheme(), exports2);
    tslib_1.__exportStar(require_getAttachment(), exports2);
    tslib_1.__exportStar(require_getAttachmentContent(), exports2);
    tslib_1.__exportStar(require_getAttachmentThumbnail(), exports2);
    tslib_1.__exportStar(require_getAuditRecords(), exports2);
    tslib_1.__exportStar(require_getAutoCompletePost(), exports2);
    tslib_1.__exportStar(require_getAvailableScreenFields(), exports2);
    tslib_1.__exportStar(require_getAvatarImageByID(), exports2);
    tslib_1.__exportStar(require_getAvatarImageByOwner(), exports2);
    tslib_1.__exportStar(require_getAvatarImageByType(), exports2);
    tslib_1.__exportStar(require_getAvatars(), exports2);
    tslib_1.__exportStar(require_getBulkPermissions(), exports2);
    tslib_1.__exportStar(require_getChangeLogs(), exports2);
    tslib_1.__exportStar(require_getChangeLogsByIds(), exports2);
    tslib_1.__exportStar(require_getColumns(), exports2);
    tslib_1.__exportStar(require_getComment(), exports2);
    tslib_1.__exportStar(require_getCommentProperty(), exports2);
    tslib_1.__exportStar(require_getCommentPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getComments(), exports2);
    tslib_1.__exportStar(require_getCommentsByIds(), exports2);
    tslib_1.__exportStar(require_getComponent(), exports2);
    tslib_1.__exportStar(require_getComponentRelatedIssues(), exports2);
    tslib_1.__exportStar(require_getContextsForField(), exports2);
    tslib_1.__exportStar(require_getCreateIssueMeta(), exports2);
    tslib_1.__exportStar(require_getCurrentUser(), exports2);
    tslib_1.__exportStar(require_getCustomFieldConfiguration(), exports2);
    tslib_1.__exportStar(require_getCustomFieldContextsForProjectsAndIssueTypes(), exports2);
    tslib_1.__exportStar(require_getCustomFieldOption(), exports2);
    tslib_1.__exportStar(require_getDashboard(), exports2);
    tslib_1.__exportStar(require_getDashboardItemProperty(), exports2);
    tslib_1.__exportStar(require_getDashboardItemPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getDashboardsPaginated(), exports2);
    tslib_1.__exportStar(require_getDefaultValues(), exports2);
    tslib_1.__exportStar(require_getDefaultWorkflow(), exports2);
    tslib_1.__exportStar(require_getDraftDefaultWorkflow(), exports2);
    tslib_1.__exportStar(require_getDraftWorkflow(), exports2);
    tslib_1.__exportStar(require_getDynamicWebhooksForApp(), exports2);
    tslib_1.__exportStar(require_getEditIssueMeta(), exports2);
    tslib_1.__exportStar(require_getFailedWebhooks(), exports2);
    tslib_1.__exportStar(require_getFavouriteFilters(), exports2);
    tslib_1.__exportStar(require_getFeaturesForProject(), exports2);
    tslib_1.__exportStar(require_getFieldAutoCompleteForQueryString(), exports2);
    tslib_1.__exportStar(require_getFieldConfigurationItems(), exports2);
    tslib_1.__exportStar(require_getFieldConfigurationSchemeMappings(), exports2);
    tslib_1.__exportStar(require_getFieldConfigurationSchemeProjectMapping(), exports2);
    tslib_1.__exportStar(require_getFieldsPaginated(), exports2);
    tslib_1.__exportStar(require_getFilter(), exports2);
    tslib_1.__exportStar(require_getFiltersPaginated(), exports2);
    tslib_1.__exportStar(require_getHierarchy(), exports2);
    tslib_1.__exportStar(require_getIdsOfWorklogsDeletedSince(), exports2);
    tslib_1.__exportStar(require_getIdsOfWorklogsModifiedSince(), exports2);
    tslib_1.__exportStar(require_getIssue2(), exports2);
    tslib_1.__exportStar(require_getIssueFieldOption(), exports2);
    tslib_1.__exportStar(require_getIssueLink(), exports2);
    tslib_1.__exportStar(require_getIssueLinkType(), exports2);
    tslib_1.__exportStar(require_getIssuePickerResource(), exports2);
    tslib_1.__exportStar(require_getIssueProperty(), exports2);
    tslib_1.__exportStar(require_getIssuePropertyKeys(), exports2);
    tslib_1.__exportStar(require_getIssueSecurityLevel(), exports2);
    tslib_1.__exportStar(require_getIssueSecurityLevelMembers(), exports2);
    tslib_1.__exportStar(require_getIssueSecurityScheme(), exports2);
    tslib_1.__exportStar(require_getIssueType(), exports2);
    tslib_1.__exportStar(require_getIssueTypeMappingsForContexts(), exports2);
    tslib_1.__exportStar(require_getIssueTypeProperty(), exports2);
    tslib_1.__exportStar(require_getIssueTypePropertyKeys(), exports2);
    tslib_1.__exportStar(require_getIssueTypeSchemeForProjects(), exports2);
    tslib_1.__exportStar(require_getIssueTypeSchemesMapping(), exports2);
    tslib_1.__exportStar(require_getIssueTypeScreenSchemeMappings(), exports2);
    tslib_1.__exportStar(require_getIssueTypeScreenSchemeProjectAssociations(), exports2);
    tslib_1.__exportStar(require_getIssueTypeScreenSchemes(), exports2);
    tslib_1.__exportStar(require_getIssueTypesForProject(), exports2);
    tslib_1.__exportStar(require_getIssueWatchers(), exports2);
    tslib_1.__exportStar(require_getIssueWorklog(), exports2);
    tslib_1.__exportStar(require_getIsWatchingIssueBulk(), exports2);
    tslib_1.__exportStar(require_getMyFilters(), exports2);
    tslib_1.__exportStar(require_getMyPermissions(), exports2);
    tslib_1.__exportStar(require_getNotificationScheme(), exports2);
    tslib_1.__exportStar(require_getNotificationSchemeForProject(), exports2);
    tslib_1.__exportStar(require_getNotificationSchemes(), exports2);
    tslib_1.__exportStar(require_getNotificationSchemeToProjectMappings(), exports2);
    tslib_1.__exportStar(require_getOptionsForContext(), exports2);
    tslib_1.__exportStar(require_getPermissionScheme(), exports2);
    tslib_1.__exportStar(require_getPermissionSchemeGrant(), exports2);
    tslib_1.__exportStar(require_getPermissionSchemeGrants(), exports2);
    tslib_1.__exportStar(require_getPermittedProjects(), exports2);
    tslib_1.__exportStar(require_getPrecomputations(), exports2);
    tslib_1.__exportStar(require_getPreference(), exports2);
    tslib_1.__exportStar(require_getPriority(), exports2);
    tslib_1.__exportStar(require_getProject(), exports2);
    tslib_1.__exportStar(require_getProjectCategoryById(), exports2);
    tslib_1.__exportStar(require_getProjectComponents(), exports2);
    tslib_1.__exportStar(require_getProjectComponentsPaginated(), exports2);
    tslib_1.__exportStar(require_getProjectContextMapping(), exports2);
    tslib_1.__exportStar(require_getProjectEmail(), exports2);
    tslib_1.__exportStar(require_getProjectIssueSecurityScheme(), exports2);
    tslib_1.__exportStar(require_getProjectProperty(), exports2);
    tslib_1.__exportStar(require_getProjectPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getProjectRole(), exports2);
    tslib_1.__exportStar(require_getProjectRoleActorsForRole(), exports2);
    tslib_1.__exportStar(require_getProjectRoleById(), exports2);
    tslib_1.__exportStar(require_getProjectRoleDetails(), exports2);
    tslib_1.__exportStar(require_getProjectRoles(), exports2);
    tslib_1.__exportStar(require_getProjectsForIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_getProjectTypeByKey(), exports2);
    tslib_1.__exportStar(require_getProjectVersions(), exports2);
    tslib_1.__exportStar(require_getProjectVersionsPaginated(), exports2);
    tslib_1.__exportStar(require_getRecent(), exports2);
    tslib_1.__exportStar(require_getRemoteIssueLinkById(), exports2);
    tslib_1.__exportStar(require_getRemoteIssueLinks(), exports2);
    tslib_1.__exportStar(require_getScreens(), exports2);
    tslib_1.__exportStar(require_getScreenSchemes(), exports2);
    tslib_1.__exportStar(require_getScreensForField(), exports2);
    tslib_1.__exportStar(require_getSecurityLevelMembers(), exports2);
    tslib_1.__exportStar(require_getSecurityLevels(), exports2);
    tslib_1.__exportStar(require_getSecurityLevelsForProject(), exports2);
    tslib_1.__exportStar(require_getSelectableIssueFieldOptions(), exports2);
    tslib_1.__exportStar(require_getSharePermission(), exports2);
    tslib_1.__exportStar(require_getSharePermissions(), exports2);
    tslib_1.__exportStar(require_getStatus(), exports2);
    tslib_1.__exportStar(require_getStatusCategory(), exports2);
    tslib_1.__exportStar(require_getStatusesById(), exports2);
    tslib_1.__exportStar(require_getTask(), exports2);
    tslib_1.__exportStar(require_getTransitions(), exports2);
    tslib_1.__exportStar(require_getTrashedFieldsPaginated(), exports2);
    tslib_1.__exportStar(require_getUiModifications(), exports2);
    tslib_1.__exportStar(require_getUser(), exports2);
    tslib_1.__exportStar(require_getUserDefaultColumns(), exports2);
    tslib_1.__exportStar(require_getUserEmail(), exports2);
    tslib_1.__exportStar(require_getUserEmailBulk(), exports2);
    tslib_1.__exportStar(require_getUserGroups(), exports2);
    tslib_1.__exportStar(require_getUserProperty(), exports2);
    tslib_1.__exportStar(require_getUserPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getUsersFromGroup(), exports2);
    tslib_1.__exportStar(require_getValidProjectKey(), exports2);
    tslib_1.__exportStar(require_getValidProjectName(), exports2);
    tslib_1.__exportStar(require_getVersion(), exports2);
    tslib_1.__exportStar(require_getVersionRelatedIssues(), exports2);
    tslib_1.__exportStar(require_getVersionUnresolvedIssues(), exports2);
    tslib_1.__exportStar(require_getVisibleIssueFieldOptions(), exports2);
    tslib_1.__exportStar(require_getVotes(), exports2);
    tslib_1.__exportStar(require_getWorkflow(), exports2);
    tslib_1.__exportStar(require_getWorkflowScheme(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeDraft(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeDraftIssueType(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeIssueType(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeProjectAssociations(), exports2);
    tslib_1.__exportStar(require_getWorkflowsPaginated(), exports2);
    tslib_1.__exportStar(require_getWorkflowTransitionProperties(), exports2);
    tslib_1.__exportStar(require_getWorkflowTransitionRuleConfigurations(), exports2);
    tslib_1.__exportStar(require_getWorklog(), exports2);
    tslib_1.__exportStar(require_getWorklogProperty(), exports2);
    tslib_1.__exportStar(require_getWorklogPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getWorklogsForIds(), exports2);
    tslib_1.__exportStar(require_linkIssues(), exports2);
    tslib_1.__exportStar(require_matchIssues(), exports2);
    tslib_1.__exportStar(require_mergeVersions(), exports2);
    tslib_1.__exportStar(require_migrateQueries(), exports2);
    tslib_1.__exportStar(require_movePriorities(), exports2);
    tslib_1.__exportStar(require_moveResolutions(), exports2);
    tslib_1.__exportStar(require_moveScreenTab(), exports2);
    tslib_1.__exportStar(require_moveScreenTabField(), exports2);
    tslib_1.__exportStar(require_moveVersion(), exports2);
    tslib_1.__exportStar(require_notify(), exports2);
    tslib_1.__exportStar(require_parseJqlQueries(), exports2);
    tslib_1.__exportStar(require_partialUpdateProjectRole(), exports2);
    tslib_1.__exportStar(require_publishDraftWorkflowScheme(), exports2);
    tslib_1.__exportStar(require_putAddonProperty(), exports2);
    tslib_1.__exportStar(require_putAppProperty(), exports2);
    tslib_1.__exportStar(require_readWorkflows(), exports2);
    tslib_1.__exportStar(require_refreshWebhooks(), exports2);
    tslib_1.__exportStar(require_registerDynamicWebhooks(), exports2);
    tslib_1.__exportStar(require_registerModules(), exports2);
    tslib_1.__exportStar(require_removeAttachment(), exports2);
    tslib_1.__exportStar(require_removeCustomFieldContextFromProjects(), exports2);
    tslib_1.__exportStar(require_removeGadget(), exports2);
    tslib_1.__exportStar(require_removeGroup(), exports2);
    tslib_1.__exportStar(require_removeIssueTypeFromIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_removeIssueTypesFromContext(), exports2);
    tslib_1.__exportStar(require_removeIssueTypesFromGlobalFieldConfigurationScheme(), exports2);
    tslib_1.__exportStar(require_removeLevel(), exports2);
    tslib_1.__exportStar(require_removeMappingsFromIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_removeMemberFromSecurityLevel(), exports2);
    tslib_1.__exportStar(require_removeModules(), exports2);
    tslib_1.__exportStar(require_removeNotificationFromNotificationScheme(), exports2);
    tslib_1.__exportStar(require_removePreference(), exports2);
    tslib_1.__exportStar(require_removeProjectCategory(), exports2);
    tslib_1.__exportStar(require_removeScreenTabField(), exports2);
    tslib_1.__exportStar(require_removeUser(), exports2);
    tslib_1.__exportStar(require_removeUserFromGroup(), exports2);
    tslib_1.__exportStar(require_removeVote(), exports2);
    tslib_1.__exportStar(require_removeWatcher(), exports2);
    tslib_1.__exportStar(require_renameScreenTab(), exports2);
    tslib_1.__exportStar(require_reorderCustomFieldOptions(), exports2);
    tslib_1.__exportStar(require_reorderIssueTypesInIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_replaceIssueFieldOption(), exports2);
    tslib_1.__exportStar(require_resetColumns(), exports2);
    tslib_1.__exportStar(require_resetUserColumns(), exports2);
    tslib_1.__exportStar(require_restore(), exports2);
    tslib_1.__exportStar(require_restoreCustomField(), exports2);
    tslib_1.__exportStar(require_sanitiseJqlQueries(), exports2);
    tslib_1.__exportStar(require_search(), exports2);
    tslib_1.__exportStar(require_searchForIssuesUsingJql(), exports2);
    tslib_1.__exportStar(require_searchForIssuesUsingJqlPost(), exports2);
    tslib_1.__exportStar(require_searchPriorities(), exports2);
    tslib_1.__exportStar(require_searchProjects(), exports2);
    tslib_1.__exportStar(require_searchProjectsUsingSecuritySchemes(), exports2);
    tslib_1.__exportStar(require_searchResolutions(), exports2);
    tslib_1.__exportStar(require_searchSecuritySchemes(), exports2);
    tslib_1.__exportStar(require_selectTimeTrackingImplementation(), exports2);
    tslib_1.__exportStar(require_setActors(), exports2);
    tslib_1.__exportStar(require_setApplicationProperty(), exports2);
    tslib_1.__exportStar(require_setBanner(), exports2);
    tslib_1.__exportStar(require_setColumns(), exports2);
    tslib_1.__exportStar(require_setCommentProperty(), exports2);
    tslib_1.__exportStar(require_setDashboardItemProperty(), exports2);
    tslib_1.__exportStar(require_setDefaultLevels(), exports2);
    tslib_1.__exportStar(require_setDefaultPriority(), exports2);
    tslib_1.__exportStar(require_setDefaultResolution(), exports2);
    tslib_1.__exportStar(require_setDefaultShareScope(), exports2);
    tslib_1.__exportStar(require_setDefaultValues(), exports2);
    tslib_1.__exportStar(require_setFavouriteForFilter(), exports2);
    tslib_1.__exportStar(require_setFieldConfigurationSchemeMapping(), exports2);
    tslib_1.__exportStar(require_setIssueProperty(), exports2);
    tslib_1.__exportStar(require_setIssueTypeProperty(), exports2);
    tslib_1.__exportStar(require_setPreference(), exports2);
    tslib_1.__exportStar(require_setProjectProperty(), exports2);
    tslib_1.__exportStar(require_setSharedTimeTrackingConfiguration(), exports2);
    tslib_1.__exportStar(require_setUserColumns(), exports2);
    tslib_1.__exportStar(require_setUserProperty(), exports2);
    tslib_1.__exportStar(require_setWorkflowSchemeDraftIssueType(), exports2);
    tslib_1.__exportStar(require_setWorkflowSchemeIssueType(), exports2);
    tslib_1.__exportStar(require_setWorklogProperty(), exports2);
    tslib_1.__exportStar(require_storeAvatar(), exports2);
    tslib_1.__exportStar(require_toggleFeatureForProject(), exports2);
    tslib_1.__exportStar(require_trashCustomField(), exports2);
    tslib_1.__exportStar(require_unarchiveIssues(), exports2);
    tslib_1.__exportStar(require_updateComment(), exports2);
    tslib_1.__exportStar(require_updateComponent(), exports2);
    tslib_1.__exportStar(require_updateCustomField(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldConfiguration(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldContext(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldOption(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldValue(), exports2);
    tslib_1.__exportStar(require_updateDashboard(), exports2);
    tslib_1.__exportStar(require_updateDefaultScreenScheme(), exports2);
    tslib_1.__exportStar(require_updateDefaultWorkflow(), exports2);
    tslib_1.__exportStar(require_updateDraftDefaultWorkflow(), exports2);
    tslib_1.__exportStar(require_updateDraftWorkflowMapping(), exports2);
    tslib_1.__exportStar(require_updateEntityPropertiesValue(), exports2);
    tslib_1.__exportStar(require_updateFieldConfiguration(), exports2);
    tslib_1.__exportStar(require_updateFieldConfigurationItems(), exports2);
    tslib_1.__exportStar(require_updateFieldConfigurationScheme(), exports2);
    tslib_1.__exportStar(require_updateFilter(), exports2);
    tslib_1.__exportStar(require_updateGadget(), exports2);
    tslib_1.__exportStar(require_updateIssueFieldOption(), exports2);
    tslib_1.__exportStar(require_updateIssueFields(), exports2);
    tslib_1.__exportStar(require_updateIssueLinkType(), exports2);
    tslib_1.__exportStar(require_updateIssueSecurityScheme(), exports2);
    tslib_1.__exportStar(require_updateIssueType(), exports2);
    tslib_1.__exportStar(require_updateIssueTypeScheme(), exports2);
    tslib_1.__exportStar(require_updateIssueTypeScreenScheme(), exports2);
    tslib_1.__exportStar(require_updateMultipleCustomFieldValues(), exports2);
    tslib_1.__exportStar(require_updateNotificationScheme(), exports2);
    tslib_1.__exportStar(require_updatePermissionScheme(), exports2);
    tslib_1.__exportStar(require_updatePrecomputations(), exports2);
    tslib_1.__exportStar(require_updatePriority(), exports2);
    tslib_1.__exportStar(require_updateProject(), exports2);
    tslib_1.__exportStar(require_updateProjectAvatar(), exports2);
    tslib_1.__exportStar(require_updateProjectCategory(), exports2);
    tslib_1.__exportStar(require_updateProjectEmail(), exports2);
    tslib_1.__exportStar(require_updateRemoteIssueLink(), exports2);
    tslib_1.__exportStar(require_updateResolution(), exports2);
    tslib_1.__exportStar(require_updateScreen(), exports2);
    tslib_1.__exportStar(require_updateScreenScheme(), exports2);
    tslib_1.__exportStar(require_updateSecurityLevel(), exports2);
    tslib_1.__exportStar(require_updateStatuses(), exports2);
    tslib_1.__exportStar(require_updateUiModification(), exports2);
    tslib_1.__exportStar(require_updateVersion(), exports2);
    tslib_1.__exportStar(require_updateWorkflowMapping(), exports2);
    tslib_1.__exportStar(require_updateWorkflows(), exports2);
    tslib_1.__exportStar(require_updateWorkflowScheme(), exports2);
    tslib_1.__exportStar(require_updateWorkflowSchemeDraft(), exports2);
    tslib_1.__exportStar(require_updateWorkflowTransitionProperty(), exports2);
    tslib_1.__exportStar(require_updateWorkflowTransitionRuleConfigurations(), exports2);
    tslib_1.__exportStar(require_updateWorklog(), exports2);
    tslib_1.__exportStar(require_validateCreateWorkflows(), exports2);
    tslib_1.__exportStar(require_validateProjectKey(), exports2);
    tslib_1.__exportStar(require_validateUpdateWorkflows(), exports2);
    tslib_1.__exportStar(require_workflowCapabilities2(), exports2);
    tslib_1.__exportStar(require_workflowRuleSearch(), exports2);
  }
});

// node_modules/jira.js/out/version2/client/version2Client.js
var require_version2Client = __commonJS({
  "node_modules/jira.js/out/version2/client/version2Client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Version2Client = void 0;
    var clients_1 = require_clients();
    var __1 = require_version22();
    var Version2Client2 = class extends clients_1.BaseClient {
      constructor() {
        super(...arguments);
        this.announcementBanner = new __1.AnnouncementBanner(this);
        this.applicationRoles = new __1.ApplicationRoles(this);
        this.appMigration = new __1.AppMigration(this);
        this.appProperties = new __1.AppProperties(this);
        this.auditRecords = new __1.AuditRecords(this);
        this.avatars = new __1.Avatars(this);
        this.dashboards = new __1.Dashboards(this);
        this.dynamicModules = new __1.DynamicModules(this);
        this.filters = new __1.Filters(this);
        this.filterSharing = new __1.FilterSharing(this);
        this.groupAndUserPicker = new __1.GroupAndUserPicker(this);
        this.groups = new __1.Groups(this);
        this.issueAttachments = new __1.IssueAttachments(this);
        this.issueCommentProperties = new __1.IssueCommentProperties(this);
        this.issueComments = new __1.IssueComments(this);
        this.issueCustomFieldConfigurationApps = new __1.IssueCustomFieldConfigurationApps(this);
        this.issueCustomFieldContexts = new __1.IssueCustomFieldContexts(this);
        this.issueCustomFieldOptions = new __1.IssueCustomFieldOptions(this);
        this.issueCustomFieldOptionsApps = new __1.IssueCustomFieldOptionsApps(this);
        this.issueCustomFieldValuesApps = new __1.IssueCustomFieldValuesApps(this);
        this.issueFieldConfigurations = new __1.IssueFieldConfigurations(this);
        this.issueFields = new __1.IssueFields(this);
        this.issueLinks = new __1.IssueLinks(this);
        this.issueLinkTypes = new __1.IssueLinkTypes(this);
        this.issueNavigatorSettings = new __1.IssueNavigatorSettings(this);
        this.issueNotificationSchemes = new __1.IssueNotificationSchemes(this);
        this.issuePriorities = new __1.IssuePriorities(this);
        this.issueProperties = new __1.IssueProperties(this);
        this.issueRemoteLinks = new __1.IssueRemoteLinks(this);
        this.issueResolutions = new __1.IssueResolutions(this);
        this.issues = new __1.Issues(this);
        this.issueSearch = new __1.IssueSearch(this);
        this.issueSecurityLevel = new __1.IssueSecurityLevel(this);
        this.issueSecuritySchemes = new __1.IssueSecuritySchemes(this);
        this.issueTypeProperties = new __1.IssueTypeProperties(this);
        this.issueTypes = new __1.IssueTypes(this);
        this.issueTypeSchemes = new __1.IssueTypeSchemes(this);
        this.issueTypeScreenSchemes = new __1.IssueTypeScreenSchemes(this);
        this.issueVotes = new __1.IssueVotes(this);
        this.issueWatchers = new __1.IssueWatchers(this);
        this.issueWorklogProperties = new __1.IssueWorklogProperties(this);
        this.issueWorklogs = new __1.IssueWorklogs(this);
        this.jiraExpressions = new __1.JiraExpressions(this);
        this.jiraSettings = new __1.JiraSettings(this);
        this.jql = new __1.JQL(this);
        this.jqlFunctionsApps = new __1.JqlFunctionsApps(this);
        this.labels = new __1.Labels(this);
        this.licenseMetrics = new __1.LicenseMetrics(this);
        this.myself = new __1.Myself(this);
        this.permissions = new __1.Permissions(this);
        this.permissionSchemes = new __1.PermissionSchemes(this);
        this.projectAvatars = new __1.ProjectAvatars(this);
        this.projectCategories = new __1.ProjectCategories(this);
        this.projectComponents = new __1.ProjectComponents(this);
        this.projectEmail = new __1.ProjectEmail(this);
        this.projectFeatures = new __1.ProjectFeatures(this);
        this.projectKeyAndNameValidation = new __1.ProjectKeyAndNameValidation(this);
        this.projectPermissionSchemes = new __1.ProjectPermissionSchemes(this);
        this.projectProperties = new __1.ProjectProperties(this);
        this.projectRoleActors = new __1.ProjectRoleActors(this);
        this.projectRoles = new __1.ProjectRoles(this);
        this.projects = new __1.Projects(this);
        this.projectTypes = new __1.ProjectTypes(this);
        this.projectVersions = new __1.ProjectVersions(this);
        this.screens = new __1.Screens(this);
        this.screenSchemes = new __1.ScreenSchemes(this);
        this.screenTabFields = new __1.ScreenTabFields(this);
        this.screenTabs = new __1.ScreenTabs(this);
        this.serverInfo = new __1.ServerInfo(this);
        this.status = new __1.Status(this);
        this.tasks = new __1.Tasks(this);
        this.timeTracking = new __1.TimeTracking(this);
        this.uiModificationsApps = new __1.UIModificationsApps(this);
        this.userProperties = new __1.UserProperties(this);
        this.users = new __1.Users(this);
        this.userSearch = new __1.UserSearch(this);
        this.webhooks = new __1.Webhooks(this);
        this.workflows = new __1.Workflows(this);
        this.workflowSchemeDrafts = new __1.WorkflowSchemeDrafts(this);
        this.workflowSchemeProjectAssociations = new __1.WorkflowSchemeProjectAssociations(this);
        this.workflowSchemes = new __1.WorkflowSchemes(this);
        this.workflowStatusCategories = new __1.WorkflowStatusCategories(this);
        this.workflowStatuses = new __1.WorkflowStatuses(this);
        this.workflowTransitionProperties = new __1.WorkflowTransitionProperties(this);
        this.workflowTransitionRules = new __1.WorkflowTransitionRules(this);
      }
    };
    exports2.Version2Client = Version2Client2;
  }
});

// node_modules/jira.js/out/version2/client/index.js
var require_client3 = __commonJS({
  "node_modules/jira.js/out/version2/client/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_version2Client(), exports2);
  }
});

// node_modules/jira.js/out/version2/index.js
var require_version22 = __commonJS({
  "node_modules/jira.js/out/version2/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Version2Parameters = exports2.Version2Models = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_announcementBanner(), exports2);
    tslib_1.__exportStar(require_applicationRoles(), exports2);
    tslib_1.__exportStar(require_appMigration(), exports2);
    tslib_1.__exportStar(require_appProperties(), exports2);
    tslib_1.__exportStar(require_auditRecords(), exports2);
    tslib_1.__exportStar(require_avatars(), exports2);
    tslib_1.__exportStar(require_dashboards(), exports2);
    tslib_1.__exportStar(require_dynamicModules(), exports2);
    tslib_1.__exportStar(require_filters(), exports2);
    tslib_1.__exportStar(require_filterSharing(), exports2);
    tslib_1.__exportStar(require_groupAndUserPicker(), exports2);
    tslib_1.__exportStar(require_groups(), exports2);
    tslib_1.__exportStar(require_issueAttachments(), exports2);
    tslib_1.__exportStar(require_issueCommentProperties(), exports2);
    tslib_1.__exportStar(require_issueComments(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldConfigurationApps(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldContexts(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldOptions(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldOptionsApps(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldValuesApps(), exports2);
    tslib_1.__exportStar(require_issueFieldConfigurations(), exports2);
    tslib_1.__exportStar(require_issueFields(), exports2);
    tslib_1.__exportStar(require_issueLinks(), exports2);
    tslib_1.__exportStar(require_issueLinkTypes(), exports2);
    tslib_1.__exportStar(require_issueNavigatorSettings(), exports2);
    tslib_1.__exportStar(require_issueNotificationSchemes(), exports2);
    tslib_1.__exportStar(require_issuePriorities(), exports2);
    tslib_1.__exportStar(require_issueProperties(), exports2);
    tslib_1.__exportStar(require_issueRemoteLinks(), exports2);
    tslib_1.__exportStar(require_issueResolutions(), exports2);
    tslib_1.__exportStar(require_issues(), exports2);
    tslib_1.__exportStar(require_issueSearch(), exports2);
    tslib_1.__exportStar(require_issueSecurityLevel(), exports2);
    tslib_1.__exportStar(require_issueSecuritySchemes(), exports2);
    tslib_1.__exportStar(require_issueTypeProperties(), exports2);
    tslib_1.__exportStar(require_issueTypes(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemes(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemes(), exports2);
    tslib_1.__exportStar(require_issueVotes(), exports2);
    tslib_1.__exportStar(require_issueWatchers(), exports2);
    tslib_1.__exportStar(require_issueWorklogProperties(), exports2);
    tslib_1.__exportStar(require_issueWorklogs(), exports2);
    tslib_1.__exportStar(require_jiraExpressions(), exports2);
    tslib_1.__exportStar(require_jiraSettings(), exports2);
    tslib_1.__exportStar(require_jQL(), exports2);
    tslib_1.__exportStar(require_jqlFunctionsApps(), exports2);
    tslib_1.__exportStar(require_labels(), exports2);
    tslib_1.__exportStar(require_licenseMetrics(), exports2);
    tslib_1.__exportStar(require_myself(), exports2);
    tslib_1.__exportStar(require_permissions(), exports2);
    tslib_1.__exportStar(require_permissionSchemes(), exports2);
    tslib_1.__exportStar(require_projectAvatars(), exports2);
    tslib_1.__exportStar(require_projectCategories(), exports2);
    tslib_1.__exportStar(require_projectComponents(), exports2);
    tslib_1.__exportStar(require_projectEmail(), exports2);
    tslib_1.__exportStar(require_projectFeatures(), exports2);
    tslib_1.__exportStar(require_projectKeyAndNameValidation(), exports2);
    tslib_1.__exportStar(require_projectPermissionSchemes(), exports2);
    tslib_1.__exportStar(require_projectProperties(), exports2);
    tslib_1.__exportStar(require_projectRoleActors(), exports2);
    tslib_1.__exportStar(require_projectRoles(), exports2);
    tslib_1.__exportStar(require_projects2(), exports2);
    tslib_1.__exportStar(require_projectTypes(), exports2);
    tslib_1.__exportStar(require_projectVersions(), exports2);
    tslib_1.__exportStar(require_screens(), exports2);
    tslib_1.__exportStar(require_screenSchemes(), exports2);
    tslib_1.__exportStar(require_screenTabFields(), exports2);
    tslib_1.__exportStar(require_screenTabs(), exports2);
    tslib_1.__exportStar(require_serverInfo(), exports2);
    tslib_1.__exportStar(require_status2(), exports2);
    tslib_1.__exportStar(require_tasks(), exports2);
    tslib_1.__exportStar(require_timeTracking(), exports2);
    tslib_1.__exportStar(require_uIModificationsApps(), exports2);
    tslib_1.__exportStar(require_userProperties(), exports2);
    tslib_1.__exportStar(require_users(), exports2);
    tslib_1.__exportStar(require_userSearch(), exports2);
    tslib_1.__exportStar(require_webhooks(), exports2);
    tslib_1.__exportStar(require_workflows(), exports2);
    tslib_1.__exportStar(require_workflowSchemeDrafts(), exports2);
    tslib_1.__exportStar(require_workflowSchemeProjectAssociations(), exports2);
    tslib_1.__exportStar(require_workflowSchemes(), exports2);
    tslib_1.__exportStar(require_workflowStatusCategories(), exports2);
    tslib_1.__exportStar(require_workflowStatuses(), exports2);
    tslib_1.__exportStar(require_workflowTransitionProperties(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRules(), exports2);
    exports2.Version2Models = require_models2();
    exports2.Version2Parameters = require_parameters2();
    tslib_1.__exportStar(require_client3(), exports2);
  }
});

// node_modules/jira.js/out/version3/announcementBanner.js
var require_announcementBanner2 = __commonJS({
  "node_modules/jira.js/out/version3/announcementBanner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AnnouncementBanner = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AnnouncementBanner = class {
      constructor(client) {
        this.client = client;
      }
      getBanner(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/announcementBanner",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setBanner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/announcementBanner",
            method: "PUT",
            data: {
              isDismissible: parameters === null || parameters === void 0 ? void 0 : parameters.isDismissible,
              isEnabled: parameters === null || parameters === void 0 ? void 0 : parameters.isEnabled,
              message: parameters === null || parameters === void 0 ? void 0 : parameters.message,
              visibility: parameters === null || parameters === void 0 ? void 0 : parameters.visibility
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AnnouncementBanner = AnnouncementBanner;
  }
});

// node_modules/jira.js/out/version3/applicationRoles.js
var require_applicationRoles2 = __commonJS({
  "node_modules/jira.js/out/version3/applicationRoles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApplicationRoles = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ApplicationRoles = class {
      constructor(client) {
        this.client = client;
      }
      getAllApplicationRoles(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/applicationrole",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApplicationRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const key = typeof parameters === "string" ? parameters : parameters.key;
          const config = {
            url: `/rest/api/3/applicationrole/${key}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ApplicationRoles = ApplicationRoles;
  }
});

// node_modules/jira.js/out/version3/appMigration.js
var require_appMigration2 = __commonJS({
  "node_modules/jira.js/out/version3/appMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AppMigration = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AppMigration = class {
      constructor(client) {
        this.client = client;
      }
      updateIssueFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/migration/field",
            method: "PUT",
            headers: {
              "Atlassian-Account-Id": parameters.accountId,
              "Atlassian-Transfer-Id": parameters.transferId
            },
            data: {
              updateValueList: parameters.updateValueList
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateEntityPropertiesValue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/migration/properties/${parameters.entityType}`,
            method: "PUT",
            headers: {
              "Atlassian-Account-Id": parameters.accountId,
              "Atlassian-Transfer-Id": parameters.transferId,
              "Content-Type": "application/json"
            },
            data: parameters.entities
          };
          return this.client.sendRequest(config, callback);
        });
      }
      workflowRuleSearch(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/migration/workflow/rule/search",
            method: "POST",
            headers: {
              "Atlassian-Transfer-Id": parameters.transferId
            },
            data: {
              expand: parameters.expand,
              ruleIds: parameters.ruleIds,
              workflowEntityId: parameters.workflowEntityId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AppMigration = AppMigration;
  }
});

// node_modules/jira.js/out/version3/appProperties.js
var require_appProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/appProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AppProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AppProperties = class {
      constructor(client) {
        this.client = client;
      }
      getAddonProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const addonKey = typeof parameters === "string" ? parameters : parameters.addonKey;
          const config = {
            url: `/rest/atlassian-connect/1/addons/${addonKey}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAddonProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/addons/${parameters.addonKey}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      putAddonProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/addons/${parameters.addonKey}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAddonProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/atlassian-connect/1/addons/${parameters.addonKey}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      putAppProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/forge/1/app/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAppProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/forge/1/app/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AppProperties = AppProperties;
  }
});

// node_modules/jira.js/out/version3/auditRecords.js
var require_auditRecords3 = __commonJS({
  "node_modules/jira.js/out/version3/auditRecords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuditRecords = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var AuditRecords = class {
      constructor(client) {
        this.client = client;
      }
      getAuditRecords(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/auditing/record",
            method: "GET",
            params: {
              offset: parameters === null || parameters === void 0 ? void 0 : parameters.offset,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
              filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter,
              from: parameters === null || parameters === void 0 ? void 0 : parameters.from,
              to: parameters === null || parameters === void 0 ? void 0 : parameters.to
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.AuditRecords = AuditRecords;
  }
});

// node_modules/jira.js/out/version3/avatars.js
var require_avatars3 = __commonJS({
  "node_modules/jira.js/out/version3/avatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Avatars = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Avatars = class {
      constructor(client) {
        this.client = client;
      }
      getAllSystemAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const type = typeof parameters === "string" ? parameters : parameters.type;
          const config = {
            url: `/rest/api/3/avatar/${type}/system`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/universal_avatar/type/${parameters.type}/owner/${parameters.entityId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      storeAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/universal_avatar/type/${parameters.type}/owner/${parameters.entityId}`,
            method: "POST",
            params: {
              x: parameters.x,
              y: parameters.y,
              size: parameters.size
            },
            data: parameters.avatar
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/universal_avatar/type/${parameters.type}/owner/${parameters.owningObjectId}/avatar/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvatarImageByType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const type = typeof parameters === "string" ? parameters : parameters.type;
          const config = {
            url: `/rest/api/3/universal_avatar/view/type/${type}`,
            method: "GET",
            responseType: "arraybuffer",
            params: {
              size: typeof parameters !== "string" && parameters.size,
              format: typeof parameters !== "string" && parameters.format
            }
          };
          const { data: avatar, headers: { "content-type": contentTypeWithEncoding } } = yield this.client.sendRequestFullResponse(config);
          const contentType = contentTypeWithEncoding.split(";")[0].trim();
          return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
      }
      getAvatarImageByID(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/universal_avatar/view/type/${parameters.type}/avatar/${parameters.id}`,
            method: "GET",
            responseType: "arraybuffer",
            params: {
              size: parameters.size,
              format: parameters.format
            }
          };
          const { data: avatar, headers: { "content-type": contentTypeWithEncoding } } = yield this.client.sendRequestFullResponse(config);
          const contentType = contentTypeWithEncoding.split(";")[0].trim();
          return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
      }
      getAvatarImageByOwner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/universal_avatar/view/type/${parameters.type}/owner/${parameters.entityId}`,
            method: "GET",
            responseType: "arraybuffer",
            params: {
              size: parameters.size,
              format: parameters.format
            }
          };
          const { data: avatar, headers: { "content-type": contentTypeWithEncoding } } = yield this.client.sendRequestFullResponse(config);
          const contentType = contentTypeWithEncoding.split(";")[0].trim();
          return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
      }
    };
    exports2.Avatars = Avatars;
  }
});

// node_modules/jira.js/out/version3/dashboards.js
var require_dashboards2 = __commonJS({
  "node_modules/jira.js/out/version3/dashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Dashboards = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Dashboards = class {
      constructor(client) {
        this.client = client;
      }
      getAllDashboards(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/dashboard",
            method: "GET",
            params: {
              filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/dashboard",
            method: "POST",
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              name: parameters.name,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkEditDashboards(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/dashboard/bulk/edit",
            method: "PUT",
            data: {
              action: parameters.action,
              changeOwnerDetails: parameters.changeOwnerDetails,
              entityIds: parameters.entityIds,
              extendAdminPermissions: parameters.extendAdminPermissions,
              permissionDetails: parameters.permissionDetails
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllAvailableDashboardGadgets(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/dashboard/gadgets",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboardsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/dashboard/search",
            method: "GET",
            params: {
              dashboardName: parameters === null || parameters === void 0 ? void 0 : parameters.dashboardName,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllGadgets(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const dashboardId = typeof parameters === "string" ? parameters : parameters.dashboardId;
          const config = {
            url: `/rest/api/3/dashboard/${dashboardId}/gadget`,
            method: "GET",
            params: {
              moduleKey: typeof parameters !== "string" && parameters.moduleKey,
              uri: typeof parameters !== "string" && parameters.uri,
              gadgetId: typeof parameters !== "string" && parameters.gadgetId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget`,
            method: "POST",
            data: {
              color: parameters.color,
              ignoreUriAndModuleKeyValidation: parameters.ignoreUriAndModuleKeyValidation,
              moduleKey: parameters.moduleKey,
              position: parameters.position,
              title: parameters.title,
              uri: parameters.uri
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget/${parameters.gadgetId}`,
            method: "PUT",
            data: {
              color: parameters.color,
              position: parameters.position,
              title: parameters.title
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeGadget(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/gadget/${parameters.gadgetId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboardItemPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
            method: "PUT",
            headers: {
              "Content-Type": "application/json"
            },
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDashboardItemProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.dashboardId}/items/${parameters.itemId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/dashboard/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              name: parameters.name,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/dashboard/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      copyDashboard(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/dashboard/${parameters.id}/copy`,
            method: "POST",
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              name: parameters.name,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Dashboards = Dashboards;
  }
});

// node_modules/jira.js/out/version3/dynamicModules.js
var require_dynamicModules2 = __commonJS({
  "node_modules/jira.js/out/version3/dynamicModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DynamicModules = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var DynamicModules = class {
      constructor(client) {
        this.client = client;
      }
      getModules(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/app/module/dynamic",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      registerModules(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/app/module/dynamic",
            method: "POST",
            data: {
              modules: parameters === null || parameters === void 0 ? void 0 : parameters.modules
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeModules(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/atlassian-connect/1/app/module/dynamic",
            method: "DELETE",
            params: {
              moduleKey: parameters === null || parameters === void 0 ? void 0 : parameters.moduleKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.DynamicModules = DynamicModules;
  }
});

// node_modules/jira.js/out/version3/filters.js
var require_filters2 = __commonJS({
  "node_modules/jira.js/out/version3/filters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Filters = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Filters = class {
      constructor(client) {
        this.client = client;
      }
      createFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/filter",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              overrideSharePermissions: parameters === null || parameters === void 0 ? void 0 : parameters.overrideSharePermissions
            },
            data: {
              description: parameters.description,
              editPermissions: parameters.editPermissions,
              favourite: parameters.favourite,
              favouritedCount: parameters.favouritedCount,
              id: parameters.id,
              jql: parameters.jql,
              name: parameters.name,
              owner: parameters.owner,
              searchUrl: parameters.searchUrl,
              self: parameters.self,
              sharePermissions: parameters.sharePermissions,
              sharedUsers: parameters.sharedUsers,
              subscriptions: parameters.subscriptions,
              viewUrl: parameters.viewUrl
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFavouriteFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/filter/favourite",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getMyFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/filter/my",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              includeFavourites: parameters === null || parameters === void 0 ? void 0 : parameters.includeFavourites
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFiltersPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/filter/search",
            method: "GET",
            params: {
              filterName: parameters === null || parameters === void 0 ? void 0 : parameters.filterName,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              overrideSharePermissions: parameters === null || parameters === void 0 ? void 0 : parameters.overrideSharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand,
              overrideSharePermissions: typeof parameters !== "string" && parameters.overrideSharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/filter/${parameters.id}`,
            method: "PUT",
            params: {
              expand: parameters.expand,
              overrideSharePermissions: parameters.overrideSharePermissions
            },
            data: {
              name: parameters.name,
              description: parameters.description,
              jql: parameters.jql,
              favourite: parameters.favourite,
              sharePermissions: parameters.sharePermissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}/columns`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/filter/${parameters.id}/columns`,
            method: "PUT",
            data: parameters.columns
          };
          return this.client.sendRequest(config, callback);
        });
      }
      resetColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}/columns`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setFavouriteForFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}/favourite`,
            method: "PUT",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFavouriteForFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}/favourite`,
            method: "DELETE",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      changeFilterOwner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/filter/${parameters.id}/owner`,
            method: "PUT",
            data: {
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Filters = Filters;
  }
});

// node_modules/jira.js/out/version3/filterSharing.js
var require_filterSharing2 = __commonJS({
  "node_modules/jira.js/out/version3/filterSharing.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterSharing = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var FilterSharing = class {
      constructor(client) {
        this.client = client;
      }
      getDefaultShareScope(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/filter/defaultShareScope",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultShareScope(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const scope = typeof parameters === "string" ? parameters : parameters.scope;
          const config = {
            url: "/rest/api/3/filter/defaultShareScope",
            method: "PUT",
            data: {
              scope
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSharePermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/filter/${id}/permission`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/filter/${parameters.id}/permission`,
            method: "POST",
            data: {
              type: parameters.type,
              projectId: parameters.projectId,
              groupname: parameters.groupname,
              projectRoleId: parameters.projectRoleId,
              accountId: parameters.accountId,
              rights: parameters.rights,
              groupId: parameters.groupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/filter/${parameters.id}/permission/${parameters.permissionId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/filter/${parameters.id}/permission/${parameters.permissionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.FilterSharing = FilterSharing;
  }
});

// node_modules/jira.js/out/version3/groupAndUserPicker.js
var require_groupAndUserPicker2 = __commonJS({
  "node_modules/jira.js/out/version3/groupAndUserPicker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GroupAndUserPicker = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var GroupAndUserPicker = class {
      constructor(client) {
        this.client = client;
      }
      findUsersAndGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/groupuserpicker",
            method: "GET",
            params: {
              query: parameters.query,
              maxResults: parameters.maxResults,
              showAvatar: parameters.showAvatar,
              fieldId: parameters.fieldId,
              projectId: parameters.projectId,
              issueTypeId: parameters.issueTypeId,
              avatarSize: parameters.avatarSize,
              caseInsensitive: parameters.caseInsensitive,
              excludeConnectAddons: parameters.excludeConnectAddons
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.GroupAndUserPicker = GroupAndUserPicker;
  }
});

// node_modules/jira.js/out/version3/groups.js
var require_groups2 = __commonJS({
  "node_modules/jira.js/out/version3/groups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Groups = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Groups = class {
      constructor(client) {
        this.client = client;
      }
      createGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/group",
            method: "POST",
            data: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/group",
            method: "DELETE",
            params: {
              groupname: parameters.groupname,
              groupId: parameters.groupId,
              swapGroup: parameters.swapGroup,
              swapGroupId: parameters.swapGroupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkGetGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/group/bulk",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
              groupName: parameters === null || parameters === void 0 ? void 0 : parameters.groupName,
              accessType: parameters === null || parameters === void 0 ? void 0 : parameters.accessType,
              applicationKey: parameters === null || parameters === void 0 ? void 0 : parameters.applicationKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUsersFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/group/member",
            method: "GET",
            params: {
              groupname: parameters.groupname,
              groupId: parameters.groupId,
              includeInactiveUsers: parameters.includeInactiveUsers,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addUserToGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/group/user",
            method: "POST",
            params: {
              groupname: parameters.groupname,
              groupId: parameters.groupId
            },
            data: {
              accountId: parameters.accountId,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeUserFromGroup(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/group/user",
            method: "DELETE",
            params: {
              groupname: parameters.groupname,
              groupId: parameters.groupId,
              username: parameters.username,
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/groups/picker",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              exclude: parameters === null || parameters === void 0 ? void 0 : parameters.exclude,
              excludeId: parameters === null || parameters === void 0 ? void 0 : parameters.excludeId,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              caseInsensitive: parameters === null || parameters === void 0 ? void 0 : parameters.caseInsensitive
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Groups = Groups;
  }
});

// node_modules/jira.js/out/version3/instanceInformation.js
var require_instanceInformation = __commonJS({
  "node_modules/jira.js/out/version3/instanceInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InstanceInformation = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var InstanceInformation = class {
      constructor(client) {
        this.client = client;
      }
      getLicense(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/instance/license",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.InstanceInformation = InstanceInformation;
  }
});

// node_modules/jira.js/out/version3/issueAttachments.js
var require_issueAttachments2 = __commonJS({
  "node_modules/jira.js/out/version3/issueAttachments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueAttachments = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var form_data_1 = require_form_data();
    var IssueAttachments = class {
      constructor(client) {
        this.client = client;
      }
      getAttachmentContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/attachment/content/${id}`,
            method: "GET",
            params: {
              redirect: typeof parameters !== "string" && parameters.redirect
            },
            responseType: "arraybuffer"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentMeta(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/attachment/meta",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentThumbnail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/attachment/thumbnail/${id}`,
            method: "GET",
            params: {
              redirect: typeof parameters !== "string" && parameters.redirect,
              fallbackToDefault: typeof parameters !== "string" && parameters.fallbackToDefault,
              width: typeof parameters !== "string" && parameters.width,
              height: typeof parameters !== "string" && parameters.height
            },
            responseType: "arraybuffer"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/attachment/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/attachment/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      expandAttachmentForHumans(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/attachment/${id}/expand/human`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      expandAttachmentForMachines(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/attachment/${id}/expand/raw`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          var _a;
          const formData = new form_data_1.default();
          const attachments = Array.isArray(parameters.attachment) ? parameters.attachment : [parameters.attachment];
          attachments.forEach((attachment) => formData.append("file", attachment.file, attachment.filename));
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/attachments`,
            method: "POST",
            headers: Object.assign({ "X-Atlassian-Token": "no-check", "Content-Type": "multipart/form-data" }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
            data: formData,
            maxBodyLength: Infinity,
            maxContentLength: Infinity
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueAttachments = IssueAttachments;
  }
});

// node_modules/jira.js/out/version3/issueCommentProperties.js
var require_issueCommentProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/issueCommentProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCommentProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCommentProperties = class {
      constructor(client) {
        this.client = client;
      }
      getCommentPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const commentId = typeof parameters === "string" ? parameters : parameters.commentId;
          const config = {
            url: `/rest/api/3/comment/${commentId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCommentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/comment/${parameters.commentId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setCommentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/comment/${parameters.commentId}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.property
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCommentProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/comment/${parameters.commentId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCommentProperties = IssueCommentProperties;
  }
});

// node_modules/jira.js/out/version3/issueComments.js
var require_issueComments2 = __commonJS({
  "node_modules/jira.js/out/version3/issueComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueComments = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueComments = class {
      constructor(client) {
        this.client = client;
      }
      getCommentsByIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/comment/list",
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              ids: parameters.ids
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const issueIdOrKey = typeof parameters === "string" ? parameters : parameters.issueIdOrKey;
          const config = {
            url: `/rest/api/3/issue/${issueIdOrKey}/comment`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              orderBy: typeof parameters !== "string" && parameters.orderBy,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const body = typeof parameters.comment === "string" ? {
            type: "doc",
            version: 1,
            content: [
              {
                type: "paragraph",
                content: [{ type: "text", text: parameters.comment }]
              }
            ]
          } : parameters.comment;
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/comment`,
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              self: parameters.self,
              id: parameters.id,
              author: parameters.author,
              body,
              renderedBody: parameters.renderedBody,
              updateAuthor: parameters.updateAuthor,
              created: parameters.created,
              updated: parameters.updated,
              visibility: parameters.visibility,
              jsdPublic: parameters.jsdPublic,
              jsdAuthorCanSeeRequest: parameters.jsdAuthorCanSeeRequest,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
            method: "PUT",
            params: {
              notifyUsers: parameters.notifyUsers,
              overrideEditableFlag: parameters.overrideEditableFlag,
              expand: parameters.expand
            },
            data: {
              body: parameters.body,
              visibility: parameters.visibility,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueComments = IssueComments;
  }
});

// node_modules/jira.js/out/version3/issueCustomFieldConfigurationApps.js
var require_issueCustomFieldConfigurationApps2 = __commonJS({
  "node_modules/jira.js/out/version3/issueCustomFieldConfigurationApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldConfigurationApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldConfigurationApps = class {
      constructor(client) {
        this.client = client;
      }
      getCustomFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldIdOrKey = typeof parameters === "string" ? parameters : parameters.fieldIdOrKey;
          const config = {
            url: `/rest/api/3/app/field/${fieldIdOrKey}/context/configuration`,
            method: "GET",
            params: {
              id: typeof parameters !== "string" && parameters.id,
              fieldContextId: typeof parameters !== "string" && parameters.fieldContextId,
              issueId: typeof parameters !== "string" && parameters.issueId,
              projectKeyOrId: typeof parameters !== "string" && parameters.projectKeyOrId,
              issueTypeId: typeof parameters !== "string" && parameters.issueTypeId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/app/field/${parameters.fieldIdOrKey}/context/configuration`,
            method: "PUT",
            data: {
              configurations: parameters.configurations
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldConfigurationApps = IssueCustomFieldConfigurationApps;
  }
});

// node_modules/jira.js/out/version3/issueCustomFieldContexts.js
var require_issueCustomFieldContexts2 = __commonJS({
  "node_modules/jira.js/out/version3/issueCustomFieldContexts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldContexts = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldContexts = class {
      constructor(client) {
        this.client = client;
      }
      getContextsForField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/3/field/${fieldId}/context`,
            method: "GET",
            params: {
              isAnyIssueType: typeof parameters !== "string" && parameters.isAnyIssueType,
              isGlobalContext: typeof parameters !== "string" && parameters.isGlobalContext,
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context`,
            method: "POST",
            data: {
              id: parameters.id,
              name: parameters.name,
              description: parameters.description,
              projectIds: parameters.projectIds,
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDefaultValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/3/field/${fieldId}/context/defaultValue`,
            method: "GET",
            params: {
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/defaultValue`,
            method: "PUT",
            data: {
              defaultValues: parameters.defaultValues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeMappingsForContexts(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/3/field/${fieldId}/context/issuetypemapping`,
            method: "GET",
            params: {
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCustomFieldContextsForProjectsAndIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/mapping`,
            method: "POST",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            },
            data: {
              mappings: parameters.mappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectContextMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/3/field/${fieldId}/context/projectmapping`,
            method: "GET",
            params: {
              contextId: typeof parameters !== "string" && parameters.contextId,
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addIssueTypesToContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/issuetype`,
            method: "PUT",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssueTypesFromContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/issuetype/remove`,
            method: "POST",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignProjectsToCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/project`,
            method: "PUT",
            data: {
              projectIds: parameters.projectIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeCustomFieldContextFromProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/project/remove`,
            method: "POST",
            data: {
              projectIds: parameters.projectIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldContexts = IssueCustomFieldContexts;
  }
});

// node_modules/jira.js/out/version3/issueCustomFieldOptions.js
var require_issueCustomFieldOptions2 = __commonJS({
  "node_modules/jira.js/out/version3/issueCustomFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldOptions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldOptions = class {
      constructor(client) {
        this.client = client;
      }
      getCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/customFieldOption/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getOptionsForContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/option`,
            method: "GET",
            params: {
              optionId: parameters.optionId,
              onlyOptions: parameters.onlyOptions,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/option`,
            method: "POST",
            data: {
              options: parameters.options
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/option`,
            method: "PUT",
            data: {
              options: parameters.options
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      reorderCustomFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/option/move`,
            method: "PUT",
            data: {
              after: parameters.after,
              customFieldOptionIds: parameters.customFieldOptionIds,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCustomFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}/context/${parameters.contextId}/option/${parameters.optionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldOptions = IssueCustomFieldOptions;
  }
});

// node_modules/jira.js/out/version3/issueCustomFieldOptionsApps.js
var require_issueCustomFieldOptionsApps2 = __commonJS({
  "node_modules/jira.js/out/version3/issueCustomFieldOptionsApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldOptionsApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldOptionsApps = class {
      constructor(client) {
        this.client = client;
      }
      getAllIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldKey = typeof parameters === "string" ? parameters : parameters.fieldKey;
          const config = {
            url: `/rest/api/3/field/${fieldKey}/option`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldKey}/option`,
            method: "POST",
            data: {
              value: parameters.value,
              properties: parameters.properties,
              config: parameters.config
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSelectableIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldKey = typeof parameters === "string" ? parameters : parameters.fieldKey;
          const config = {
            url: `/rest/api/3/field/${fieldKey}/option/suggestions/edit`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              projectId: typeof parameters !== "string" && parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVisibleIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldKey = typeof parameters === "string" ? parameters : parameters.fieldKey;
          const config = {
            url: `/rest/api/3/field/${fieldKey}/option/suggestions/search`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              projectId: typeof parameters !== "string" && parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}`,
            method: "PUT",
            data: {
              id: parameters.id,
              value: parameters.value,
              properties: parameters.properties,
              config: parameters.config
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      replaceIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}/issue`,
            method: "DELETE",
            params: {
              replaceWith: parameters.replaceWith,
              jql: parameters.jql,
              overrideScreenSecurity: parameters.overrideScreenSecurity,
              overrideEditableFlag: parameters.overrideEditableFlag
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldOptionsApps = IssueCustomFieldOptionsApps;
  }
});

// node_modules/jira.js/out/version3/issueCustomFieldValuesApps.js
var require_issueCustomFieldValuesApps2 = __commonJS({
  "node_modules/jira.js/out/version3/issueCustomFieldValuesApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueCustomFieldValuesApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueCustomFieldValuesApps = class {
      constructor(client) {
        this.client = client;
      }
      updateMultipleCustomFieldValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/app/field/value",
            method: "POST",
            params: {
              generateChangelog: parameters.generateChangelog
            },
            data: {
              updates: parameters.updates
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomFieldValue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/app/field/${parameters.fieldIdOrKey}/value`,
            method: "PUT",
            params: {
              generateChangelog: parameters.generateChangelog
            },
            data: {
              updates: parameters.updates
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueCustomFieldValuesApps = IssueCustomFieldValuesApps;
  }
});

// node_modules/jira.js/out/version3/issueFieldConfigurations.js
var require_issueFieldConfigurations2 = __commonJS({
  "node_modules/jira.js/out/version3/issueFieldConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueFieldConfigurations = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueFieldConfigurations = class {
      constructor(client) {
        this.client = client;
      }
      getAllFieldConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfiguration",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              isDefault: parameters === null || parameters === void 0 ? void 0 : parameters.isDefault,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfiguration",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfiguration/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfiguration/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldConfigurationItems(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfiguration/${parameters.id}/fields`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFieldConfigurationItems(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfiguration/${parameters.id}/fields`,
            method: "PUT",
            data: {
              fieldConfigurationItems: parameters.fieldConfigurationItems
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllFieldConfigurationSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfigurationscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfigurationscheme",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldConfigurationSchemeMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfigurationscheme/mapping",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              fieldConfigurationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.fieldConfigurationSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldConfigurationSchemeProjectMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfigurationscheme/project",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignFieldConfigurationSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/fieldconfigurationscheme/project",
            method: "PUT",
            data: {
              fieldConfigurationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.fieldConfigurationSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setFieldConfigurationSchemeMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}/mapping`,
            method: "PUT",
            data: {
              mappings: parameters.mappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssueTypesFromGlobalFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}/mapping/delete`,
            method: "POST",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueFieldConfigurations = IssueFieldConfigurations;
  }
});

// node_modules/jira.js/out/version3/issueFields.js
var require_issueFields2 = __commonJS({
  "node_modules/jira.js/out/version3/issueFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueFields = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueFields = class {
      constructor(client) {
        this.client = client;
      }
      getFields(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/field",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/field",
            method: "POST",
            data: {
              description: parameters.description,
              name: parameters.name,
              searcherKey: parameters.searcherKey,
              type: parameters.type
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/field/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getTrashedFieldsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/field/search/trashed",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.fieldId}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name,
              searcherKey: parameters.searcherKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      restoreCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.id}/restore`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      trashCustomField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/field/${parameters.id}/trash`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueFields = IssueFields;
  }
});

// node_modules/jira.js/out/version3/issueLinks.js
var require_issueLinks2 = __commonJS({
  "node_modules/jira.js/out/version3/issueLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueLinks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueLinks = class {
      constructor(client) {
        this.client = client;
      }
      linkIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issueLink",
            method: "POST",
            data: {
              type: parameters === null || parameters === void 0 ? void 0 : parameters.type,
              inwardIssue: parameters === null || parameters === void 0 ? void 0 : parameters.inwardIssue,
              outwardIssue: parameters === null || parameters === void 0 ? void 0 : parameters.outwardIssue,
              comment: parameters === null || parameters === void 0 ? void 0 : parameters.comment
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issueLink/${parameters.linkId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issueLink/${parameters.linkId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueLinks = IssueLinks;
  }
});

// node_modules/jira.js/out/version3/issueLinkTypes.js
var require_issueLinkTypes3 = __commonJS({
  "node_modules/jira.js/out/version3/issueLinkTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueLinkTypes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueLinkTypes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueLinkTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issueLinkType",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issueLinkType",
            method: "POST",
            data: {
              id: parameters.id,
              inward: parameters.inward,
              name: parameters.name,
              outward: parameters.outward,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issueLinkType/${parameters.issueLinkTypeId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issueLinkType/${parameters.issueLinkTypeId}`,
            method: "PUT",
            data: {
              id: parameters.id,
              inward: parameters.inward,
              name: parameters.name,
              outward: parameters.outward,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueLinkType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issueLinkType/${parameters.issueLinkTypeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueLinkTypes = IssueLinkTypes;
  }
});

// node_modules/jira.js/out/version3/issueNavigatorSettings.js
var require_issueNavigatorSettings2 = __commonJS({
  "node_modules/jira.js/out/version3/issueNavigatorSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueNavigatorSettings = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueNavigatorSettings = class {
      constructor(client) {
        this.client = client;
      }
      getIssueNavigatorDefaultColumns(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/settings/columns",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setIssueNavigatorDefaultColumns(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/settings/columns",
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueNavigatorSettings = IssueNavigatorSettings;
  }
});

// node_modules/jira.js/out/version3/issueNotificationSchemes.js
var require_issueNotificationSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/issueNotificationSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueNotificationSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueNotificationSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getNotificationSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/notificationscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/notificationscheme",
            method: "POST",
            data: {
              description: parameters.description,
              name: parameters.name,
              notificationSchemeEvents: parameters.notificationSchemeEvents
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getNotificationSchemeToProjectMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/notificationscheme/project",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              notificationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.notificationSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/notificationscheme/${id}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/notificationscheme/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/notificationscheme/${parameters.notificationSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeNotificationFromNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/notificationscheme/${parameters.notificationSchemeId}/notification/${parameters.notificationId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueNotificationSchemes = IssueNotificationSchemes;
  }
});

// node_modules/jira.js/out/version3/issuePriorities.js
var require_issuePriorities2 = __commonJS({
  "node_modules/jira.js/out/version3/issuePriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssuePriorities = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var IssuePriorities = class {
      constructor(client) {
        this.client = client;
      }
      getPriorities(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/priority",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/priority",
            method: "POST",
            data: {
              description: parameters.description,
              iconUrl: parameters.iconUrl,
              name: parameters.name,
              statusColor: parameters.statusColor
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/priority/default",
            method: "PUT",
            data: {
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      movePriorities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/priority/move",
            method: "PUT",
            data: {
              after: parameters.after,
              ids: parameters.ids,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchPriorities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/priority/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              projectId: (0, paramSerializer_1.paramSerializer)("projectId", parameters === null || parameters === void 0 ? void 0 : parameters.projectId),
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/priority/${parameters.id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updatePriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/priority/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              iconUrl: parameters.iconUrl,
              name: parameters.name,
              statusColor: parameters.statusColor
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssuePriorities = IssuePriorities;
  }
});

// node_modules/jira.js/out/version3/issueProperties.js
var require_issueProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/issueProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueProperties = class {
      constructor(client) {
        this.client = client;
      }
      bulkSetIssuesProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/properties",
            method: "POST",
            data: {
              entitiesIds: parameters === null || parameters === void 0 ? void 0 : parameters.entitiesIds,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkSetIssuePropertiesByIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/properties/multi",
            method: "POST",
            data: {
              issues: parameters === null || parameters === void 0 ? void 0 : parameters.issues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkSetIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: {
              value: parameters.value,
              expression: parameters.expression,
              filter: parameters.filter
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkDeleteIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/properties/${parameters.propertyKey}`,
            method: "DELETE",
            data: {
              entityIds: parameters.entityIds,
              currentValue: parameters.currentValue
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuePropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueProperties = IssueProperties;
  }
});

// node_modules/jira.js/out/version3/issueRemoteLinks.js
var require_issueRemoteLinks2 = __commonJS({
  "node_modules/jira.js/out/version3/issueRemoteLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueRemoteLinks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueRemoteLinks = class {
      constructor(client) {
        this.client = client;
      }
      getRemoteIssueLinks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/remotelink`,
            method: "GET",
            params: {
              globalId: parameters.globalId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createOrUpdateRemoteIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/remotelink`,
            method: "POST",
            data: {
              globalId: parameters.globalId,
              application: parameters.application,
              relationship: parameters.relationship,
              object: parameters.object
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRemoteIssueLinkByGlobalId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/remotelink`,
            method: "DELETE",
            params: {
              globalId: parameters.globalId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRemoteIssueLinkById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/remotelink/${parameters.linkId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateRemoteIssueLink(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/remotelink/${parameters.linkId}`,
            method: "PUT",
            data: {
              globalId: parameters.globalId,
              application: parameters.application,
              relationship: parameters.relationship,
              object: parameters.object
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRemoteIssueLinkById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/remotelink/${parameters.linkId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueRemoteLinks = IssueRemoteLinks;
  }
});

// node_modules/jira.js/out/version3/issueResolutions.js
var require_issueResolutions2 = __commonJS({
  "node_modules/jira.js/out/version3/issueResolutions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueResolutions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueResolutions = class {
      constructor(client) {
        this.client = client;
      }
      createResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/resolution",
            method: "POST",
            data: parameters
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/resolution/default",
            method: "PUT",
            data: {
              id: parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveResolutions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/resolution/move",
            method: "PUT",
            data: {
              ids: parameters.ids,
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchResolutions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/resolution/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/resolution/${parameters.id}`,
            method: "PUT",
            data: Object.assign(Object.assign({}, parameters), { name: parameters.name, description: parameters.description, id: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/resolution/${parameters.id}`,
            method: "DELETE",
            params: {
              replaceWith: parameters.replaceWith
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueResolutions = IssueResolutions;
  }
});

// node_modules/jira.js/out/version3/issues.js
var require_issues2 = __commonJS({
  "node_modules/jira.js/out/version3/issues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Issues = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Issues = class {
      constructor(client) {
        this.client = client;
      }
      getEvents(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/events",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          var _a;
          if (((_a = parameters.fields) === null || _a === void 0 ? void 0 : _a.description) && typeof parameters.fields.description === "string") {
            parameters.fields.description = {
              type: "doc",
              version: 1,
              content: [
                {
                  type: "paragraph",
                  content: [
                    {
                      text: parameters.fields.description,
                      type: "text"
                    }
                  ]
                }
              ]
            };
          }
          const config = {
            url: "/rest/api/3/issue",
            method: "POST",
            params: {
              updateHistory: parameters.updateHistory
            },
            data: {
              fields: parameters.fields,
              historyMetadata: parameters.historyMetadata,
              properties: parameters.properties,
              transition: parameters.transition,
              update: parameters.update
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      archiveIssuesAsync(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/archive",
            method: "POST",
            data: {
              jql: parameters.jql
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      archiveIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/archive",
            method: "PUT",
            data: {
              issueIdsOrKeys: parameters.issueIdsOrKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/bulk",
            method: "POST",
            data: {
              issueUpdates: parameters === null || parameters === void 0 ? void 0 : parameters.issueUpdates
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCreateIssueMeta(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/createmeta",
            method: "GET",
            params: {
              projectIds: parameters === null || parameters === void 0 ? void 0 : parameters.projectIds,
              projectKeys: parameters === null || parameters === void 0 ? void 0 : parameters.projectKeys,
              issuetypeIds: parameters === null || parameters === void 0 ? void 0 : parameters.issuetypeIds,
              issuetypeNames: parameters === null || parameters === void 0 ? void 0 : parameters.issuetypeNames,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      unarchiveIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/unarchive",
            method: "PUT",
            data: {
              issueIdsOrKeys: parameters.issueIdsOrKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}`,
            method: "GET",
            params: {
              fields: parameters.fields,
              fieldsByKeys: parameters.fieldsByKeys,
              expand: parameters.expand,
              properties: parameters.properties,
              updateHistory: parameters.updateHistory
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      editIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          var _a, _b;
          if (((_a = parameters.fields) === null || _a === void 0 ? void 0 : _a.description) && typeof parameters.fields.description === "string") {
            const { fields: { description } } = yield this.getIssue({ issueIdOrKey: parameters.issueIdOrKey });
            parameters.fields.description = {
              type: "doc",
              version: (_b = description === null || description === void 0 ? void 0 : description.version) !== null && _b !== void 0 ? _b : 1,
              content: [
                {
                  type: "paragraph",
                  content: [
                    {
                      text: parameters.fields.description,
                      type: "text"
                    }
                  ]
                }
              ]
            };
          }
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}`,
            method: "PUT",
            params: {
              notifyUsers: parameters.notifyUsers,
              overrideScreenSecurity: parameters.overrideScreenSecurity,
              overrideEditableFlag: parameters.overrideEditableFlag,
              returnIssue: parameters.returnIssue,
              expand: parameters.expand
            },
            data: {
              fields: parameters.fields,
              historyMetadata: parameters.historyMetadata,
              properties: parameters.properties,
              transition: parameters.transition,
              update: parameters.update
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}`,
            method: "DELETE",
            params: {
              deleteSubtasks: parameters.deleteSubtasks
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/assignee`,
            method: "PUT",
            data: {
              accountId: parameters.accountId,
              accountType: parameters.accountType,
              active: parameters.active,
              applicationRoles: parameters.applicationRoles,
              avatarUrls: parameters.avatarUrls,
              displayName: parameters.displayName,
              emailAddress: parameters.emailAddress,
              expand: parameters.expand,
              groups: parameters.groups,
              key: parameters.key,
              locale: parameters.locale,
              name: parameters.name,
              self: parameters.self,
              timeZone: parameters.timeZone
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getChangeLogs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/changelog`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getChangeLogsByIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/changelog/list`,
            method: "POST",
            data: {
              changelogIds: parameters.changelogIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getEditIssueMeta(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/editmeta`,
            method: "GET",
            params: {
              overrideScreenSecurity: parameters.overrideScreenSecurity,
              overrideEditableFlag: parameters.overrideEditableFlag
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      notify(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/notify`,
            method: "POST",
            data: {
              htmlBody: parameters.htmlBody,
              restrict: parameters.restrict,
              subject: parameters.subject,
              textBody: parameters.textBody,
              to: parameters.to
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getTransitions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/transitions`,
            method: "GET",
            params: {
              expand: parameters.expand,
              transitionId: parameters.transitionId,
              skipRemoteOnlyCondition: parameters.skipRemoteOnlyCondition,
              includeUnavailableTransitions: parameters.includeUnavailableTransitions,
              sortByOpsBarAndStatus: parameters.sortByOpsBarAndStatus
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      doTransition(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          var _a;
          if (((_a = parameters.fields) === null || _a === void 0 ? void 0 : _a.description) && typeof parameters.fields.description === "string") {
            parameters.fields.description = {
              type: "doc",
              version: 1,
              content: [
                {
                  type: "paragraph",
                  content: [
                    {
                      text: parameters.fields.description,
                      type: "text"
                    }
                  ]
                }
              ]
            };
          }
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/transitions`,
            method: "POST",
            data: {
              fields: parameters.fields,
              historyMetadata: parameters.historyMetadata,
              properties: parameters.properties,
              transition: parameters.transition,
              update: parameters.update
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      exportArchivedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issues/archive/export",
            method: "PUT",
            data: {
              archivedBy: parameters === null || parameters === void 0 ? void 0 : parameters.archivedBy,
              archivedDateRange: parameters === null || parameters === void 0 ? void 0 : parameters.archivedDateRange,
              issueTypes: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypes,
              projects: parameters === null || parameters === void 0 ? void 0 : parameters.projects,
              reporters: parameters === null || parameters === void 0 ? void 0 : parameters.reporters
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Issues = Issues;
  }
});

// node_modules/jira.js/out/version3/issueSearch.js
var require_issueSearch2 = __commonJS({
  "node_modules/jira.js/out/version3/issueSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueSearch = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueSearch = class {
      constructor(client) {
        this.client = client;
      }
      getIssuePickerResource(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/picker",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              currentJQL: parameters === null || parameters === void 0 ? void 0 : parameters.currentJQL,
              currentIssueKey: parameters === null || parameters === void 0 ? void 0 : parameters.currentIssueKey,
              currentProjectId: parameters === null || parameters === void 0 ? void 0 : parameters.currentProjectId,
              showSubTasks: parameters === null || parameters === void 0 ? void 0 : parameters.showSubTasks,
              showSubTaskParent: parameters === null || parameters === void 0 ? void 0 : parameters.showSubTaskParent
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      matchIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/match",
            method: "POST",
            data: {
              jqls: parameters === null || parameters === void 0 ? void 0 : parameters.jqls,
              issueIds: parameters === null || parameters === void 0 ? void 0 : parameters.issueIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchForIssuesUsingJql(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/search",
            method: "GET",
            params: {
              jql: parameters === null || parameters === void 0 ? void 0 : parameters.jql,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              validateQuery: parameters === null || parameters === void 0 ? void 0 : parameters.validateQuery,
              fields: parameters === null || parameters === void 0 ? void 0 : parameters.fields,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
              fieldsByKeys: parameters === null || parameters === void 0 ? void 0 : parameters.fieldsByKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchForIssuesUsingJqlPost(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/search",
            method: "POST",
            data: {
              jql: parameters === null || parameters === void 0 ? void 0 : parameters.jql,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              fields: parameters === null || parameters === void 0 ? void 0 : parameters.fields,
              validateQuery: parameters === null || parameters === void 0 ? void 0 : parameters.validateQuery,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
              fieldsByKeys: parameters === null || parameters === void 0 ? void 0 : parameters.fieldsByKeys
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueSearch = IssueSearch;
  }
});

// node_modules/jira.js/out/version3/issueSecurityLevel.js
var require_issueSecurityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/issueSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueSecurityLevel = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueSecurityLevel = class {
      constructor(client) {
        this.client = client;
      }
      getIssueSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.issueSecuritySchemeId}/members`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              issueSecurityLevelId: parameters.issueSecurityLevelId,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/securitylevel/${parameters.id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueSecurityLevel = IssueSecurityLevel;
  }
});

// node_modules/jira.js/out/version3/issueSecuritySchemes.js
var require_issueSecuritySchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/issueSecuritySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueSecuritySchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueSecuritySchemes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueSecuritySchemes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes",
            method: "POST",
            data: {
              description: parameters.description,
              levels: parameters.levels,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSecurityLevels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes/level",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              schemeId: parameters === null || parameters === void 0 ? void 0 : parameters.schemeId,
              onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setDefaultLevels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes/level/default",
            method: "PUT",
            data: {
              defaultValues: parameters === null || parameters === void 0 ? void 0 : parameters.defaultValues
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes/level/member",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              schemeId: parameters === null || parameters === void 0 ? void 0 : parameters.schemeId,
              levelId: parameters === null || parameters === void 0 ? void 0 : parameters.levelId,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchProjectsUsingSecuritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes/project",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              issueSecuritySchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueSecuritySchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      associateSchemesToProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes/project",
            method: "PUT",
            data: {
              oldToNewSecurityLevelMappings: parameters.oldToNewSecurityLevelMappings,
              projectId: parameters.projectId,
              schemeId: parameters.schemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchSecuritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuesecurityschemes/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.id}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level`,
            method: "PUT",
            data: {
              levels: parameters.levels
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}`,
            method: "PUT",
            data: {
              description: parameters.description,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}`,
            method: "DELETE",
            params: {
              replaceWith: parameters.replaceWith
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}/member`,
            method: "PUT",
            data: {
              members: parameters.members
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeMemberFromSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}/member/${parameters.memberId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueSecuritySchemes = IssueSecuritySchemes;
  }
});

// node_modules/jira.js/out/version3/issueTypeProperties.js
var require_issueTypeProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/issueTypeProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypeProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypeProperties = class {
      constructor(client) {
        this.client = client;
      }
      getIssueTypePropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.issueTypeId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.issueTypeId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setIssueTypeProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.issueTypeId}/properties/${parameters.propertyKey}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueTypeProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.issueTypeId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypeProperties = IssueTypeProperties;
  }
});

// node_modules/jira.js/out/version3/issueTypes.js
var require_issueTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/issueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueAllTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetype",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetype",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              hierarchyLevel: parameters === null || parameters === void 0 ? void 0 : parameters.hierarchyLevel
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypesForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetype/project",
            method: "GET",
            params: {
              projectId: parameters.projectId,
              level: parameters.level
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              avatarId: parameters.avatarId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.id}`,
            method: "DELETE",
            params: {
              alternativeIssueTypeId: parameters.alternativeIssueTypeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAlternativeIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.id}/alternatives`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueTypeAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetype/${parameters.id}/avatar2`,
            method: "POST",
            params: {
              x: parameters.x,
              y: parameters.y,
              size: parameters.size
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypes = IssueTypes;
  }
});

// node_modules/jira.js/out/version3/issueTypeSchemes.js
var require_issueTypeSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/issueTypeSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypeSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypeSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getAllIssueTypeSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescheme",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              defaultIssueTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.defaultIssueTypeId,
              issueTypeIds: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeSchemesMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescheme/mapping",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              issueTypeSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeSchemeForProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescheme/project",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignIssueTypeSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescheme/project",
            method: "PUT",
            data: {
              issueTypeSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              defaultIssueTypeId: parameters.defaultIssueTypeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addIssueTypesToIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype`,
            method: "PUT",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      reorderIssueTypesInIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype/move`,
            method: "PUT",
            data: {
              issueTypeIds: parameters.issueTypeIds,
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeIssueTypeFromIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype/${parameters.issueTypeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypeSchemes = IssueTypeSchemes;
  }
});

// node_modules/jira.js/out/version3/issueTypeScreenSchemes.js
var require_issueTypeScreenSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/issueTypeScreenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueTypeScreenSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueTypeScreenSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getIssueTypeScreenSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescreenscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescreenscheme",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              issueTypeMappings: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeMappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeScreenSchemeMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescreenscheme/mapping",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              issueTypeScreenSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeScreenSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueTypeScreenSchemeProjectAssociations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescreenscheme/project",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignIssueTypeScreenSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issuetypescreenscheme/project",
            method: "PUT",
            data: {
              issueTypeScreenSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeScreenSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      appendMappingsForIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping`,
            method: "PUT",
            data: {
              issueTypeMappings: parameters.issueTypeMappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDefaultScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping/default`,
            method: "PUT",
            data: {
              screenSchemeId: parameters.screenSchemeId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeMappingsFromIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping/remove`,
            method: "POST",
            data: {
              issueTypeIds: parameters.issueTypeIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectsForIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/project`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              query: parameters.query
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueTypeScreenSchemes = IssueTypeScreenSchemes;
  }
});

// node_modules/jira.js/out/version3/issueVotes.js
var require_issueVotes2 = __commonJS({
  "node_modules/jira.js/out/version3/issueVotes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueVotes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueVotes = class {
      constructor(client) {
        this.client = client;
      }
      getVotes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/votes`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addVote(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/votes`,
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeVote(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/votes`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueVotes = IssueVotes;
  }
});

// node_modules/jira.js/out/version3/issueWatchers.js
var require_issueWatchers2 = __commonJS({
  "node_modules/jira.js/out/version3/issueWatchers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueWatchers = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueWatchers = class {
      constructor(client) {
        this.client = client;
      }
      getIsWatchingIssueBulk(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/issue/watching",
            method: "POST",
            data: {
              issueIds: parameters === null || parameters === void 0 ? void 0 : parameters.issueIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssueWatchers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/watchers`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/watchers`,
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            data: parameters.accountId
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeWatcher(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/watchers`,
            method: "DELETE",
            params: {
              username: parameters.username,
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueWatchers = IssueWatchers;
  }
});

// node_modules/jira.js/out/version3/issueWorklogProperties.js
var require_issueWorklogProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/issueWorklogProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueWorklogProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueWorklogProperties = class {
      constructor(client) {
        this.client = client;
      }
      getWorklogPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorklogProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setWorklogProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties/${parameters.propertyKey}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorklogProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.worklogId}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueWorklogProperties = IssueWorklogProperties;
  }
});

// node_modules/jira.js/out/version3/issueWorklogs.js
var require_issueWorklogs2 = __commonJS({
  "node_modules/jira.js/out/version3/issueWorklogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IssueWorklogs = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var IssueWorklogs = class {
      constructor(client) {
        this.client = client;
      }
      getIssueWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              startedAfter: parameters.startedAfter,
              startedBefore: parameters.startedBefore,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let comment;
          if (typeof parameters.comment === "string") {
            comment = {
              type: "doc",
              version: 1,
              content: [
                {
                  type: "paragraph",
                  content: [
                    {
                      type: "text",
                      text: parameters.comment
                    }
                  ]
                }
              ]
            };
          } else {
            comment = parameters.comment;
          }
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog`,
            method: "POST",
            params: {
              notifyUsers: parameters.notifyUsers,
              adjustEstimate: parameters.adjustEstimate,
              newEstimate: parameters.newEstimate,
              reduceBy: parameters.reduceBy,
              expand: parameters.expand,
              overrideEditableFlag: parameters.overrideEditableFlag
            },
            data: {
              self: parameters.self,
              author: parameters.author,
              updateAuthor: parameters.updateAuthor,
              comment,
              created: parameters.created,
              updated: parameters.updated,
              visibility: parameters.visibility,
              started: parameters.started,
              timeSpent: parameters.timeSpent,
              timeSpentSeconds: parameters.timeSpentSeconds,
              id: parameters.id,
              issueId: parameters.issueId,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          let comment;
          if (typeof parameters.comment === "string") {
            comment = {
              type: "doc",
              version: 1,
              content: [
                {
                  type: "paragraph",
                  content: [
                    {
                      type: "text",
                      text: parameters.comment
                    }
                  ]
                }
              ]
            };
          } else {
            comment = parameters.comment;
          }
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
            method: "PUT",
            params: {
              notifyUsers: parameters.notifyUsers,
              adjustEstimate: parameters.adjustEstimate,
              newEstimate: parameters.newEstimate,
              expand: parameters.expand,
              overrideEditableFlag: parameters.overrideEditableFlag
            },
            data: {
              comment,
              visibility: parameters.visibility,
              started: parameters.started,
              timeSpent: parameters.timeSpent,
              timeSpentSeconds: parameters.timeSpentSeconds,
              properties: parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
            method: "DELETE",
            params: {
              notifyUsers: parameters.notifyUsers,
              adjustEstimate: parameters.adjustEstimate,
              newEstimate: parameters.newEstimate,
              increaseBy: parameters.increaseBy,
              overrideEditableFlag: parameters.overrideEditableFlag
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIdsOfWorklogsDeletedSince(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/worklog/deleted",
            method: "GET",
            params: {
              since: parameters === null || parameters === void 0 ? void 0 : parameters.since
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorklogsForIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/worklog/list",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            },
            data: {
              ids: parameters === null || parameters === void 0 ? void 0 : parameters.ids
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIdsOfWorklogsModifiedSince(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/worklog/updated",
            method: "GET",
            params: {
              since: parameters === null || parameters === void 0 ? void 0 : parameters.since,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.IssueWorklogs = IssueWorklogs;
  }
});

// node_modules/jira.js/out/version3/jiraExpressions.js
var require_jiraExpressions2 = __commonJS({
  "node_modules/jira.js/out/version3/jiraExpressions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JiraExpressions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JiraExpressions = class {
      constructor(client) {
        this.client = client;
      }
      analyseExpression(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/expression/analyse",
            method: "POST",
            params: {
              check: parameters === null || parameters === void 0 ? void 0 : parameters.check
            },
            data: {
              expressions: parameters === null || parameters === void 0 ? void 0 : parameters.expressions,
              contextVariables: parameters === null || parameters === void 0 ? void 0 : parameters.contextVariables
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      evaluateJiraExpression(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/expression/eval",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            },
            data: {
              expression: parameters === null || parameters === void 0 ? void 0 : parameters.expression,
              context: parameters === null || parameters === void 0 ? void 0 : parameters.context
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JiraExpressions = JiraExpressions;
  }
});

// node_modules/jira.js/out/version3/jiraSettings.js
var require_jiraSettings2 = __commonJS({
  "node_modules/jira.js/out/version3/jiraSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JiraSettings = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JiraSettings = class {
      constructor(client) {
        this.client = client;
      }
      getApplicationProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/application-properties",
            method: "GET",
            params: {
              key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
              permissionLevel: parameters === null || parameters === void 0 ? void 0 : parameters.permissionLevel,
              keyFilter: parameters === null || parameters === void 0 ? void 0 : parameters.keyFilter
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAdvancedSettings(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/application-properties/advanced-settings",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setApplicationProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/application-properties/${parameters.id}`,
            method: "PUT",
            data: parameters.body
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getConfiguration(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/configuration",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JiraSettings = JiraSettings;
  }
});

// node_modules/jira.js/out/version3/jQL.js
var require_jQL2 = __commonJS({
  "node_modules/jira.js/out/version3/jQL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JQL = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JQL = class {
      constructor(client) {
        this.client = client;
      }
      getAutoComplete(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/autocompletedata",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAutoCompletePost(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/autocompletedata",
            method: "POST",
            data: {
              projectIds: parameters === null || parameters === void 0 ? void 0 : parameters.projectIds,
              includeCollapsedFields: parameters === null || parameters === void 0 ? void 0 : parameters.includeCollapsedFields
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFieldAutoCompleteForQueryString(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/autocompletedata/suggestions",
            method: "GET",
            params: {
              fieldName: parameters === null || parameters === void 0 ? void 0 : parameters.fieldName,
              fieldValue: parameters === null || parameters === void 0 ? void 0 : parameters.fieldValue,
              predicateName: parameters === null || parameters === void 0 ? void 0 : parameters.predicateName,
              predicateValue: parameters === null || parameters === void 0 ? void 0 : parameters.predicateValue
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      parseJqlQueries(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/parse",
            method: "POST",
            params: {
              validation: parameters === null || parameters === void 0 ? void 0 : parameters.validation
            },
            data: {
              queries: parameters === null || parameters === void 0 ? void 0 : parameters.queries
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      migrateQueries(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/pdcleaner",
            method: "POST",
            data: {
              queryStrings: parameters === null || parameters === void 0 ? void 0 : parameters.queryStrings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      sanitiseJqlQueries(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/sanitize",
            method: "POST",
            data: {
              queries: parameters === null || parameters === void 0 ? void 0 : parameters.queries
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JQL = JQL;
  }
});

// node_modules/jira.js/out/version3/jqlFunctionsApps.js
var require_jqlFunctionsApps2 = __commonJS({
  "node_modules/jira.js/out/version3/jqlFunctionsApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JqlFunctionsApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var JqlFunctionsApps = class {
      constructor(client) {
        this.client = client;
      }
      getPrecomputations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/function/computation",
            method: "GET",
            params: {
              functionKey: parameters === null || parameters === void 0 ? void 0 : parameters.functionKey,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updatePrecomputations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/jql/function/computation",
            method: "POST",
            data: {
              values: parameters === null || parameters === void 0 ? void 0 : parameters.values
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.JqlFunctionsApps = JqlFunctionsApps;
  }
});

// node_modules/jira.js/out/version3/labels.js
var require_labels2 = __commonJS({
  "node_modules/jira.js/out/version3/labels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Labels = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Labels = class {
      constructor(client) {
        this.client = client;
      }
      getAllLabels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/label",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Labels = Labels;
  }
});

// node_modules/jira.js/out/version3/licenseMetrics.js
var require_licenseMetrics2 = __commonJS({
  "node_modules/jira.js/out/version3/licenseMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LicenseMetrics = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var LicenseMetrics = class {
      constructor(client) {
        this.client = client;
      }
      getLicense(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/instance/license",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApproximateLicenseCount(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/license/approximateLicenseCount",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApproximateApplicationLicenseCount(applicationKey, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/license/approximateLicenseCount/product/${applicationKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.LicenseMetrics = LicenseMetrics;
  }
});

// node_modules/jira.js/out/version3/myself.js
var require_myself2 = __commonJS({
  "node_modules/jira.js/out/version3/myself.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Myself = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Myself = class {
      constructor(client) {
        this.client = client;
      }
      getPreference(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/mypreferences",
            method: "GET",
            params: {
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setPreference(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/mypreferences",
            method: "PUT",
            params: {
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removePreference(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/mypreferences",
            method: "DELETE",
            params: {
              key: parameters.key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getLocale(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/mypreferences/locale",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCurrentUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/myself",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Myself = Myself;
  }
});

// node_modules/jira.js/out/version3/permissions.js
var require_permissions3 = __commonJS({
  "node_modules/jira.js/out/version3/permissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Permissions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Permissions = class {
      constructor(client) {
        this.client = client;
      }
      getMyPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/mypermissions",
            method: "GET",
            params: {
              projectKey: parameters === null || parameters === void 0 ? void 0 : parameters.projectKey,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
              issueId: parameters === null || parameters === void 0 ? void 0 : parameters.issueId,
              permissions: parameters === null || parameters === void 0 ? void 0 : parameters.permissions,
              projectUuid: parameters === null || parameters === void 0 ? void 0 : parameters.projectUuid,
              projectConfigurationUuid: parameters === null || parameters === void 0 ? void 0 : parameters.projectConfigurationUuid,
              commentId: parameters === null || parameters === void 0 ? void 0 : parameters.commentId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllPermissions(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/permissions",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getBulkPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/permissions/check",
            method: "POST",
            data: {
              projectPermissions: parameters === null || parameters === void 0 ? void 0 : parameters.projectPermissions,
              globalPermissions: parameters === null || parameters === void 0 ? void 0 : parameters.globalPermissions,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermittedProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/permissions/project",
            method: "POST",
            data: {
              permissions: parameters === null || parameters === void 0 ? void 0 : parameters.permissions
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Permissions = Permissions;
  }
});

// node_modules/jira.js/out/version3/permissionSchemes.js
var require_permissionSchemes3 = __commonJS({
  "node_modules/jira.js/out/version3/permissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PermissionSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var PermissionSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getAllPermissionSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/permissionscheme",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/permissionscheme",
            method: "POST",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            },
            data: Object.assign(Object.assign({}, parameters), { expand: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updatePermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}`,
            method: "PUT",
            params: {
              expand: parameters.expand
            },
            data: Object.assign(Object.assign({}, parameters), { schemeId: void 0, expand: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deletePermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermissionSchemeGrants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}/permission`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createPermissionGrant(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}/permission`,
            method: "POST",
            params: {
              expand: parameters.expand
            },
            data: {
              id: parameters.id,
              self: parameters.self,
              holder: parameters.holder,
              permission: parameters.permission
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPermissionSchemeGrant(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}/permission/${parameters.permissionId}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deletePermissionSchemeEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/permissionscheme/${parameters.schemeId}/permission/${parameters.permissionId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.PermissionSchemes = PermissionSchemes;
  }
});

// node_modules/jira.js/out/version3/projectAvatars.js
var require_projectAvatars3 = __commonJS({
  "node_modules/jira.js/out/version3/projectAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectAvatars = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectAvatars = class {
      constructor(client) {
        this.client = client;
      }
      updateProjectAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/avatar`,
            method: "PUT",
            data: {
              fileName: parameters.fileName,
              id: parameters.id,
              isDeletable: parameters.isDeletable,
              isSelected: parameters.isSelected,
              isSystemAvatar: parameters.isSystemAvatar,
              owner: parameters.owner,
              urls: parameters.urls
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/avatar/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createProjectAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/avatar2`,
            method: "POST",
            params: {
              x: parameters.x,
              y: parameters.y,
              size: parameters.size
            },
            data: parameters.avatar
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllProjectAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/avatars`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectAvatars = ProjectAvatars;
  }
});

// node_modules/jira.js/out/version3/projectCategories.js
var require_projectCategories2 = __commonJS({
  "node_modules/jira.js/out/version3/projectCategories.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectCategories = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectCategories = class {
      constructor(client) {
        this.client = client;
      }
      getAllProjectCategories(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/projectCategory",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createProjectCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/projectCategory",
            method: "POST",
            data: {
              description: parameters.description,
              id: parameters.id,
              name: parameters.name,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectCategoryById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/projectCategory/${parameters.id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateProjectCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/projectCategory/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeProjectCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/projectCategory/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectCategories = ProjectCategories;
  }
});

// node_modules/jira.js/out/version3/projectComponents.js
var require_projectComponents2 = __commonJS({
  "node_modules/jira.js/out/version3/projectComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectComponents = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectComponents = class {
      constructor(client) {
        this.client = client;
      }
      createComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/component",
            method: "POST",
            data: {
              assignee: parameters === null || parameters === void 0 ? void 0 : parameters.assignee,
              assigneeType: parameters === null || parameters === void 0 ? void 0 : parameters.assigneeType,
              description: parameters === null || parameters === void 0 ? void 0 : parameters.description,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              isAssigneeTypeValid: parameters === null || parameters === void 0 ? void 0 : parameters.isAssigneeTypeValid,
              lead: parameters === null || parameters === void 0 ? void 0 : parameters.lead,
              leadAccountId: parameters === null || parameters === void 0 ? void 0 : parameters.leadAccountId,
              leadUserName: parameters === null || parameters === void 0 ? void 0 : parameters.leadUserName,
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              project: parameters === null || parameters === void 0 ? void 0 : parameters.project,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              realAssignee: parameters === null || parameters === void 0 ? void 0 : parameters.realAssignee,
              realAssigneeType: parameters === null || parameters === void 0 ? void 0 : parameters.realAssigneeType,
              self: parameters === null || parameters === void 0 ? void 0 : parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/component/${parameters.id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/component/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              leadUserName: parameters.leadUserName,
              leadAccountId: parameters.leadAccountId,
              assigneeType: parameters.assigneeType,
              project: parameters.project
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteComponent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/component/${parameters.id}`,
            method: "DELETE",
            params: {
              moveIssuesTo: parameters.moveIssuesTo
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getComponentRelatedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/component/${parameters.id}/relatedIssueCounts`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectComponentsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/component`,
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              orderBy: parameters.orderBy,
              query: parameters.query
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectComponents(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/components`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectComponents = ProjectComponents;
  }
});

// node_modules/jira.js/out/version3/projectEmail.js
var require_projectEmail2 = __commonJS({
  "node_modules/jira.js/out/version3/projectEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectEmail = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectEmail = class {
      constructor(client) {
        this.client = client;
      }
      getProjectEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectId = typeof parameters === "string" ? parameters : parameters.projectId;
          const config = {
            url: `/rest/api/3/project/${projectId}/email`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateProjectEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectId}/email`,
            method: "PUT",
            data: {
              emailAddress: parameters.emailAddress,
              emailAddressStatus: parameters.emailAddressStatus
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectEmail = ProjectEmail;
  }
});

// node_modules/jira.js/out/version3/projectFeatures.js
var require_projectFeatures2 = __commonJS({
  "node_modules/jira.js/out/version3/projectFeatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectFeatures = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectFeatures = class {
      constructor(client) {
        this.client = client;
      }
      getFeaturesForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/features`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      toggleFeatureForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/features/${parameters.featureKey}`,
            method: "PUT",
            data: {
              state: parameters.state
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectFeatures = ProjectFeatures;
  }
});

// node_modules/jira.js/out/version3/projectKeyAndNameValidation.js
var require_projectKeyAndNameValidation2 = __commonJS({
  "node_modules/jira.js/out/version3/projectKeyAndNameValidation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectKeyAndNameValidation = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectKeyAndNameValidation = class {
      constructor(client) {
        this.client = client;
      }
      validateProjectKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const key = typeof parameters === "string" ? parameters : parameters === null || parameters === void 0 ? void 0 : parameters.key;
          const config = {
            url: "/rest/api/3/projectvalidate/key",
            method: "GET",
            params: {
              key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getValidProjectKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const key = typeof parameters === "string" ? parameters : parameters === null || parameters === void 0 ? void 0 : parameters.key;
          const config = {
            url: "/rest/api/3/projectvalidate/validProjectKey",
            method: "GET",
            params: {
              key
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getValidProjectName(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const name = typeof parameters === "string" ? parameters : parameters.name;
          const config = {
            url: "/rest/api/3/projectvalidate/validProjectName",
            method: "GET",
            params: {
              name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectKeyAndNameValidation = ProjectKeyAndNameValidation;
  }
});

// node_modules/jira.js/out/version3/projectPermissionSchemes.js
var require_projectPermissionSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/projectPermissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectPermissionSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectPermissionSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getProjectIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/3/project/${projectKeyOrId}/issuesecuritylevelscheme`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAssignedPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/3/project/${projectKeyOrId}/permissionscheme`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectKeyOrId}/permissionscheme`,
            method: "PUT",
            params: {
              expand: parameters.expand
            },
            data: {
              id: parameters.id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSecurityLevelsForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectKeyOrId = typeof parameters === "string" ? parameters : parameters.projectKeyOrId;
          const config = {
            url: `/rest/api/3/project/${projectKeyOrId}/securitylevel`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectPermissionSchemes = ProjectPermissionSchemes;
  }
});

// node_modules/jira.js/out/version3/projectProperties.js
var require_projectProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/projectProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectProperties = class {
      constructor(client) {
        this.client = client;
      }
      getProjectPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/properties`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/properties/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setProjectProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/properties/${parameters.propertyKey}`,
            method: "PUT",
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/properties/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectProperties = ProjectProperties;
  }
});

// node_modules/jira.js/out/version3/projectRoleActors.js
var require_projectRoleActors2 = __commonJS({
  "node_modules/jira.js/out/version3/projectRoleActors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectRoleActors = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectRoleActors = class {
      constructor(client) {
        this.client = client;
      }
      addActorUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "POST",
            data: {
              user: parameters.user,
              group: parameters.group,
              groupId: parameters.groupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setActors(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "PUT",
            data: {
              categorisedActors: parameters.categorisedActors
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteActor(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "DELETE",
            params: {
              user: parameters.user,
              group: parameters.group,
              groupId: parameters.groupId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRoleActorsForRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/role/${id}/actors`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addProjectRoleActorsToRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/role/${parameters.id}/actors`,
            method: "POST",
            data: {
              user: parameters.user,
              groupId: parameters.groupId,
              group: parameters.group
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectRoleActorsFromRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/role/${parameters.id}/actors`,
            method: "DELETE",
            params: {
              user: parameters.user,
              groupId: parameters.groupId,
              group: parameters.group
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectRoleActors = ProjectRoleActors;
  }
});

// node_modules/jira.js/out/version3/projectRoles.js
var require_projectRoles2 = __commonJS({
  "node_modules/jira.js/out/version3/projectRoles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectRoles = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectRoles = class {
      constructor(client) {
        this.client = client;
      }
      getProjectRoles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/role`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
            method: "GET",
            params: {
              excludeInactiveUsers: parameters.excludeInactiveUsers
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRoleDetails(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/roledetails`,
            method: "GET",
            params: {
              currentMember: typeof parameters !== "string" && parameters.currentMember,
              excludeConnectAddons: typeof parameters !== "string" && parameters.excludeConnectAddons
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllProjectRoles(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/role",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/role",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectRoleById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/role/${id}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      partialUpdateProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/role/${parameters.id}`,
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      fullyUpdateProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/role/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/role/${id}`,
            method: "DELETE",
            params: {
              swap: typeof parameters !== "string" && parameters.swap
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectRoles = ProjectRoles;
  }
});

// node_modules/jira.js/out/version3/projects.js
var require_projects3 = __commonJS({
  "node_modules/jira.js/out/version3/projects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Projects = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Projects = class {
      constructor(client) {
        this.client = client;
      }
      createProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/project",
            method: "POST",
            data: {
              assigneeType: parameters.assigneeType,
              avatarId: parameters.avatarId,
              categoryId: parameters.categoryId,
              description: parameters.description,
              fieldConfigurationScheme: parameters.fieldConfigurationScheme,
              issueSecurityScheme: parameters.issueSecurityScheme,
              issueTypeScheme: parameters.issueTypeScheme,
              issueTypeScreenScheme: parameters.issueTypeScreenScheme,
              key: parameters.key,
              leadAccountId: parameters.leadAccountId,
              name: parameters.name,
              notificationScheme: parameters.notificationScheme,
              permissionScheme: parameters.permissionScheme,
              projectTemplateKey: parameters.projectTemplateKey,
              projectTypeKey: parameters.projectTypeKey,
              url: parameters.url,
              workflowScheme: parameters.workflowScheme
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRecent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/project/recent",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      searchProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/project/search",
            method: "GET",
            params: {
              action: parameters === null || parameters === void 0 ? void 0 : parameters.action,
              categoryId: parameters === null || parameters === void 0 ? void 0 : parameters.categoryId,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              keys: parameters === null || parameters === void 0 ? void 0 : parameters.keys,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
              propertyQuery: parameters === null || parameters === void 0 ? void 0 : parameters.propertyQuery,
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
              typeKey: parameters === null || parameters === void 0 ? void 0 : parameters.typeKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand,
              properties: typeof parameters !== "string" && parameters.properties
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/project/${parameters.projectIdOrKey}`,
            method: "PUT",
            params: {
              expand: parameters.expand
            },
            data: {
              assigneeType: parameters.assigneeType,
              avatarId: parameters.avatarId,
              categoryId: parameters.categoryId,
              description: parameters.description,
              issueSecurityScheme: parameters.issueSecurityScheme,
              key: parameters.key,
              leadAccountId: parameters.leadAccountId,
              name: parameters.name,
              notificationScheme: parameters.notificationScheme,
              permissionScheme: parameters.permissionScheme,
              projectTemplateKey: parameters.projectTemplateKey,
              projectTypeKey: parameters.projectTypeKey,
              url: parameters.url
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}`,
            method: "DELETE",
            params: {
              enableUndo: typeof parameters !== "string" && parameters.enableUndo
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      archiveProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/archive`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProjectAsynchronously(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/delete`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      restore(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/restore`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/statuses`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getHierarchy(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectId = typeof parameters === "string" ? parameters : parameters.projectId;
          const config = {
            url: `/rest/api/3/project/${projectId}/hierarchy`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Projects = Projects;
  }
});

// node_modules/jira.js/out/version3/projectTypes.js
var require_projectTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/projectTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectTypes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectTypes = class {
      constructor(client) {
        this.client = client;
      }
      getAllProjectTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/project/type",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllAccessibleProjectTypes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/project/type/accessible",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectTypeByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectTypeKey = typeof parameters === "string" ? parameters : parameters.projectTypeKey;
          const config = {
            url: `/rest/api/3/project/type/${projectTypeKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAccessibleProjectTypeByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectTypeKey = typeof parameters === "string" ? parameters : parameters.projectTypeKey;
          const config = {
            url: `/rest/api/3/project/type/${projectTypeKey}/accessible`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectTypes = ProjectTypes;
  }
});

// node_modules/jira.js/out/version3/projectVersions.js
var require_projectVersions2 = __commonJS({
  "node_modules/jira.js/out/version3/projectVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProjectVersions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ProjectVersions = class {
      constructor(client) {
        this.client = client;
      }
      getProjectVersionsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/version`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              orderBy: typeof parameters !== "string" && parameters.orderBy,
              query: typeof parameters !== "string" && parameters.query,
              status: typeof parameters !== "string" && parameters.status,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProjectVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const projectIdOrKey = typeof parameters === "string" ? parameters : parameters.projectIdOrKey;
          const config = {
            url: `/rest/api/3/project/${projectIdOrKey}/versions`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/version",
            method: "POST",
            data: {
              expand: parameters.expand,
              self: parameters.self,
              id: parameters.id,
              description: parameters.description,
              name: parameters.name,
              archived: parameters.archived,
              released: parameters.released,
              startDate: parameters.startDate,
              releaseDate: parameters.releaseDate,
              overdue: parameters.overdue,
              userStartDate: parameters.userStartDate,
              userReleaseDate: parameters.userReleaseDate,
              projectId: parameters.projectId,
              moveUnfixedIssuesTo: parameters.moveUnfixedIssuesTo,
              operations: parameters.operations,
              issuesStatusForFixVersion: parameters.issuesStatusForFixVersion
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/version/${id}`,
            method: "GET",
            params: {
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/version/${parameters.id}`,
            method: "PUT",
            data: {
              expand: parameters.expand,
              description: parameters.description,
              name: parameters.name,
              archived: parameters.archived,
              released: parameters.released,
              startDate: parameters.startDate,
              releaseDate: parameters.releaseDate,
              projectId: parameters.projectId,
              moveUnfixedIssuesTo: parameters.moveUnfixedIssuesTo
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      mergeVersions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/version/${parameters.id}/mergeto/${parameters.moveIssuesTo}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/version/${parameters.id}/move`,
            method: "POST",
            data: {
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVersionRelatedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/version/${id}/relatedIssueCounts`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteAndReplaceVersion(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/version/${parameters.id}/removeAndSwap`,
            method: "POST",
            data: {
              moveFixIssuesTo: parameters.moveFixIssuesTo,
              moveAffectedIssuesTo: parameters.moveAffectedIssuesTo,
              customFieldReplacementList: parameters.customFieldReplacementList
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getVersionUnresolvedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/version/${id}/unresolvedIssueCount`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ProjectVersions = ProjectVersions;
  }
});

// node_modules/jira.js/out/version3/screens.js
var require_screens2 = __commonJS({
  "node_modules/jira.js/out/version3/screens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Screens = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Screens = class {
      constructor(client) {
        this.client = client;
      }
      getScreensForField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/3/field/${fieldId}/screens`,
            method: "GET",
            params: {
              startAt: typeof parameters !== "string" && parameters.startAt,
              maxResults: typeof parameters !== "string" && parameters.maxResults,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getScreens(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/screens",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              scope: parameters === null || parameters === void 0 ? void 0 : parameters.scope,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/screens",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addFieldToDefaultScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const fieldId = typeof parameters === "string" ? parameters : parameters.fieldId;
          const config = {
            url: `/rest/api/3/screens/addToDefault/${fieldId}`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteScreen(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenId = typeof parameters === "string" ? parameters : parameters.screenId;
          const config = {
            url: `/rest/api/3/screens/${screenId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvailableScreenFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenId = typeof parameters === "string" ? parameters : parameters.screenId;
          const config = {
            url: `/rest/api/3/screens/${screenId}/availableFields`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Screens = Screens;
  }
});

// node_modules/jira.js/out/version3/screenSchemes.js
var require_screenSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/screenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScreenSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ScreenSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getScreenSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/screenscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const name = typeof parameters === "string" ? parameters : parameters.name;
          const config = {
            url: "/rest/api/3/screenscheme",
            method: "POST",
            data: {
              name,
              description: typeof parameters !== "string" && parameters.description,
              screens: typeof parameters !== "string" && parameters.screens
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screenscheme/${parameters.screenSchemeId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              screens: parameters.screens
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenSchemeId = typeof parameters === "string" ? parameters : parameters.screenSchemeId;
          const config = {
            url: `/rest/api/3/screenscheme/${screenSchemeId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ScreenSchemes = ScreenSchemes;
  }
});

// node_modules/jira.js/out/version3/screenTabFields.js
var require_screenTabFields2 = __commonJS({
  "node_modules/jira.js/out/version3/screenTabFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScreenTabFields = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ScreenTabFields = class {
      constructor(client) {
        this.client = client;
      }
      getAllScreenTabFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields`,
            method: "GET",
            params: {
              projectKey: parameters.projectKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addScreenTabField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields`,
            method: "POST",
            data: {
              fieldId: parameters.fieldId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeScreenTabField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields/${parameters.id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveScreenTabField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}/fields/${parameters.id}/move`,
            method: "POST",
            data: {
              after: parameters.after,
              position: parameters.position
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ScreenTabFields = ScreenTabFields;
  }
});

// node_modules/jira.js/out/version3/screenTabs.js
var require_screenTabs2 = __commonJS({
  "node_modules/jira.js/out/version3/screenTabs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScreenTabs = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ScreenTabs = class {
      constructor(client) {
        this.client = client;
      }
      getAllScreenTabs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const screenId = typeof parameters === "string" ? parameters : parameters.screenId;
          const config = {
            url: `/rest/api/3/screens/${screenId}/tabs`,
            method: "GET",
            params: {
              projectKey: typeof parameters !== "string" && parameters.projectKey
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs`,
            method: "POST",
            data: {
              id: parameters.id,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      renameScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}`,
            method: "PUT",
            data: {
              id: parameters.id,
              name: parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      moveScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/screens/${parameters.screenId}/tabs/${parameters.tabId}/move/${parameters.pos}`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ScreenTabs = ScreenTabs;
  }
});

// node_modules/jira.js/out/version3/serverInfo.js
var require_serverInfo2 = __commonJS({
  "node_modules/jira.js/out/version3/serverInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServerInfo = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ServerInfo = class {
      constructor(client) {
        this.client = client;
      }
      getServerInfo(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/serverInfo",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ServerInfo = ServerInfo;
  }
});

// node_modules/jira.js/out/version3/status.js
var require_status4 = __commonJS({
  "node_modules/jira.js/out/version3/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Status = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Status = class {
      constructor(client) {
        this.client = client;
      }
      getStatusesById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: "/rest/api/3/statuses",
            method: "GET",
            params: {
              id,
              expand: typeof parameters !== "string" && parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/statuses",
            method: "POST",
            data: {
              statuses: parameters.statuses,
              scope: parameters.scope
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/statuses",
            method: "PUT",
            data: {
              statuses: parameters.statuses
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteStatusesById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: "/rest/api/3/statuses",
            method: "DELETE",
            params: {
              id
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      search(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/statuses/search",
            method: "GET",
            params: {
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              searchString: parameters === null || parameters === void 0 ? void 0 : parameters.searchString,
              statusCategory: parameters === null || parameters === void 0 ? void 0 : parameters.statusCategory
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Status = Status;
  }
});

// node_modules/jira.js/out/version3/tasks.js
var require_tasks2 = __commonJS({
  "node_modules/jira.js/out/version3/tasks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Tasks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Tasks = class {
      constructor(client) {
        this.client = client;
      }
      getTask(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const taskId = typeof parameters === "string" ? parameters : parameters.taskId;
          const config = {
            url: `/rest/api/3/task/${taskId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      cancelTask(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const taskId = typeof parameters === "string" ? parameters : parameters.taskId;
          const config = {
            url: `/rest/api/3/task/${taskId}/cancel`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Tasks = Tasks;
  }
});

// node_modules/jira.js/out/version3/timeTracking.js
var require_timeTracking2 = __commonJS({
  "node_modules/jira.js/out/version3/timeTracking.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimeTracking = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var TimeTracking = class {
      constructor(client) {
        this.client = client;
      }
      getSelectedTimeTrackingImplementation(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/configuration/timetracking",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      selectTimeTrackingImplementation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/configuration/timetracking",
            method: "PUT",
            data: {
              key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name,
              url: parameters === null || parameters === void 0 ? void 0 : parameters.url
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAvailableTimeTrackingImplementations(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/configuration/timetracking/list",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSharedTimeTrackingConfiguration(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/configuration/timetracking/options",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setSharedTimeTrackingConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/configuration/timetracking/options",
            method: "PUT",
            data: {
              workingHoursPerDay: parameters === null || parameters === void 0 ? void 0 : parameters.workingHoursPerDay,
              workingDaysPerWeek: parameters === null || parameters === void 0 ? void 0 : parameters.workingDaysPerWeek,
              timeFormat: parameters === null || parameters === void 0 ? void 0 : parameters.timeFormat,
              defaultUnit: parameters === null || parameters === void 0 ? void 0 : parameters.defaultUnit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.TimeTracking = TimeTracking;
  }
});

// node_modules/jira.js/out/version3/uIModificationsApps.js
var require_uIModificationsApps2 = __commonJS({
  "node_modules/jira.js/out/version3/uIModificationsApps.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UIModificationsApps = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var UIModificationsApps = class {
      constructor(client) {
        this.client = client;
      }
      getUiModifications(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/uiModifications",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createUiModification(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/uiModifications",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description,
              data: parameters.data,
              contexts: parameters.contexts
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateUiModification(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/uiModifications/${parameters.uiModificationId}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              data: parameters.data,
              contexts: parameters.contexts
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteUiModification(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const uiModificationId = typeof parameters === "string" ? parameters : parameters.uiModificationId;
          const config = {
            url: `/rest/api/3/uiModifications/${uiModificationId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.UIModificationsApps = UIModificationsApps;
  }
});

// node_modules/jira.js/out/version3/userProperties.js
var require_userProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/userProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var UserProperties = class {
      constructor(client) {
        this.client = client;
      }
      getUserPropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/properties",
            method: "GET",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              userKey: parameters === null || parameters === void 0 ? void 0 : parameters.userKey,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/user/properties/${parameters.propertyKey}`,
            method: "GET",
            params: {
              accountId: parameters.accountId,
              userKey: parameters.userKey,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/user/properties/${parameters.propertyKey}`,
            method: "PUT",
            params: {
              accountId: parameters.accountId
            },
            data: parameters.propertyValue
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteUserProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/user/properties/${parameters.propertyKey}`,
            method: "DELETE",
            params: {
              accountId: parameters.accountId,
              userKey: parameters.userKey,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.UserProperties = UserProperties;
  }
});

// node_modules/jira.js/out/version3/users.js
var require_users2 = __commonJS({
  "node_modules/jira.js/out/version3/users.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Users = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var Users = class {
      constructor(client) {
        this.client = client;
      }
      getUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user",
            method: "GET",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              key: parameters === null || parameters === void 0 ? void 0 : parameters.key,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user",
            method: "POST",
            data: {
              emailAddress: parameters.emailAddress,
              self: parameters.self
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user",
            method: "DELETE",
            params: {
              accountId: parameters.accountId,
              key: parameters.key,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkGetUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/bulk",
            method: "GET",
            params: {
              accountId: (0, paramSerializer_1.paramSerializer)("accountId", parameters.accountId),
              maxResults: parameters.maxResults,
              startAt: parameters.startAt
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      bulkGetUsersMigration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/bulk/migration",
            method: "GET",
            params: {
              key: (0, paramSerializer_1.paramSerializer)("key", parameters.key),
              maxResults: parameters.maxResults,
              startAt: parameters.startAt,
              username: (0, paramSerializer_1.paramSerializer)("username", parameters.username)
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserDefaultColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/columns",
            method: "GET",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setUserColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/columns",
            method: "PUT",
            params: {
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId
            },
            data: parameters === null || parameters === void 0 ? void 0 : parameters.columns
          };
          return this.client.sendRequest(config, callback);
        });
      }
      resetUserColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/columns",
            method: "DELETE",
            params: {
              accountId: parameters.accountId,
              username: parameters.username
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const accountId = typeof parameters === "string" ? parameters : parameters.accountId;
          const config = {
            url: "/rest/api/3/user/email",
            method: "GET",
            params: {
              accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserEmailBulk(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const accountId = typeof parameters === "string" ? parameters : parameters.accountId;
          const config = {
            url: "/rest/api/3/user/email/bulk",
            method: "GET",
            params: {
              accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUserGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/groups",
            method: "GET",
            params: {
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllUsersDefault(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/users",
            method: "GET",
            params: {
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAllUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/users/search",
            method: "GET",
            params: {
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Users = Users;
  }
});

// node_modules/jira.js/out/version3/userSearch.js
var require_userSearch2 = __commonJS({
  "node_modules/jira.js/out/version3/userSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserSearch = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var UserSearch = class {
      constructor(client) {
        this.client = client;
      }
      findBulkAssignableUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/assignable/multiProjectSearch",
            method: "GET",
            params: {
              query: parameters.query,
              username: parameters.username,
              accountId: parameters.accountId,
              projectKeys: parameters.projectKeys,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findAssignableUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/assignable/search",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              sessionId: parameters === null || parameters === void 0 ? void 0 : parameters.sessionId,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              project: parameters === null || parameters === void 0 ? void 0 : parameters.project,
              issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              actionDescriptorId: parameters === null || parameters === void 0 ? void 0 : parameters.actionDescriptorId,
              recommend: parameters === null || parameters === void 0 ? void 0 : parameters.recommend
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersWithAllPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/permission/search",
            method: "GET",
            params: {
              query: parameters.query,
              username: parameters.username,
              accountId: parameters.accountId,
              permissions: parameters.permissions,
              issueKey: parameters.issueKey,
              projectKey: parameters.projectKey,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersForPicker(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/picker",
            method: "GET",
            params: {
              query: parameters.query,
              maxResults: parameters.maxResults,
              showAvatar: parameters.showAvatar,
              excludeAccountIds: (0, paramSerializer_1.paramSerializer)("excludeAccountIds", parameters.excludeAccountIds),
              avatarSize: parameters.avatarSize,
              excludeConnectUsers: parameters.excludeConnectUsers
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/search",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              property: parameters === null || parameters === void 0 ? void 0 : parameters.property
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersByQuery(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/search/query",
            method: "GET",
            params: {
              query: parameters.query,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUserKeysByQuery(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/search/query/key",
            method: "GET",
            params: {
              query: parameters.query,
              startAt: parameters.startAt,
              maxResults: parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      findUsersWithBrowsePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/user/viewissue/search",
            method: "GET",
            params: {
              query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
              username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
              issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
              projectKey: parameters === null || parameters === void 0 ? void 0 : parameters.projectKey,
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.UserSearch = UserSearch;
  }
});

// node_modules/jira.js/out/version3/webhooks.js
var require_webhooks2 = __commonJS({
  "node_modules/jira.js/out/version3/webhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Webhooks = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Webhooks = class {
      constructor(client) {
        this.client = client;
      }
      getDynamicWebhooksForApp(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/webhook",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      registerDynamicWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/webhook",
            method: "POST",
            data: {
              webhooks: parameters.webhooks,
              url: parameters.url
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWebhookById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/webhook",
            method: "DELETE",
            data: {
              webhookIds: parameters.webhookIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFailedWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/webhook/failed",
            method: "GET",
            params: {
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              after: parameters === null || parameters === void 0 ? void 0 : parameters.after
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      refreshWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/webhook/refresh",
            method: "PUT",
            data: {
              webhookIds: parameters.webhookIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Webhooks = Webhooks;
  }
});

// node_modules/jira.js/out/version3/workflows.js
var require_workflows2 = __commonJS({
  "node_modules/jira.js/out/version3/workflows.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Workflows = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var paramSerializer_1 = require_paramSerializer();
    var Workflows = class {
      constructor(client) {
        this.client = client;
      }
      createWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflow",
            method: "POST",
            data: {
              name: parameters.name,
              description: parameters.description,
              transitions: parameters.transitions,
              statuses: parameters.statuses
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflow/search",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
              workflowName: (0, paramSerializer_1.paramSerializer)("workflowName", parameters === null || parameters === void 0 ? void 0 : parameters.workflowName),
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
              orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
              isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteInactiveWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const entityId = typeof parameters === "string" ? parameters : parameters.entityId;
          const config = {
            url: `/rest/api/3/workflow/${entityId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Workflows = Workflows;
  }
});

// node_modules/jira.js/out/version3/workflowSchemeDrafts.js
var require_workflowSchemeDrafts2 = __commonJS({
  "node_modules/jira.js/out/version3/workflowSchemeDrafts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowSchemeDrafts = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowSchemeDrafts = class {
      constructor(client) {
        this.client = client;
      }
      createWorkflowSchemeDraftFromParent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/createdraft`,
            method: "POST"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowSchemeDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/draft`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowSchemeDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              defaultWorkflow: parameters.defaultWorkflow,
              issueTypeMappings: parameters.issueTypeMappings,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowSchemeDraft(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/draft`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDraftDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/draft/default`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDraftDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/default`,
            method: "PUT",
            data: {
              workflow: parameters.workflow,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDraftDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/draft/default`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowSchemeDraftIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/issuetype/${parameters.issueType}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setWorkflowSchemeDraftIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/issuetype/${parameters.issueType}`,
            method: "PUT",
            data: parameters.details
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowSchemeDraftIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/issuetype/${parameters.issueType}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      publishDraftWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/draft/publish`,
            method: "POST",
            params: {
              validateOnly: typeof parameters !== "string" && parameters.validateOnly
            },
            data: {
              statusMappings: typeof parameters !== "string" && parameters.statusMappings
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDraftWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/workflow`,
            method: "GET",
            params: {
              workflowName: parameters.workflowName
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDraftWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/workflow`,
            method: "PUT",
            params: {
              workflowName: parameters.workflowName
            },
            data: {
              workflow: parameters.workflow,
              issueTypes: parameters.issueTypes,
              defaultMapping: parameters.defaultMapping,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDraftWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/draft/workflow`,
            method: "DELETE",
            params: {
              workflowName: parameters.workflowName
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowSchemeDrafts = WorkflowSchemeDrafts;
  }
});

// node_modules/jira.js/out/version3/workflowSchemeProjectAssociations.js
var require_workflowSchemeProjectAssociations2 = __commonJS({
  "node_modules/jira.js/out/version3/workflowSchemeProjectAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowSchemeProjectAssociations = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowSchemeProjectAssociations = class {
      constructor(client) {
        this.client = client;
      }
      getWorkflowSchemeProjectAssociations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflowscheme/project",
            method: "GET",
            params: {
              projectId: parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      assignSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflowscheme/project",
            method: "PUT",
            data: {
              workflowSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.workflowSchemeId,
              projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowSchemeProjectAssociations = WorkflowSchemeProjectAssociations;
  }
});

// node_modules/jira.js/out/version3/workflowSchemes.js
var require_workflowSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/workflowSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowSchemes = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowSchemes = class {
      constructor(client) {
        this.client = client;
      }
      getAllWorkflowSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflowscheme",
            method: "GET",
            params: {
              startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
              maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflowscheme",
            method: "POST",
            data: {
              id: parameters.id,
              name: parameters.name,
              description: parameters.description,
              defaultWorkflow: parameters.defaultWorkflow,
              issueTypeMappings: parameters.issueTypeMappings,
              originalDefaultWorkflow: parameters.originalDefaultWorkflow,
              originalIssueTypeMappings: parameters.originalIssueTypeMappings,
              draft: parameters.draft,
              lastModifiedUser: parameters.lastModifiedUser,
              lastModified: parameters.lastModified,
              self: parameters.self,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded,
              issueTypes: parameters.issueTypes
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}`,
            method: "GET",
            params: {
              returnDraftIfExists: typeof parameters !== "string" && parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}`,
            method: "PUT",
            data: {
              name: parameters.name,
              description: parameters.description,
              defaultWorkflow: parameters.defaultWorkflow,
              issueTypeMappings: parameters.issueTypeMappings,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/default`,
            method: "GET",
            params: {
              returnDraftIfExists: typeof parameters !== "string" && parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/default`,
            method: "PUT",
            data: {
              workflow: parameters.workflow,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteDefaultWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/default`,
            method: "DELETE",
            params: {
              updateDraftIfNeeded: typeof parameters !== "string" && parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflowSchemeIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/issuetype/${parameters.issueType}`,
            method: "GET",
            params: {
              returnDraftIfExists: parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setWorkflowSchemeIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/issuetype/${parameters.issueType}`,
            method: "PUT",
            data: parameters.details
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowSchemeIssueType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/issuetype/${parameters.issueType}`,
            method: "DELETE",
            params: {
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/workflow`,
            method: "GET",
            params: {
              workflowName: typeof parameters !== "string" && parameters.workflowName,
              returnDraftIfExists: typeof parameters !== "string" && parameters.returnDraftIfExists
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflowscheme/${parameters.id}/workflow`,
            method: "PUT",
            params: {
              workflowName: parameters.workflowName
            },
            data: {
              workflow: parameters.workflow,
              issueTypes: parameters.issueTypes,
              defaultMapping: parameters.defaultMapping,
              updateDraftIfNeeded: parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const id = typeof parameters === "string" ? parameters : parameters.id;
          const config = {
            url: `/rest/api/3/workflowscheme/${id}/workflow`,
            method: "DELETE",
            params: {
              workflowName: typeof parameters !== "string" && parameters.workflowName,
              updateDraftIfNeeded: typeof parameters !== "string" && parameters.updateDraftIfNeeded
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowSchemes = WorkflowSchemes;
  }
});

// node_modules/jira.js/out/version3/workflowStatusCategories.js
var require_workflowStatusCategories2 = __commonJS({
  "node_modules/jira.js/out/version3/workflowStatusCategories.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStatusCategories = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowStatusCategories = class {
      constructor(client) {
        this.client = client;
      }
      getStatusCategories(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/statuscategory",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getStatusCategory(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const idOrKey = typeof parameters === "string" ? parameters : parameters.idOrKey;
          const config = {
            url: `/rest/api/3/statuscategory/${idOrKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowStatusCategories = WorkflowStatusCategories;
  }
});

// node_modules/jira.js/out/version3/workflowStatuses.js
var require_workflowStatuses2 = __commonJS({
  "node_modules/jira.js/out/version3/workflowStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowStatuses = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowStatuses = class {
      constructor(client) {
        this.client = client;
      }
      getStatuses(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/status",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const idOrName = typeof parameters === "string" ? parameters : parameters.idOrName;
          const config = {
            url: `/rest/api/3/status/${idOrName}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowStatuses = WorkflowStatuses;
  }
});

// node_modules/jira.js/out/version3/workflowTransitionProperties.js
var require_workflowTransitionProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/workflowTransitionProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowTransitionProperties = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowTransitionProperties = class {
      constructor(client) {
        this.client = client;
      }
      getWorkflowTransitionProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflow/transitions/${parameters.transitionId}/properties`,
            method: "GET",
            params: {
              includeReservedKeys: parameters.includeReservedKeys,
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflow/transitions/${parameters.transitionId}/properties`,
            method: "POST",
            params: {
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            },
            data: Object.assign(Object.assign({}, parameters), { transitionId: void 0, key: void 0, workflowName: void 0, workflowMode: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflow/transitions/${parameters.transitionId}/properties`,
            method: "PUT",
            params: {
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            },
            data: Object.assign(Object.assign({}, parameters), { transitionId: void 0, key: void 0, workflowName: void 0, workflowMode: void 0 })
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/api/3/workflow/transitions/${parameters.transitionId}/properties`,
            method: "DELETE",
            params: {
              key: parameters.key,
              workflowName: parameters.workflowName,
              workflowMode: parameters.workflowMode
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowTransitionProperties = WorkflowTransitionProperties;
  }
});

// node_modules/jira.js/out/version3/workflowTransitionRules.js
var require_workflowTransitionRules3 = __commonJS({
  "node_modules/jira.js/out/version3/workflowTransitionRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkflowTransitionRules = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var WorkflowTransitionRules = class {
      constructor(client) {
        this.client = client;
      }
      getWorkflowTransitionRuleConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflow/rule/config",
            method: "GET",
            params: {
              startAt: parameters.startAt,
              maxResults: parameters.maxResults,
              types: parameters.types,
              keys: parameters.keys,
              workflowNames: parameters.workflowNames,
              withTags: parameters.withTags,
              draft: parameters.draft,
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      updateWorkflowTransitionRuleConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflow/rule/config",
            method: "PUT",
            data: {
              workflows: parameters.workflows
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteWorkflowTransitionRuleConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/api/3/workflow/rule/config/delete",
            method: "PUT",
            data: {
              workflows: parameters === null || parameters === void 0 ? void 0 : parameters.workflows
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.WorkflowTransitionRules = WorkflowTransitionRules;
  }
});

// node_modules/jira.js/out/version3/client/version3Client.js
var require_version3Client = __commonJS({
  "node_modules/jira.js/out/version3/client/version3Client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Version3Client = void 0;
    var clients_1 = require_clients();
    var __1 = require_version32();
    var Version3Client = class extends clients_1.BaseClient {
      constructor() {
        super(...arguments);
        this.announcementBanner = new __1.AnnouncementBanner(this);
        this.applicationRoles = new __1.ApplicationRoles(this);
        this.appMigration = new __1.AppMigration(this);
        this.appProperties = new __1.AppProperties(this);
        this.auditRecords = new __1.AuditRecords(this);
        this.avatars = new __1.Avatars(this);
        this.dashboards = new __1.Dashboards(this);
        this.dynamicModules = new __1.DynamicModules(this);
        this.filters = new __1.Filters(this);
        this.filterSharing = new __1.FilterSharing(this);
        this.groupAndUserPicker = new __1.GroupAndUserPicker(this);
        this.groups = new __1.Groups(this);
        this.instanceInformation = new __1.InstanceInformation(this);
        this.issueAttachments = new __1.IssueAttachments(this);
        this.issueCommentProperties = new __1.IssueCommentProperties(this);
        this.issueComments = new __1.IssueComments(this);
        this.issueCustomFieldConfigurationApps = new __1.IssueCustomFieldConfigurationApps(this);
        this.issueCustomFieldContexts = new __1.IssueCustomFieldContexts(this);
        this.issueCustomFieldOptions = new __1.IssueCustomFieldOptions(this);
        this.issueCustomFieldOptionsApps = new __1.IssueCustomFieldOptionsApps(this);
        this.issueCustomFieldValuesApps = new __1.IssueCustomFieldValuesApps(this);
        this.issueFieldConfigurations = new __1.IssueFieldConfigurations(this);
        this.issueFields = new __1.IssueFields(this);
        this.issueLinks = new __1.IssueLinks(this);
        this.issueLinkTypes = new __1.IssueLinkTypes(this);
        this.issueNavigatorSettings = new __1.IssueNavigatorSettings(this);
        this.issueNotificationSchemes = new __1.IssueNotificationSchemes(this);
        this.issuePriorities = new __1.IssuePriorities(this);
        this.issueProperties = new __1.IssueProperties(this);
        this.issueRemoteLinks = new __1.IssueRemoteLinks(this);
        this.issueResolutions = new __1.IssueResolutions(this);
        this.issues = new __1.Issues(this);
        this.issueSearch = new __1.IssueSearch(this);
        this.issueSecurityLevel = new __1.IssueSecurityLevel(this);
        this.issueSecuritySchemes = new __1.IssueSecuritySchemes(this);
        this.issueTypeProperties = new __1.IssueTypeProperties(this);
        this.issueTypes = new __1.IssueTypes(this);
        this.issueTypeSchemes = new __1.IssueTypeSchemes(this);
        this.issueTypeScreenSchemes = new __1.IssueTypeScreenSchemes(this);
        this.issueVotes = new __1.IssueVotes(this);
        this.issueWatchers = new __1.IssueWatchers(this);
        this.issueWorklogProperties = new __1.IssueWorklogProperties(this);
        this.issueWorklogs = new __1.IssueWorklogs(this);
        this.jiraExpressions = new __1.JiraExpressions(this);
        this.jiraSettings = new __1.JiraSettings(this);
        this.jql = new __1.JQL(this);
        this.jqlFunctionsApps = new __1.JqlFunctionsApps(this);
        this.labels = new __1.Labels(this);
        this.licenseMetrics = new __1.LicenseMetrics(this);
        this.myself = new __1.Myself(this);
        this.permissions = new __1.Permissions(this);
        this.permissionSchemes = new __1.PermissionSchemes(this);
        this.projectAvatars = new __1.ProjectAvatars(this);
        this.projectCategories = new __1.ProjectCategories(this);
        this.projectComponents = new __1.ProjectComponents(this);
        this.projectEmail = new __1.ProjectEmail(this);
        this.projectFeatures = new __1.ProjectFeatures(this);
        this.projectKeyAndNameValidation = new __1.ProjectKeyAndNameValidation(this);
        this.projectPermissionSchemes = new __1.ProjectPermissionSchemes(this);
        this.projectProperties = new __1.ProjectProperties(this);
        this.projectRoleActors = new __1.ProjectRoleActors(this);
        this.projectRoles = new __1.ProjectRoles(this);
        this.projects = new __1.Projects(this);
        this.projectTypes = new __1.ProjectTypes(this);
        this.projectVersions = new __1.ProjectVersions(this);
        this.screens = new __1.Screens(this);
        this.screenSchemes = new __1.ScreenSchemes(this);
        this.screenTabFields = new __1.ScreenTabFields(this);
        this.screenTabs = new __1.ScreenTabs(this);
        this.serverInfo = new __1.ServerInfo(this);
        this.status = new __1.Status(this);
        this.tasks = new __1.Tasks(this);
        this.timeTracking = new __1.TimeTracking(this);
        this.uiModificationsApps = new __1.UIModificationsApps(this);
        this.userProperties = new __1.UserProperties(this);
        this.users = new __1.Users(this);
        this.userSearch = new __1.UserSearch(this);
        this.webhooks = new __1.Webhooks(this);
        this.workflows = new __1.Workflows(this);
        this.workflowSchemeDrafts = new __1.WorkflowSchemeDrafts(this);
        this.workflowSchemeProjectAssociations = new __1.WorkflowSchemeProjectAssociations(this);
        this.workflowSchemes = new __1.WorkflowSchemes(this);
        this.workflowStatusCategories = new __1.WorkflowStatusCategories(this);
        this.workflowStatuses = new __1.WorkflowStatuses(this);
        this.workflowTransitionProperties = new __1.WorkflowTransitionProperties(this);
        this.workflowTransitionRules = new __1.WorkflowTransitionRules(this);
      }
    };
    exports2.Version3Client = Version3Client;
  }
});

// node_modules/jira.js/out/version3/client/index.js
var require_client4 = __commonJS({
  "node_modules/jira.js/out/version3/client/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_version3Client(), exports2);
  }
});

// node_modules/jira.js/out/version3/models/actorInput.js
var require_actorInput2 = __commonJS({
  "node_modules/jira.js/out/version3/models/actorInput.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/actorsMap.js
var require_actorsMap2 = __commonJS({
  "node_modules/jira.js/out/version3/models/actorsMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/addField.js
var require_addField2 = __commonJS({
  "node_modules/jira.js/out/version3/models/addField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/addGroup.js
var require_addGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/models/addGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/addSecuritySchemeLevelsRequest.js
var require_addSecuritySchemeLevelsRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/addSecuritySchemeLevelsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/announcementBannerConfiguration.js
var require_announcementBannerConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/announcementBannerConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/announcementBannerConfigurationUpdate.js
var require_announcementBannerConfigurationUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/announcementBannerConfigurationUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/application.js
var require_application2 = __commonJS({
  "node_modules/jira.js/out/version3/models/application.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/applicationProperty.js
var require_applicationProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/models/applicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/applicationRole.js
var require_applicationRole2 = __commonJS({
  "node_modules/jira.js/out/version3/models/applicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/archiveIssueAsyncRequest.js
var require_archiveIssueAsyncRequest = __commonJS({
  "node_modules/jira.js/out/version3/models/archiveIssueAsyncRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/associatedItem.js
var require_associatedItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/associatedItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/associateFieldConfigurationsWithIssueTypesRequest.js
var require_associateFieldConfigurationsWithIssueTypesRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/associateFieldConfigurationsWithIssueTypesRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachment.js
var require_attachment2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachmentArchiveEntry.js
var require_attachmentArchiveEntry2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachmentArchiveEntry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachmentArchiveImpl.js
var require_attachmentArchiveImpl2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachmentArchiveImpl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachmentArchiveItemReadable.js
var require_attachmentArchiveItemReadable2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachmentArchiveItemReadable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachmentArchiveMetadataReadable.js
var require_attachmentArchiveMetadataReadable2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachmentArchiveMetadataReadable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachmentMetadata.js
var require_attachmentMetadata2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachmentMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/attachmentSettings.js
var require_attachmentSettings2 = __commonJS({
  "node_modules/jira.js/out/version3/models/attachmentSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/auditRecord.js
var require_auditRecord2 = __commonJS({
  "node_modules/jira.js/out/version3/models/auditRecord.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/auditRecords.js
var require_auditRecords4 = __commonJS({
  "node_modules/jira.js/out/version3/models/auditRecords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/autoCompleteSuggestion.js
var require_autoCompleteSuggestion2 = __commonJS({
  "node_modules/jira.js/out/version3/models/autoCompleteSuggestion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/autoCompleteSuggestions.js
var require_autoCompleteSuggestions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/autoCompleteSuggestions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/availableDashboardGadget.js
var require_availableDashboardGadget2 = __commonJS({
  "node_modules/jira.js/out/version3/models/availableDashboardGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/availableDashboardGadgetsResponse.js
var require_availableDashboardGadgetsResponse2 = __commonJS({
  "node_modules/jira.js/out/version3/models/availableDashboardGadgetsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/avatar.js
var require_avatar2 = __commonJS({
  "node_modules/jira.js/out/version3/models/avatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/avatars.js
var require_avatars4 = __commonJS({
  "node_modules/jira.js/out/version3/models/avatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/avatarUrls.js
var require_avatarUrls3 = __commonJS({
  "node_modules/jira.js/out/version3/models/avatarUrls.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/avatarWithDetails.js
var require_avatarWithDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/avatarWithDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkChangeOwnerDetails.js
var require_bulkChangeOwnerDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkChangeOwnerDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkCustomFieldOptionCreateRequest.js
var require_bulkCustomFieldOptionCreateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkCustomFieldOptionCreateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkCustomFieldOptionUpdateRequest.js
var require_bulkCustomFieldOptionUpdateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkCustomFieldOptionUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkEditShareableEntity.js
var require_bulkEditShareableEntity2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkEditShareableEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkIssueIsWatching.js
var require_bulkIssueIsWatching2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkIssueIsWatching.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkIssuePropertyUpdateRequest.js
var require_bulkIssuePropertyUpdateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkIssuePropertyUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkOperationErrorResult.js
var require_bulkOperationErrorResult2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkOperationErrorResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkPermissionGrants.js
var require_bulkPermissionGrants2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkPermissionGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkPermissionsRequest.js
var require_bulkPermissionsRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkPermissionsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkProjectPermissionGrants.js
var require_bulkProjectPermissionGrants2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkProjectPermissionGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/bulkProjectPermissions.js
var require_bulkProjectPermissions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/bulkProjectPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/changeDetails.js
var require_changeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/changeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/changedValue.js
var require_changedValue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/changedValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/changedWorklog.js
var require_changedWorklog2 = __commonJS({
  "node_modules/jira.js/out/version3/models/changedWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/changedWorklogs.js
var require_changedWorklogs2 = __commonJS({
  "node_modules/jira.js/out/version3/models/changedWorklogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/changelog.js
var require_changelog2 = __commonJS({
  "node_modules/jira.js/out/version3/models/changelog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/columnItem.js
var require_columnItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/columnItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/comment.js
var require_comment2 = __commonJS({
  "node_modules/jira.js/out/version3/models/comment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/componentIssuesCount.js
var require_componentIssuesCount2 = __commonJS({
  "node_modules/jira.js/out/version3/models/componentIssuesCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/componentWithIssueCount.js
var require_componentWithIssueCount2 = __commonJS({
  "node_modules/jira.js/out/version3/models/componentWithIssueCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/configuration.js
var require_configuration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/configuration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/connectCustomFieldValue.js
var require_connectCustomFieldValue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/connectCustomFieldValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/connectCustomFieldValues.js
var require_connectCustomFieldValues2 = __commonJS({
  "node_modules/jira.js/out/version3/models/connectCustomFieldValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/connectModule.js
var require_connectModule2 = __commonJS({
  "node_modules/jira.js/out/version3/models/connectModule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/connectModules.js
var require_connectModules2 = __commonJS({
  "node_modules/jira.js/out/version3/models/connectModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/connectWorkflowTransitionRule.js
var require_connectWorkflowTransitionRule2 = __commonJS({
  "node_modules/jira.js/out/version3/models/connectWorkflowTransitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/containerForProjectFeatures.js
var require_containerForProjectFeatures2 = __commonJS({
  "node_modules/jira.js/out/version3/models/containerForProjectFeatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/containerForRegisteredWebhooks.js
var require_containerForRegisteredWebhooks2 = __commonJS({
  "node_modules/jira.js/out/version3/models/containerForRegisteredWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/containerForWebhookIDs.js
var require_containerForWebhookIDs2 = __commonJS({
  "node_modules/jira.js/out/version3/models/containerForWebhookIDs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/containerOfWorkflowSchemeAssociations.js
var require_containerOfWorkflowSchemeAssociations2 = __commonJS({
  "node_modules/jira.js/out/version3/models/containerOfWorkflowSchemeAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/contextForProjectAndIssueType.js
var require_contextForProjectAndIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/models/contextForProjectAndIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/contextualConfiguration.js
var require_contextualConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/contextualConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/convertedJQLQueries.js
var require_convertedJQLQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/models/convertedJQLQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createCustomFieldContext.js
var require_createCustomFieldContext3 = __commonJS({
  "node_modules/jira.js/out/version3/models/createCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createdIssue.js
var require_createdIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createdIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createdIssues.js
var require_createdIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createdIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createIssueSecuritySchemeDetails.js
var require_createIssueSecuritySchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createIssueSecuritySchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createNotificationSchemeDetails.js
var require_createNotificationSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createNotificationSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createPriorityDetails.js
var require_createPriorityDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createPriorityDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createProjectDetails.js
var require_createProjectDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createProjectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createResolutionDetails.js
var require_createResolutionDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createResolutionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createUiModificationDetails.js
var require_createUiModificationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createUiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createUpdateRoleRequest.js
var require_createUpdateRoleRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createUpdateRoleRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowCondition.js
var require_createWorkflowCondition2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowDetails.js
var require_createWorkflowDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowStatusDetails.js
var require_createWorkflowStatusDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowStatusDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowTransitionDetails.js
var require_createWorkflowTransitionDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowTransitionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowTransitionRule.js
var require_createWorkflowTransitionRule2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowTransitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowTransitionRulesDetails.js
var require_createWorkflowTransitionRulesDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowTransitionRulesDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/createWorkflowTransitionScreenDetails.js
var require_createWorkflowTransitionScreenDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/createWorkflowTransitionScreenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customContextVariable.js
var require_customContextVariable2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customContextVariable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldConfigurations.js
var require_customFieldConfigurations2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldContext.js
var require_customFieldContext2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldContextDefaultValue.js
var require_customFieldContextDefaultValue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldContextDefaultValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldContextDefaultValueUpdate.js
var require_customFieldContextDefaultValueUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldContextDefaultValueUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldContextOption.js
var require_customFieldContextOption2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldContextOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldContextProjectMapping.js
var require_customFieldContextProjectMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldContextProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldContextUpdateDetails.js
var require_customFieldContextUpdateDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldContextUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldCreatedContextOptionsList.js
var require_customFieldCreatedContextOptionsList2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldCreatedContextOptionsList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldDefinitionJson.js
var require_customFieldDefinitionJson2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldDefinitionJson.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldOption.js
var require_customFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldOptionCreate.js
var require_customFieldOptionCreate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldOptionCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldOptionUpdate.js
var require_customFieldOptionUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldOptionUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldReplacement.js
var require_customFieldReplacement2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldReplacement.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldUpdatedContextOptionsList.js
var require_customFieldUpdatedContextOptionsList2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldUpdatedContextOptionsList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldValueUpdate.js
var require_customFieldValueUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldValueUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/customFieldValueUpdateRequest.js
var require_customFieldValueUpdateRequest = __commonJS({
  "node_modules/jira.js/out/version3/models/customFieldValueUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboard.js
var require_dashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardDetails.js
var require_dashboardDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardGadget.js
var require_dashboardGadget2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardGadgetPosition.js
var require_dashboardGadgetPosition2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardGadgetPosition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardGadgetResponse.js
var require_dashboardGadgetResponse2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardGadgetResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardGadgetSettings.js
var require_dashboardGadgetSettings2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardGadgetSettings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardGadgetUpdateRequest.js
var require_dashboardGadgetUpdateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardGadgetUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dashboardUser.js
var require_dashboardUser2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dashboardUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/dateRangeFilter.js
var require_dateRangeFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/models/dateRangeFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/defaultLevelValue.js
var require_defaultLevelValue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/defaultLevelValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/defaultShareScope.js
var require_defaultShareScope2 = __commonJS({
  "node_modules/jira.js/out/version3/models/defaultShareScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/defaultWorkflow.js
var require_defaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/models/defaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/deleteAndReplaceVersion.js
var require_deleteAndReplaceVersion2 = __commonJS({
  "node_modules/jira.js/out/version3/models/deleteAndReplaceVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/document.js
var require_document = __commonJS({
  "node_modules/jira.js/out/version3/models/document.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/entityProperty.js
var require_entityProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/models/entityProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/entityPropertyDetails.js
var require_entityPropertyDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/entityPropertyDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/error.js
var require_error2 = __commonJS({
  "node_modules/jira.js/out/version3/models/error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/errorCollection.js
var require_errorCollection2 = __commonJS({
  "node_modules/jira.js/out/version3/models/errorCollection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/errors.js
var require_errors3 = __commonJS({
  "node_modules/jira.js/out/version3/models/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/eventNotification.js
var require_eventNotification2 = __commonJS({
  "node_modules/jira.js/out/version3/models/eventNotification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/exportArchivedIssuesTaskProgress.js
var require_exportArchivedIssuesTaskProgress2 = __commonJS({
  "node_modules/jira.js/out/version3/models/exportArchivedIssuesTaskProgress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/failedWebhook.js
var require_failedWebhook2 = __commonJS({
  "node_modules/jira.js/out/version3/models/failedWebhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/failedWebhooks.js
var require_failedWebhooks2 = __commonJS({
  "node_modules/jira.js/out/version3/models/failedWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/field.js
var require_field2 = __commonJS({
  "node_modules/jira.js/out/version3/models/field.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfiguration.js
var require_fieldConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationDetails.js
var require_fieldConfigurationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationIssueTypeItem.js
var require_fieldConfigurationIssueTypeItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationIssueTypeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationItem.js
var require_fieldConfigurationItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationItemsDetails.js
var require_fieldConfigurationItemsDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationItemsDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationScheme.js
var require_fieldConfigurationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationSchemeProjectAssociation.js
var require_fieldConfigurationSchemeProjectAssociation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationSchemeProjects.js
var require_fieldConfigurationSchemeProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldConfigurationToIssueTypeMapping.js
var require_fieldConfigurationToIssueTypeMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldConfigurationToIssueTypeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldDetails.js
var require_fieldDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldLastUsed.js
var require_fieldLastUsed2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldLastUsed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fieldReferenceData.js
var require_fieldReferenceData2 = __commonJS({
  "node_modules/jira.js/out/version3/models/fieldReferenceData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fields.js
var require_fields3 = __commonJS({
  "node_modules/jira.js/out/version3/models/fields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/filter.js
var require_filter2 = __commonJS({
  "node_modules/jira.js/out/version3/models/filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/filterDetails.js
var require_filterDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/filterDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/filterSubscription.js
var require_filterSubscription2 = __commonJS({
  "node_modules/jira.js/out/version3/models/filterSubscription.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/filterSubscriptionsList.js
var require_filterSubscriptionsList2 = __commonJS({
  "node_modules/jira.js/out/version3/models/filterSubscriptionsList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/fixVersion.js
var require_fixVersion3 = __commonJS({
  "node_modules/jira.js/out/version3/models/fixVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/foundGroup.js
var require_foundGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/models/foundGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/foundGroups.js
var require_foundGroups2 = __commonJS({
  "node_modules/jira.js/out/version3/models/foundGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/foundUsers.js
var require_foundUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/models/foundUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/foundUsersAndGroups.js
var require_foundUsersAndGroups2 = __commonJS({
  "node_modules/jira.js/out/version3/models/foundUsersAndGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/functionReferenceData.js
var require_functionReferenceData2 = __commonJS({
  "node_modules/jira.js/out/version3/models/functionReferenceData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/globalScope.js
var require_globalScope2 = __commonJS({
  "node_modules/jira.js/out/version3/models/globalScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/group.js
var require_group3 = __commonJS({
  "node_modules/jira.js/out/version3/models/group.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/groupDetails.js
var require_groupDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/groupDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/groupLabel.js
var require_groupLabel2 = __commonJS({
  "node_modules/jira.js/out/version3/models/groupLabel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/groupName.js
var require_groupName2 = __commonJS({
  "node_modules/jira.js/out/version3/models/groupName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/hierarchy.js
var require_hierarchy2 = __commonJS({
  "node_modules/jira.js/out/version3/models/hierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/hierarchyLevel.js
var require_hierarchyLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/models/hierarchyLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/historyMetadata.js
var require_historyMetadata2 = __commonJS({
  "node_modules/jira.js/out/version3/models/historyMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/historyMetadataParticipant.js
var require_historyMetadataParticipant2 = __commonJS({
  "node_modules/jira.js/out/version3/models/historyMetadataParticipant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/icon.js
var require_icon2 = __commonJS({
  "node_modules/jira.js/out/version3/models/icon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/id.js
var require_id2 = __commonJS({
  "node_modules/jira.js/out/version3/models/id.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/idOrKey.js
var require_idOrKey2 = __commonJS({
  "node_modules/jira.js/out/version3/models/idOrKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/includedFields.js
var require_includedFields2 = __commonJS({
  "node_modules/jira.js/out/version3/models/includedFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issue.js
var require_issue4 = __commonJS({
  "node_modules/jira.js/out/version3/models/issue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueArchivalSync.js
var require_issueArchivalSync2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueArchivalSync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueArchivalSyncRequest.js
var require_issueArchivalSyncRequest = __commonJS({
  "node_modules/jira.js/out/version3/models/issueArchivalSyncRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueChangelogIds.js
var require_issueChangelogIds2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueChangelogIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueCommentListRequest.js
var require_issueCommentListRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueCommentListRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueCreateMetadata.js
var require_issueCreateMetadata2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueCreateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueEntityProperties.js
var require_issueEntityProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueEntityProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueEntityPropertiesForMultiUpdate.js
var require_issueEntityPropertiesForMultiUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueEntityPropertiesForMultiUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueEvent.js
var require_issueEvent2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueFieldOption.js
var require_issueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueFieldOptionConfiguration.js
var require_issueFieldOptionConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueFieldOptionConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueFieldOptionCreate.js
var require_issueFieldOptionCreate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueFieldOptionCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueFieldOptionScope.js
var require_issueFieldOptionScope2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueFieldOptionScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueFilterForBulkPropertyDelete.js
var require_issueFilterForBulkPropertyDelete2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueFilterForBulkPropertyDelete.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueFilterForBulkPropertySet.js
var require_issueFilterForBulkPropertySet2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueFilterForBulkPropertySet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueLink.js
var require_issueLink2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueLinkType.js
var require_issueLinkType2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueLinkTypes.js
var require_issueLinkTypes4 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueLinkTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueList.js
var require_issueList2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueMatches.js
var require_issueMatches2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueMatches.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueMatchesForJQL.js
var require_issueMatchesForJQL2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueMatchesForJQL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issuePickerSuggestions.js
var require_issuePickerSuggestions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issuePickerSuggestions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issuePickerSuggestionsIssueType.js
var require_issuePickerSuggestionsIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issuePickerSuggestionsIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issuesAndJQLQueries.js
var require_issuesAndJQLQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issuesAndJQLQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueSecurityLevelMember.js
var require_issueSecurityLevelMember2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueSecurityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueSecuritySchemeToProjectMapping.js
var require_issueSecuritySchemeToProjectMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueSecuritySchemeToProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issuesJqlMetaData.js
var require_issuesJqlMetaData2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issuesJqlMetaData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issuesMeta.js
var require_issuesMeta2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issuesMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issuesUpdate.js
var require_issuesUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issuesUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTransition.js
var require_issueTransition3 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeCreate.js
var require_issueTypeCreate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeDetails.js
var require_issueTypeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeIds.js
var require_issueTypeIds2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeIdsToRemove.js
var require_issueTypeIdsToRemove2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeIdsToRemove.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeInfo.js
var require_issueTypeInfo2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeIssueCreateMetadata.js
var require_issueTypeIssueCreateMetadata2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeIssueCreateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScheme.js
var require_issueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeSchemeDetails.js
var require_issueTypeSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeSchemeID.js
var require_issueTypeSchemeID2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeSchemeID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeSchemeMapping.js
var require_issueTypeSchemeMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeSchemeProjectAssociation.js
var require_issueTypeSchemeProjectAssociation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeSchemeProjects.js
var require_issueTypeSchemeProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeSchemeUpdateDetails.js
var require_issueTypeSchemeUpdateDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeSchemeUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenScheme.js
var require_issueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeDetails.js
var require_issueTypeScreenSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeId.js
var require_issueTypeScreenSchemeId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeItem.js
var require_issueTypeScreenSchemeItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeMapping.js
var require_issueTypeScreenSchemeMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeMappingDetails.js
var require_issueTypeScreenSchemeMappingDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeMappingDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeProjectAssociation.js
var require_issueTypeScreenSchemeProjectAssociation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemesProjects.js
var require_issueTypeScreenSchemesProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemesProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeScreenSchemeUpdateDetails.js
var require_issueTypeScreenSchemeUpdateDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeScreenSchemeUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypesWorkflowMapping.js
var require_issueTypesWorkflowMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypesWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeToContextMapping.js
var require_issueTypeToContextMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeToContextMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeUpdate.js
var require_issueTypeUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeWithStatus.js
var require_issueTypeWithStatus2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeWithStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueTypeWorkflowMapping.js
var require_issueTypeWorkflowMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueTypeWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueUpdateDetails.js
var require_issueUpdateDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/issueUpdateMetadata.js
var require_issueUpdateMetadata2 = __commonJS({
  "node_modules/jira.js/out/version3/models/issueUpdateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jexpIssues.js
var require_jexpIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jexpIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jexpJqlIssues.js
var require_jexpJqlIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jexpJqlIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionAnalysis.js
var require_jiraExpressionAnalysis2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionComplexity.js
var require_jiraExpressionComplexity2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionComplexity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionEvalContext.js
var require_jiraExpressionEvalContext2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionEvalContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionEvalRequest.js
var require_jiraExpressionEvalRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionEvalRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionEvaluationMetaData.js
var require_jiraExpressionEvaluationMetaData2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionEvaluationMetaData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionForAnalysis.js
var require_jiraExpressionForAnalysis2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionForAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionResult.js
var require_jiraExpressionResult2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionsAnalysis.js
var require_jiraExpressionsAnalysis2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionsAnalysis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionsComplexity.js
var require_jiraExpressionsComplexity2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionsComplexity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionsComplexityValue.js
var require_jiraExpressionsComplexityValue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionsComplexityValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraExpressionValidationError.js
var require_jiraExpressionValidationError2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraExpressionValidationError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jiraStatus.js
var require_jiraStatus2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jiraStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlFunctionPrecomputation.js
var require_jqlFunctionPrecomputation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlFunctionPrecomputation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlFunctionPrecomputationUpdate.js
var require_jqlFunctionPrecomputationUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlFunctionPrecomputationUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlFunctionPrecomputationUpdateRequest.js
var require_jqlFunctionPrecomputationUpdateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlFunctionPrecomputationUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jQLPersonalDataMigrationRequest.js
var require_jQLPersonalDataMigrationRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jQLPersonalDataMigrationRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueriesToParse.js
var require_jqlQueriesToParse2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueriesToParse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueriesToSanitize.js
var require_jqlQueriesToSanitize2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueriesToSanitize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQuery.js
var require_jqlQuery2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueryClause.js
var require_jqlQueryClause2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueryClause.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueryField.js
var require_jqlQueryField2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueryField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueryFieldEntityProperty.js
var require_jqlQueryFieldEntityProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueryFieldEntityProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueryOrderByClause.js
var require_jqlQueryOrderByClause2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueryOrderByClause.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueryOrderByClauseElement.js
var require_jqlQueryOrderByClauseElement2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueryOrderByClauseElement.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jqlQueryToSanitize.js
var require_jqlQueryToSanitize2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jqlQueryToSanitize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jQLQueryWithUnknownUsers.js
var require_jQLQueryWithUnknownUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jQLQueryWithUnknownUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jQLReferenceData.js
var require_jQLReferenceData2 = __commonJS({
  "node_modules/jira.js/out/version3/models/jQLReferenceData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/jsonType.js
var require_jsonType3 = __commonJS({
  "node_modules/jira.js/out/version3/models/jsonType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/license.js
var require_license2 = __commonJS({
  "node_modules/jira.js/out/version3/models/license.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/licensedApplication.js
var require_licensedApplication2 = __commonJS({
  "node_modules/jira.js/out/version3/models/licensedApplication.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/licenseMetric.js
var require_licenseMetric2 = __commonJS({
  "node_modules/jira.js/out/version3/models/licenseMetric.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/linkedIssue.js
var require_linkedIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/linkedIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/linkGroup.js
var require_linkGroup3 = __commonJS({
  "node_modules/jira.js/out/version3/models/linkGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/linkIssueRequestJson.js
var require_linkIssueRequestJson2 = __commonJS({
  "node_modules/jira.js/out/version3/models/linkIssueRequestJson.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/listWrapperCallbackApplicationRole.js
var require_listWrapperCallbackApplicationRole2 = __commonJS({
  "node_modules/jira.js/out/version3/models/listWrapperCallbackApplicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/listWrapperCallbackGroupName.js
var require_listWrapperCallbackGroupName2 = __commonJS({
  "node_modules/jira.js/out/version3/models/listWrapperCallbackGroupName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/locale.js
var require_locale2 = __commonJS({
  "node_modules/jira.js/out/version3/models/locale.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/mark.js
var require_mark = __commonJS({
  "node_modules/jira.js/out/version3/models/mark.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/moveField.js
var require_moveField2 = __commonJS({
  "node_modules/jira.js/out/version3/models/moveField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/multiIssueEntityProperties.js
var require_multiIssueEntityProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/models/multiIssueEntityProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/multipleCustomFieldValuesUpdate.js
var require_multipleCustomFieldValuesUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/multipleCustomFieldValuesUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/multipleCustomFieldValuesUpdateDetails.js
var require_multipleCustomFieldValuesUpdateDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/multipleCustomFieldValuesUpdateDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/nestedResponse.js
var require_nestedResponse2 = __commonJS({
  "node_modules/jira.js/out/version3/models/nestedResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/newUserDetails.js
var require_newUserDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/newUserDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notification.js
var require_notification2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationEvent.js
var require_notificationEvent2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationRecipients.js
var require_notificationRecipients2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationRecipients.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationRecipientsRestrictions.js
var require_notificationRecipientsRestrictions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationRecipientsRestrictions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationScheme.js
var require_notificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeAndProjectMapping.js
var require_notificationSchemeAndProjectMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeAndProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeAndProjectMappingPage.js
var require_notificationSchemeAndProjectMappingPage2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeAndProjectMappingPage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeEvent.js
var require_notificationSchemeEvent2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeEventDetails.js
var require_notificationSchemeEventDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeEventDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeEventTypeId.js
var require_notificationSchemeEventTypeId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeEventTypeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeId.js
var require_notificationSchemeId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/notificationSchemeNotificationDetails.js
var require_notificationSchemeNotificationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/notificationSchemeNotificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/oldToNewSecurityLevelMappings.js
var require_oldToNewSecurityLevelMappings2 = __commonJS({
  "node_modules/jira.js/out/version3/models/oldToNewSecurityLevelMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/operationMessage.js
var require_operationMessage2 = __commonJS({
  "node_modules/jira.js/out/version3/models/operationMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/operations.js
var require_operations4 = __commonJS({
  "node_modules/jira.js/out/version3/models/operations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/orderOfCustomFieldOptions.js
var require_orderOfCustomFieldOptions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/orderOfCustomFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/orderOfIssueTypes.js
var require_orderOfIssueTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/models/orderOfIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageBeanFieldConfigurationDetails.js
var require_pageBeanFieldConfigurationDetails = __commonJS({
  "node_modules/jira.js/out/version3/models/pageBeanFieldConfigurationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageChangelog.js
var require_pageChangelog2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageChangelog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageComment.js
var require_pageComment2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageComponentWithIssueCount.js
var require_pageComponentWithIssueCount2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageComponentWithIssueCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageContextForProjectAndIssueType.js
var require_pageContextForProjectAndIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageContextForProjectAndIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageContextualConfiguration.js
var require_pageContextualConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageContextualConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageCustomFieldContext.js
var require_pageCustomFieldContext2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageCustomFieldContextDefaultValue.js
var require_pageCustomFieldContextDefaultValue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageCustomFieldContextDefaultValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageCustomFieldContextOption.js
var require_pageCustomFieldContextOption2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageCustomFieldContextOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageCustomFieldContextProjectMapping.js
var require_pageCustomFieldContextProjectMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageCustomFieldContextProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageDashboard.js
var require_pageDashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pagedListUserDetailsApplicationUser.js
var require_pagedListUserDetailsApplicationUser2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pagedListUserDetailsApplicationUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageField.js
var require_pageField2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageFieldConfigurationIssueTypeItem.js
var require_pageFieldConfigurationIssueTypeItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageFieldConfigurationIssueTypeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageFieldConfigurationItem.js
var require_pageFieldConfigurationItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageFieldConfigurationItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageFieldConfigurationScheme.js
var require_pageFieldConfigurationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageFieldConfigurationSchemeProjects.js
var require_pageFieldConfigurationSchemeProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageFieldConfigurationSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageFilterDetails.js
var require_pageFilterDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageFilterDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageGroupDetails.js
var require_pageGroupDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageGroupDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueFieldOption.js
var require_pageIssueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueSecurityLevelMember.js
var require_pageIssueSecurityLevelMember2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueSecurityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueSecuritySchemeToProjectMapping.js
var require_pageIssueSecuritySchemeToProjectMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueSecuritySchemeToProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeScheme.js
var require_pageIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeSchemeMapping.js
var require_pageIssueTypeSchemeMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeSchemeProjects.js
var require_pageIssueTypeSchemeProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeSchemeProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeScreenScheme.js
var require_pageIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeScreenSchemeItem.js
var require_pageIssueTypeScreenSchemeItem2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeScreenSchemeItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeScreenSchemesProjects.js
var require_pageIssueTypeScreenSchemesProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeScreenSchemesProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageIssueTypeToContextMapping.js
var require_pageIssueTypeToContextMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageIssueTypeToContextMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageJqlFunctionPrecomputation.js
var require_pageJqlFunctionPrecomputation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageJqlFunctionPrecomputation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageNotificationScheme.js
var require_pageNotificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageOfChangelogs.js
var require_pageOfChangelogs2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageOfChangelogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageOfComments.js
var require_pageOfComments2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageOfComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageOfDashboards.js
var require_pageOfDashboards2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageOfDashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageOfStatuses.js
var require_pageOfStatuses2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageOfStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageOfWorklogs.js
var require_pageOfWorklogs2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageOfWorklogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pagePriority.js
var require_pagePriority2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pagePriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageProject.js
var require_pageProject2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageProjectDetails.js
var require_pageProjectDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageProjectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageResolution.js
var require_pageResolution2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageScreen.js
var require_pageScreen2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageScreenScheme.js
var require_pageScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageScreenWithTab.js
var require_pageScreenWithTab2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageScreenWithTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageSecurityLevel.js
var require_pageSecurityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageSecurityLevelMember.js
var require_pageSecurityLevelMember2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageSecurityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageSecuritySchemeWithProjects.js
var require_pageSecuritySchemeWithProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageSecuritySchemeWithProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageString.js
var require_pageString2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageUiModificationDetails.js
var require_pageUiModificationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageUiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageUser.js
var require_pageUser2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageUserDetails.js
var require_pageUserDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageUserDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageUserKey.js
var require_pageUserKey2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageUserKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageVersion.js
var require_pageVersion2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageWebhook.js
var require_pageWebhook2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageWebhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageWorkflow.js
var require_pageWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageWorkflowScheme.js
var require_pageWorkflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/pageWorkflowTransitionRules.js
var require_pageWorkflowTransitionRules2 = __commonJS({
  "node_modules/jira.js/out/version3/models/pageWorkflowTransitionRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/parsedJqlQueries.js
var require_parsedJqlQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/models/parsedJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/parsedJqlQuery.js
var require_parsedJqlQuery2 = __commonJS({
  "node_modules/jira.js/out/version3/models/parsedJqlQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionDetails.js
var require_permissionDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionGrant.js
var require_permissionGrant2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionGrant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionGrants.js
var require_permissionGrants2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionHolder.js
var require_permissionHolder2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionHolder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissions.js
var require_permissions4 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionScheme.js
var require_permissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionSchemes.js
var require_permissionSchemes4 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permissionsKeys.js
var require_permissionsKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permissionsKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/permittedProjects.js
var require_permittedProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/permittedProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/priority.js
var require_priority2 = __commonJS({
  "node_modules/jira.js/out/version3/models/priority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/priorityId.js
var require_priorityId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/priorityId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/project.js
var require_project3 = __commonJS({
  "node_modules/jira.js/out/version3/models/project.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectAvatars.js
var require_projectAvatars4 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectCategory.js
var require_projectCategory2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectComponent.js
var require_projectComponent2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectDetails.js
var require_projectDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectEmailAddress.js
var require_projectEmailAddress2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectEmailAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectFeature.js
var require_projectFeature2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectFeature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectFeatureToggleRequest.js
var require_projectFeatureToggleRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectFeatureToggleRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectId.js
var require_projectId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIdentifier.js
var require_projectIdentifier2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIdentifier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIdentifiers.js
var require_projectIdentifiers2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIdentifiers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIds.js
var require_projectIds2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectInsight.js
var require_projectInsight2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectInsight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueCreateMetadata.js
var require_projectIssueCreateMetadata2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueCreateMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueSecurityLevels.js
var require_projectIssueSecurityLevels2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueSecurityLevels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueTypeHierarchy.js
var require_projectIssueTypeHierarchy2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueTypeHierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueTypeMapping.js
var require_projectIssueTypeMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueTypeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueTypeMappings.js
var require_projectIssueTypeMappings2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueTypeMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueTypes.js
var require_projectIssueTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectIssueTypesHierarchyLevel.js
var require_projectIssueTypesHierarchyLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectIssueTypesHierarchyLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectLandingPageInfo.js
var require_projectLandingPageInfo2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectLandingPageInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectPermissions.js
var require_projectPermissions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectRole.js
var require_projectRole2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectRoleActorsUpdate.js
var require_projectRoleActorsUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectRoleActorsUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectRoleDetails.js
var require_projectRoleDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectRoleDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectRoleGroup.js
var require_projectRoleGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectRoleGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectRoleUser.js
var require_projectRoleUser2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectRoleUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectScope.js
var require_projectScope2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/projectType.js
var require_projectType2 = __commonJS({
  "node_modules/jira.js/out/version3/models/projectType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/propertyKey.js
var require_propertyKey2 = __commonJS({
  "node_modules/jira.js/out/version3/models/propertyKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/propertyKeys.js
var require_propertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/models/propertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/publishedWorkflowId.js
var require_publishedWorkflowId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/publishedWorkflowId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/registeredWebhook.js
var require_registeredWebhook2 = __commonJS({
  "node_modules/jira.js/out/version3/models/registeredWebhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/remoteIssueLink.js
var require_remoteIssueLink2 = __commonJS({
  "node_modules/jira.js/out/version3/models/remoteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/remoteIssueLinkIdentifies.js
var require_remoteIssueLinkIdentifies2 = __commonJS({
  "node_modules/jira.js/out/version3/models/remoteIssueLinkIdentifies.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/remoteIssueLinkRequest.js
var require_remoteIssueLinkRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/remoteIssueLinkRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/remoteObject.js
var require_remoteObject2 = __commonJS({
  "node_modules/jira.js/out/version3/models/remoteObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/removeOptionFromIssuesResult.js
var require_removeOptionFromIssuesResult = __commonJS({
  "node_modules/jira.js/out/version3/models/removeOptionFromIssuesResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/reorderIssuePriorities.js
var require_reorderIssuePriorities2 = __commonJS({
  "node_modules/jira.js/out/version3/models/reorderIssuePriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/reorderIssueResolutionsRequest.js
var require_reorderIssueResolutionsRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/reorderIssueResolutionsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/resolution.js
var require_resolution2 = __commonJS({
  "node_modules/jira.js/out/version3/models/resolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/resolutionId.js
var require_resolutionId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/resolutionId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/restrictedPermission.js
var require_restrictedPermission2 = __commonJS({
  "node_modules/jira.js/out/version3/models/restrictedPermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/richText.js
var require_richText2 = __commonJS({
  "node_modules/jira.js/out/version3/models/richText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/roleActor.js
var require_roleActor2 = __commonJS({
  "node_modules/jira.js/out/version3/models/roleActor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/ruleConfiguration.js
var require_ruleConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/ruleConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/sanitizedJqlQueries.js
var require_sanitizedJqlQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/models/sanitizedJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/sanitizedJqlQuery.js
var require_sanitizedJqlQuery2 = __commonJS({
  "node_modules/jira.js/out/version3/models/sanitizedJqlQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/scope.js
var require_scope3 = __commonJS({
  "node_modules/jira.js/out/version3/models/scope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screen.js
var require_screen2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenableField.js
var require_screenableField2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenableField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenableTab.js
var require_screenableTab2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenableTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenDetails.js
var require_screenDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenID.js
var require_screenID = __commonJS({
  "node_modules/jira.js/out/version3/models/screenID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenScheme.js
var require_screenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenSchemeDetails.js
var require_screenSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenSchemeId.js
var require_screenSchemeId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenSchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenTypes.js
var require_screenTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/screenWithTab.js
var require_screenWithTab2 = __commonJS({
  "node_modules/jira.js/out/version3/models/screenWithTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/searchAutoCompleteFilter.js
var require_searchAutoCompleteFilter = __commonJS({
  "node_modules/jira.js/out/version3/models/searchAutoCompleteFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/searchRequest.js
var require_searchRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/searchRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/searchResults.js
var require_searchResults3 = __commonJS({
  "node_modules/jira.js/out/version3/models/searchResults.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securityLevel.js
var require_securityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securityLevelMember.js
var require_securityLevelMember2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securityLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securityScheme.js
var require_securityScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securitySchemeId.js
var require_securitySchemeId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securitySchemeId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securitySchemeLevel.js
var require_securitySchemeLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securitySchemeLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securitySchemeLevelMember.js
var require_securitySchemeLevelMember2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securitySchemeLevelMember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securitySchemeMembersRequest.js
var require_securitySchemeMembersRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securitySchemeMembersRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securitySchemes.js
var require_securitySchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securitySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/securitySchemeWithProjects.js
var require_securitySchemeWithProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/models/securitySchemeWithProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/serverInformation.js
var require_serverInformation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/serverInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/setDefaultLevelsRequest.js
var require_setDefaultLevelsRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/setDefaultLevelsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/setDefaultPriorityRequest.js
var require_setDefaultPriorityRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/setDefaultPriorityRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/setDefaultResolutionRequest.js
var require_setDefaultResolutionRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/setDefaultResolutionRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/sharePermission.js
var require_sharePermission2 = __commonJS({
  "node_modules/jira.js/out/version3/models/sharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/sharePermissionInput.js
var require_sharePermissionInput2 = __commonJS({
  "node_modules/jira.js/out/version3/models/sharePermissionInput.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/simpleApplicationProperty.js
var require_simpleApplicationProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/models/simpleApplicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/simpleErrorCollection.js
var require_simpleErrorCollection = __commonJS({
  "node_modules/jira.js/out/version3/models/simpleErrorCollection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/simpleLink.js
var require_simpleLink2 = __commonJS({
  "node_modules/jira.js/out/version3/models/simpleLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/simpleListWrapperApplicationRole.js
var require_simpleListWrapperApplicationRole2 = __commonJS({
  "node_modules/jira.js/out/version3/models/simpleListWrapperApplicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/simpleListWrapperGroupName.js
var require_simpleListWrapperGroupName2 = __commonJS({
  "node_modules/jira.js/out/version3/models/simpleListWrapperGroupName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/status.js
var require_status5 = __commonJS({
  "node_modules/jira.js/out/version3/models/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusCategory.js
var require_statusCategory3 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusCreate.js
var require_statusCreate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusCreateRequest.js
var require_statusCreateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusCreateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusDetails.js
var require_statusDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusMapping.js
var require_statusMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusScope.js
var require_statusScope2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusUpdate.js
var require_statusUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/statusUpdateRequest.js
var require_statusUpdateRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/statusUpdateRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/suggestedIssue.js
var require_suggestedIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/models/suggestedIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/systemAvatars.js
var require_systemAvatars2 = __commonJS({
  "node_modules/jira.js/out/version3/models/systemAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/taskProgressObject.js
var require_taskProgressObject2 = __commonJS({
  "node_modules/jira.js/out/version3/models/taskProgressObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/taskProgressRemoveOptionFromIssuesResult.js
var require_taskProgressRemoveOptionFromIssuesResult = __commonJS({
  "node_modules/jira.js/out/version3/models/taskProgressRemoveOptionFromIssuesResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/timeTrackingConfiguration.js
var require_timeTrackingConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/timeTrackingConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/timeTrackingDetails.js
var require_timeTrackingDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/timeTrackingDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/timeTrackingProvider.js
var require_timeTrackingProvider2 = __commonJS({
  "node_modules/jira.js/out/version3/models/timeTrackingProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/transition.js
var require_transition2 = __commonJS({
  "node_modules/jira.js/out/version3/models/transition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/transitions.js
var require_transitions2 = __commonJS({
  "node_modules/jira.js/out/version3/models/transitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/uiModificationContextDetails.js
var require_uiModificationContextDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/uiModificationContextDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/uiModificationDetails.js
var require_uiModificationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/uiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/uiModificationIdentifiers.js
var require_uiModificationIdentifiers2 = __commonJS({
  "node_modules/jira.js/out/version3/models/uiModificationIdentifiers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/unrestrictedUserEmail.js
var require_unrestrictedUserEmail2 = __commonJS({
  "node_modules/jira.js/out/version3/models/unrestrictedUserEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateCustomFieldDetails.js
var require_updateCustomFieldDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateCustomFieldDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updatedProjectCategory.js
var require_updatedProjectCategory2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updatedProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateFieldConfigurationSchemeDetails.js
var require_updateFieldConfigurationSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateFieldConfigurationSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateIssueSecurityLevelDetails.js
var require_updateIssueSecurityLevelDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateIssueSecurityLevelDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateIssueSecuritySchemeRequest.js
var require_updateIssueSecuritySchemeRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateIssueSecuritySchemeRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateNotificationSchemeDetails.js
var require_updateNotificationSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateNotificationSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updatePriorityDetails.js
var require_updatePriorityDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updatePriorityDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateProjectDetails.js
var require_updateProjectDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateProjectDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateResolutionDetails.js
var require_updateResolutionDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateResolutionDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateScreenDetails.js
var require_updateScreenDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateScreenDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateScreenSchemeDetails.js
var require_updateScreenSchemeDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateScreenSchemeDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateScreenTypes.js
var require_updateScreenTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateScreenTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateUiModificationDetails.js
var require_updateUiModificationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateUiModificationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/updateUserToGroup.js
var require_updateUserToGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/models/updateUserToGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/user.js
var require_user3 = __commonJS({
  "node_modules/jira.js/out/version3/models/user.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/userAvatarUrls.js
var require_userAvatarUrls2 = __commonJS({
  "node_modules/jira.js/out/version3/models/userAvatarUrls.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/userDetails.js
var require_userDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/userDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/userKey.js
var require_userKey2 = __commonJS({
  "node_modules/jira.js/out/version3/models/userKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/userList.js
var require_userList2 = __commonJS({
  "node_modules/jira.js/out/version3/models/userList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/userMigration.js
var require_userMigration2 = __commonJS({
  "node_modules/jira.js/out/version3/models/userMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/userPickerUser.js
var require_userPickerUser2 = __commonJS({
  "node_modules/jira.js/out/version3/models/userPickerUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/version.js
var require_version3 = __commonJS({
  "node_modules/jira.js/out/version3/models/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/versionIssueCounts.js
var require_versionIssueCounts2 = __commonJS({
  "node_modules/jira.js/out/version3/models/versionIssueCounts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/versionIssuesStatus.js
var require_versionIssuesStatus2 = __commonJS({
  "node_modules/jira.js/out/version3/models/versionIssuesStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/versionMove.js
var require_versionMove2 = __commonJS({
  "node_modules/jira.js/out/version3/models/versionMove.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/versionUnresolvedIssuesCount.js
var require_versionUnresolvedIssuesCount2 = __commonJS({
  "node_modules/jira.js/out/version3/models/versionUnresolvedIssuesCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/versionUsageInCustomField.js
var require_versionUsageInCustomField2 = __commonJS({
  "node_modules/jira.js/out/version3/models/versionUsageInCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/visibility.js
var require_visibility2 = __commonJS({
  "node_modules/jira.js/out/version3/models/visibility.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/votes.js
var require_votes2 = __commonJS({
  "node_modules/jira.js/out/version3/models/votes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/watchers.js
var require_watchers2 = __commonJS({
  "node_modules/jira.js/out/version3/models/watchers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/webhook.js
var require_webhook2 = __commonJS({
  "node_modules/jira.js/out/version3/models/webhook.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/webhookDetails.js
var require_webhookDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/webhookDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/webhookRegistrationDetails.js
var require_webhookRegistrationDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/webhookRegistrationDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/webhooksExpirationDate.js
var require_webhooksExpirationDate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/webhooksExpirationDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflow.js
var require_workflow2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowCondition.js
var require_workflowCondition2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowId.js
var require_workflowId2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowOperations.js
var require_workflowOperations2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowOperations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowRules.js
var require_workflowRules2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowRulesSearch.js
var require_workflowRulesSearch2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowRulesSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowRulesSearchDetails.js
var require_workflowRulesSearchDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowRulesSearchDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowScheme.js
var require_workflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowSchemeAssociations.js
var require_workflowSchemeAssociations2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowSchemeAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowSchemeIdName.js
var require_workflowSchemeIdName2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowSchemeIdName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowSchemeProjectAssociation.js
var require_workflowSchemeProjectAssociation2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowSchemeProjectAssociation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowStatus.js
var require_workflowStatus2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowStatusProperties.js
var require_workflowStatusProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowStatusProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowsWithTransitionRulesDetails.js
var require_workflowsWithTransitionRulesDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowsWithTransitionRulesDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransition.js
var require_workflowTransition2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionProperty.js
var require_workflowTransitionProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionRule.js
var require_workflowTransitionRule2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionRules.js
var require_workflowTransitionRules4 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionRulesDetails.js
var require_workflowTransitionRulesDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionRulesDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionRulesUpdate.js
var require_workflowTransitionRulesUpdate2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionRulesUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionRulesUpdateErrorDetails.js
var require_workflowTransitionRulesUpdateErrorDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionRulesUpdateErrorDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/workflowTransitionRulesUpdateErrors.js
var require_workflowTransitionRulesUpdateErrors2 = __commonJS({
  "node_modules/jira.js/out/version3/models/workflowTransitionRulesUpdateErrors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/worklog.js
var require_worklog2 = __commonJS({
  "node_modules/jira.js/out/version3/models/worklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/worklogIdsRequest.js
var require_worklogIdsRequest2 = __commonJS({
  "node_modules/jira.js/out/version3/models/worklogIdsRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/models/index.js
var require_models3 = __commonJS({
  "node_modules/jira.js/out/version3/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_actorInput2(), exports2);
    tslib_1.__exportStar(require_actorsMap2(), exports2);
    tslib_1.__exportStar(require_addField2(), exports2);
    tslib_1.__exportStar(require_addGroup2(), exports2);
    tslib_1.__exportStar(require_addSecuritySchemeLevelsRequest2(), exports2);
    tslib_1.__exportStar(require_announcementBannerConfiguration2(), exports2);
    tslib_1.__exportStar(require_announcementBannerConfigurationUpdate2(), exports2);
    tslib_1.__exportStar(require_application2(), exports2);
    tslib_1.__exportStar(require_applicationProperty2(), exports2);
    tslib_1.__exportStar(require_applicationRole2(), exports2);
    tslib_1.__exportStar(require_archiveIssueAsyncRequest(), exports2);
    tslib_1.__exportStar(require_associatedItem2(), exports2);
    tslib_1.__exportStar(require_associateFieldConfigurationsWithIssueTypesRequest2(), exports2);
    tslib_1.__exportStar(require_attachment2(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveEntry2(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveImpl2(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveItemReadable2(), exports2);
    tslib_1.__exportStar(require_attachmentArchiveMetadataReadable2(), exports2);
    tslib_1.__exportStar(require_attachmentMetadata2(), exports2);
    tslib_1.__exportStar(require_attachmentSettings2(), exports2);
    tslib_1.__exportStar(require_auditRecord2(), exports2);
    tslib_1.__exportStar(require_auditRecords4(), exports2);
    tslib_1.__exportStar(require_autoCompleteSuggestion2(), exports2);
    tslib_1.__exportStar(require_autoCompleteSuggestions2(), exports2);
    tslib_1.__exportStar(require_availableDashboardGadget2(), exports2);
    tslib_1.__exportStar(require_availableDashboardGadgetsResponse2(), exports2);
    tslib_1.__exportStar(require_avatar2(), exports2);
    tslib_1.__exportStar(require_avatars4(), exports2);
    tslib_1.__exportStar(require_avatarUrls3(), exports2);
    tslib_1.__exportStar(require_avatarWithDetails2(), exports2);
    tslib_1.__exportStar(require_bulkChangeOwnerDetails2(), exports2);
    tslib_1.__exportStar(require_bulkCustomFieldOptionCreateRequest2(), exports2);
    tslib_1.__exportStar(require_bulkCustomFieldOptionUpdateRequest2(), exports2);
    tslib_1.__exportStar(require_bulkEditShareableEntity2(), exports2);
    tslib_1.__exportStar(require_bulkIssueIsWatching2(), exports2);
    tslib_1.__exportStar(require_bulkIssuePropertyUpdateRequest2(), exports2);
    tslib_1.__exportStar(require_bulkOperationErrorResult2(), exports2);
    tslib_1.__exportStar(require_bulkPermissionGrants2(), exports2);
    tslib_1.__exportStar(require_bulkPermissionsRequest2(), exports2);
    tslib_1.__exportStar(require_bulkProjectPermissionGrants2(), exports2);
    tslib_1.__exportStar(require_bulkProjectPermissions2(), exports2);
    tslib_1.__exportStar(require_changeDetails2(), exports2);
    tslib_1.__exportStar(require_changedValue2(), exports2);
    tslib_1.__exportStar(require_changedWorklog2(), exports2);
    tslib_1.__exportStar(require_changedWorklogs2(), exports2);
    tslib_1.__exportStar(require_changelog2(), exports2);
    tslib_1.__exportStar(require_columnItem2(), exports2);
    tslib_1.__exportStar(require_comment2(), exports2);
    tslib_1.__exportStar(require_componentIssuesCount2(), exports2);
    tslib_1.__exportStar(require_componentWithIssueCount2(), exports2);
    tslib_1.__exportStar(require_configuration2(), exports2);
    tslib_1.__exportStar(require_connectCustomFieldValue2(), exports2);
    tslib_1.__exportStar(require_connectCustomFieldValues2(), exports2);
    tslib_1.__exportStar(require_connectModule2(), exports2);
    tslib_1.__exportStar(require_connectModules2(), exports2);
    tslib_1.__exportStar(require_connectWorkflowTransitionRule2(), exports2);
    tslib_1.__exportStar(require_containerForProjectFeatures2(), exports2);
    tslib_1.__exportStar(require_containerForRegisteredWebhooks2(), exports2);
    tslib_1.__exportStar(require_containerForWebhookIDs2(), exports2);
    tslib_1.__exportStar(require_containerOfWorkflowSchemeAssociations2(), exports2);
    tslib_1.__exportStar(require_contextForProjectAndIssueType2(), exports2);
    tslib_1.__exportStar(require_contextualConfiguration2(), exports2);
    tslib_1.__exportStar(require_convertedJQLQueries2(), exports2);
    tslib_1.__exportStar(require_createCustomFieldContext3(), exports2);
    tslib_1.__exportStar(require_createdIssue2(), exports2);
    tslib_1.__exportStar(require_createdIssues2(), exports2);
    tslib_1.__exportStar(require_createIssueSecuritySchemeDetails2(), exports2);
    tslib_1.__exportStar(require_createNotificationSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_createPriorityDetails2(), exports2);
    tslib_1.__exportStar(require_createProjectDetails2(), exports2);
    tslib_1.__exportStar(require_createResolutionDetails2(), exports2);
    tslib_1.__exportStar(require_createUiModificationDetails2(), exports2);
    tslib_1.__exportStar(require_createUpdateRoleRequest2(), exports2);
    tslib_1.__exportStar(require_createWorkflowCondition2(), exports2);
    tslib_1.__exportStar(require_createWorkflowDetails2(), exports2);
    tslib_1.__exportStar(require_createWorkflowStatusDetails2(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionDetails2(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionRule2(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionRulesDetails2(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionScreenDetails2(), exports2);
    tslib_1.__exportStar(require_customContextVariable2(), exports2);
    tslib_1.__exportStar(require_customFieldConfigurations2(), exports2);
    tslib_1.__exportStar(require_customFieldContext2(), exports2);
    tslib_1.__exportStar(require_customFieldContextDefaultValue2(), exports2);
    tslib_1.__exportStar(require_customFieldContextDefaultValueUpdate2(), exports2);
    tslib_1.__exportStar(require_customFieldContextOption2(), exports2);
    tslib_1.__exportStar(require_customFieldContextProjectMapping2(), exports2);
    tslib_1.__exportStar(require_customFieldContextUpdateDetails2(), exports2);
    tslib_1.__exportStar(require_customFieldCreatedContextOptionsList2(), exports2);
    tslib_1.__exportStar(require_customFieldDefinitionJson2(), exports2);
    tslib_1.__exportStar(require_customFieldOption2(), exports2);
    tslib_1.__exportStar(require_customFieldOptionCreate2(), exports2);
    tslib_1.__exportStar(require_customFieldOptionUpdate2(), exports2);
    tslib_1.__exportStar(require_customFieldReplacement2(), exports2);
    tslib_1.__exportStar(require_customFieldUpdatedContextOptionsList2(), exports2);
    tslib_1.__exportStar(require_customFieldValueUpdate2(), exports2);
    tslib_1.__exportStar(require_customFieldValueUpdateRequest(), exports2);
    tslib_1.__exportStar(require_dashboard2(), exports2);
    tslib_1.__exportStar(require_dashboardDetails2(), exports2);
    tslib_1.__exportStar(require_dashboardGadget2(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetPosition2(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetResponse2(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetSettings2(), exports2);
    tslib_1.__exportStar(require_dashboardGadgetUpdateRequest2(), exports2);
    tslib_1.__exportStar(require_dashboardUser2(), exports2);
    tslib_1.__exportStar(require_dateRangeFilter2(), exports2);
    tslib_1.__exportStar(require_defaultLevelValue2(), exports2);
    tslib_1.__exportStar(require_defaultShareScope2(), exports2);
    tslib_1.__exportStar(require_defaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_deleteAndReplaceVersion2(), exports2);
    tslib_1.__exportStar(require_document(), exports2);
    tslib_1.__exportStar(require_entityProperty2(), exports2);
    tslib_1.__exportStar(require_entityPropertyDetails2(), exports2);
    tslib_1.__exportStar(require_error2(), exports2);
    tslib_1.__exportStar(require_errorCollection2(), exports2);
    tslib_1.__exportStar(require_errors3(), exports2);
    tslib_1.__exportStar(require_eventNotification2(), exports2);
    tslib_1.__exportStar(require_exportArchivedIssuesTaskProgress2(), exports2);
    tslib_1.__exportStar(require_failedWebhook2(), exports2);
    tslib_1.__exportStar(require_failedWebhooks2(), exports2);
    tslib_1.__exportStar(require_field2(), exports2);
    tslib_1.__exportStar(require_fieldConfiguration2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationDetails2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationIssueTypeItem2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationItem2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationItemsDetails2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationScheme2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationSchemeProjectAssociation2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationSchemeProjects2(), exports2);
    tslib_1.__exportStar(require_fieldConfigurationToIssueTypeMapping2(), exports2);
    tslib_1.__exportStar(require_fieldDetails2(), exports2);
    tslib_1.__exportStar(require_fieldLastUsed2(), exports2);
    tslib_1.__exportStar(require_fieldReferenceData2(), exports2);
    tslib_1.__exportStar(require_fields3(), exports2);
    tslib_1.__exportStar(require_filter2(), exports2);
    tslib_1.__exportStar(require_filterDetails2(), exports2);
    tslib_1.__exportStar(require_filterSubscription2(), exports2);
    tslib_1.__exportStar(require_filterSubscriptionsList2(), exports2);
    tslib_1.__exportStar(require_fixVersion3(), exports2);
    tslib_1.__exportStar(require_foundGroup2(), exports2);
    tslib_1.__exportStar(require_foundGroups2(), exports2);
    tslib_1.__exportStar(require_foundUsers2(), exports2);
    tslib_1.__exportStar(require_foundUsersAndGroups2(), exports2);
    tslib_1.__exportStar(require_functionReferenceData2(), exports2);
    tslib_1.__exportStar(require_globalScope2(), exports2);
    tslib_1.__exportStar(require_group3(), exports2);
    tslib_1.__exportStar(require_groupDetails2(), exports2);
    tslib_1.__exportStar(require_groupLabel2(), exports2);
    tslib_1.__exportStar(require_groupName2(), exports2);
    tslib_1.__exportStar(require_hierarchy2(), exports2);
    tslib_1.__exportStar(require_hierarchyLevel2(), exports2);
    tslib_1.__exportStar(require_historyMetadata2(), exports2);
    tslib_1.__exportStar(require_historyMetadataParticipant2(), exports2);
    tslib_1.__exportStar(require_icon2(), exports2);
    tslib_1.__exportStar(require_id2(), exports2);
    tslib_1.__exportStar(require_idOrKey2(), exports2);
    tslib_1.__exportStar(require_includedFields2(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    tslib_1.__exportStar(require_issue4(), exports2);
    tslib_1.__exportStar(require_issueArchivalSync2(), exports2);
    tslib_1.__exportStar(require_issueArchivalSyncRequest(), exports2);
    tslib_1.__exportStar(require_issueChangelogIds2(), exports2);
    tslib_1.__exportStar(require_issueCommentListRequest2(), exports2);
    tslib_1.__exportStar(require_issueCreateMetadata2(), exports2);
    tslib_1.__exportStar(require_issueEntityProperties2(), exports2);
    tslib_1.__exportStar(require_issueEntityPropertiesForMultiUpdate2(), exports2);
    tslib_1.__exportStar(require_issueEvent2(), exports2);
    tslib_1.__exportStar(require_issueFieldOption2(), exports2);
    tslib_1.__exportStar(require_issueFieldOptionConfiguration2(), exports2);
    tslib_1.__exportStar(require_issueFieldOptionCreate2(), exports2);
    tslib_1.__exportStar(require_issueFieldOptionScope2(), exports2);
    tslib_1.__exportStar(require_issueFilterForBulkPropertyDelete2(), exports2);
    tslib_1.__exportStar(require_issueFilterForBulkPropertySet2(), exports2);
    tslib_1.__exportStar(require_issueLink2(), exports2);
    tslib_1.__exportStar(require_issueLinkType2(), exports2);
    tslib_1.__exportStar(require_issueLinkTypes4(), exports2);
    tslib_1.__exportStar(require_issueList2(), exports2);
    tslib_1.__exportStar(require_issueMatches2(), exports2);
    tslib_1.__exportStar(require_issueMatchesForJQL2(), exports2);
    tslib_1.__exportStar(require_issuePickerSuggestions2(), exports2);
    tslib_1.__exportStar(require_issuePickerSuggestionsIssueType2(), exports2);
    tslib_1.__exportStar(require_issuesAndJQLQueries2(), exports2);
    tslib_1.__exportStar(require_issueSecurityLevelMember2(), exports2);
    tslib_1.__exportStar(require_issueSecuritySchemeToProjectMapping2(), exports2);
    tslib_1.__exportStar(require_issuesJqlMetaData2(), exports2);
    tslib_1.__exportStar(require_issuesMeta2(), exports2);
    tslib_1.__exportStar(require_issuesUpdate2(), exports2);
    tslib_1.__exportStar(require_issueTransition3(), exports2);
    tslib_1.__exportStar(require_issueTypeCreate2(), exports2);
    tslib_1.__exportStar(require_issueTypeDetails2(), exports2);
    tslib_1.__exportStar(require_issueTypeIds2(), exports2);
    tslib_1.__exportStar(require_issueTypeIdsToRemove2(), exports2);
    tslib_1.__exportStar(require_issueTypeInfo2(), exports2);
    tslib_1.__exportStar(require_issueTypeIssueCreateMetadata2(), exports2);
    tslib_1.__exportStar(require_issueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeID2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeMapping2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeProjectAssociation2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeProjects2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemeUpdateDetails2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeId2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeItem2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeMapping2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeMappingDetails2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeProjectAssociation2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemesProjects2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemeUpdateDetails2(), exports2);
    tslib_1.__exportStar(require_issueTypesWorkflowMapping2(), exports2);
    tslib_1.__exportStar(require_issueTypeToContextMapping2(), exports2);
    tslib_1.__exportStar(require_issueTypeUpdate2(), exports2);
    tslib_1.__exportStar(require_issueTypeWithStatus2(), exports2);
    tslib_1.__exportStar(require_issueTypeWorkflowMapping2(), exports2);
    tslib_1.__exportStar(require_issueUpdateDetails2(), exports2);
    tslib_1.__exportStar(require_issueUpdateMetadata2(), exports2);
    tslib_1.__exportStar(require_jexpIssues2(), exports2);
    tslib_1.__exportStar(require_jexpJqlIssues2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionAnalysis2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionComplexity2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionEvalContext2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionEvalRequest2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionEvaluationMetaData2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionForAnalysis2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionResult2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionsAnalysis2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionsComplexity2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionsComplexityValue2(), exports2);
    tslib_1.__exportStar(require_jiraExpressionValidationError2(), exports2);
    tslib_1.__exportStar(require_jiraStatus2(), exports2);
    tslib_1.__exportStar(require_jqlFunctionPrecomputation2(), exports2);
    tslib_1.__exportStar(require_jqlFunctionPrecomputationUpdate2(), exports2);
    tslib_1.__exportStar(require_jqlFunctionPrecomputationUpdateRequest2(), exports2);
    tslib_1.__exportStar(require_jQLPersonalDataMigrationRequest2(), exports2);
    tslib_1.__exportStar(require_jqlQueriesToParse2(), exports2);
    tslib_1.__exportStar(require_jqlQueriesToSanitize2(), exports2);
    tslib_1.__exportStar(require_jqlQuery2(), exports2);
    tslib_1.__exportStar(require_jqlQueryClause2(), exports2);
    tslib_1.__exportStar(require_jqlQueryField2(), exports2);
    tslib_1.__exportStar(require_jqlQueryFieldEntityProperty2(), exports2);
    tslib_1.__exportStar(require_jqlQueryOrderByClause2(), exports2);
    tslib_1.__exportStar(require_jqlQueryOrderByClauseElement2(), exports2);
    tslib_1.__exportStar(require_jqlQueryToSanitize2(), exports2);
    tslib_1.__exportStar(require_jQLQueryWithUnknownUsers2(), exports2);
    tslib_1.__exportStar(require_jQLReferenceData2(), exports2);
    tslib_1.__exportStar(require_jsonType3(), exports2);
    tslib_1.__exportStar(require_license2(), exports2);
    tslib_1.__exportStar(require_licensedApplication2(), exports2);
    tslib_1.__exportStar(require_licenseMetric2(), exports2);
    tslib_1.__exportStar(require_linkedIssue2(), exports2);
    tslib_1.__exportStar(require_linkGroup3(), exports2);
    tslib_1.__exportStar(require_linkIssueRequestJson2(), exports2);
    tslib_1.__exportStar(require_listWrapperCallbackApplicationRole2(), exports2);
    tslib_1.__exportStar(require_listWrapperCallbackGroupName2(), exports2);
    tslib_1.__exportStar(require_locale2(), exports2);
    tslib_1.__exportStar(require_mark(), exports2);
    tslib_1.__exportStar(require_moveField2(), exports2);
    tslib_1.__exportStar(require_multiIssueEntityProperties2(), exports2);
    tslib_1.__exportStar(require_multipleCustomFieldValuesUpdate2(), exports2);
    tslib_1.__exportStar(require_multipleCustomFieldValuesUpdateDetails2(), exports2);
    tslib_1.__exportStar(require_nestedResponse2(), exports2);
    tslib_1.__exportStar(require_newUserDetails2(), exports2);
    tslib_1.__exportStar(require_notification2(), exports2);
    tslib_1.__exportStar(require_notificationEvent2(), exports2);
    tslib_1.__exportStar(require_notificationRecipients2(), exports2);
    tslib_1.__exportStar(require_notificationRecipientsRestrictions2(), exports2);
    tslib_1.__exportStar(require_notificationScheme2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeAndProjectMapping2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeAndProjectMappingPage2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeEvent2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeEventDetails2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeEventTypeId2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeId2(), exports2);
    tslib_1.__exportStar(require_notificationSchemeNotificationDetails2(), exports2);
    tslib_1.__exportStar(require_oldToNewSecurityLevelMappings2(), exports2);
    tslib_1.__exportStar(require_operationMessage2(), exports2);
    tslib_1.__exportStar(require_operations4(), exports2);
    tslib_1.__exportStar(require_orderOfCustomFieldOptions2(), exports2);
    tslib_1.__exportStar(require_orderOfIssueTypes2(), exports2);
    tslib_1.__exportStar(require_pageBeanFieldConfigurationDetails(), exports2);
    tslib_1.__exportStar(require_pageChangelog2(), exports2);
    tslib_1.__exportStar(require_pageComment2(), exports2);
    tslib_1.__exportStar(require_pageComponentWithIssueCount2(), exports2);
    tslib_1.__exportStar(require_pageContextForProjectAndIssueType2(), exports2);
    tslib_1.__exportStar(require_pageContextualConfiguration2(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContext2(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContextDefaultValue2(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContextOption2(), exports2);
    tslib_1.__exportStar(require_pageCustomFieldContextProjectMapping2(), exports2);
    tslib_1.__exportStar(require_pageDashboard2(), exports2);
    tslib_1.__exportStar(require_pagedListUserDetailsApplicationUser2(), exports2);
    tslib_1.__exportStar(require_pageField2(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationIssueTypeItem2(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationItem2(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationScheme2(), exports2);
    tslib_1.__exportStar(require_pageFieldConfigurationSchemeProjects2(), exports2);
    tslib_1.__exportStar(require_pageFilterDetails2(), exports2);
    tslib_1.__exportStar(require_pageGroupDetails2(), exports2);
    tslib_1.__exportStar(require_pageIssueFieldOption2(), exports2);
    tslib_1.__exportStar(require_pageIssueSecurityLevelMember2(), exports2);
    tslib_1.__exportStar(require_pageIssueSecuritySchemeToProjectMapping2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeSchemeMapping2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeSchemeProjects2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScreenSchemeItem2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeScreenSchemesProjects2(), exports2);
    tslib_1.__exportStar(require_pageIssueTypeToContextMapping2(), exports2);
    tslib_1.__exportStar(require_pageJqlFunctionPrecomputation2(), exports2);
    tslib_1.__exportStar(require_pageNotificationScheme2(), exports2);
    tslib_1.__exportStar(require_pageOfChangelogs2(), exports2);
    tslib_1.__exportStar(require_pageOfComments2(), exports2);
    tslib_1.__exportStar(require_pageOfDashboards2(), exports2);
    tslib_1.__exportStar(require_pageOfStatuses2(), exports2);
    tslib_1.__exportStar(require_pageOfWorklogs2(), exports2);
    tslib_1.__exportStar(require_pagePriority2(), exports2);
    tslib_1.__exportStar(require_pageProject2(), exports2);
    tslib_1.__exportStar(require_pageProjectDetails2(), exports2);
    tslib_1.__exportStar(require_pageResolution2(), exports2);
    tslib_1.__exportStar(require_pageScreen2(), exports2);
    tslib_1.__exportStar(require_pageScreenScheme2(), exports2);
    tslib_1.__exportStar(require_pageScreenWithTab2(), exports2);
    tslib_1.__exportStar(require_pageSecurityLevel2(), exports2);
    tslib_1.__exportStar(require_pageSecurityLevelMember2(), exports2);
    tslib_1.__exportStar(require_pageSecuritySchemeWithProjects2(), exports2);
    tslib_1.__exportStar(require_pageString2(), exports2);
    tslib_1.__exportStar(require_pageUiModificationDetails2(), exports2);
    tslib_1.__exportStar(require_pageUser2(), exports2);
    tslib_1.__exportStar(require_pageUserDetails2(), exports2);
    tslib_1.__exportStar(require_pageUserKey2(), exports2);
    tslib_1.__exportStar(require_pageVersion2(), exports2);
    tslib_1.__exportStar(require_pageWebhook2(), exports2);
    tslib_1.__exportStar(require_pageWorkflow2(), exports2);
    tslib_1.__exportStar(require_pageWorkflowScheme2(), exports2);
    tslib_1.__exportStar(require_pageWorkflowTransitionRules2(), exports2);
    tslib_1.__exportStar(require_parsedJqlQueries2(), exports2);
    tslib_1.__exportStar(require_parsedJqlQuery2(), exports2);
    tslib_1.__exportStar(require_permissionDetails2(), exports2);
    tslib_1.__exportStar(require_permissionGrant2(), exports2);
    tslib_1.__exportStar(require_permissionGrants2(), exports2);
    tslib_1.__exportStar(require_permissionHolder2(), exports2);
    tslib_1.__exportStar(require_permissions4(), exports2);
    tslib_1.__exportStar(require_permissionScheme2(), exports2);
    tslib_1.__exportStar(require_permissionSchemes4(), exports2);
    tslib_1.__exportStar(require_permissionsKeys2(), exports2);
    tslib_1.__exportStar(require_permittedProjects2(), exports2);
    tslib_1.__exportStar(require_priority2(), exports2);
    tslib_1.__exportStar(require_priorityId2(), exports2);
    tslib_1.__exportStar(require_project3(), exports2);
    tslib_1.__exportStar(require_projectAvatars4(), exports2);
    tslib_1.__exportStar(require_projectCategory2(), exports2);
    tslib_1.__exportStar(require_projectComponent2(), exports2);
    tslib_1.__exportStar(require_projectDetails2(), exports2);
    tslib_1.__exportStar(require_projectEmailAddress2(), exports2);
    tslib_1.__exportStar(require_projectFeature2(), exports2);
    tslib_1.__exportStar(require_projectFeatureToggleRequest2(), exports2);
    tslib_1.__exportStar(require_projectId2(), exports2);
    tslib_1.__exportStar(require_projectIdentifier2(), exports2);
    tslib_1.__exportStar(require_projectIdentifiers2(), exports2);
    tslib_1.__exportStar(require_projectIds2(), exports2);
    tslib_1.__exportStar(require_projectInsight2(), exports2);
    tslib_1.__exportStar(require_projectIssueCreateMetadata2(), exports2);
    tslib_1.__exportStar(require_projectIssueSecurityLevels2(), exports2);
    tslib_1.__exportStar(require_projectIssueTypeHierarchy2(), exports2);
    tslib_1.__exportStar(require_projectIssueTypeMapping2(), exports2);
    tslib_1.__exportStar(require_projectIssueTypeMappings2(), exports2);
    tslib_1.__exportStar(require_projectIssueTypes2(), exports2);
    tslib_1.__exportStar(require_projectIssueTypesHierarchyLevel2(), exports2);
    tslib_1.__exportStar(require_projectLandingPageInfo2(), exports2);
    tslib_1.__exportStar(require_projectPermissions2(), exports2);
    tslib_1.__exportStar(require_projectRole2(), exports2);
    tslib_1.__exportStar(require_projectRoleActorsUpdate2(), exports2);
    tslib_1.__exportStar(require_projectRoleDetails2(), exports2);
    tslib_1.__exportStar(require_projectRoleGroup2(), exports2);
    tslib_1.__exportStar(require_projectRoleUser2(), exports2);
    tslib_1.__exportStar(require_projectScope2(), exports2);
    tslib_1.__exportStar(require_projectType2(), exports2);
    tslib_1.__exportStar(require_propertyKey2(), exports2);
    tslib_1.__exportStar(require_propertyKeys2(), exports2);
    tslib_1.__exportStar(require_publishedWorkflowId2(), exports2);
    tslib_1.__exportStar(require_registeredWebhook2(), exports2);
    tslib_1.__exportStar(require_remoteIssueLink2(), exports2);
    tslib_1.__exportStar(require_remoteIssueLinkIdentifies2(), exports2);
    tslib_1.__exportStar(require_remoteIssueLinkRequest2(), exports2);
    tslib_1.__exportStar(require_remoteObject2(), exports2);
    tslib_1.__exportStar(require_removeOptionFromIssuesResult(), exports2);
    tslib_1.__exportStar(require_reorderIssuePriorities2(), exports2);
    tslib_1.__exportStar(require_reorderIssueResolutionsRequest2(), exports2);
    tslib_1.__exportStar(require_resolution2(), exports2);
    tslib_1.__exportStar(require_resolutionId2(), exports2);
    tslib_1.__exportStar(require_restrictedPermission2(), exports2);
    tslib_1.__exportStar(require_richText2(), exports2);
    tslib_1.__exportStar(require_roleActor2(), exports2);
    tslib_1.__exportStar(require_ruleConfiguration2(), exports2);
    tslib_1.__exportStar(require_sanitizedJqlQueries2(), exports2);
    tslib_1.__exportStar(require_sanitizedJqlQuery2(), exports2);
    tslib_1.__exportStar(require_scope3(), exports2);
    tslib_1.__exportStar(require_screen2(), exports2);
    tslib_1.__exportStar(require_screenableField2(), exports2);
    tslib_1.__exportStar(require_screenableTab2(), exports2);
    tslib_1.__exportStar(require_screenDetails2(), exports2);
    tslib_1.__exportStar(require_screenID(), exports2);
    tslib_1.__exportStar(require_screenScheme2(), exports2);
    tslib_1.__exportStar(require_screenSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_screenSchemeId2(), exports2);
    tslib_1.__exportStar(require_screenTypes2(), exports2);
    tslib_1.__exportStar(require_screenWithTab2(), exports2);
    tslib_1.__exportStar(require_searchAutoCompleteFilter(), exports2);
    tslib_1.__exportStar(require_searchRequest2(), exports2);
    tslib_1.__exportStar(require_searchResults3(), exports2);
    tslib_1.__exportStar(require_securityLevel2(), exports2);
    tslib_1.__exportStar(require_securityLevelMember2(), exports2);
    tslib_1.__exportStar(require_securityScheme2(), exports2);
    tslib_1.__exportStar(require_securitySchemeId2(), exports2);
    tslib_1.__exportStar(require_securitySchemeLevel2(), exports2);
    tslib_1.__exportStar(require_securitySchemeLevelMember2(), exports2);
    tslib_1.__exportStar(require_securitySchemeMembersRequest2(), exports2);
    tslib_1.__exportStar(require_securitySchemes2(), exports2);
    tslib_1.__exportStar(require_securitySchemeWithProjects2(), exports2);
    tslib_1.__exportStar(require_serverInformation2(), exports2);
    tslib_1.__exportStar(require_setDefaultLevelsRequest2(), exports2);
    tslib_1.__exportStar(require_setDefaultPriorityRequest2(), exports2);
    tslib_1.__exportStar(require_setDefaultResolutionRequest2(), exports2);
    tslib_1.__exportStar(require_sharePermission2(), exports2);
    tslib_1.__exportStar(require_sharePermissionInput2(), exports2);
    tslib_1.__exportStar(require_simpleApplicationProperty2(), exports2);
    tslib_1.__exportStar(require_simpleErrorCollection(), exports2);
    tslib_1.__exportStar(require_simpleLink2(), exports2);
    tslib_1.__exportStar(require_simpleListWrapperApplicationRole2(), exports2);
    tslib_1.__exportStar(require_simpleListWrapperGroupName2(), exports2);
    tslib_1.__exportStar(require_status5(), exports2);
    tslib_1.__exportStar(require_statusCategory3(), exports2);
    tslib_1.__exportStar(require_statusCreate2(), exports2);
    tslib_1.__exportStar(require_statusCreateRequest2(), exports2);
    tslib_1.__exportStar(require_statusDetails2(), exports2);
    tslib_1.__exportStar(require_statusMapping2(), exports2);
    tslib_1.__exportStar(require_statusScope2(), exports2);
    tslib_1.__exportStar(require_statusUpdate2(), exports2);
    tslib_1.__exportStar(require_statusUpdateRequest2(), exports2);
    tslib_1.__exportStar(require_suggestedIssue2(), exports2);
    tslib_1.__exportStar(require_systemAvatars2(), exports2);
    tslib_1.__exportStar(require_taskProgressObject2(), exports2);
    tslib_1.__exportStar(require_taskProgressRemoveOptionFromIssuesResult(), exports2);
    tslib_1.__exportStar(require_timeTrackingConfiguration2(), exports2);
    tslib_1.__exportStar(require_timeTrackingDetails2(), exports2);
    tslib_1.__exportStar(require_timeTrackingProvider2(), exports2);
    tslib_1.__exportStar(require_transition2(), exports2);
    tslib_1.__exportStar(require_transitions2(), exports2);
    tslib_1.__exportStar(require_uiModificationContextDetails2(), exports2);
    tslib_1.__exportStar(require_uiModificationDetails2(), exports2);
    tslib_1.__exportStar(require_uiModificationIdentifiers2(), exports2);
    tslib_1.__exportStar(require_unrestrictedUserEmail2(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldDetails2(), exports2);
    tslib_1.__exportStar(require_updatedProjectCategory2(), exports2);
    tslib_1.__exportStar(require_updateFieldConfigurationSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_updateIssueSecurityLevelDetails2(), exports2);
    tslib_1.__exportStar(require_updateIssueSecuritySchemeRequest2(), exports2);
    tslib_1.__exportStar(require_updateNotificationSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_updatePriorityDetails2(), exports2);
    tslib_1.__exportStar(require_updateProjectDetails2(), exports2);
    tslib_1.__exportStar(require_updateResolutionDetails2(), exports2);
    tslib_1.__exportStar(require_updateScreenDetails2(), exports2);
    tslib_1.__exportStar(require_updateScreenSchemeDetails2(), exports2);
    tslib_1.__exportStar(require_updateScreenTypes2(), exports2);
    tslib_1.__exportStar(require_updateUiModificationDetails2(), exports2);
    tslib_1.__exportStar(require_updateUserToGroup2(), exports2);
    tslib_1.__exportStar(require_user3(), exports2);
    tslib_1.__exportStar(require_userAvatarUrls2(), exports2);
    tslib_1.__exportStar(require_userDetails2(), exports2);
    tslib_1.__exportStar(require_userKey2(), exports2);
    tslib_1.__exportStar(require_userList2(), exports2);
    tslib_1.__exportStar(require_userMigration2(), exports2);
    tslib_1.__exportStar(require_userPickerUser2(), exports2);
    tslib_1.__exportStar(require_version3(), exports2);
    tslib_1.__exportStar(require_versionIssueCounts2(), exports2);
    tslib_1.__exportStar(require_versionIssuesStatus2(), exports2);
    tslib_1.__exportStar(require_versionMove2(), exports2);
    tslib_1.__exportStar(require_versionUnresolvedIssuesCount2(), exports2);
    tslib_1.__exportStar(require_versionUsageInCustomField2(), exports2);
    tslib_1.__exportStar(require_visibility2(), exports2);
    tslib_1.__exportStar(require_votes2(), exports2);
    tslib_1.__exportStar(require_watchers2(), exports2);
    tslib_1.__exportStar(require_webhook2(), exports2);
    tslib_1.__exportStar(require_webhookDetails2(), exports2);
    tslib_1.__exportStar(require_webhookRegistrationDetails2(), exports2);
    tslib_1.__exportStar(require_webhooksExpirationDate2(), exports2);
    tslib_1.__exportStar(require_workflow2(), exports2);
    tslib_1.__exportStar(require_workflowCondition2(), exports2);
    tslib_1.__exportStar(require_workflowId2(), exports2);
    tslib_1.__exportStar(require_workflowOperations2(), exports2);
    tslib_1.__exportStar(require_workflowRules2(), exports2);
    tslib_1.__exportStar(require_workflowRulesSearch2(), exports2);
    tslib_1.__exportStar(require_workflowRulesSearchDetails2(), exports2);
    tslib_1.__exportStar(require_workflowScheme2(), exports2);
    tslib_1.__exportStar(require_workflowSchemeAssociations2(), exports2);
    tslib_1.__exportStar(require_workflowSchemeIdName2(), exports2);
    tslib_1.__exportStar(require_workflowSchemeProjectAssociation2(), exports2);
    tslib_1.__exportStar(require_workflowStatus2(), exports2);
    tslib_1.__exportStar(require_workflowStatusProperties2(), exports2);
    tslib_1.__exportStar(require_workflowsWithTransitionRulesDetails2(), exports2);
    tslib_1.__exportStar(require_workflowTransition2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionProperty2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRule2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRules4(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesDetails2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesUpdate2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesUpdateErrorDetails2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRulesUpdateErrors2(), exports2);
    tslib_1.__exportStar(require_worklog2(), exports2);
    tslib_1.__exportStar(require_worklogIdsRequest2(), exports2);
  }
});

// node_modules/jira.js/out/version3/parameters/addActorUsers.js
var require_addActorUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addActorUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addAttachment.js
var require_addAttachment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addComment.js
var require_addComment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addFieldToDefaultScreen.js
var require_addFieldToDefaultScreen2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addFieldToDefaultScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addGadget.js
var require_addGadget2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addIssueTypesToContext.js
var require_addIssueTypesToContext2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addIssueTypesToContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addIssueTypesToIssueTypeScheme.js
var require_addIssueTypesToIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addIssueTypesToIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addProjectRoleActorsToRole.js
var require_addProjectRoleActorsToRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addProjectRoleActorsToRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addScreenTab.js
var require_addScreenTab2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addScreenTabField.js
var require_addScreenTabField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addScreenTabField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addSecurityLevel.js
var require_addSecurityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addSecurityLevelMembers.js
var require_addSecurityLevelMembers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addSecurityLevelMembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addSharePermission.js
var require_addSharePermission2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addSharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addUserToGroup.js
var require_addUserToGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addUserToGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addVote.js
var require_addVote2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addVote.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addWatcher.js
var require_addWatcher2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addWatcher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/addWorklog.js
var require_addWorklog2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/addWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/analyseExpression.js
var require_analyseExpression2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/analyseExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/appendMappingsForIssueTypeScreenScheme.js
var require_appendMappingsForIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/appendMappingsForIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/archiveIssues.js
var require_archiveIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/archiveIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/archiveIssuesAsync.js
var require_archiveIssuesAsync2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/archiveIssuesAsync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/archiveProject.js
var require_archiveProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/archiveProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignFieldConfigurationSchemeToProject.js
var require_assignFieldConfigurationSchemeToProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignFieldConfigurationSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignIssue.js
var require_assignIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignIssueTypeSchemeToProject.js
var require_assignIssueTypeSchemeToProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignIssueTypeSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignIssueTypeScreenSchemeToProject.js
var require_assignIssueTypeScreenSchemeToProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignIssueTypeScreenSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignPermissionScheme.js
var require_assignPermissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignProjectsToCustomFieldContext.js
var require_assignProjectsToCustomFieldContext2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignProjectsToCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/assignSchemeToProject.js
var require_assignSchemeToProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/assignSchemeToProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/associateSchemesToProjects.js
var require_associateSchemesToProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/associateSchemesToProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkDeleteIssueProperty.js
var require_bulkDeleteIssueProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkDeleteIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkEditDashboards.js
var require_bulkEditDashboards2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkEditDashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkGetGroups.js
var require_bulkGetGroups2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkGetGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkGetUsers.js
var require_bulkGetUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkGetUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkGetUsersMigration.js
var require_bulkGetUsersMigration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkGetUsersMigration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkSetIssuePropertiesByIssue.js
var require_bulkSetIssuePropertiesByIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkSetIssuePropertiesByIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkSetIssueProperty.js
var require_bulkSetIssueProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkSetIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/bulkSetIssuesProperties.js
var require_bulkSetIssuesProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/bulkSetIssuesProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/cancelTask.js
var require_cancelTask2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/cancelTask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/changeFilterOwner.js
var require_changeFilterOwner2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/changeFilterOwner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/copyDashboard.js
var require_copyDashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/copyDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createComponent.js
var require_createComponent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createCustomField.js
var require_createCustomField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createCustomFieldContext.js
var require_createCustomFieldContext4 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createCustomFieldOption.js
var require_createCustomFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createDashboard.js
var require_createDashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createFieldConfiguration.js
var require_createFieldConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createFieldConfigurationScheme.js
var require_createFieldConfigurationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createFilter.js
var require_createFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createGroup.js
var require_createGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssue.js
var require_createIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueFieldOption.js
var require_createIssueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueLinkType.js
var require_createIssueLinkType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssues.js
var require_createIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueSecurityScheme.js
var require_createIssueSecurityScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueType.js
var require_createIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueTypeAvatar.js
var require_createIssueTypeAvatar2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueTypeAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueTypeScheme.js
var require_createIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createIssueTypeScreenScheme.js
var require_createIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createNotificationScheme.js
var require_createNotificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createOrUpdateRemoteIssueLink.js
var require_createOrUpdateRemoteIssueLink2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createOrUpdateRemoteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createPermissionGrant.js
var require_createPermissionGrant2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createPermissionGrant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createPermissionScheme.js
var require_createPermissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createPriority.js
var require_createPriority2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createProject.js
var require_createProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createProjectAvatar.js
var require_createProjectAvatar2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createProjectAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createProjectCategory.js
var require_createProjectCategory2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createProjectRole.js
var require_createProjectRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createResolution.js
var require_createResolution2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createScreen.js
var require_createScreen2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createScreenScheme.js
var require_createScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createStatuses.js
var require_createStatuses2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createUiModification.js
var require_createUiModification2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createUiModification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createUser.js
var require_createUser2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createVersion.js
var require_createVersion2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createWorkflow.js
var require_createWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createWorkflowScheme.js
var require_createWorkflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createWorkflowSchemeDraftFromParent.js
var require_createWorkflowSchemeDraftFromParent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createWorkflowSchemeDraftFromParent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/createWorkflowTransitionProperty.js
var require_createWorkflowTransitionProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/createWorkflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteActor.js
var require_deleteActor2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteActor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteAddonProperty.js
var require_deleteAddonProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteAddonProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteAndReplaceVersion.js
var require_deleteAndReplaceVersion3 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteAndReplaceVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteAppProperty.js
var require_deleteAppProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteAppProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteAvatar.js
var require_deleteAvatar2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteComment.js
var require_deleteComment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteCommentProperty.js
var require_deleteCommentProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteCommentProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteComponent.js
var require_deleteComponent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteCustomField.js
var require_deleteCustomField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteCustomFieldContext.js
var require_deleteCustomFieldContext2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteCustomFieldOption.js
var require_deleteCustomFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteDashboard.js
var require_deleteDashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteDashboardItemProperty.js
var require_deleteDashboardItemProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteDashboardItemProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteDefaultWorkflow.js
var require_deleteDefaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteDraftDefaultWorkflow.js
var require_deleteDraftDefaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteDraftDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteDraftWorkflowMapping.js
var require_deleteDraftWorkflowMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteDraftWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteFavouriteForFilter.js
var require_deleteFavouriteForFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteFavouriteForFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteFieldConfiguration.js
var require_deleteFieldConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteFieldConfigurationScheme.js
var require_deleteFieldConfigurationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteFilter.js
var require_deleteFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteInactiveWorkflow.js
var require_deleteInactiveWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteInactiveWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssue.js
var require_deleteIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueFieldOption.js
var require_deleteIssueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueLink.js
var require_deleteIssueLink2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueLinkType.js
var require_deleteIssueLinkType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueProperty.js
var require_deleteIssueProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueType.js
var require_deleteIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueTypeProperty.js
var require_deleteIssueTypeProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueTypeProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueTypeScheme.js
var require_deleteIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteIssueTypeScreenScheme.js
var require_deleteIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteNotificationScheme.js
var require_deleteNotificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deletePermissionScheme.js
var require_deletePermissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deletePermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deletePermissionSchemeEntity.js
var require_deletePermissionSchemeEntity2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deletePermissionSchemeEntity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteProject.js
var require_deleteProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteProjectAsynchronously.js
var require_deleteProjectAsynchronously2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteProjectAsynchronously.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteProjectAvatar.js
var require_deleteProjectAvatar2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteProjectAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteProjectProperty.js
var require_deleteProjectProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteProjectProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteProjectRole.js
var require_deleteProjectRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteProjectRoleActorsFromRole.js
var require_deleteProjectRoleActorsFromRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteProjectRoleActorsFromRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteRemoteIssueLinkByGlobalId.js
var require_deleteRemoteIssueLinkByGlobalId2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteRemoteIssueLinkByGlobalId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteRemoteIssueLinkById.js
var require_deleteRemoteIssueLinkById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteRemoteIssueLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteResolution.js
var require_deleteResolution2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteScreen.js
var require_deleteScreen2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteScreenScheme.js
var require_deleteScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteScreenTab.js
var require_deleteScreenTab2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteSecurityScheme.js
var require_deleteSecurityScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteSharePermission.js
var require_deleteSharePermission2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteSharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteStatusesById.js
var require_deleteStatusesById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteStatusesById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteUiModification.js
var require_deleteUiModification2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteUiModification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteUserProperty.js
var require_deleteUserProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteUserProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWebhookById.js
var require_deleteWebhookById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWebhookById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowMapping.js
var require_deleteWorkflowMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowScheme.js
var require_deleteWorkflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowSchemeDraft.js
var require_deleteWorkflowSchemeDraft2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowSchemeDraft.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowSchemeDraftIssueType.js
var require_deleteWorkflowSchemeDraftIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowSchemeDraftIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowSchemeIssueType.js
var require_deleteWorkflowSchemeIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowSchemeIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowTransitionProperty.js
var require_deleteWorkflowTransitionProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorkflowTransitionRuleConfigurations.js
var require_deleteWorkflowTransitionRuleConfigurations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorkflowTransitionRuleConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorklog.js
var require_deleteWorklog2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/deleteWorklogProperty.js
var require_deleteWorklogProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/deleteWorklogProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/doTransition.js
var require_doTransition2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/doTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/editIssue.js
var require_editIssue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/editIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/evaluateJiraExpression.js
var require_evaluateJiraExpression2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/evaluateJiraExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/expandAttachmentForHumans.js
var require_expandAttachmentForHumans2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/expandAttachmentForHumans.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/expandAttachmentForMachines.js
var require_expandAttachmentForMachines2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/expandAttachmentForMachines.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/exportArchivedIssues.js
var require_exportArchivedIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/exportArchivedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findAssignableUsers.js
var require_findAssignableUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findAssignableUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findBulkAssignableUsers.js
var require_findBulkAssignableUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findBulkAssignableUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findGroups.js
var require_findGroups2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUserKeysByQuery.js
var require_findUserKeysByQuery2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUserKeysByQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUsers.js
var require_findUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUsersAndGroups.js
var require_findUsersAndGroups2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUsersAndGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUsersByQuery.js
var require_findUsersByQuery2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUsersByQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUsersForPicker.js
var require_findUsersForPicker2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUsersForPicker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUsersWithAllPermissions.js
var require_findUsersWithAllPermissions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUsersWithAllPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/findUsersWithBrowsePermission.js
var require_findUsersWithBrowsePermission2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/findUsersWithBrowsePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/fullyUpdateProjectRole.js
var require_fullyUpdateProjectRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/fullyUpdateProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAccessibleProjectTypeByKey.js
var require_getAccessibleProjectTypeByKey2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAccessibleProjectTypeByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAddonProperties.js
var require_getAddonProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAddonProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAddonProperty.js
var require_getAddonProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAddonProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllDashboards.js
var require_getAllDashboards2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllDashboards.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllFieldConfigurations.js
var require_getAllFieldConfigurations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllFieldConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllFieldConfigurationSchemes.js
var require_getAllFieldConfigurationSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllFieldConfigurationSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllGadgets.js
var require_getAllGadgets2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllGadgets.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllIssueFieldOptions.js
var require_getAllIssueFieldOptions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllIssueFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllIssueTypeSchemes.js
var require_getAllIssueTypeSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllIssueTypeSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllLabels.js
var require_getAllLabels2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllLabels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllPermissionSchemes.js
var require_getAllPermissionSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllPermissionSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllProjectAvatars.js
var require_getAllProjectAvatars2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllProjectAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllScreenTabFields.js
var require_getAllScreenTabFields2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllScreenTabFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllScreenTabs.js
var require_getAllScreenTabs2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllScreenTabs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllStatuses.js
var require_getAllStatuses2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllSystemAvatars.js
var require_getAllSystemAvatars2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllSystemAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllUsers.js
var require_getAllUsers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllUsers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllUsersDefault.js
var require_getAllUsersDefault2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllUsersDefault.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAllWorkflowSchemes.js
var require_getAllWorkflowSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAllWorkflowSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAlternativeIssueTypes.js
var require_getAlternativeIssueTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAlternativeIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getApplicationProperty.js
var require_getApplicationProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getApplicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getApplicationRole.js
var require_getApplicationRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getApplicationRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAssignedPermissionScheme.js
var require_getAssignedPermissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAssignedPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAttachment.js
var require_getAttachment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAttachmentContent.js
var require_getAttachmentContent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAttachmentContent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAttachmentThumbnail.js
var require_getAttachmentThumbnail2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAttachmentThumbnail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAuditRecords.js
var require_getAuditRecords2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAuditRecords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAutoCompletePost.js
var require_getAutoCompletePost2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAutoCompletePost.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAvailableScreenFields.js
var require_getAvailableScreenFields2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAvailableScreenFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAvatarImageByID.js
var require_getAvatarImageByID2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAvatarImageByID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAvatarImageByOwner.js
var require_getAvatarImageByOwner2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAvatarImageByOwner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAvatarImageByType.js
var require_getAvatarImageByType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAvatarImageByType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getAvatars.js
var require_getAvatars2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getAvatars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getBulkPermissions.js
var require_getBulkPermissions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getBulkPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getChangeLogs.js
var require_getChangeLogs2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getChangeLogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getChangeLogsByIds.js
var require_getChangeLogsByIds2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getChangeLogsByIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getColumns.js
var require_getColumns2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getComment.js
var require_getComment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCommentProperty.js
var require_getCommentProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCommentProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCommentPropertyKeys.js
var require_getCommentPropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCommentPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getComments.js
var require_getComments2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCommentsByIds.js
var require_getCommentsByIds2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCommentsByIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getComponent.js
var require_getComponent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getComponentRelatedIssues.js
var require_getComponentRelatedIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getComponentRelatedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getContextsForField.js
var require_getContextsForField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getContextsForField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCreateIssueMeta.js
var require_getCreateIssueMeta2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCreateIssueMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCurrentUser.js
var require_getCurrentUser2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCurrentUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCustomFieldConfiguration.js
var require_getCustomFieldConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCustomFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCustomFieldContextsForProjectsAndIssueTypes.js
var require_getCustomFieldContextsForProjectsAndIssueTypes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCustomFieldContextsForProjectsAndIssueTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getCustomFieldOption.js
var require_getCustomFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDashboard.js
var require_getDashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDashboardItemProperty.js
var require_getDashboardItemProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDashboardItemProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDashboardItemPropertyKeys.js
var require_getDashboardItemPropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDashboardItemPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDashboardsPaginated.js
var require_getDashboardsPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDashboardsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDefaultValues.js
var require_getDefaultValues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDefaultValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDefaultWorkflow.js
var require_getDefaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDraftDefaultWorkflow.js
var require_getDraftDefaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDraftDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDraftWorkflow.js
var require_getDraftWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDraftWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getDynamicWebhooksForApp.js
var require_getDynamicWebhooksForApp2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getDynamicWebhooksForApp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getEditIssueMeta.js
var require_getEditIssueMeta2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getEditIssueMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFailedWebhooks.js
var require_getFailedWebhooks2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFailedWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFavouriteFilters.js
var require_getFavouriteFilters2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFavouriteFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFeaturesForProject.js
var require_getFeaturesForProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFeaturesForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFieldAutoCompleteForQueryString.js
var require_getFieldAutoCompleteForQueryString2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFieldAutoCompleteForQueryString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFieldConfigurationItems.js
var require_getFieldConfigurationItems2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFieldConfigurationItems.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFieldConfigurationSchemeMappings.js
var require_getFieldConfigurationSchemeMappings2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFieldConfigurationSchemeMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFieldConfigurationSchemeProjectMapping.js
var require_getFieldConfigurationSchemeProjectMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFieldConfigurationSchemeProjectMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFieldsPaginated.js
var require_getFieldsPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFieldsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFilter.js
var require_getFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getFiltersPaginated.js
var require_getFiltersPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getFiltersPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getHierarchy.js
var require_getHierarchy2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getHierarchy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIdsOfWorklogsDeletedSince.js
var require_getIdsOfWorklogsDeletedSince2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIdsOfWorklogsDeletedSince.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIdsOfWorklogsModifiedSince.js
var require_getIdsOfWorklogsModifiedSince2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIdsOfWorklogsModifiedSince.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssue.js
var require_getIssue3 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueFieldOption.js
var require_getIssueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueLink.js
var require_getIssueLink2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueLinkType.js
var require_getIssueLinkType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssuePickerResource.js
var require_getIssuePickerResource2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssuePickerResource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueProperty.js
var require_getIssueProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssuePropertyKeys.js
var require_getIssuePropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssuePropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueSecurityLevel.js
var require_getIssueSecurityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueSecurityLevelMembers.js
var require_getIssueSecurityLevelMembers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueSecurityLevelMembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueSecurityScheme.js
var require_getIssueSecurityScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueType.js
var require_getIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeMappingsForContexts.js
var require_getIssueTypeMappingsForContexts2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeMappingsForContexts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeProperty.js
var require_getIssueTypeProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypePropertyKeys.js
var require_getIssueTypePropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypePropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeSchemeForProjects.js
var require_getIssueTypeSchemeForProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeSchemeForProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeSchemesMapping.js
var require_getIssueTypeSchemesMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeSchemesMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeScreenSchemeMappings.js
var require_getIssueTypeScreenSchemeMappings2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeScreenSchemeMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeScreenSchemeProjectAssociations.js
var require_getIssueTypeScreenSchemeProjectAssociations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeScreenSchemeProjectAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypeScreenSchemes.js
var require_getIssueTypeScreenSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypeScreenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueTypesForProject.js
var require_getIssueTypesForProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueTypesForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueWatchers.js
var require_getIssueWatchers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueWatchers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIssueWorklog.js
var require_getIssueWorklog2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIssueWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getIsWatchingIssueBulk.js
var require_getIsWatchingIssueBulk2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getIsWatchingIssueBulk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getMyFilters.js
var require_getMyFilters2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getMyFilters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getMyPermissions.js
var require_getMyPermissions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getMyPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getNotificationScheme.js
var require_getNotificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getNotificationSchemes.js
var require_getNotificationSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getNotificationSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getNotificationSchemeToProjectMappings.js
var require_getNotificationSchemeToProjectMappings2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getNotificationSchemeToProjectMappings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getOptionsForContext.js
var require_getOptionsForContext2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getOptionsForContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPermissionScheme.js
var require_getPermissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPermissionSchemeGrant.js
var require_getPermissionSchemeGrant2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPermissionSchemeGrant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPermissionSchemeGrants.js
var require_getPermissionSchemeGrants2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPermissionSchemeGrants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPermittedProjects.js
var require_getPermittedProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPermittedProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPrecomputations.js
var require_getPrecomputations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPrecomputations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPreference.js
var require_getPreference2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPreference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getPriority.js
var require_getPriority2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProject.js
var require_getProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectCategoryById.js
var require_getProjectCategoryById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectCategoryById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectComponents.js
var require_getProjectComponents2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectComponents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectComponentsPaginated.js
var require_getProjectComponentsPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectComponentsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectContextMapping.js
var require_getProjectContextMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectContextMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectEmail.js
var require_getProjectEmail2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectIssueSecurityScheme.js
var require_getProjectIssueSecurityScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectProperty.js
var require_getProjectProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectPropertyKeys.js
var require_getProjectPropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectRole.js
var require_getProjectRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectRoleActorsForRole.js
var require_getProjectRoleActorsForRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectRoleActorsForRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectRoleById.js
var require_getProjectRoleById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectRoleById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectRoleDetails.js
var require_getProjectRoleDetails2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectRoleDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectRoles.js
var require_getProjectRoles2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectRoles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectsForIssueTypeScreenScheme.js
var require_getProjectsForIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectsForIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectTypeByKey.js
var require_getProjectTypeByKey2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectTypeByKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectVersions.js
var require_getProjectVersions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getProjectVersionsPaginated.js
var require_getProjectVersionsPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getProjectVersionsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getRecent.js
var require_getRecent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getRecent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getRemoteIssueLinkById.js
var require_getRemoteIssueLinkById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getRemoteIssueLinkById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getRemoteIssueLinks.js
var require_getRemoteIssueLinks2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getRemoteIssueLinks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getScreens.js
var require_getScreens2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getScreens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getScreenSchemes.js
var require_getScreenSchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getScreenSchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getScreensForField.js
var require_getScreensForField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getScreensForField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getSecurityLevelMembers.js
var require_getSecurityLevelMembers2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getSecurityLevelMembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getSecurityLevels.js
var require_getSecurityLevels2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getSecurityLevels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getSecurityLevelsForProject.js
var require_getSecurityLevelsForProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getSecurityLevelsForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getSelectableIssueFieldOptions.js
var require_getSelectableIssueFieldOptions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getSelectableIssueFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getSharePermission.js
var require_getSharePermission2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getSharePermission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getSharePermissions.js
var require_getSharePermissions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getSharePermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getStatus.js
var require_getStatus2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getStatusCategory.js
var require_getStatusCategory2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getStatusCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getStatusesById.js
var require_getStatusesById2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getStatusesById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getTask.js
var require_getTask2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getTask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getTransitions.js
var require_getTransitions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getTransitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getTrashedFieldsPaginated.js
var require_getTrashedFieldsPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getTrashedFieldsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUiModifications.js
var require_getUiModifications2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUiModifications.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUser.js
var require_getUser2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUserDefaultColumns.js
var require_getUserDefaultColumns2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUserDefaultColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUserEmail.js
var require_getUserEmail2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUserEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUserEmailBulk.js
var require_getUserEmailBulk2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUserEmailBulk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUserGroups.js
var require_getUserGroups2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUserGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUserProperty.js
var require_getUserProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUserProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUserPropertyKeys.js
var require_getUserPropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUserPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getUsersFromGroup.js
var require_getUsersFromGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getUsersFromGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getValidProjectKey.js
var require_getValidProjectKey2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getValidProjectKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getValidProjectName.js
var require_getValidProjectName2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getValidProjectName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getVersion.js
var require_getVersion2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getVersionRelatedIssues.js
var require_getVersionRelatedIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getVersionRelatedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getVersionUnresolvedIssues.js
var require_getVersionUnresolvedIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getVersionUnresolvedIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getVisibleIssueFieldOptions.js
var require_getVisibleIssueFieldOptions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getVisibleIssueFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getVotes.js
var require_getVotes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getVotes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflow.js
var require_getWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowScheme.js
var require_getWorkflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowSchemeDraft.js
var require_getWorkflowSchemeDraft2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowSchemeDraft.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowSchemeDraftIssueType.js
var require_getWorkflowSchemeDraftIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowSchemeDraftIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowSchemeIssueType.js
var require_getWorkflowSchemeIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowSchemeIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowSchemeProjectAssociations.js
var require_getWorkflowSchemeProjectAssociations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowSchemeProjectAssociations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowsPaginated.js
var require_getWorkflowsPaginated2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowsPaginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowTransitionProperties.js
var require_getWorkflowTransitionProperties2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowTransitionProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorkflowTransitionRuleConfigurations.js
var require_getWorkflowTransitionRuleConfigurations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorkflowTransitionRuleConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorklog.js
var require_getWorklog2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorklogProperty.js
var require_getWorklogProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorklogProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorklogPropertyKeys.js
var require_getWorklogPropertyKeys2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorklogPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/getWorklogsForIds.js
var require_getWorklogsForIds2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/getWorklogsForIds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/linkIssues.js
var require_linkIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/linkIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/matchIssues.js
var require_matchIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/matchIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/mergeVersions.js
var require_mergeVersions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/mergeVersions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/migrateQueries.js
var require_migrateQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/migrateQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/movePriorities.js
var require_movePriorities2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/movePriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/moveResolutions.js
var require_moveResolutions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/moveResolutions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/moveScreenTab.js
var require_moveScreenTab2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/moveScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/moveScreenTabField.js
var require_moveScreenTabField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/moveScreenTabField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/moveVersion.js
var require_moveVersion2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/moveVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/notify.js
var require_notify2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/notify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/parseJqlQueries.js
var require_parseJqlQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/parseJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/partialUpdateProjectRole.js
var require_partialUpdateProjectRole2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/partialUpdateProjectRole.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/publishDraftWorkflowScheme.js
var require_publishDraftWorkflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/publishDraftWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/putAddonProperty.js
var require_putAddonProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/putAddonProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/putAppProperty.js
var require_putAppProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/putAppProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/refreshWebhooks.js
var require_refreshWebhooks2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/refreshWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/registerDynamicWebhooks.js
var require_registerDynamicWebhooks2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/registerDynamicWebhooks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/registerModules.js
var require_registerModules2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/registerModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeAttachment.js
var require_removeAttachment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeCustomFieldContextFromProjects.js
var require_removeCustomFieldContextFromProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeCustomFieldContextFromProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeGadget.js
var require_removeGadget2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeGroup.js
var require_removeGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeIssueTypeFromIssueTypeScheme.js
var require_removeIssueTypeFromIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeIssueTypeFromIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeIssueTypesFromContext.js
var require_removeIssueTypesFromContext2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeIssueTypesFromContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeIssueTypesFromGlobalFieldConfigurationScheme.js
var require_removeIssueTypesFromGlobalFieldConfigurationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeIssueTypesFromGlobalFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeLevel.js
var require_removeLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeMappingsFromIssueTypeScreenScheme.js
var require_removeMappingsFromIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeMappingsFromIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeMemberFromSecurityLevel.js
var require_removeMemberFromSecurityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeMemberFromSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeModules.js
var require_removeModules2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeModules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeNotificationFromNotificationScheme.js
var require_removeNotificationFromNotificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeNotificationFromNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removePreference.js
var require_removePreference2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removePreference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeProjectCategory.js
var require_removeProjectCategory2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeScreenTabField.js
var require_removeScreenTabField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeScreenTabField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeUser.js
var require_removeUser2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeUserFromGroup.js
var require_removeUserFromGroup2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeUserFromGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeVote.js
var require_removeVote2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeVote.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/removeWatcher.js
var require_removeWatcher2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/removeWatcher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/renameScreenTab.js
var require_renameScreenTab2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/renameScreenTab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/reorderCustomFieldOptions.js
var require_reorderCustomFieldOptions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/reorderCustomFieldOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/reorderIssueTypesInIssueTypeScheme.js
var require_reorderIssueTypesInIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/reorderIssueTypesInIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/replaceIssueFieldOption.js
var require_replaceIssueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/replaceIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/resetColumns.js
var require_resetColumns2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/resetColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/resetUserColumns.js
var require_resetUserColumns2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/resetUserColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/restore.js
var require_restore2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/restore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/restoreCustomField.js
var require_restoreCustomField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/restoreCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/sanitiseJqlQueries.js
var require_sanitiseJqlQueries2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/sanitiseJqlQueries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/search.js
var require_search2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/search.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchForIssuesUsingJql.js
var require_searchForIssuesUsingJql2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchForIssuesUsingJql.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchForIssuesUsingJqlPost.js
var require_searchForIssuesUsingJqlPost2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchForIssuesUsingJqlPost.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchPriorities.js
var require_searchPriorities2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchPriorities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchProjects.js
var require_searchProjects2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchProjects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchProjectsUsingSecuritySchemes.js
var require_searchProjectsUsingSecuritySchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchProjectsUsingSecuritySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchResolutions.js
var require_searchResolutions2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchResolutions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/searchSecuritySchemes.js
var require_searchSecuritySchemes2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/searchSecuritySchemes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/selectTimeTrackingImplementation.js
var require_selectTimeTrackingImplementation2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/selectTimeTrackingImplementation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setActors.js
var require_setActors2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setActors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setApplicationProperty.js
var require_setApplicationProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setApplicationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setBanner.js
var require_setBanner2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setBanner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setColumns.js
var require_setColumns2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setCommentProperty.js
var require_setCommentProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setCommentProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setDashboardItemProperty.js
var require_setDashboardItemProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setDashboardItemProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setDefaultLevels.js
var require_setDefaultLevels2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setDefaultLevels.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setDefaultPriority.js
var require_setDefaultPriority2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setDefaultPriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setDefaultResolution.js
var require_setDefaultResolution2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setDefaultResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setDefaultShareScope.js
var require_setDefaultShareScope2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setDefaultShareScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setDefaultValues.js
var require_setDefaultValues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setDefaultValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setFavouriteForFilter.js
var require_setFavouriteForFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setFavouriteForFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setFieldConfigurationSchemeMapping.js
var require_setFieldConfigurationSchemeMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setFieldConfigurationSchemeMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setIssueProperty.js
var require_setIssueProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setIssueProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setIssueTypeProperty.js
var require_setIssueTypeProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setIssueTypeProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setPreference.js
var require_setPreference2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setPreference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setProjectProperty.js
var require_setProjectProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setProjectProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setSharedTimeTrackingConfiguration.js
var require_setSharedTimeTrackingConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setSharedTimeTrackingConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setUserColumns.js
var require_setUserColumns2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setUserColumns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setUserProperty.js
var require_setUserProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setUserProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setWorkflowSchemeDraftIssueType.js
var require_setWorkflowSchemeDraftIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setWorkflowSchemeDraftIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setWorkflowSchemeIssueType.js
var require_setWorkflowSchemeIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setWorkflowSchemeIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/setWorklogProperty.js
var require_setWorklogProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/setWorklogProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/storeAvatar.js
var require_storeAvatar2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/storeAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/toggleFeatureForProject.js
var require_toggleFeatureForProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/toggleFeatureForProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/trashCustomField.js
var require_trashCustomField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/trashCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/unarchiveIssues.js
var require_unarchiveIssues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/unarchiveIssues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateComment.js
var require_updateComment2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateComponent.js
var require_updateComponent2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateComponent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateCustomField.js
var require_updateCustomField2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateCustomField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateCustomFieldConfiguration.js
var require_updateCustomFieldConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateCustomFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateCustomFieldContext.js
var require_updateCustomFieldContext2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateCustomFieldContext.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateCustomFieldOption.js
var require_updateCustomFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateCustomFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateCustomFieldValue.js
var require_updateCustomFieldValue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateCustomFieldValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateDashboard.js
var require_updateDashboard2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateDashboard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateDefaultScreenScheme.js
var require_updateDefaultScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateDefaultScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateDefaultWorkflow.js
var require_updateDefaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateDraftDefaultWorkflow.js
var require_updateDraftDefaultWorkflow2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateDraftDefaultWorkflow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateDraftWorkflowMapping.js
var require_updateDraftWorkflowMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateDraftWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateEntityPropertiesValue.js
var require_updateEntityPropertiesValue2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateEntityPropertiesValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateFieldConfiguration.js
var require_updateFieldConfiguration2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateFieldConfiguration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateFieldConfigurationItems.js
var require_updateFieldConfigurationItems2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateFieldConfigurationItems.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateFieldConfigurationScheme.js
var require_updateFieldConfigurationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateFieldConfigurationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateFilter.js
var require_updateFilter2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateGadget.js
var require_updateGadget2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateGadget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueFieldOption.js
var require_updateIssueFieldOption2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueFieldOption.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueFields.js
var require_updateIssueFields2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueLinkType.js
var require_updateIssueLinkType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueLinkType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueSecurityScheme.js
var require_updateIssueSecurityScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueSecurityScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueType.js
var require_updateIssueType2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueTypeScheme.js
var require_updateIssueTypeScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueTypeScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateIssueTypeScreenScheme.js
var require_updateIssueTypeScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateIssueTypeScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateMultipleCustomFieldValues.js
var require_updateMultipleCustomFieldValues2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateMultipleCustomFieldValues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateNotificationScheme.js
var require_updateNotificationScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateNotificationScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updatePermissionScheme.js
var require_updatePermissionScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updatePermissionScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updatePrecomputations.js
var require_updatePrecomputations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updatePrecomputations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updatePriority.js
var require_updatePriority2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updatePriority.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateProject.js
var require_updateProject2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateProject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateProjectAvatar.js
var require_updateProjectAvatar2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateProjectAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateProjectCategory.js
var require_updateProjectCategory2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateProjectCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateProjectEmail.js
var require_updateProjectEmail2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateProjectEmail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateRemoteIssueLink.js
var require_updateRemoteIssueLink2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateRemoteIssueLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateResolution.js
var require_updateResolution2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateResolution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateScreen.js
var require_updateScreen2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateScreen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateScreenScheme.js
var require_updateScreenScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateScreenScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateSecurityLevel.js
var require_updateSecurityLevel2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateSecurityLevel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateStatuses.js
var require_updateStatuses2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateStatuses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateUiModification.js
var require_updateUiModification2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateUiModification.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateVersion.js
var require_updateVersion2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateWorkflowMapping.js
var require_updateWorkflowMapping2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateWorkflowMapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateWorkflowScheme.js
var require_updateWorkflowScheme2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateWorkflowScheme.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateWorkflowSchemeDraft.js
var require_updateWorkflowSchemeDraft2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateWorkflowSchemeDraft.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateWorkflowTransitionProperty.js
var require_updateWorkflowTransitionProperty2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateWorkflowTransitionProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateWorkflowTransitionRuleConfigurations.js
var require_updateWorkflowTransitionRuleConfigurations2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateWorkflowTransitionRuleConfigurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/updateWorklog.js
var require_updateWorklog2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/updateWorklog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/validateProjectKey.js
var require_validateProjectKey2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/validateProjectKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/workflowRuleSearch.js
var require_workflowRuleSearch2 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/workflowRuleSearch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/version3/parameters/index.js
var require_parameters3 = __commonJS({
  "node_modules/jira.js/out/version3/parameters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_addActorUsers2(), exports2);
    tslib_1.__exportStar(require_addAttachment2(), exports2);
    tslib_1.__exportStar(require_addComment2(), exports2);
    tslib_1.__exportStar(require_addFieldToDefaultScreen2(), exports2);
    tslib_1.__exportStar(require_addGadget2(), exports2);
    tslib_1.__exportStar(require_addIssueTypesToContext2(), exports2);
    tslib_1.__exportStar(require_addIssueTypesToIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_addProjectRoleActorsToRole2(), exports2);
    tslib_1.__exportStar(require_addScreenTab2(), exports2);
    tslib_1.__exportStar(require_addScreenTabField2(), exports2);
    tslib_1.__exportStar(require_addSecurityLevel2(), exports2);
    tslib_1.__exportStar(require_addSecurityLevelMembers2(), exports2);
    tslib_1.__exportStar(require_addSharePermission2(), exports2);
    tslib_1.__exportStar(require_addUserToGroup2(), exports2);
    tslib_1.__exportStar(require_addVote2(), exports2);
    tslib_1.__exportStar(require_addWatcher2(), exports2);
    tslib_1.__exportStar(require_addWorklog2(), exports2);
    tslib_1.__exportStar(require_analyseExpression2(), exports2);
    tslib_1.__exportStar(require_appendMappingsForIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_archiveIssues2(), exports2);
    tslib_1.__exportStar(require_archiveIssuesAsync2(), exports2);
    tslib_1.__exportStar(require_archiveProject2(), exports2);
    tslib_1.__exportStar(require_assignFieldConfigurationSchemeToProject2(), exports2);
    tslib_1.__exportStar(require_assignIssue2(), exports2);
    tslib_1.__exportStar(require_assignIssueTypeSchemeToProject2(), exports2);
    tslib_1.__exportStar(require_assignIssueTypeScreenSchemeToProject2(), exports2);
    tslib_1.__exportStar(require_assignPermissionScheme2(), exports2);
    tslib_1.__exportStar(require_assignProjectsToCustomFieldContext2(), exports2);
    tslib_1.__exportStar(require_assignSchemeToProject2(), exports2);
    tslib_1.__exportStar(require_associateSchemesToProjects2(), exports2);
    tslib_1.__exportStar(require_bulkDeleteIssueProperty2(), exports2);
    tslib_1.__exportStar(require_bulkEditDashboards2(), exports2);
    tslib_1.__exportStar(require_bulkGetGroups2(), exports2);
    tslib_1.__exportStar(require_bulkGetUsers2(), exports2);
    tslib_1.__exportStar(require_bulkGetUsersMigration2(), exports2);
    tslib_1.__exportStar(require_bulkSetIssuePropertiesByIssue2(), exports2);
    tslib_1.__exportStar(require_bulkSetIssueProperty2(), exports2);
    tslib_1.__exportStar(require_bulkSetIssuesProperties2(), exports2);
    tslib_1.__exportStar(require_cancelTask2(), exports2);
    tslib_1.__exportStar(require_changeFilterOwner2(), exports2);
    tslib_1.__exportStar(require_copyDashboard2(), exports2);
    tslib_1.__exportStar(require_createComponent2(), exports2);
    tslib_1.__exportStar(require_createCustomField2(), exports2);
    tslib_1.__exportStar(require_createCustomFieldContext4(), exports2);
    tslib_1.__exportStar(require_createCustomFieldOption2(), exports2);
    tslib_1.__exportStar(require_createDashboard2(), exports2);
    tslib_1.__exportStar(require_createFieldConfiguration2(), exports2);
    tslib_1.__exportStar(require_createFieldConfigurationScheme2(), exports2);
    tslib_1.__exportStar(require_createFilter2(), exports2);
    tslib_1.__exportStar(require_createGroup2(), exports2);
    tslib_1.__exportStar(require_createIssue2(), exports2);
    tslib_1.__exportStar(require_createIssueFieldOption2(), exports2);
    tslib_1.__exportStar(require_createIssueLinkType2(), exports2);
    tslib_1.__exportStar(require_createIssues2(), exports2);
    tslib_1.__exportStar(require_createIssueSecurityScheme2(), exports2);
    tslib_1.__exportStar(require_createIssueType2(), exports2);
    tslib_1.__exportStar(require_createIssueTypeAvatar2(), exports2);
    tslib_1.__exportStar(require_createIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_createIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_createNotificationScheme2(), exports2);
    tslib_1.__exportStar(require_createOrUpdateRemoteIssueLink2(), exports2);
    tslib_1.__exportStar(require_createPermissionGrant2(), exports2);
    tslib_1.__exportStar(require_createPermissionScheme2(), exports2);
    tslib_1.__exportStar(require_createPriority2(), exports2);
    tslib_1.__exportStar(require_createProject2(), exports2);
    tslib_1.__exportStar(require_createProjectAvatar2(), exports2);
    tslib_1.__exportStar(require_createProjectCategory2(), exports2);
    tslib_1.__exportStar(require_createProjectRole2(), exports2);
    tslib_1.__exportStar(require_createResolution2(), exports2);
    tslib_1.__exportStar(require_createScreen2(), exports2);
    tslib_1.__exportStar(require_createScreenScheme2(), exports2);
    tslib_1.__exportStar(require_createStatuses2(), exports2);
    tslib_1.__exportStar(require_createUiModification2(), exports2);
    tslib_1.__exportStar(require_createUser2(), exports2);
    tslib_1.__exportStar(require_createVersion2(), exports2);
    tslib_1.__exportStar(require_createWorkflow2(), exports2);
    tslib_1.__exportStar(require_createWorkflowScheme2(), exports2);
    tslib_1.__exportStar(require_createWorkflowSchemeDraftFromParent2(), exports2);
    tslib_1.__exportStar(require_createWorkflowTransitionProperty2(), exports2);
    tslib_1.__exportStar(require_deleteActor2(), exports2);
    tslib_1.__exportStar(require_deleteAddonProperty2(), exports2);
    tslib_1.__exportStar(require_deleteAndReplaceVersion3(), exports2);
    tslib_1.__exportStar(require_deleteAppProperty2(), exports2);
    tslib_1.__exportStar(require_deleteAvatar2(), exports2);
    tslib_1.__exportStar(require_deleteComment2(), exports2);
    tslib_1.__exportStar(require_deleteCommentProperty2(), exports2);
    tslib_1.__exportStar(require_deleteComponent2(), exports2);
    tslib_1.__exportStar(require_deleteCustomField2(), exports2);
    tslib_1.__exportStar(require_deleteCustomFieldContext2(), exports2);
    tslib_1.__exportStar(require_deleteCustomFieldOption2(), exports2);
    tslib_1.__exportStar(require_deleteDashboard2(), exports2);
    tslib_1.__exportStar(require_deleteDashboardItemProperty2(), exports2);
    tslib_1.__exportStar(require_deleteDefaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_deleteDraftDefaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_deleteDraftWorkflowMapping2(), exports2);
    tslib_1.__exportStar(require_deleteFavouriteForFilter2(), exports2);
    tslib_1.__exportStar(require_deleteFieldConfiguration2(), exports2);
    tslib_1.__exportStar(require_deleteFieldConfigurationScheme2(), exports2);
    tslib_1.__exportStar(require_deleteFilter2(), exports2);
    tslib_1.__exportStar(require_deleteInactiveWorkflow2(), exports2);
    tslib_1.__exportStar(require_deleteIssue2(), exports2);
    tslib_1.__exportStar(require_deleteIssueFieldOption2(), exports2);
    tslib_1.__exportStar(require_deleteIssueLink2(), exports2);
    tslib_1.__exportStar(require_deleteIssueLinkType2(), exports2);
    tslib_1.__exportStar(require_deleteIssueProperty2(), exports2);
    tslib_1.__exportStar(require_deleteIssueType2(), exports2);
    tslib_1.__exportStar(require_deleteIssueTypeProperty2(), exports2);
    tslib_1.__exportStar(require_deleteIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_deleteIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_deleteNotificationScheme2(), exports2);
    tslib_1.__exportStar(require_deletePermissionScheme2(), exports2);
    tslib_1.__exportStar(require_deletePermissionSchemeEntity2(), exports2);
    tslib_1.__exportStar(require_deleteProject2(), exports2);
    tslib_1.__exportStar(require_deleteProjectAsynchronously2(), exports2);
    tslib_1.__exportStar(require_deleteProjectAvatar2(), exports2);
    tslib_1.__exportStar(require_deleteProjectProperty2(), exports2);
    tslib_1.__exportStar(require_deleteProjectRole2(), exports2);
    tslib_1.__exportStar(require_deleteProjectRoleActorsFromRole2(), exports2);
    tslib_1.__exportStar(require_deleteRemoteIssueLinkByGlobalId2(), exports2);
    tslib_1.__exportStar(require_deleteRemoteIssueLinkById2(), exports2);
    tslib_1.__exportStar(require_deleteResolution2(), exports2);
    tslib_1.__exportStar(require_deleteScreen2(), exports2);
    tslib_1.__exportStar(require_deleteScreenScheme2(), exports2);
    tslib_1.__exportStar(require_deleteScreenTab2(), exports2);
    tslib_1.__exportStar(require_deleteSecurityScheme2(), exports2);
    tslib_1.__exportStar(require_deleteSharePermission2(), exports2);
    tslib_1.__exportStar(require_deleteStatusesById2(), exports2);
    tslib_1.__exportStar(require_deleteUiModification2(), exports2);
    tslib_1.__exportStar(require_deleteUserProperty2(), exports2);
    tslib_1.__exportStar(require_deleteWebhookById2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowMapping2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowScheme2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowSchemeDraft2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowSchemeDraftIssueType2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowSchemeIssueType2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowTransitionProperty2(), exports2);
    tslib_1.__exportStar(require_deleteWorkflowTransitionRuleConfigurations2(), exports2);
    tslib_1.__exportStar(require_deleteWorklog2(), exports2);
    tslib_1.__exportStar(require_deleteWorklogProperty2(), exports2);
    tslib_1.__exportStar(require_doTransition2(), exports2);
    tslib_1.__exportStar(require_editIssue2(), exports2);
    tslib_1.__exportStar(require_evaluateJiraExpression2(), exports2);
    tslib_1.__exportStar(require_expandAttachmentForHumans2(), exports2);
    tslib_1.__exportStar(require_expandAttachmentForMachines2(), exports2);
    tslib_1.__exportStar(require_exportArchivedIssues2(), exports2);
    tslib_1.__exportStar(require_findAssignableUsers2(), exports2);
    tslib_1.__exportStar(require_findBulkAssignableUsers2(), exports2);
    tslib_1.__exportStar(require_findGroups2(), exports2);
    tslib_1.__exportStar(require_findUserKeysByQuery2(), exports2);
    tslib_1.__exportStar(require_findUsers2(), exports2);
    tslib_1.__exportStar(require_findUsersAndGroups2(), exports2);
    tslib_1.__exportStar(require_findUsersByQuery2(), exports2);
    tslib_1.__exportStar(require_findUsersForPicker2(), exports2);
    tslib_1.__exportStar(require_findUsersWithAllPermissions2(), exports2);
    tslib_1.__exportStar(require_findUsersWithBrowsePermission2(), exports2);
    tslib_1.__exportStar(require_fullyUpdateProjectRole2(), exports2);
    tslib_1.__exportStar(require_getAccessibleProjectTypeByKey2(), exports2);
    tslib_1.__exportStar(require_getAddonProperties2(), exports2);
    tslib_1.__exportStar(require_getAddonProperty2(), exports2);
    tslib_1.__exportStar(require_getAllDashboards2(), exports2);
    tslib_1.__exportStar(require_getAllFieldConfigurations2(), exports2);
    tslib_1.__exportStar(require_getAllFieldConfigurationSchemes2(), exports2);
    tslib_1.__exportStar(require_getAllGadgets2(), exports2);
    tslib_1.__exportStar(require_getAllIssueFieldOptions2(), exports2);
    tslib_1.__exportStar(require_getAllIssueTypeSchemes2(), exports2);
    tslib_1.__exportStar(require_getAllLabels2(), exports2);
    tslib_1.__exportStar(require_getAllPermissionSchemes2(), exports2);
    tslib_1.__exportStar(require_getAllProjectAvatars2(), exports2);
    tslib_1.__exportStar(require_getAllScreenTabFields2(), exports2);
    tslib_1.__exportStar(require_getAllScreenTabs2(), exports2);
    tslib_1.__exportStar(require_getAllStatuses2(), exports2);
    tslib_1.__exportStar(require_getAllSystemAvatars2(), exports2);
    tslib_1.__exportStar(require_getAllUsers2(), exports2);
    tslib_1.__exportStar(require_getAllUsersDefault2(), exports2);
    tslib_1.__exportStar(require_getAllWorkflowSchemes2(), exports2);
    tslib_1.__exportStar(require_getAlternativeIssueTypes2(), exports2);
    tslib_1.__exportStar(require_getApplicationProperty2(), exports2);
    tslib_1.__exportStar(require_getApplicationRole2(), exports2);
    tslib_1.__exportStar(require_getAssignedPermissionScheme2(), exports2);
    tslib_1.__exportStar(require_getAttachment2(), exports2);
    tslib_1.__exportStar(require_getAttachmentContent2(), exports2);
    tslib_1.__exportStar(require_getAttachmentThumbnail2(), exports2);
    tslib_1.__exportStar(require_getAuditRecords2(), exports2);
    tslib_1.__exportStar(require_getAutoCompletePost2(), exports2);
    tslib_1.__exportStar(require_getAvailableScreenFields2(), exports2);
    tslib_1.__exportStar(require_getAvatarImageByID2(), exports2);
    tslib_1.__exportStar(require_getAvatarImageByOwner2(), exports2);
    tslib_1.__exportStar(require_getAvatarImageByType2(), exports2);
    tslib_1.__exportStar(require_getAvatars2(), exports2);
    tslib_1.__exportStar(require_getBulkPermissions2(), exports2);
    tslib_1.__exportStar(require_getChangeLogs2(), exports2);
    tslib_1.__exportStar(require_getChangeLogsByIds2(), exports2);
    tslib_1.__exportStar(require_getColumns2(), exports2);
    tslib_1.__exportStar(require_getComment2(), exports2);
    tslib_1.__exportStar(require_getCommentProperty2(), exports2);
    tslib_1.__exportStar(require_getCommentPropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getComments2(), exports2);
    tslib_1.__exportStar(require_getCommentsByIds2(), exports2);
    tslib_1.__exportStar(require_getComponent2(), exports2);
    tslib_1.__exportStar(require_getComponentRelatedIssues2(), exports2);
    tslib_1.__exportStar(require_getContextsForField2(), exports2);
    tslib_1.__exportStar(require_getCreateIssueMeta2(), exports2);
    tslib_1.__exportStar(require_getCurrentUser2(), exports2);
    tslib_1.__exportStar(require_getCustomFieldConfiguration2(), exports2);
    tslib_1.__exportStar(require_getCustomFieldContextsForProjectsAndIssueTypes2(), exports2);
    tslib_1.__exportStar(require_getCustomFieldOption2(), exports2);
    tslib_1.__exportStar(require_getDashboard2(), exports2);
    tslib_1.__exportStar(require_getDashboardItemProperty2(), exports2);
    tslib_1.__exportStar(require_getDashboardItemPropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getDashboardsPaginated2(), exports2);
    tslib_1.__exportStar(require_getDefaultValues2(), exports2);
    tslib_1.__exportStar(require_getDefaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_getDraftDefaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_getDraftWorkflow2(), exports2);
    tslib_1.__exportStar(require_getDynamicWebhooksForApp2(), exports2);
    tslib_1.__exportStar(require_getEditIssueMeta2(), exports2);
    tslib_1.__exportStar(require_getFailedWebhooks2(), exports2);
    tslib_1.__exportStar(require_getFavouriteFilters2(), exports2);
    tslib_1.__exportStar(require_getFeaturesForProject2(), exports2);
    tslib_1.__exportStar(require_getFieldAutoCompleteForQueryString2(), exports2);
    tslib_1.__exportStar(require_getFieldConfigurationItems2(), exports2);
    tslib_1.__exportStar(require_getFieldConfigurationSchemeMappings2(), exports2);
    tslib_1.__exportStar(require_getFieldConfigurationSchemeProjectMapping2(), exports2);
    tslib_1.__exportStar(require_getFieldsPaginated2(), exports2);
    tslib_1.__exportStar(require_getFilter2(), exports2);
    tslib_1.__exportStar(require_getFiltersPaginated2(), exports2);
    tslib_1.__exportStar(require_getHierarchy2(), exports2);
    tslib_1.__exportStar(require_getIdsOfWorklogsDeletedSince2(), exports2);
    tslib_1.__exportStar(require_getIdsOfWorklogsModifiedSince2(), exports2);
    tslib_1.__exportStar(require_getIssue3(), exports2);
    tslib_1.__exportStar(require_getIssueFieldOption2(), exports2);
    tslib_1.__exportStar(require_getIssueLink2(), exports2);
    tslib_1.__exportStar(require_getIssueLinkType2(), exports2);
    tslib_1.__exportStar(require_getIssuePickerResource2(), exports2);
    tslib_1.__exportStar(require_getIssueProperty2(), exports2);
    tslib_1.__exportStar(require_getIssuePropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getIssueSecurityLevel2(), exports2);
    tslib_1.__exportStar(require_getIssueSecurityLevelMembers2(), exports2);
    tslib_1.__exportStar(require_getIssueSecurityScheme2(), exports2);
    tslib_1.__exportStar(require_getIssueType2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeMappingsForContexts2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeProperty2(), exports2);
    tslib_1.__exportStar(require_getIssueTypePropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeSchemeForProjects2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeSchemesMapping2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeScreenSchemeMappings2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeScreenSchemeProjectAssociations2(), exports2);
    tslib_1.__exportStar(require_getIssueTypeScreenSchemes2(), exports2);
    tslib_1.__exportStar(require_getIssueTypesForProject2(), exports2);
    tslib_1.__exportStar(require_getIssueWatchers2(), exports2);
    tslib_1.__exportStar(require_getIssueWorklog2(), exports2);
    tslib_1.__exportStar(require_getIsWatchingIssueBulk2(), exports2);
    tslib_1.__exportStar(require_getMyFilters2(), exports2);
    tslib_1.__exportStar(require_getMyPermissions2(), exports2);
    tslib_1.__exportStar(require_getNotificationScheme2(), exports2);
    tslib_1.__exportStar(require_getNotificationSchemes2(), exports2);
    tslib_1.__exportStar(require_getNotificationSchemeToProjectMappings2(), exports2);
    tslib_1.__exportStar(require_getOptionsForContext2(), exports2);
    tslib_1.__exportStar(require_getPermissionScheme2(), exports2);
    tslib_1.__exportStar(require_getPermissionSchemeGrant2(), exports2);
    tslib_1.__exportStar(require_getPermissionSchemeGrants2(), exports2);
    tslib_1.__exportStar(require_getPermittedProjects2(), exports2);
    tslib_1.__exportStar(require_getPrecomputations2(), exports2);
    tslib_1.__exportStar(require_getPreference2(), exports2);
    tslib_1.__exportStar(require_getPriority2(), exports2);
    tslib_1.__exportStar(require_getProject2(), exports2);
    tslib_1.__exportStar(require_getProjectCategoryById2(), exports2);
    tslib_1.__exportStar(require_getProjectComponents2(), exports2);
    tslib_1.__exportStar(require_getProjectComponentsPaginated2(), exports2);
    tslib_1.__exportStar(require_getProjectContextMapping2(), exports2);
    tslib_1.__exportStar(require_getProjectEmail2(), exports2);
    tslib_1.__exportStar(require_getProjectIssueSecurityScheme2(), exports2);
    tslib_1.__exportStar(require_getProjectProperty2(), exports2);
    tslib_1.__exportStar(require_getProjectPropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getProjectRole2(), exports2);
    tslib_1.__exportStar(require_getProjectRoleActorsForRole2(), exports2);
    tslib_1.__exportStar(require_getProjectRoleById2(), exports2);
    tslib_1.__exportStar(require_getProjectRoleDetails2(), exports2);
    tslib_1.__exportStar(require_getProjectRoles2(), exports2);
    tslib_1.__exportStar(require_getProjectsForIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_getProjectTypeByKey2(), exports2);
    tslib_1.__exportStar(require_getProjectVersions2(), exports2);
    tslib_1.__exportStar(require_getProjectVersionsPaginated2(), exports2);
    tslib_1.__exportStar(require_getRecent2(), exports2);
    tslib_1.__exportStar(require_getRemoteIssueLinkById2(), exports2);
    tslib_1.__exportStar(require_getRemoteIssueLinks2(), exports2);
    tslib_1.__exportStar(require_getScreens2(), exports2);
    tslib_1.__exportStar(require_getScreenSchemes2(), exports2);
    tslib_1.__exportStar(require_getScreensForField2(), exports2);
    tslib_1.__exportStar(require_getSecurityLevelMembers2(), exports2);
    tslib_1.__exportStar(require_getSecurityLevels2(), exports2);
    tslib_1.__exportStar(require_getSecurityLevelsForProject2(), exports2);
    tslib_1.__exportStar(require_getSelectableIssueFieldOptions2(), exports2);
    tslib_1.__exportStar(require_getSharePermission2(), exports2);
    tslib_1.__exportStar(require_getSharePermissions2(), exports2);
    tslib_1.__exportStar(require_getStatus2(), exports2);
    tslib_1.__exportStar(require_getStatusCategory2(), exports2);
    tslib_1.__exportStar(require_getStatusesById2(), exports2);
    tslib_1.__exportStar(require_getTask2(), exports2);
    tslib_1.__exportStar(require_getTransitions2(), exports2);
    tslib_1.__exportStar(require_getTrashedFieldsPaginated2(), exports2);
    tslib_1.__exportStar(require_getUiModifications2(), exports2);
    tslib_1.__exportStar(require_getUser2(), exports2);
    tslib_1.__exportStar(require_getUserDefaultColumns2(), exports2);
    tslib_1.__exportStar(require_getUserEmail2(), exports2);
    tslib_1.__exportStar(require_getUserEmailBulk2(), exports2);
    tslib_1.__exportStar(require_getUserGroups2(), exports2);
    tslib_1.__exportStar(require_getUserProperty2(), exports2);
    tslib_1.__exportStar(require_getUserPropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getUsersFromGroup2(), exports2);
    tslib_1.__exportStar(require_getValidProjectKey2(), exports2);
    tslib_1.__exportStar(require_getValidProjectName2(), exports2);
    tslib_1.__exportStar(require_getVersion2(), exports2);
    tslib_1.__exportStar(require_getVersionRelatedIssues2(), exports2);
    tslib_1.__exportStar(require_getVersionUnresolvedIssues2(), exports2);
    tslib_1.__exportStar(require_getVisibleIssueFieldOptions2(), exports2);
    tslib_1.__exportStar(require_getVotes2(), exports2);
    tslib_1.__exportStar(require_getWorkflow2(), exports2);
    tslib_1.__exportStar(require_getWorkflowScheme2(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeDraft2(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeDraftIssueType2(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeIssueType2(), exports2);
    tslib_1.__exportStar(require_getWorkflowSchemeProjectAssociations2(), exports2);
    tslib_1.__exportStar(require_getWorkflowsPaginated2(), exports2);
    tslib_1.__exportStar(require_getWorkflowTransitionProperties2(), exports2);
    tslib_1.__exportStar(require_getWorkflowTransitionRuleConfigurations2(), exports2);
    tslib_1.__exportStar(require_getWorklog2(), exports2);
    tslib_1.__exportStar(require_getWorklogProperty2(), exports2);
    tslib_1.__exportStar(require_getWorklogPropertyKeys2(), exports2);
    tslib_1.__exportStar(require_getWorklogsForIds2(), exports2);
    tslib_1.__exportStar(require_linkIssues2(), exports2);
    tslib_1.__exportStar(require_matchIssues2(), exports2);
    tslib_1.__exportStar(require_mergeVersions2(), exports2);
    tslib_1.__exportStar(require_migrateQueries2(), exports2);
    tslib_1.__exportStar(require_movePriorities2(), exports2);
    tslib_1.__exportStar(require_moveResolutions2(), exports2);
    tslib_1.__exportStar(require_moveScreenTab2(), exports2);
    tslib_1.__exportStar(require_moveScreenTabField2(), exports2);
    tslib_1.__exportStar(require_moveVersion2(), exports2);
    tslib_1.__exportStar(require_notify2(), exports2);
    tslib_1.__exportStar(require_parseJqlQueries2(), exports2);
    tslib_1.__exportStar(require_partialUpdateProjectRole2(), exports2);
    tslib_1.__exportStar(require_publishDraftWorkflowScheme2(), exports2);
    tslib_1.__exportStar(require_putAddonProperty2(), exports2);
    tslib_1.__exportStar(require_putAppProperty2(), exports2);
    tslib_1.__exportStar(require_refreshWebhooks2(), exports2);
    tslib_1.__exportStar(require_registerDynamicWebhooks2(), exports2);
    tslib_1.__exportStar(require_registerModules2(), exports2);
    tslib_1.__exportStar(require_removeAttachment2(), exports2);
    tslib_1.__exportStar(require_removeCustomFieldContextFromProjects2(), exports2);
    tslib_1.__exportStar(require_removeGadget2(), exports2);
    tslib_1.__exportStar(require_removeGroup2(), exports2);
    tslib_1.__exportStar(require_removeIssueTypeFromIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_removeIssueTypesFromContext2(), exports2);
    tslib_1.__exportStar(require_removeIssueTypesFromGlobalFieldConfigurationScheme2(), exports2);
    tslib_1.__exportStar(require_removeLevel2(), exports2);
    tslib_1.__exportStar(require_removeMappingsFromIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_removeMemberFromSecurityLevel2(), exports2);
    tslib_1.__exportStar(require_removeModules2(), exports2);
    tslib_1.__exportStar(require_removeNotificationFromNotificationScheme2(), exports2);
    tslib_1.__exportStar(require_removePreference2(), exports2);
    tslib_1.__exportStar(require_removeProjectCategory2(), exports2);
    tslib_1.__exportStar(require_removeScreenTabField2(), exports2);
    tslib_1.__exportStar(require_removeUser2(), exports2);
    tslib_1.__exportStar(require_removeUserFromGroup2(), exports2);
    tslib_1.__exportStar(require_removeVote2(), exports2);
    tslib_1.__exportStar(require_removeWatcher2(), exports2);
    tslib_1.__exportStar(require_renameScreenTab2(), exports2);
    tslib_1.__exportStar(require_reorderCustomFieldOptions2(), exports2);
    tslib_1.__exportStar(require_reorderIssueTypesInIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_replaceIssueFieldOption2(), exports2);
    tslib_1.__exportStar(require_resetColumns2(), exports2);
    tslib_1.__exportStar(require_resetUserColumns2(), exports2);
    tslib_1.__exportStar(require_restore2(), exports2);
    tslib_1.__exportStar(require_restoreCustomField2(), exports2);
    tslib_1.__exportStar(require_sanitiseJqlQueries2(), exports2);
    tslib_1.__exportStar(require_search2(), exports2);
    tslib_1.__exportStar(require_searchForIssuesUsingJql2(), exports2);
    tslib_1.__exportStar(require_searchForIssuesUsingJqlPost2(), exports2);
    tslib_1.__exportStar(require_searchPriorities2(), exports2);
    tslib_1.__exportStar(require_searchProjects2(), exports2);
    tslib_1.__exportStar(require_searchProjectsUsingSecuritySchemes2(), exports2);
    tslib_1.__exportStar(require_searchResolutions2(), exports2);
    tslib_1.__exportStar(require_searchSecuritySchemes2(), exports2);
    tslib_1.__exportStar(require_selectTimeTrackingImplementation2(), exports2);
    tslib_1.__exportStar(require_setActors2(), exports2);
    tslib_1.__exportStar(require_setApplicationProperty2(), exports2);
    tslib_1.__exportStar(require_setBanner2(), exports2);
    tslib_1.__exportStar(require_setColumns2(), exports2);
    tslib_1.__exportStar(require_setCommentProperty2(), exports2);
    tslib_1.__exportStar(require_setDashboardItemProperty2(), exports2);
    tslib_1.__exportStar(require_setDefaultLevels2(), exports2);
    tslib_1.__exportStar(require_setDefaultPriority2(), exports2);
    tslib_1.__exportStar(require_setDefaultResolution2(), exports2);
    tslib_1.__exportStar(require_setDefaultShareScope2(), exports2);
    tslib_1.__exportStar(require_setDefaultValues2(), exports2);
    tslib_1.__exportStar(require_setFavouriteForFilter2(), exports2);
    tslib_1.__exportStar(require_setFieldConfigurationSchemeMapping2(), exports2);
    tslib_1.__exportStar(require_setIssueProperty2(), exports2);
    tslib_1.__exportStar(require_setIssueTypeProperty2(), exports2);
    tslib_1.__exportStar(require_setPreference2(), exports2);
    tslib_1.__exportStar(require_setProjectProperty2(), exports2);
    tslib_1.__exportStar(require_setSharedTimeTrackingConfiguration2(), exports2);
    tslib_1.__exportStar(require_setUserColumns2(), exports2);
    tslib_1.__exportStar(require_setUserProperty2(), exports2);
    tslib_1.__exportStar(require_setWorkflowSchemeDraftIssueType2(), exports2);
    tslib_1.__exportStar(require_setWorkflowSchemeIssueType2(), exports2);
    tslib_1.__exportStar(require_setWorklogProperty2(), exports2);
    tslib_1.__exportStar(require_storeAvatar2(), exports2);
    tslib_1.__exportStar(require_toggleFeatureForProject2(), exports2);
    tslib_1.__exportStar(require_trashCustomField2(), exports2);
    tslib_1.__exportStar(require_unarchiveIssues2(), exports2);
    tslib_1.__exportStar(require_updateComment2(), exports2);
    tslib_1.__exportStar(require_updateComponent2(), exports2);
    tslib_1.__exportStar(require_updateCustomField2(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldConfiguration2(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldContext2(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldOption2(), exports2);
    tslib_1.__exportStar(require_updateCustomFieldValue2(), exports2);
    tslib_1.__exportStar(require_updateDashboard2(), exports2);
    tslib_1.__exportStar(require_updateDefaultScreenScheme2(), exports2);
    tslib_1.__exportStar(require_updateDefaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_updateDraftDefaultWorkflow2(), exports2);
    tslib_1.__exportStar(require_updateDraftWorkflowMapping2(), exports2);
    tslib_1.__exportStar(require_updateEntityPropertiesValue2(), exports2);
    tslib_1.__exportStar(require_updateFieldConfiguration2(), exports2);
    tslib_1.__exportStar(require_updateFieldConfigurationItems2(), exports2);
    tslib_1.__exportStar(require_updateFieldConfigurationScheme2(), exports2);
    tslib_1.__exportStar(require_updateFilter2(), exports2);
    tslib_1.__exportStar(require_updateGadget2(), exports2);
    tslib_1.__exportStar(require_updateIssueFieldOption2(), exports2);
    tslib_1.__exportStar(require_updateIssueFields2(), exports2);
    tslib_1.__exportStar(require_updateIssueLinkType2(), exports2);
    tslib_1.__exportStar(require_updateIssueSecurityScheme2(), exports2);
    tslib_1.__exportStar(require_updateIssueType2(), exports2);
    tslib_1.__exportStar(require_updateIssueTypeScheme2(), exports2);
    tslib_1.__exportStar(require_updateIssueTypeScreenScheme2(), exports2);
    tslib_1.__exportStar(require_updateMultipleCustomFieldValues2(), exports2);
    tslib_1.__exportStar(require_updateNotificationScheme2(), exports2);
    tslib_1.__exportStar(require_updatePermissionScheme2(), exports2);
    tslib_1.__exportStar(require_updatePrecomputations2(), exports2);
    tslib_1.__exportStar(require_updatePriority2(), exports2);
    tslib_1.__exportStar(require_updateProject2(), exports2);
    tslib_1.__exportStar(require_updateProjectAvatar2(), exports2);
    tslib_1.__exportStar(require_updateProjectCategory2(), exports2);
    tslib_1.__exportStar(require_updateProjectEmail2(), exports2);
    tslib_1.__exportStar(require_updateRemoteIssueLink2(), exports2);
    tslib_1.__exportStar(require_updateResolution2(), exports2);
    tslib_1.__exportStar(require_updateScreen2(), exports2);
    tslib_1.__exportStar(require_updateScreenScheme2(), exports2);
    tslib_1.__exportStar(require_updateSecurityLevel2(), exports2);
    tslib_1.__exportStar(require_updateStatuses2(), exports2);
    tslib_1.__exportStar(require_updateUiModification2(), exports2);
    tslib_1.__exportStar(require_updateVersion2(), exports2);
    tslib_1.__exportStar(require_updateWorkflowMapping2(), exports2);
    tslib_1.__exportStar(require_updateWorkflowScheme2(), exports2);
    tslib_1.__exportStar(require_updateWorkflowSchemeDraft2(), exports2);
    tslib_1.__exportStar(require_updateWorkflowTransitionProperty2(), exports2);
    tslib_1.__exportStar(require_updateWorkflowTransitionRuleConfigurations2(), exports2);
    tslib_1.__exportStar(require_updateWorklog2(), exports2);
    tslib_1.__exportStar(require_validateProjectKey2(), exports2);
    tslib_1.__exportStar(require_workflowRuleSearch2(), exports2);
  }
});

// node_modules/jira.js/out/version3/index.js
var require_version32 = __commonJS({
  "node_modules/jira.js/out/version3/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Version3Parameters = exports2.Version3Models = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_announcementBanner2(), exports2);
    tslib_1.__exportStar(require_applicationRoles2(), exports2);
    tslib_1.__exportStar(require_appMigration2(), exports2);
    tslib_1.__exportStar(require_appProperties2(), exports2);
    tslib_1.__exportStar(require_auditRecords3(), exports2);
    tslib_1.__exportStar(require_avatars3(), exports2);
    tslib_1.__exportStar(require_dashboards2(), exports2);
    tslib_1.__exportStar(require_dynamicModules2(), exports2);
    tslib_1.__exportStar(require_filters2(), exports2);
    tslib_1.__exportStar(require_filterSharing2(), exports2);
    tslib_1.__exportStar(require_groupAndUserPicker2(), exports2);
    tslib_1.__exportStar(require_groups2(), exports2);
    tslib_1.__exportStar(require_instanceInformation(), exports2);
    tslib_1.__exportStar(require_issueAttachments2(), exports2);
    tslib_1.__exportStar(require_issueCommentProperties2(), exports2);
    tslib_1.__exportStar(require_issueComments2(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldConfigurationApps2(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldContexts2(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldOptions2(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldOptionsApps2(), exports2);
    tslib_1.__exportStar(require_issueCustomFieldValuesApps2(), exports2);
    tslib_1.__exportStar(require_issueFieldConfigurations2(), exports2);
    tslib_1.__exportStar(require_issueFields2(), exports2);
    tslib_1.__exportStar(require_issueLinks2(), exports2);
    tslib_1.__exportStar(require_issueLinkTypes3(), exports2);
    tslib_1.__exportStar(require_issueNavigatorSettings2(), exports2);
    tslib_1.__exportStar(require_issueNotificationSchemes2(), exports2);
    tslib_1.__exportStar(require_issuePriorities2(), exports2);
    tslib_1.__exportStar(require_issueProperties2(), exports2);
    tslib_1.__exportStar(require_issueRemoteLinks2(), exports2);
    tslib_1.__exportStar(require_issueResolutions2(), exports2);
    tslib_1.__exportStar(require_issues2(), exports2);
    tslib_1.__exportStar(require_issueSearch2(), exports2);
    tslib_1.__exportStar(require_issueSecurityLevel2(), exports2);
    tslib_1.__exportStar(require_issueSecuritySchemes2(), exports2);
    tslib_1.__exportStar(require_issueTypeProperties2(), exports2);
    tslib_1.__exportStar(require_issueTypes2(), exports2);
    tslib_1.__exportStar(require_issueTypeSchemes2(), exports2);
    tslib_1.__exportStar(require_issueTypeScreenSchemes2(), exports2);
    tslib_1.__exportStar(require_issueVotes2(), exports2);
    tslib_1.__exportStar(require_issueWatchers2(), exports2);
    tslib_1.__exportStar(require_issueWorklogProperties2(), exports2);
    tslib_1.__exportStar(require_issueWorklogs2(), exports2);
    tslib_1.__exportStar(require_jiraExpressions2(), exports2);
    tslib_1.__exportStar(require_jiraSettings2(), exports2);
    tslib_1.__exportStar(require_jQL2(), exports2);
    tslib_1.__exportStar(require_jqlFunctionsApps2(), exports2);
    tslib_1.__exportStar(require_labels2(), exports2);
    tslib_1.__exportStar(require_licenseMetrics2(), exports2);
    tslib_1.__exportStar(require_myself2(), exports2);
    tslib_1.__exportStar(require_permissions3(), exports2);
    tslib_1.__exportStar(require_permissionSchemes3(), exports2);
    tslib_1.__exportStar(require_projectAvatars3(), exports2);
    tslib_1.__exportStar(require_projectCategories2(), exports2);
    tslib_1.__exportStar(require_projectComponents2(), exports2);
    tslib_1.__exportStar(require_projectEmail2(), exports2);
    tslib_1.__exportStar(require_projectFeatures2(), exports2);
    tslib_1.__exportStar(require_projectKeyAndNameValidation2(), exports2);
    tslib_1.__exportStar(require_projectPermissionSchemes2(), exports2);
    tslib_1.__exportStar(require_projectProperties2(), exports2);
    tslib_1.__exportStar(require_projectRoleActors2(), exports2);
    tslib_1.__exportStar(require_projectRoles2(), exports2);
    tslib_1.__exportStar(require_projects3(), exports2);
    tslib_1.__exportStar(require_projectTypes2(), exports2);
    tslib_1.__exportStar(require_projectVersions2(), exports2);
    tslib_1.__exportStar(require_screens2(), exports2);
    tslib_1.__exportStar(require_screenSchemes2(), exports2);
    tslib_1.__exportStar(require_screenTabFields2(), exports2);
    tslib_1.__exportStar(require_screenTabs2(), exports2);
    tslib_1.__exportStar(require_serverInfo2(), exports2);
    tslib_1.__exportStar(require_status4(), exports2);
    tslib_1.__exportStar(require_tasks2(), exports2);
    tslib_1.__exportStar(require_timeTracking2(), exports2);
    tslib_1.__exportStar(require_uIModificationsApps2(), exports2);
    tslib_1.__exportStar(require_userProperties2(), exports2);
    tslib_1.__exportStar(require_users2(), exports2);
    tslib_1.__exportStar(require_userSearch2(), exports2);
    tslib_1.__exportStar(require_webhooks2(), exports2);
    tslib_1.__exportStar(require_workflows2(), exports2);
    tslib_1.__exportStar(require_workflowSchemeDrafts2(), exports2);
    tslib_1.__exportStar(require_workflowSchemeProjectAssociations2(), exports2);
    tslib_1.__exportStar(require_workflowSchemes2(), exports2);
    tslib_1.__exportStar(require_workflowStatusCategories2(), exports2);
    tslib_1.__exportStar(require_workflowStatuses2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionProperties2(), exports2);
    tslib_1.__exportStar(require_workflowTransitionRules3(), exports2);
    tslib_1.__exportStar(require_client4(), exports2);
    exports2.Version3Models = require_models3();
    exports2.Version3Parameters = require_parameters3();
  }
});

// node_modules/jira.js/out/serviceDesk/customer.js
var require_customer = __commonJS({
  "node_modules/jira.js/out/serviceDesk/customer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Customer = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Customer = class {
      constructor(client) {
        this.client = client;
      }
      createCustomer(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/customer",
            method: "POST",
            data: {
              email: parameters === null || parameters === void 0 ? void 0 : parameters.email,
              displayName: parameters === null || parameters === void 0 ? void 0 : parameters.displayName
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Customer = Customer;
  }
});

// node_modules/jira.js/out/serviceDesk/info.js
var require_info = __commonJS({
  "node_modules/jira.js/out/serviceDesk/info.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Info = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Info = class {
      constructor(client) {
        this.client = client;
      }
      getInfo(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/info",
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Info = Info;
  }
});

// node_modules/jira.js/out/serviceDesk/insight.js
var require_insight = __commonJS({
  "node_modules/jira.js/out/serviceDesk/insight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Insight = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Insight = class {
      constructor(client) {
        this.client = client;
      }
      getInsightWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/insight/workspace",
            method: "GET",
            params: {
              start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Insight = Insight;
  }
});

// node_modules/jira.js/out/serviceDesk/knowledgeBase.js
var require_knowledgeBase = __commonJS({
  "node_modules/jira.js/out/serviceDesk/knowledgeBase.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KnowledgeBase = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var KnowledgeBase = class {
      constructor(client) {
        this.client = client;
      }
      getArticles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/knowledgebase/article",
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            params: {
              query: parameters.query,
              highlight: parameters.highlight,
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.KnowledgeBase = KnowledgeBase;
  }
});

// node_modules/jira.js/out/serviceDesk/organization.js
var require_organization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/organization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Organization = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Organization = class {
      constructor(client) {
        this.client = client;
      }
      getOrganizations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/organization",
            method: "GET",
            params: {
              start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
              accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/organization",
            method: "POST",
            data: {
              name: parameters === null || parameters === void 0 ? void 0 : parameters.name
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPropertiesKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/property`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/property/${parameters.propertyKey}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/property/${parameters.propertyKey}`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/property/${parameters.propertyKey}`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getUsersInOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/user`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addUsersToOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/user`,
            method: "POST",
            data: {
              accountIds: parameters.accountIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeUsersFromOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/organization/${parameters.organizationId}/user`,
            method: "DELETE",
            data: {
              accountIds: parameters.accountIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getServiceDeskOrganizations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/organization`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit,
              accountId: parameters.accountId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/organization`,
            method: "POST",
            data: {
              organizationId: parameters.organizationId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeOrganization(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/organization`,
            method: "DELETE",
            data: {
              organizationId: parameters.organizationId
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Organization = Organization;
  }
});

// node_modules/jira.js/out/serviceDesk/request.js
var require_request3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Request = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Request2 = class {
      constructor(client) {
        this.client = client;
      }
      getCustomerRequests(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/request",
            method: "GET",
            params: {
              searchTerm: parameters === null || parameters === void 0 ? void 0 : parameters.searchTerm,
              requestStatus: parameters === null || parameters === void 0 ? void 0 : parameters.requestStatus,
              approvalStatus: parameters === null || parameters === void 0 ? void 0 : parameters.approvalStatus,
              organizationId: parameters === null || parameters === void 0 ? void 0 : parameters.organizationId,
              serviceDeskId: parameters === null || parameters === void 0 ? void 0 : parameters.serviceDeskId,
              requestTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.requestTypeId,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
              start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createCustomerRequest(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/request",
            method: "POST",
            data: {
              serviceDeskId: parameters === null || parameters === void 0 ? void 0 : parameters.serviceDeskId,
              requestTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.requestTypeId,
              requestFieldValues: parameters === null || parameters === void 0 ? void 0 : parameters.requestFieldValues,
              requestParticipants: parameters === null || parameters === void 0 ? void 0 : parameters.requestParticipants,
              raiseOnBehalfOf: parameters === null || parameters === void 0 ? void 0 : parameters.raiseOnBehalfOf,
              channel: parameters === null || parameters === void 0 ? void 0 : parameters.channel
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCustomerRequestByIdOrKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApprovals(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/approval`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getApprovalById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/approval/${parameters.approvalId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      answerApproval(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/approval/${parameters.approvalId}`,
            method: "POST",
            data: {
              decision: parameters.decision
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentsForRequest(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment`,
            method: "POST",
            data: {
              temporaryAttachmentIds: parameters.temporaryAttachmentIds,
              additionalComment: parameters.additionalComment,
              public: parameters.public
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment/${parameters.attachmentId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getAttachmentThumbnail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment/${parameters.attachmentId}/thumbnail`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestComments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment`,
            method: "GET",
            params: {
              public: parameters.public,
              internal: parameters.internal,
              expand: parameters.expand,
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createRequestComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment`,
            method: "POST",
            data: {
              body: parameters.body,
              public: parameters.public
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestCommentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment/${parameters.commentId}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCommentAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment/${parameters.commentId}/attachment`,
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSubscriptionStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/notification`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      subscribe(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/notification`,
            method: "PUT"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      unsubscribe(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/notification`,
            method: "DELETE"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestParticipants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/participant`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addRequestParticipants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/participant`,
            method: "POST",
            data: {
              usernames: parameters.usernames,
              accountIds: parameters.accountIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeRequestParticipants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/participant`,
            method: "DELETE",
            data: {
              usernames: parameters.usernames,
              accountIds: parameters.accountIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSlaInformation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/sla`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getSlaInformationById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/sla/${parameters.slaMetricId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCustomerRequestStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/status`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCustomerTransitions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/transition`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      performCustomerTransition(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/transition`,
            method: "POST",
            data: {
              id: parameters.id,
              additionalComment: parameters.additionalComment
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getFeedback(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.requestIdOrKey}/feedback`,
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      postFeedback(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.requestIdOrKey}/feedback`,
            method: "POST",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            data: {
              type: parameters.type,
              rating: parameters.rating,
              comment: parameters.comment
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteFeedback(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/request/${parameters.requestIdOrKey}/feedback`,
            method: "DELETE",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.Request = Request2;
  }
});

// node_modules/jira.js/out/serviceDesk/requestType.js
var require_requestType = __commonJS({
  "node_modules/jira.js/out/serviceDesk/requestType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RequestType = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var RequestType = class {
      constructor(client) {
        this.client = client;
      }
      getAllRequestTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/requesttype",
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            params: {
              searchQuery: parameters === null || parameters === void 0 ? void 0 : parameters.searchQuery,
              serviceDeskId: parameters === null || parameters === void 0 ? void 0 : parameters.serviceDeskId,
              start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
              expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.RequestType = RequestType;
  }
});

// node_modules/jira.js/out/serviceDesk/serviceDesk.js
var require_serviceDesk = __commonJS({
  "node_modules/jira.js/out/serviceDesk/serviceDesk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceDesk = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var FormData2 = require_form_data();
    var ServiceDesk = class {
      constructor(client) {
        this.client = client;
      }
      getServiceDesks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: "/rest/servicedeskapi/servicedesk",
            method: "GET",
            params: {
              start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
              limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getServiceDeskById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}`,
            method: "GET"
          };
          return this.client.sendRequest(config, callback);
        });
      }
      attachTemporaryFile(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          var _a;
          const formData = new FormData2();
          const attachments = Array.isArray(parameters.attachment) ? parameters.attachment : [parameters.attachment];
          attachments.forEach((attachment) => formData.append("file", attachment.file, attachment.filename));
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/attachTemporaryFile`,
            method: "POST",
            headers: Object.assign({ "X-Atlassian-Token": "no-check", "Content-Type": "multipart/form-data" }, (_a = formData.getHeaders) === null || _a === void 0 ? void 0 : _a.call(formData)),
            data: formData
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            params: {
              query: parameters.query,
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      addCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
            method: "POST",
            data: {
              usernames: parameters.usernames,
              accountIds: parameters.accountIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      removeCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
            method: "DELETE",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            data: {
              usernames: parameters.usernames,
              accountIds: parameters.accountIds
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getArticles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/knowledgebase/article`,
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            params: {
              query: parameters.query,
              highlight: parameters.highlight,
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getQueues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue`,
            method: "GET",
            params: {
              includeCount: parameters.includeCount,
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getQueue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue/${parameters.queueId}`,
            method: "GET",
            params: {
              includeCount: parameters.includeCount
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getIssuesInQueue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue/${parameters.queueId}/issue`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype`,
            method: "GET",
            params: {
              groupId: parameters.groupId,
              expand: parameters.expand,
              searchQuery: parameters.searchQuery,
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      createRequestType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype`,
            method: "POST",
            headers: {
              "X-ExperimentalApi": "opt-in"
            },
            data: {
              issueTypeId: parameters.issueTypeId,
              name: parameters.name,
              description: parameters.description,
              helpText: parameters.helpText
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestTypeById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteRequestType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}`,
            method: "DELETE",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestTypeFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/field`,
            method: "GET",
            params: {
              expand: parameters.expand
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getPropertiesKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property`,
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
            method: "GET",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      setProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
            method: "PUT",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      deleteProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
            method: "DELETE",
            headers: {
              "X-ExperimentalApi": "opt-in"
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
      getRequestTypeGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const config = {
            url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttypegroup`,
            method: "GET",
            params: {
              start: parameters.start,
              limit: parameters.limit
            }
          };
          return this.client.sendRequest(config, callback);
        });
      }
    };
    exports2.ServiceDesk = ServiceDesk;
  }
});

// node_modules/jira.js/out/serviceDesk/models/additionalComment.js
var require_additionalComment = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/additionalComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/approval.js
var require_approval = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/approval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/approvalDecisionRequest.js
var require_approvalDecisionRequest = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/approvalDecisionRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/approver.js
var require_approver = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/approver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/article.js
var require_article = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/article.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/attachment.js
var require_attachment3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/attachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/attachmentCreate.js
var require_attachmentCreate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/attachmentCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/attachmentCreateResult.js
var require_attachmentCreateResult = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/attachmentCreateResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/attachmentLink.js
var require_attachmentLink = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/attachmentLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/avatarUrls.js
var require_avatarUrls4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/avatarUrls.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/comment.js
var require_comment3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/comment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/commentCreate.js
var require_commentCreate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/commentCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/content.js
var require_content = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/content.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/csatFeedbackFull.js
var require_csatFeedbackFull = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/csatFeedbackFull.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerCreate.js
var require_customerCreate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequest.js
var require_customerRequest = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequestAction.js
var require_customerRequestAction = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequestAction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequestActions.js
var require_customerRequestActions = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequestActions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequestCreateMeta.js
var require_customerRequestCreateMeta = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequestCreateMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequestFieldValue.js
var require_customerRequestFieldValue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequestFieldValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequestLink.js
var require_customerRequestLink = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequestLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerRequestStatus.js
var require_customerRequestStatus = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerRequestStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerTransition.js
var require_customerTransition = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/customerTransitionExecution.js
var require_customerTransitionExecution = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/customerTransitionExecution.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/date.js
var require_date = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/date.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/duration.js
var require_duration = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/duration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/entityProperty.js
var require_entityProperty3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/entityProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/insightWorkspace.js
var require_insightWorkspace = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/insightWorkspace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/issue.js
var require_issue5 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/issue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/issueTransition.js
var require_issueTransition4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/issueTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/jsonType.js
var require_jsonType4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/jsonType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/organization.js
var require_organization2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/organization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/organizationCreate.js
var require_organizationCreate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/organizationCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/organizationServiceDeskUpdate.js
var require_organizationServiceDeskUpdate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/organizationServiceDeskUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedApproval.js
var require_pagedApproval = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedApproval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedArticle.js
var require_pagedArticle = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedArticle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedAttachment.js
var require_pagedAttachment = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedComment.js
var require_pagedComment = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedCustomerRequest.js
var require_pagedCustomerRequest = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedCustomerRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedCustomerRequestStatus.js
var require_pagedCustomerRequestStatus = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedCustomerRequestStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedCustomerTransition.js
var require_pagedCustomerTransition = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedCustomerTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedInsightWorkspace.js
var require_pagedInsightWorkspace = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedInsightWorkspace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedIssue.js
var require_pagedIssue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedIssue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedLink.js
var require_pagedLink = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedOrganization.js
var require_pagedOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedQueue.js
var require_pagedQueue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedQueue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedRequestType.js
var require_pagedRequestType = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedRequestType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedRequestTypeGroup.js
var require_pagedRequestTypeGroup = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedRequestTypeGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedServiceDesk.js
var require_pagedServiceDesk = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedServiceDesk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedSlaInformation.js
var require_pagedSlaInformation = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedSlaInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/pagedUser.js
var require_pagedUser = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/pagedUser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/propertyKey.js
var require_propertyKey3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/propertyKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/propertyKeys.js
var require_propertyKeys3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/propertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/queue.js
var require_queue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/queue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/renderedValue.js
var require_renderedValue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/renderedValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestCreate.js
var require_requestCreate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestNotificationSubscription.js
var require_requestNotificationSubscription = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestNotificationSubscription.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestParticipantUpdate.js
var require_requestParticipantUpdate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestParticipantUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestType.js
var require_requestType2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestTypeCreate.js
var require_requestTypeCreate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestTypeCreate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestTypeField.js
var require_requestTypeField = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestTypeField.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestTypeFieldValue.js
var require_requestTypeFieldValue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestTypeFieldValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestTypeGroup.js
var require_requestTypeGroup = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestTypeGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestTypeIcon.js
var require_requestTypeIcon = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestTypeIcon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/requestTypeIconLink.js
var require_requestTypeIconLink = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/requestTypeIconLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/selfLink.js
var require_selfLink = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/selfLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/serviceDesk.js
var require_serviceDesk2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/serviceDesk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/serviceDeskCustomer.js
var require_serviceDeskCustomer = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/serviceDeskCustomer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/slaInformation.js
var require_slaInformation = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/slaInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/slaInformationCompletedCycle.js
var require_slaInformationCompletedCycle = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/slaInformationCompletedCycle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/slaInformationOngoingCycle.js
var require_slaInformationOngoingCycle = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/slaInformationOngoingCycle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/softwareInfo.js
var require_softwareInfo = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/softwareInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/source.js
var require_source = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/source.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/statusCategory.js
var require_statusCategory4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/statusCategory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/statusDetails.js
var require_statusDetails3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/statusDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/user.js
var require_user4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/user.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/userDetails.js
var require_userDetails3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/userDetails.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/userLink.js
var require_userLink = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/userLink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/usersOrganizationUpdate.js
var require_usersOrganizationUpdate = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/usersOrganizationUpdate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/models/index.js
var require_models4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_additionalComment(), exports2);
    tslib_1.__exportStar(require_approval(), exports2);
    tslib_1.__exportStar(require_approvalDecisionRequest(), exports2);
    tslib_1.__exportStar(require_approver(), exports2);
    tslib_1.__exportStar(require_article(), exports2);
    tslib_1.__exportStar(require_attachment3(), exports2);
    tslib_1.__exportStar(require_attachmentCreate(), exports2);
    tslib_1.__exportStar(require_attachmentCreateResult(), exports2);
    tslib_1.__exportStar(require_attachmentLink(), exports2);
    tslib_1.__exportStar(require_avatarUrls4(), exports2);
    tslib_1.__exportStar(require_comment3(), exports2);
    tslib_1.__exportStar(require_commentCreate(), exports2);
    tslib_1.__exportStar(require_content(), exports2);
    tslib_1.__exportStar(require_csatFeedbackFull(), exports2);
    tslib_1.__exportStar(require_customerCreate(), exports2);
    tslib_1.__exportStar(require_customerRequest(), exports2);
    tslib_1.__exportStar(require_customerRequestAction(), exports2);
    tslib_1.__exportStar(require_customerRequestActions(), exports2);
    tslib_1.__exportStar(require_customerRequestCreateMeta(), exports2);
    tslib_1.__exportStar(require_customerRequestFieldValue(), exports2);
    tslib_1.__exportStar(require_customerRequestLink(), exports2);
    tslib_1.__exportStar(require_customerRequestStatus(), exports2);
    tslib_1.__exportStar(require_customerTransition(), exports2);
    tslib_1.__exportStar(require_customerTransitionExecution(), exports2);
    tslib_1.__exportStar(require_date(), exports2);
    tslib_1.__exportStar(require_duration(), exports2);
    tslib_1.__exportStar(require_entityProperty3(), exports2);
    tslib_1.__exportStar(require_insightWorkspace(), exports2);
    tslib_1.__exportStar(require_issue5(), exports2);
    tslib_1.__exportStar(require_issueTransition4(), exports2);
    tslib_1.__exportStar(require_jsonType4(), exports2);
    tslib_1.__exportStar(require_organization2(), exports2);
    tslib_1.__exportStar(require_organizationCreate(), exports2);
    tslib_1.__exportStar(require_organizationServiceDeskUpdate(), exports2);
    tslib_1.__exportStar(require_pagedApproval(), exports2);
    tslib_1.__exportStar(require_pagedArticle(), exports2);
    tslib_1.__exportStar(require_pagedAttachment(), exports2);
    tslib_1.__exportStar(require_pagedComment(), exports2);
    tslib_1.__exportStar(require_pagedCustomerRequest(), exports2);
    tslib_1.__exportStar(require_pagedCustomerRequestStatus(), exports2);
    tslib_1.__exportStar(require_pagedCustomerTransition(), exports2);
    tslib_1.__exportStar(require_pagedInsightWorkspace(), exports2);
    tslib_1.__exportStar(require_pagedIssue(), exports2);
    tslib_1.__exportStar(require_pagedLink(), exports2);
    tslib_1.__exportStar(require_pagedOrganization(), exports2);
    tslib_1.__exportStar(require_pagedQueue(), exports2);
    tslib_1.__exportStar(require_pagedRequestType(), exports2);
    tslib_1.__exportStar(require_pagedRequestTypeGroup(), exports2);
    tslib_1.__exportStar(require_pagedServiceDesk(), exports2);
    tslib_1.__exportStar(require_pagedSlaInformation(), exports2);
    tslib_1.__exportStar(require_pagedUser(), exports2);
    tslib_1.__exportStar(require_propertyKey3(), exports2);
    tslib_1.__exportStar(require_propertyKeys3(), exports2);
    tslib_1.__exportStar(require_queue(), exports2);
    tslib_1.__exportStar(require_renderedValue(), exports2);
    tslib_1.__exportStar(require_requestCreate(), exports2);
    tslib_1.__exportStar(require_requestNotificationSubscription(), exports2);
    tslib_1.__exportStar(require_requestParticipantUpdate(), exports2);
    tslib_1.__exportStar(require_requestType2(), exports2);
    tslib_1.__exportStar(require_requestTypeCreate(), exports2);
    tslib_1.__exportStar(require_requestTypeField(), exports2);
    tslib_1.__exportStar(require_requestTypeFieldValue(), exports2);
    tslib_1.__exportStar(require_requestTypeGroup(), exports2);
    tslib_1.__exportStar(require_requestTypeIcon(), exports2);
    tslib_1.__exportStar(require_requestTypeIconLink(), exports2);
    tslib_1.__exportStar(require_selfLink(), exports2);
    tslib_1.__exportStar(require_serviceDesk2(), exports2);
    tslib_1.__exportStar(require_serviceDeskCustomer(), exports2);
    tslib_1.__exportStar(require_slaInformation(), exports2);
    tslib_1.__exportStar(require_slaInformationCompletedCycle(), exports2);
    tslib_1.__exportStar(require_slaInformationOngoingCycle(), exports2);
    tslib_1.__exportStar(require_softwareInfo(), exports2);
    tslib_1.__exportStar(require_source(), exports2);
    tslib_1.__exportStar(require_statusCategory4(), exports2);
    tslib_1.__exportStar(require_statusDetails3(), exports2);
    tslib_1.__exportStar(require_user4(), exports2);
    tslib_1.__exportStar(require_userDetails3(), exports2);
    tslib_1.__exportStar(require_userLink(), exports2);
    tslib_1.__exportStar(require_usersOrganizationUpdate(), exports2);
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/addCustomers.js
var require_addCustomers = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/addCustomers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/addOrganization.js
var require_addOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/addOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/addRequestParticipants.js
var require_addRequestParticipants = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/addRequestParticipants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/addUsersToOrganization.js
var require_addUsersToOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/addUsersToOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/answerApproval.js
var require_answerApproval = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/answerApproval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/attachTemporaryFile.js
var require_attachTemporaryFile = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/attachTemporaryFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/createAttachment.js
var require_createAttachment = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/createAttachment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/createCustomer.js
var require_createCustomer = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/createCustomer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/createCustomerRequest.js
var require_createCustomerRequest = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/createCustomerRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/createOrganization.js
var require_createOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/createOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/createRequestComment.js
var require_createRequestComment = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/createRequestComment.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/createRequestType.js
var require_createRequestType = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/createRequestType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/deleteFeedback.js
var require_deleteFeedback = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/deleteFeedback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/deleteOrganization.js
var require_deleteOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/deleteOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/deleteOrganizationProperty.js
var require_deleteOrganizationProperty = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/deleteOrganizationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/deleteProperty.js
var require_deleteProperty2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/deleteProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/deleteRequestType.js
var require_deleteRequestType = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/deleteRequestType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getAllRequestTypes.js
var require_getAllRequestTypes = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getAllRequestTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getApprovalById.js
var require_getApprovalById = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getApprovalById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getApprovals.js
var require_getApprovals = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getApprovals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getArticles.js
var require_getArticles = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getArticles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getAttachmentContent.js
var require_getAttachmentContent3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getAttachmentContent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getAttachmentsForRequest.js
var require_getAttachmentsForRequest = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getAttachmentsForRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getAttachmentThumbnail.js
var require_getAttachmentThumbnail3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getAttachmentThumbnail.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getCommentAttachments.js
var require_getCommentAttachments = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getCommentAttachments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getCustomerRequestByIdOrKey.js
var require_getCustomerRequestByIdOrKey = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getCustomerRequestByIdOrKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getCustomerRequests.js
var require_getCustomerRequests = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getCustomerRequests.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getCustomerRequestStatus.js
var require_getCustomerRequestStatus = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getCustomerRequestStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getCustomers.js
var require_getCustomers = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getCustomers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getCustomerTransitions.js
var require_getCustomerTransitions = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getCustomerTransitions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getFeedback.js
var require_getFeedback = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getFeedback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getInsightWorkspaces.js
var require_getInsightWorkspaces = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getInsightWorkspaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getIssuesInQueue.js
var require_getIssuesInQueue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getIssuesInQueue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getOrganization.js
var require_getOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getOrganizationProperty.js
var require_getOrganizationProperty = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getOrganizationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getOrganizationPropertyKeys.js
var require_getOrganizationPropertyKeys = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getOrganizationPropertyKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getOrganizations.js
var require_getOrganizations = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getOrganizations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getPropertiesKeys.js
var require_getPropertiesKeys2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getPropertiesKeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getProperty.js
var require_getProperty2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getQueue.js
var require_getQueue = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getQueue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getQueues.js
var require_getQueues = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getQueues.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestCommentById.js
var require_getRequestCommentById = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestCommentById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestComments.js
var require_getRequestComments = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestComments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestParticipants.js
var require_getRequestParticipants = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestParticipants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestTypeById.js
var require_getRequestTypeById = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestTypeById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestTypeFields.js
var require_getRequestTypeFields = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestTypeFields.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestTypeGroups.js
var require_getRequestTypeGroups = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestTypeGroups.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getRequestTypes.js
var require_getRequestTypes = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getRequestTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getServiceDeskById.js
var require_getServiceDeskById = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getServiceDeskById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getServiceDesks.js
var require_getServiceDesks = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getServiceDesks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getSlaInformation.js
var require_getSlaInformation = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getSlaInformation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getSlaInformationById.js
var require_getSlaInformationById = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getSlaInformationById.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getSubscriptionStatus.js
var require_getSubscriptionStatus = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getSubscriptionStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/getUsersInOrganization.js
var require_getUsersInOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/getUsersInOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/performCustomerTransition.js
var require_performCustomerTransition = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/performCustomerTransition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/postFeedback.js
var require_postFeedback = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/postFeedback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/removeCustomers.js
var require_removeCustomers = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/removeCustomers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/removeOrganization.js
var require_removeOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/removeOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/removeRequestParticipants.js
var require_removeRequestParticipants = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/removeRequestParticipants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/removeUsersFromOrganization.js
var require_removeUsersFromOrganization = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/removeUsersFromOrganization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/setOrganizationProperty.js
var require_setOrganizationProperty = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/setOrganizationProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/setProperty.js
var require_setProperty2 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/setProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/subscribe.js
var require_subscribe = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/subscribe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/unsubscribe.js
var require_unsubscribe = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/unsubscribe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/serviceDesk/parameters/index.js
var require_parameters4 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/parameters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_addCustomers(), exports2);
    tslib_1.__exportStar(require_addOrganization(), exports2);
    tslib_1.__exportStar(require_addRequestParticipants(), exports2);
    tslib_1.__exportStar(require_addUsersToOrganization(), exports2);
    tslib_1.__exportStar(require_answerApproval(), exports2);
    tslib_1.__exportStar(require_attachTemporaryFile(), exports2);
    tslib_1.__exportStar(require_createAttachment(), exports2);
    tslib_1.__exportStar(require_createCustomer(), exports2);
    tslib_1.__exportStar(require_createCustomerRequest(), exports2);
    tslib_1.__exportStar(require_createOrganization(), exports2);
    tslib_1.__exportStar(require_createRequestComment(), exports2);
    tslib_1.__exportStar(require_createRequestType(), exports2);
    tslib_1.__exportStar(require_deleteFeedback(), exports2);
    tslib_1.__exportStar(require_deleteOrganization(), exports2);
    tslib_1.__exportStar(require_deleteOrganizationProperty(), exports2);
    tslib_1.__exportStar(require_deleteProperty2(), exports2);
    tslib_1.__exportStar(require_deleteProperty2(), exports2);
    tslib_1.__exportStar(require_deleteRequestType(), exports2);
    tslib_1.__exportStar(require_getAllRequestTypes(), exports2);
    tslib_1.__exportStar(require_getApprovalById(), exports2);
    tslib_1.__exportStar(require_getApprovals(), exports2);
    tslib_1.__exportStar(require_getArticles(), exports2);
    tslib_1.__exportStar(require_getArticles(), exports2);
    tslib_1.__exportStar(require_getAttachmentContent3(), exports2);
    tslib_1.__exportStar(require_getAttachmentsForRequest(), exports2);
    tslib_1.__exportStar(require_getAttachmentThumbnail3(), exports2);
    tslib_1.__exportStar(require_getCommentAttachments(), exports2);
    tslib_1.__exportStar(require_getCustomerRequestByIdOrKey(), exports2);
    tslib_1.__exportStar(require_getCustomerRequests(), exports2);
    tslib_1.__exportStar(require_getCustomerRequestStatus(), exports2);
    tslib_1.__exportStar(require_getCustomers(), exports2);
    tslib_1.__exportStar(require_getCustomerTransitions(), exports2);
    tslib_1.__exportStar(require_getFeedback(), exports2);
    tslib_1.__exportStar(require_getInsightWorkspaces(), exports2);
    tslib_1.__exportStar(require_getIssuesInQueue(), exports2);
    tslib_1.__exportStar(require_getOrganization(), exports2);
    tslib_1.__exportStar(require_getOrganizationProperty(), exports2);
    tslib_1.__exportStar(require_getOrganizationPropertyKeys(), exports2);
    tslib_1.__exportStar(require_getOrganizations(), exports2);
    tslib_1.__exportStar(require_getOrganizations(), exports2);
    tslib_1.__exportStar(require_getPropertiesKeys2(), exports2);
    tslib_1.__exportStar(require_getPropertiesKeys2(), exports2);
    tslib_1.__exportStar(require_getProperty2(), exports2);
    tslib_1.__exportStar(require_getProperty2(), exports2);
    tslib_1.__exportStar(require_getQueue(), exports2);
    tslib_1.__exportStar(require_getQueues(), exports2);
    tslib_1.__exportStar(require_getRequestCommentById(), exports2);
    tslib_1.__exportStar(require_getRequestComments(), exports2);
    tslib_1.__exportStar(require_getRequestParticipants(), exports2);
    tslib_1.__exportStar(require_getRequestTypeById(), exports2);
    tslib_1.__exportStar(require_getRequestTypeFields(), exports2);
    tslib_1.__exportStar(require_getRequestTypeGroups(), exports2);
    tslib_1.__exportStar(require_getRequestTypes(), exports2);
    tslib_1.__exportStar(require_getServiceDeskById(), exports2);
    tslib_1.__exportStar(require_getServiceDesks(), exports2);
    tslib_1.__exportStar(require_getSlaInformation(), exports2);
    tslib_1.__exportStar(require_getSlaInformationById(), exports2);
    tslib_1.__exportStar(require_getSubscriptionStatus(), exports2);
    tslib_1.__exportStar(require_getUsersInOrganization(), exports2);
    tslib_1.__exportStar(require_performCustomerTransition(), exports2);
    tslib_1.__exportStar(require_postFeedback(), exports2);
    tslib_1.__exportStar(require_removeCustomers(), exports2);
    tslib_1.__exportStar(require_removeOrganization(), exports2);
    tslib_1.__exportStar(require_removeRequestParticipants(), exports2);
    tslib_1.__exportStar(require_removeUsersFromOrganization(), exports2);
    tslib_1.__exportStar(require_setOrganizationProperty(), exports2);
    tslib_1.__exportStar(require_setProperty2(), exports2);
    tslib_1.__exportStar(require_setProperty2(), exports2);
    tslib_1.__exportStar(require_subscribe(), exports2);
    tslib_1.__exportStar(require_unsubscribe(), exports2);
  }
});

// node_modules/jira.js/out/serviceDesk/client/serviceDeskClient.js
var require_serviceDeskClient = __commonJS({
  "node_modules/jira.js/out/serviceDesk/client/serviceDeskClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceDeskClient = void 0;
    var clients_1 = require_clients();
    var customer_1 = require_customer();
    var info_1 = require_info();
    var insight_1 = require_insight();
    var knowledgeBase_1 = require_knowledgeBase();
    var organization_1 = require_organization();
    var request_1 = require_request3();
    var requestType_1 = require_requestType();
    var serviceDesk_1 = require_serviceDesk();
    var ServiceDeskClient = class extends clients_1.BaseClient {
      constructor() {
        super(...arguments);
        this.customer = new customer_1.Customer(this);
        this.info = new info_1.Info(this);
        this.insights = new insight_1.Insight(this);
        this.knowledgeBase = new knowledgeBase_1.KnowledgeBase(this);
        this.organization = new organization_1.Organization(this);
        this.request = new request_1.Request(this);
        this.requestType = new requestType_1.RequestType(this);
        this.serviceDesk = new serviceDesk_1.ServiceDesk(this);
      }
    };
    exports2.ServiceDeskClient = ServiceDeskClient;
  }
});

// node_modules/jira.js/out/serviceDesk/client/index.js
var require_client5 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/client/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_serviceDeskClient(), exports2);
  }
});

// node_modules/jira.js/out/serviceDesk/index.js
var require_serviceDesk3 = __commonJS({
  "node_modules/jira.js/out/serviceDesk/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceDeskParameters = exports2.ServiceDeskModels = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_customer(), exports2);
    tslib_1.__exportStar(require_info(), exports2);
    tslib_1.__exportStar(require_insight(), exports2);
    tslib_1.__exportStar(require_knowledgeBase(), exports2);
    tslib_1.__exportStar(require_organization(), exports2);
    tslib_1.__exportStar(require_request3(), exports2);
    tslib_1.__exportStar(require_requestType(), exports2);
    tslib_1.__exportStar(require_serviceDesk(), exports2);
    exports2.ServiceDeskModels = require_models4();
    exports2.ServiceDeskParameters = require_parameters4();
    tslib_1.__exportStar(require_client5(), exports2);
  }
});

// node_modules/jira.js/out/clients/index.js
var require_clients = __commonJS({
  "node_modules/jira.js/out/clients/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceDeskParameters = exports2.ServiceDeskModels = exports2.ServiceDeskClient = exports2.Version3Parameters = exports2.Version3Models = exports2.Version3Client = exports2.Version2Parameters = exports2.Version2Models = exports2.Version2Client = exports2.AgileParameters = exports2.AgileModels = exports2.AgileClient = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_baseClient(), exports2);
    tslib_1.__exportStar(require_client2(), exports2);
    tslib_1.__exportStar(require_httpException(), exports2);
    var agile_1 = require_agile();
    Object.defineProperty(exports2, "AgileClient", { enumerable: true, get: function() {
      return agile_1.AgileClient;
    } });
    Object.defineProperty(exports2, "AgileModels", { enumerable: true, get: function() {
      return agile_1.AgileModels;
    } });
    Object.defineProperty(exports2, "AgileParameters", { enumerable: true, get: function() {
      return agile_1.AgileParameters;
    } });
    var version2_1 = require_version22();
    Object.defineProperty(exports2, "Version2Client", { enumerable: true, get: function() {
      return version2_1.Version2Client;
    } });
    Object.defineProperty(exports2, "Version2Models", { enumerable: true, get: function() {
      return version2_1.Version2Models;
    } });
    Object.defineProperty(exports2, "Version2Parameters", { enumerable: true, get: function() {
      return version2_1.Version2Parameters;
    } });
    var version3_1 = require_version32();
    Object.defineProperty(exports2, "Version3Client", { enumerable: true, get: function() {
      return version3_1.Version3Client;
    } });
    Object.defineProperty(exports2, "Version3Models", { enumerable: true, get: function() {
      return version3_1.Version3Models;
    } });
    Object.defineProperty(exports2, "Version3Parameters", { enumerable: true, get: function() {
      return version3_1.Version3Parameters;
    } });
    var serviceDesk_1 = require_serviceDesk3();
    Object.defineProperty(exports2, "ServiceDeskClient", { enumerable: true, get: function() {
      return serviceDesk_1.ServiceDeskClient;
    } });
    Object.defineProperty(exports2, "ServiceDeskModels", { enumerable: true, get: function() {
      return serviceDesk_1.ServiceDeskModels;
    } });
    Object.defineProperty(exports2, "ServiceDeskParameters", { enumerable: true, get: function() {
      return serviceDesk_1.ServiceDeskParameters;
    } });
  }
});

// node_modules/jira.js/out/agile/client/agileClient.js
var require_agileClient = __commonJS({
  "node_modules/jira.js/out/agile/client/agileClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgileClient = void 0;
    var clients_1 = require_clients();
    var __1 = require_agile();
    var AgileClient = class extends clients_1.BaseClient {
      constructor() {
        super(...arguments);
        this.backlog = new __1.Backlog(this);
        this.board = new __1.Board(this);
        this.builds = new __1.Builds(this);
        this.deployments = new __1.Deployments(this);
        this.developmentInformation = new __1.DevelopmentInformation(this);
        this.devopsComponents = new __1.DevopsComponents(this);
        this.epic = new __1.Epic(this);
        this.featureFlags = new __1.FeatureFlags(this);
        this.issue = new __1.Issue(this);
        this.operations = new __1.Operations(this);
        this.remoteLinks = new __1.RemoteLinks(this);
        this.securityInformation = new __1.SecurityInformation(this);
        this.sprint = new __1.Sprint(this);
      }
    };
    exports2.AgileClient = AgileClient;
  }
});

// node_modules/jira.js/out/agile/client/index.js
var require_client6 = __commonJS({
  "node_modules/jira.js/out/agile/client/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_agileClient(), exports2);
  }
});

// node_modules/jira.js/out/agile/index.js
var require_agile = __commonJS({
  "node_modules/jira.js/out/agile/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AgileParameters = exports2.AgileModels = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_backlog(), exports2);
    tslib_1.__exportStar(require_board(), exports2);
    tslib_1.__exportStar(require_builds(), exports2);
    tslib_1.__exportStar(require_deployments(), exports2);
    tslib_1.__exportStar(require_developmentInformation(), exports2);
    tslib_1.__exportStar(require_devopsComponents(), exports2);
    tslib_1.__exportStar(require_epic(), exports2);
    tslib_1.__exportStar(require_featureFlags(), exports2);
    tslib_1.__exportStar(require_issue(), exports2);
    tslib_1.__exportStar(require_operations(), exports2);
    tslib_1.__exportStar(require_remoteLinks(), exports2);
    tslib_1.__exportStar(require_securityInformation(), exports2);
    tslib_1.__exportStar(require_sprint(), exports2);
    exports2.AgileModels = require_models();
    exports2.AgileParameters = require_parameters();
    tslib_1.__exportStar(require_client6(), exports2);
  }
});

// node_modules/jira.js/out/createClient.js
var require_createClient = __commonJS({
  "node_modules/jira.js/out/createClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientType = void 0;
    exports2.createClient = createClient;
    var agile_1 = require_agile();
    var clients_1 = require_clients();
    var serviceDesk_1 = require_serviceDesk3();
    var version2_1 = require_version22();
    var version3_1 = require_version32();
    var ClientType;
    (function(ClientType2) {
      ClientType2["Agile"] = "agile";
      ClientType2["Version2"] = "version2";
      ClientType2["Version3"] = "version3";
      ClientType2["ServiceDesk"] = "serviceDesk";
    })(ClientType || (exports2.ClientType = ClientType = {}));
    function createClient(clientType, config) {
      switch (clientType) {
        case ClientType.Agile:
          return new agile_1.AgileClient(config);
        case ClientType.Version2:
          return new version2_1.Version2Client(config);
        case ClientType.Version3:
          return new version3_1.Version3Client(config);
        case ClientType.ServiceDesk:
          return new serviceDesk_1.ServiceDeskClient(config);
        default:
          return new clients_1.BaseClient(config);
      }
    }
  }
});

// node_modules/jira.js/out/utilityTypes.js
var require_utilityTypes = __commonJS({
  "node_modules/jira.js/out/utilityTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/config.js
var require_config = __commonJS({
  "node_modules/jira.js/out/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/callback.js
var require_callback = __commonJS({
  "node_modules/jira.js/out/callback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/paginated.js
var require_paginated = __commonJS({
  "node_modules/jira.js/out/paginated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/requestConfig.js
var require_requestConfig = __commonJS({
  "node_modules/jira.js/out/requestConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/jira.js/out/index.js
var require_out = __commonJS({
  "node_modules/jira.js/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceDesk = exports2.Version3 = exports2.Version2 = exports2.Agile = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createClient(), exports2);
    tslib_1.__exportStar(require_clients(), exports2);
    tslib_1.__exportStar(require_utilityTypes(), exports2);
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_callback(), exports2);
    tslib_1.__exportStar(require_paginated(), exports2);
    tslib_1.__exportStar(require_requestConfig(), exports2);
    exports2.Agile = require_agile();
    exports2.Version2 = require_version22();
    exports2.Version3 = require_version32();
    exports2.ServiceDesk = require_serviceDesk3();
  }
});

// node_modules/yaml/dist/nodes/identity.js
var require_identity = __commonJS({
  "node_modules/yaml/dist/nodes/identity.js"(exports2) {
    "use strict";
    var ALIAS = Symbol.for("yaml.alias");
    var DOC = Symbol.for("yaml.document");
    var MAP = Symbol.for("yaml.map");
    var PAIR = Symbol.for("yaml.pair");
    var SCALAR = Symbol.for("yaml.scalar");
    var SEQ = Symbol.for("yaml.seq");
    var NODE_TYPE = Symbol.for("yaml.node.type");
    var isAlias = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
    var isDocument = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC;
    var isMap = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP;
    var isPair = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
    var isScalar = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
    var isSeq = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
    function isCollection(node) {
      if (node && typeof node === "object")
        switch (node[NODE_TYPE]) {
          case MAP:
          case SEQ:
            return true;
        }
      return false;
    }
    function isNode(node) {
      if (node && typeof node === "object")
        switch (node[NODE_TYPE]) {
          case ALIAS:
          case MAP:
          case SCALAR:
          case SEQ:
            return true;
        }
      return false;
    }
    var hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;
    exports2.ALIAS = ALIAS;
    exports2.DOC = DOC;
    exports2.MAP = MAP;
    exports2.NODE_TYPE = NODE_TYPE;
    exports2.PAIR = PAIR;
    exports2.SCALAR = SCALAR;
    exports2.SEQ = SEQ;
    exports2.hasAnchor = hasAnchor;
    exports2.isAlias = isAlias;
    exports2.isCollection = isCollection;
    exports2.isDocument = isDocument;
    exports2.isMap = isMap;
    exports2.isNode = isNode;
    exports2.isPair = isPair;
    exports2.isScalar = isScalar;
    exports2.isSeq = isSeq;
  }
});

// node_modules/yaml/dist/visit.js
var require_visit = __commonJS({
  "node_modules/yaml/dist/visit.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var BREAK = Symbol("break visit");
    var SKIP = Symbol("skip children");
    var REMOVE = Symbol("remove node");
    function visit(node, visitor) {
      const visitor_ = initVisitor(visitor);
      if (identity.isDocument(node)) {
        const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
          node.contents = null;
      } else
        visit_(null, node, visitor_, Object.freeze([]));
    }
    visit.BREAK = BREAK;
    visit.SKIP = SKIP;
    visit.REMOVE = REMOVE;
    function visit_(key, node, visitor, path3) {
      const ctrl = callVisitor(key, node, visitor, path3);
      if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
        replaceNode(key, path3, ctrl);
        return visit_(key, ctrl, visitor, path3);
      }
      if (typeof ctrl !== "symbol") {
        if (identity.isCollection(node)) {
          path3 = Object.freeze(path3.concat(node));
          for (let i = 0; i < node.items.length; ++i) {
            const ci = visit_(i, node.items[i], visitor, path3);
            if (typeof ci === "number")
              i = ci - 1;
            else if (ci === BREAK)
              return BREAK;
            else if (ci === REMOVE) {
              node.items.splice(i, 1);
              i -= 1;
            }
          }
        } else if (identity.isPair(node)) {
          path3 = Object.freeze(path3.concat(node));
          const ck = visit_("key", node.key, visitor, path3);
          if (ck === BREAK)
            return BREAK;
          else if (ck === REMOVE)
            node.key = null;
          const cv = visit_("value", node.value, visitor, path3);
          if (cv === BREAK)
            return BREAK;
          else if (cv === REMOVE)
            node.value = null;
        }
      }
      return ctrl;
    }
    async function visitAsync(node, visitor) {
      const visitor_ = initVisitor(visitor);
      if (identity.isDocument(node)) {
        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
        if (cd === REMOVE)
          node.contents = null;
      } else
        await visitAsync_(null, node, visitor_, Object.freeze([]));
    }
    visitAsync.BREAK = BREAK;
    visitAsync.SKIP = SKIP;
    visitAsync.REMOVE = REMOVE;
    async function visitAsync_(key, node, visitor, path3) {
      const ctrl = await callVisitor(key, node, visitor, path3);
      if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
        replaceNode(key, path3, ctrl);
        return visitAsync_(key, ctrl, visitor, path3);
      }
      if (typeof ctrl !== "symbol") {
        if (identity.isCollection(node)) {
          path3 = Object.freeze(path3.concat(node));
          for (let i = 0; i < node.items.length; ++i) {
            const ci = await visitAsync_(i, node.items[i], visitor, path3);
            if (typeof ci === "number")
              i = ci - 1;
            else if (ci === BREAK)
              return BREAK;
            else if (ci === REMOVE) {
              node.items.splice(i, 1);
              i -= 1;
            }
          }
        } else if (identity.isPair(node)) {
          path3 = Object.freeze(path3.concat(node));
          const ck = await visitAsync_("key", node.key, visitor, path3);
          if (ck === BREAK)
            return BREAK;
          else if (ck === REMOVE)
            node.key = null;
          const cv = await visitAsync_("value", node.value, visitor, path3);
          if (cv === BREAK)
            return BREAK;
          else if (cv === REMOVE)
            node.value = null;
        }
      }
      return ctrl;
    }
    function initVisitor(visitor) {
      if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
        return Object.assign({
          Alias: visitor.Node,
          Map: visitor.Node,
          Scalar: visitor.Node,
          Seq: visitor.Node
        }, visitor.Value && {
          Map: visitor.Value,
          Scalar: visitor.Value,
          Seq: visitor.Value
        }, visitor.Collection && {
          Map: visitor.Collection,
          Seq: visitor.Collection
        }, visitor);
      }
      return visitor;
    }
    function callVisitor(key, node, visitor, path3) {
      if (typeof visitor === "function")
        return visitor(key, node, path3);
      if (identity.isMap(node))
        return visitor.Map?.(key, node, path3);
      if (identity.isSeq(node))
        return visitor.Seq?.(key, node, path3);
      if (identity.isPair(node))
        return visitor.Pair?.(key, node, path3);
      if (identity.isScalar(node))
        return visitor.Scalar?.(key, node, path3);
      if (identity.isAlias(node))
        return visitor.Alias?.(key, node, path3);
      return void 0;
    }
    function replaceNode(key, path3, node) {
      const parent = path3[path3.length - 1];
      if (identity.isCollection(parent)) {
        parent.items[key] = node;
      } else if (identity.isPair(parent)) {
        if (key === "key")
          parent.key = node;
        else
          parent.value = node;
      } else if (identity.isDocument(parent)) {
        parent.contents = node;
      } else {
        const pt = identity.isAlias(parent) ? "alias" : "scalar";
        throw new Error(`Cannot replace node with ${pt} parent`);
      }
    }
    exports2.visit = visit;
    exports2.visitAsync = visitAsync;
  }
});

// node_modules/yaml/dist/doc/directives.js
var require_directives = __commonJS({
  "node_modules/yaml/dist/doc/directives.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var visit = require_visit();
    var escapeChars = {
      "!": "%21",
      ",": "%2C",
      "[": "%5B",
      "]": "%5D",
      "{": "%7B",
      "}": "%7D"
    };
    var escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]);
    var Directives = class _Directives {
      constructor(yaml3, tags) {
        this.docStart = null;
        this.docEnd = false;
        this.yaml = Object.assign({}, _Directives.defaultYaml, yaml3);
        this.tags = Object.assign({}, _Directives.defaultTags, tags);
      }
      clone() {
        const copy = new _Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
      }
      /**
       * During parsing, get a Directives instance for the current document and
       * update the stream state according to the current version's spec.
       */
      atDocument() {
        const res = new _Directives(this.yaml, this.tags);
        switch (this.yaml.version) {
          case "1.1":
            this.atNextDocument = true;
            break;
          case "1.2":
            this.atNextDocument = false;
            this.yaml = {
              explicit: _Directives.defaultYaml.explicit,
              version: "1.2"
            };
            this.tags = Object.assign({}, _Directives.defaultTags);
            break;
        }
        return res;
      }
      /**
       * @param onError - May be called even if the action was successful
       * @returns `true` on success
       */
      add(line, onError) {
        if (this.atNextDocument) {
          this.yaml = { explicit: _Directives.defaultYaml.explicit, version: "1.1" };
          this.tags = Object.assign({}, _Directives.defaultTags);
          this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch (name) {
          case "%TAG": {
            if (parts.length !== 2) {
              onError(0, "%TAG directive should contain exactly two parts");
              if (parts.length < 2)
                return false;
            }
            const [handle, prefix] = parts;
            this.tags[handle] = prefix;
            return true;
          }
          case "%YAML": {
            this.yaml.explicit = true;
            if (parts.length !== 1) {
              onError(0, "%YAML directive should contain exactly one part");
              return false;
            }
            const [version] = parts;
            if (version === "1.1" || version === "1.2") {
              this.yaml.version = version;
              return true;
            } else {
              const isValid = /^\d+\.\d+$/.test(version);
              onError(6, `Unsupported YAML version ${version}`, isValid);
              return false;
            }
          }
          default:
            onError(0, `Unknown directive ${name}`, true);
            return false;
        }
      }
      /**
       * Resolves a tag, matching handles to those defined in %TAG directives.
       *
       * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
       *   `'!local'` tag, or `null` if unresolvable.
       */
      tagName(source, onError) {
        if (source === "!")
          return "!";
        if (source[0] !== "!") {
          onError(`Not a valid tag: ${source}`);
          return null;
        }
        if (source[1] === "<") {
          const verbatim = source.slice(2, -1);
          if (verbatim === "!" || verbatim === "!!") {
            onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
            return null;
          }
          if (source[source.length - 1] !== ">")
            onError("Verbatim tags must end with a >");
          return verbatim;
        }
        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/s);
        if (!suffix)
          onError(`The ${source} tag has no suffix`);
        const prefix = this.tags[handle];
        if (prefix) {
          try {
            return prefix + decodeURIComponent(suffix);
          } catch (error) {
            onError(String(error));
            return null;
          }
        }
        if (handle === "!")
          return source;
        onError(`Could not resolve tag: ${source}`);
        return null;
      }
      /**
       * Given a fully resolved tag, returns its printable string form,
       * taking into account current tag prefixes and defaults.
       */
      tagString(tag) {
        for (const [handle, prefix] of Object.entries(this.tags)) {
          if (tag.startsWith(prefix))
            return handle + escapeTagName(tag.substring(prefix.length));
        }
        return tag[0] === "!" ? tag : `!<${tag}>`;
      }
      toString(doc) {
        const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
        const tagEntries = Object.entries(this.tags);
        let tagNames;
        if (doc && tagEntries.length > 0 && identity.isNode(doc.contents)) {
          const tags = {};
          visit.visit(doc.contents, (_key, node) => {
            if (identity.isNode(node) && node.tag)
              tags[node.tag] = true;
          });
          tagNames = Object.keys(tags);
        } else
          tagNames = [];
        for (const [handle, prefix] of tagEntries) {
          if (handle === "!!" && prefix === "tag:yaml.org,2002:")
            continue;
          if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
            lines.push(`%TAG ${handle} ${prefix}`);
        }
        return lines.join("\n");
      }
    };
    Directives.defaultYaml = { explicit: false, version: "1.2" };
    Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };
    exports2.Directives = Directives;
  }
});

// node_modules/yaml/dist/doc/anchors.js
var require_anchors = __commonJS({
  "node_modules/yaml/dist/doc/anchors.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var visit = require_visit();
    function anchorIsValid(anchor) {
      if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
        const sa = JSON.stringify(anchor);
        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
        throw new Error(msg);
      }
      return true;
    }
    function anchorNames(root) {
      const anchors = /* @__PURE__ */ new Set();
      visit.visit(root, {
        Value(_key, node) {
          if (node.anchor)
            anchors.add(node.anchor);
        }
      });
      return anchors;
    }
    function findNewAnchor(prefix, exclude) {
      for (let i = 1; true; ++i) {
        const name = `${prefix}${i}`;
        if (!exclude.has(name))
          return name;
      }
    }
    function createNodeAnchors(doc, prefix) {
      const aliasObjects = [];
      const sourceObjects = /* @__PURE__ */ new Map();
      let prevAnchors = null;
      return {
        onAnchor: (source) => {
          aliasObjects.push(source);
          if (!prevAnchors)
            prevAnchors = anchorNames(doc);
          const anchor = findNewAnchor(prefix, prevAnchors);
          prevAnchors.add(anchor);
          return anchor;
        },
        /**
         * With circular references, the source node is only resolved after all
         * of its child nodes are. This is why anchors are set only after all of
         * the nodes have been created.
         */
        setAnchors: () => {
          for (const source of aliasObjects) {
            const ref = sourceObjects.get(source);
            if (typeof ref === "object" && ref.anchor && (identity.isScalar(ref.node) || identity.isCollection(ref.node))) {
              ref.node.anchor = ref.anchor;
            } else {
              const error = new Error("Failed to resolve repeated object (this should not happen)");
              error.source = source;
              throw error;
            }
          }
        },
        sourceObjects
      };
    }
    exports2.anchorIsValid = anchorIsValid;
    exports2.anchorNames = anchorNames;
    exports2.createNodeAnchors = createNodeAnchors;
    exports2.findNewAnchor = findNewAnchor;
  }
});

// node_modules/yaml/dist/doc/applyReviver.js
var require_applyReviver = __commonJS({
  "node_modules/yaml/dist/doc/applyReviver.js"(exports2) {
    "use strict";
    function applyReviver(reviver, obj, key, val) {
      if (val && typeof val === "object") {
        if (Array.isArray(val)) {
          for (let i = 0, len = val.length; i < len; ++i) {
            const v0 = val[i];
            const v1 = applyReviver(reviver, val, String(i), v0);
            if (v1 === void 0)
              delete val[i];
            else if (v1 !== v0)
              val[i] = v1;
          }
        } else if (val instanceof Map) {
          for (const k of Array.from(val.keys())) {
            const v0 = val.get(k);
            const v1 = applyReviver(reviver, val, k, v0);
            if (v1 === void 0)
              val.delete(k);
            else if (v1 !== v0)
              val.set(k, v1);
          }
        } else if (val instanceof Set) {
          for (const v0 of Array.from(val)) {
            const v1 = applyReviver(reviver, val, v0, v0);
            if (v1 === void 0)
              val.delete(v0);
            else if (v1 !== v0) {
              val.delete(v0);
              val.add(v1);
            }
          }
        } else {
          for (const [k, v0] of Object.entries(val)) {
            const v1 = applyReviver(reviver, val, k, v0);
            if (v1 === void 0)
              delete val[k];
            else if (v1 !== v0)
              val[k] = v1;
          }
        }
      }
      return reviver.call(obj, key, val);
    }
    exports2.applyReviver = applyReviver;
  }
});

// node_modules/yaml/dist/nodes/toJS.js
var require_toJS = __commonJS({
  "node_modules/yaml/dist/nodes/toJS.js"(exports2) {
    "use strict";
    var identity = require_identity();
    function toJS(value, arg, ctx) {
      if (Array.isArray(value))
        return value.map((v, i) => toJS(v, String(i), ctx));
      if (value && typeof value.toJSON === "function") {
        if (!ctx || !identity.hasAnchor(value))
          return value.toJSON(arg, ctx);
        const data = { aliasCount: 0, count: 1, res: void 0 };
        ctx.anchors.set(value, data);
        ctx.onCreate = (res2) => {
          data.res = res2;
          delete ctx.onCreate;
        };
        const res = value.toJSON(arg, ctx);
        if (ctx.onCreate)
          ctx.onCreate(res);
        return res;
      }
      if (typeof value === "bigint" && !ctx?.keep)
        return Number(value);
      return value;
    }
    exports2.toJS = toJS;
  }
});

// node_modules/yaml/dist/nodes/Node.js
var require_Node = __commonJS({
  "node_modules/yaml/dist/nodes/Node.js"(exports2) {
    "use strict";
    var applyReviver = require_applyReviver();
    var identity = require_identity();
    var toJS = require_toJS();
    var NodeBase = class {
      constructor(type) {
        Object.defineProperty(this, identity.NODE_TYPE, { value: type });
      }
      /** Create a copy of this node.  */
      clone() {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (this.range)
          copy.range = this.range.slice();
        return copy;
      }
      /** A plain JavaScript representation of this node. */
      toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        if (!identity.isDocument(doc))
          throw new TypeError("A document argument is required");
        const ctx = {
          anchors: /* @__PURE__ */ new Map(),
          doc,
          keep: true,
          mapAsMap: mapAsMap === true,
          mapKeyWarned: false,
          maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
        };
        const res = toJS.toJS(this, "", ctx);
        if (typeof onAnchor === "function")
          for (const { count, res: res2 } of ctx.anchors.values())
            onAnchor(res2, count);
        return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
      }
    };
    exports2.NodeBase = NodeBase;
  }
});

// node_modules/yaml/dist/nodes/Alias.js
var require_Alias = __commonJS({
  "node_modules/yaml/dist/nodes/Alias.js"(exports2) {
    "use strict";
    var anchors = require_anchors();
    var visit = require_visit();
    var identity = require_identity();
    var Node = require_Node();
    var toJS = require_toJS();
    var Alias = class extends Node.NodeBase {
      constructor(source) {
        super(identity.ALIAS);
        this.source = source;
        Object.defineProperty(this, "tag", {
          set() {
            throw new Error("Alias nodes cannot have tags");
          }
        });
      }
      /**
       * Resolve the value of this alias within `doc`, finding the last
       * instance of the `source` anchor before this node.
       */
      resolve(doc) {
        let found = void 0;
        visit.visit(doc, {
          Node: (_key, node) => {
            if (node === this)
              return visit.visit.BREAK;
            if (node.anchor === this.source)
              found = node;
          }
        });
        return found;
      }
      toJSON(_arg, ctx) {
        if (!ctx)
          return { source: this.source };
        const { anchors: anchors2, doc, maxAliasCount } = ctx;
        const source = this.resolve(doc);
        if (!source) {
          const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
          throw new ReferenceError(msg);
        }
        let data = anchors2.get(source);
        if (!data) {
          toJS.toJS(source, null, ctx);
          data = anchors2.get(source);
        }
        if (!data || data.res === void 0) {
          const msg = "This should not happen: Alias anchor was not resolved?";
          throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
          data.count += 1;
          if (data.aliasCount === 0)
            data.aliasCount = getAliasCount(doc, source, anchors2);
          if (data.count * data.aliasCount > maxAliasCount) {
            const msg = "Excessive alias count indicates a resource exhaustion attack";
            throw new ReferenceError(msg);
          }
        }
        return data.res;
      }
      toString(ctx, _onComment, _onChompKeep) {
        const src = `*${this.source}`;
        if (ctx) {
          anchors.anchorIsValid(this.source);
          if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new Error(msg);
          }
          if (ctx.implicitKey)
            return `${src} `;
        }
        return src;
      }
    };
    function getAliasCount(doc, node, anchors2) {
      if (identity.isAlias(node)) {
        const source = node.resolve(doc);
        const anchor = anchors2 && source && anchors2.get(source);
        return anchor ? anchor.count * anchor.aliasCount : 0;
      } else if (identity.isCollection(node)) {
        let count = 0;
        for (const item of node.items) {
          const c = getAliasCount(doc, item, anchors2);
          if (c > count)
            count = c;
        }
        return count;
      } else if (identity.isPair(node)) {
        const kc = getAliasCount(doc, node.key, anchors2);
        const vc = getAliasCount(doc, node.value, anchors2);
        return Math.max(kc, vc);
      }
      return 1;
    }
    exports2.Alias = Alias;
  }
});

// node_modules/yaml/dist/nodes/Scalar.js
var require_Scalar = __commonJS({
  "node_modules/yaml/dist/nodes/Scalar.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Node = require_Node();
    var toJS = require_toJS();
    var isScalarValue = (value) => !value || typeof value !== "function" && typeof value !== "object";
    var Scalar = class extends Node.NodeBase {
      constructor(value) {
        super(identity.SCALAR);
        this.value = value;
      }
      toJSON(arg, ctx) {
        return ctx?.keep ? this.value : toJS.toJS(this.value, arg, ctx);
      }
      toString() {
        return String(this.value);
      }
    };
    Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
    Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
    Scalar.PLAIN = "PLAIN";
    Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
    Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
    exports2.Scalar = Scalar;
    exports2.isScalarValue = isScalarValue;
  }
});

// node_modules/yaml/dist/doc/createNode.js
var require_createNode = __commonJS({
  "node_modules/yaml/dist/doc/createNode.js"(exports2) {
    "use strict";
    var Alias = require_Alias();
    var identity = require_identity();
    var Scalar = require_Scalar();
    var defaultTagPrefix = "tag:yaml.org,2002:";
    function findTagObject(value, tagName, tags) {
      if (tagName) {
        const match = tags.filter((t) => t.tag === tagName);
        const tagObj = match.find((t) => !t.format) ?? match[0];
        if (!tagObj)
          throw new Error(`Tag ${tagName} not found`);
        return tagObj;
      }
      return tags.find((t) => t.identify?.(value) && !t.format);
    }
    function createNode(value, tagName, ctx) {
      if (identity.isDocument(value))
        value = value.contents;
      if (identity.isNode(value))
        return value;
      if (identity.isPair(value)) {
        const map = ctx.schema[identity.MAP].createNode?.(ctx.schema, null, ctx);
        map.items.push(value);
        return map;
      }
      if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt !== "undefined" && value instanceof BigInt) {
        value = value.valueOf();
      }
      const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
      let ref = void 0;
      if (aliasDuplicateObjects && value && typeof value === "object") {
        ref = sourceObjects.get(value);
        if (ref) {
          if (!ref.anchor)
            ref.anchor = onAnchor(value);
          return new Alias.Alias(ref.anchor);
        } else {
          ref = { anchor: null, node: null };
          sourceObjects.set(value, ref);
        }
      }
      if (tagName?.startsWith("!!"))
        tagName = defaultTagPrefix + tagName.slice(2);
      let tagObj = findTagObject(value, tagName, schema.tags);
      if (!tagObj) {
        if (value && typeof value.toJSON === "function") {
          value = value.toJSON();
        }
        if (!value || typeof value !== "object") {
          const node2 = new Scalar.Scalar(value);
          if (ref)
            ref.node = node2;
          return node2;
        }
        tagObj = value instanceof Map ? schema[identity.MAP] : Symbol.iterator in Object(value) ? schema[identity.SEQ] : schema[identity.MAP];
      }
      if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
      }
      const node = tagObj?.createNode ? tagObj.createNode(ctx.schema, value, ctx) : typeof tagObj?.nodeClass?.from === "function" ? tagObj.nodeClass.from(ctx.schema, value, ctx) : new Scalar.Scalar(value);
      if (tagName)
        node.tag = tagName;
      else if (!tagObj.default)
        node.tag = tagObj.tag;
      if (ref)
        ref.node = node;
      return node;
    }
    exports2.createNode = createNode;
  }
});

// node_modules/yaml/dist/nodes/Collection.js
var require_Collection = __commonJS({
  "node_modules/yaml/dist/nodes/Collection.js"(exports2) {
    "use strict";
    var createNode = require_createNode();
    var identity = require_identity();
    var Node = require_Node();
    function collectionFromPath(schema, path3, value) {
      let v = value;
      for (let i = path3.length - 1; i >= 0; --i) {
        const k = path3[i];
        if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
          const a = [];
          a[k] = v;
          v = a;
        } else {
          v = /* @__PURE__ */ new Map([[k, v]]);
        }
      }
      return createNode.createNode(v, void 0, {
        aliasDuplicateObjects: false,
        keepUndefined: false,
        onAnchor: () => {
          throw new Error("This should not happen, please report a bug.");
        },
        schema,
        sourceObjects: /* @__PURE__ */ new Map()
      });
    }
    var isEmptyPath = (path3) => path3 == null || typeof path3 === "object" && !!path3[Symbol.iterator]().next().done;
    var Collection = class extends Node.NodeBase {
      constructor(type, schema) {
        super(type);
        Object.defineProperty(this, "schema", {
          value: schema,
          configurable: true,
          enumerable: false,
          writable: true
        });
      }
      /**
       * Create a copy of this collection.
       *
       * @param schema - If defined, overwrites the original's schema
       */
      clone(schema) {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (schema)
          copy.schema = schema;
        copy.items = copy.items.map((it) => identity.isNode(it) || identity.isPair(it) ? it.clone(schema) : it);
        if (this.range)
          copy.range = this.range.slice();
        return copy;
      }
      /**
       * Adds a value to the collection. For `!!map` and `!!omap` the value must
       * be a Pair instance or a `{ key, value }` object, which may not have a key
       * that already exists in the map.
       */
      addIn(path3, value) {
        if (isEmptyPath(path3))
          this.add(value);
        else {
          const [key, ...rest] = path3;
          const node = this.get(key, true);
          if (identity.isCollection(node))
            node.addIn(rest, value);
          else if (node === void 0 && this.schema)
            this.set(key, collectionFromPath(this.schema, rest, value));
          else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
      }
      /**
       * Removes a value from the collection.
       * @returns `true` if the item was found and removed.
       */
      deleteIn(path3) {
        const [key, ...rest] = path3;
        if (rest.length === 0)
          return this.delete(key);
        const node = this.get(key, true);
        if (identity.isCollection(node))
          return node.deleteIn(rest);
        else
          throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
      /**
       * Returns item at `key`, or `undefined` if not found. By default unwraps
       * scalar values from their surrounding node; to disable set `keepScalar` to
       * `true` (collections are always returned intact).
       */
      getIn(path3, keepScalar) {
        const [key, ...rest] = path3;
        const node = this.get(key, true);
        if (rest.length === 0)
          return !keepScalar && identity.isScalar(node) ? node.value : node;
        else
          return identity.isCollection(node) ? node.getIn(rest, keepScalar) : void 0;
      }
      hasAllNullValues(allowScalar) {
        return this.items.every((node) => {
          if (!identity.isPair(node))
            return false;
          const n = node.value;
          return n == null || allowScalar && identity.isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
        });
      }
      /**
       * Checks if the collection includes a value with the key `key`.
       */
      hasIn(path3) {
        const [key, ...rest] = path3;
        if (rest.length === 0)
          return this.has(key);
        const node = this.get(key, true);
        return identity.isCollection(node) ? node.hasIn(rest) : false;
      }
      /**
       * Sets a value in this collection. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       */
      setIn(path3, value) {
        const [key, ...rest] = path3;
        if (rest.length === 0) {
          this.set(key, value);
        } else {
          const node = this.get(key, true);
          if (identity.isCollection(node))
            node.setIn(rest, value);
          else if (node === void 0 && this.schema)
            this.set(key, collectionFromPath(this.schema, rest, value));
          else
            throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
      }
    };
    exports2.Collection = Collection;
    exports2.collectionFromPath = collectionFromPath;
    exports2.isEmptyPath = isEmptyPath;
  }
});

// node_modules/yaml/dist/stringify/stringifyComment.js
var require_stringifyComment = __commonJS({
  "node_modules/yaml/dist/stringify/stringifyComment.js"(exports2) {
    "use strict";
    var stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, "#");
    function indentComment(comment, indent) {
      if (/^\n+$/.test(comment))
        return comment.substring(1);
      return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
    }
    var lineComment = (str, indent, comment) => str.endsWith("\n") ? indentComment(comment, indent) : comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
    exports2.indentComment = indentComment;
    exports2.lineComment = lineComment;
    exports2.stringifyComment = stringifyComment;
  }
});

// node_modules/yaml/dist/stringify/foldFlowLines.js
var require_foldFlowLines = __commonJS({
  "node_modules/yaml/dist/stringify/foldFlowLines.js"(exports2) {
    "use strict";
    var FOLD_FLOW = "flow";
    var FOLD_BLOCK = "block";
    var FOLD_QUOTED = "quoted";
    function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
      if (!lineWidth || lineWidth < 0)
        return text;
      if (lineWidth < minContentWidth)
        minContentWidth = 0;
      const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
      if (text.length <= endStep)
        return text;
      const folds = [];
      const escapedFolds = {};
      let end = lineWidth - indent.length;
      if (typeof indentAtStart === "number") {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
          folds.push(0);
        else
          end = lineWidth - indentAtStart;
      }
      let split = void 0;
      let prev = void 0;
      let overflow = false;
      let i = -1;
      let escStart = -1;
      let escEnd = -1;
      if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i, indent.length);
        if (i !== -1)
          end = i + endStep;
      }
      for (let ch; ch = text[i += 1]; ) {
        if (mode === FOLD_QUOTED && ch === "\\") {
          escStart = i;
          switch (text[i + 1]) {
            case "x":
              i += 3;
              break;
            case "u":
              i += 5;
              break;
            case "U":
              i += 9;
              break;
            default:
              i += 1;
          }
          escEnd = i;
        }
        if (ch === "\n") {
          if (mode === FOLD_BLOCK)
            i = consumeMoreIndentedLines(text, i, indent.length);
          end = i + indent.length + endStep;
          split = void 0;
        } else {
          if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
            const next = text[i + 1];
            if (next && next !== " " && next !== "\n" && next !== "	")
              split = i;
          }
          if (i >= end) {
            if (split) {
              folds.push(split);
              end = split + endStep;
              split = void 0;
            } else if (mode === FOLD_QUOTED) {
              while (prev === " " || prev === "	") {
                prev = ch;
                ch = text[i += 1];
                overflow = true;
              }
              const j = i > escEnd + 1 ? i - 2 : escStart - 1;
              if (escapedFolds[j])
                return text;
              folds.push(j);
              escapedFolds[j] = true;
              end = j + endStep;
              split = void 0;
            } else {
              overflow = true;
            }
          }
        }
        prev = ch;
      }
      if (overflow && onOverflow)
        onOverflow();
      if (folds.length === 0)
        return text;
      if (onFold)
        onFold();
      let res = text.slice(0, folds[0]);
      for (let i2 = 0; i2 < folds.length; ++i2) {
        const fold = folds[i2];
        const end2 = folds[i2 + 1] || text.length;
        if (fold === 0)
          res = `
${indent}${text.slice(0, end2)}`;
        else {
          if (mode === FOLD_QUOTED && escapedFolds[fold])
            res += `${text[fold]}\\`;
          res += `
${indent}${text.slice(fold + 1, end2)}`;
        }
      }
      return res;
    }
    function consumeMoreIndentedLines(text, i, indent) {
      let end = i;
      let start = i + 1;
      let ch = text[start];
      while (ch === " " || ch === "	") {
        if (i < start + indent) {
          ch = text[++i];
        } else {
          do {
            ch = text[++i];
          } while (ch && ch !== "\n");
          end = i;
          start = i + 1;
          ch = text[start];
        }
      }
      return end;
    }
    exports2.FOLD_BLOCK = FOLD_BLOCK;
    exports2.FOLD_FLOW = FOLD_FLOW;
    exports2.FOLD_QUOTED = FOLD_QUOTED;
    exports2.foldFlowLines = foldFlowLines;
  }
});

// node_modules/yaml/dist/stringify/stringifyString.js
var require_stringifyString = __commonJS({
  "node_modules/yaml/dist/stringify/stringifyString.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var foldFlowLines = require_foldFlowLines();
    var getFoldOptions = (ctx, isBlock) => ({
      indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
      lineWidth: ctx.options.lineWidth,
      minContentWidth: ctx.options.minContentWidth
    });
    var containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
    function lineLengthOverLimit(str, lineWidth, indentLength) {
      if (!lineWidth || lineWidth < 0)
        return false;
      const limit = lineWidth - indentLength;
      const strLen = str.length;
      if (strLen <= limit)
        return false;
      for (let i = 0, start = 0; i < strLen; ++i) {
        if (str[i] === "\n") {
          if (i - start > limit)
            return true;
          start = i + 1;
          if (strLen - start <= limit)
            return false;
        }
      }
      return true;
    }
    function doubleQuotedString(value, ctx) {
      const json = JSON.stringify(value);
      if (ctx.options.doubleQuotedAsJSON)
        return json;
      const { implicitKey } = ctx;
      const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
      const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
      let str = "";
      let start = 0;
      for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
        if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
          str += json.slice(start, i) + "\\ ";
          i += 1;
          start = i;
          ch = "\\";
        }
        if (ch === "\\")
          switch (json[i + 1]) {
            case "u":
              {
                str += json.slice(start, i);
                const code = json.substr(i + 2, 4);
                switch (code) {
                  case "0000":
                    str += "\\0";
                    break;
                  case "0007":
                    str += "\\a";
                    break;
                  case "000b":
                    str += "\\v";
                    break;
                  case "001b":
                    str += "\\e";
                    break;
                  case "0085":
                    str += "\\N";
                    break;
                  case "00a0":
                    str += "\\_";
                    break;
                  case "2028":
                    str += "\\L";
                    break;
                  case "2029":
                    str += "\\P";
                    break;
                  default:
                    if (code.substr(0, 2) === "00")
                      str += "\\x" + code.substr(2);
                    else
                      str += json.substr(i, 6);
                }
                i += 5;
                start = i + 1;
              }
              break;
            case "n":
              if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                i += 1;
              } else {
                str += json.slice(start, i) + "\n\n";
                while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                  str += "\n";
                  i += 2;
                }
                str += indent;
                if (json[i + 2] === " ")
                  str += "\\";
                i += 1;
                start = i + 1;
              }
              break;
            default:
              i += 1;
          }
      }
      str = start ? str + json.slice(start) : json;
      return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx, false));
    }
    function singleQuotedString(value, ctx) {
      if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes("\n") || /[ \t]\n|\n[ \t]/.test(value))
        return doubleQuotedString(value, ctx);
      const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
      const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
      return ctx.implicitKey ? res : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
    }
    function quotedString(value, ctx) {
      const { singleQuote } = ctx.options;
      let qs;
      if (singleQuote === false)
        qs = doubleQuotedString;
      else {
        const hasDouble = value.includes('"');
        const hasSingle = value.includes("'");
        if (hasDouble && !hasSingle)
          qs = singleQuotedString;
        else if (hasSingle && !hasDouble)
          qs = doubleQuotedString;
        else
          qs = singleQuote ? singleQuotedString : doubleQuotedString;
      }
      return qs(value, ctx);
    }
    var blockEndNewlines;
    try {
      blockEndNewlines = new RegExp("(^|(?<!\n))\n+(?!\n|$)", "g");
    } catch {
      blockEndNewlines = /\n+(?!\n|$)/g;
    }
    function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
      const { blockQuote, commentString, lineWidth } = ctx.options;
      if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
        return quotedString(value, ctx);
      }
      const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
      const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.Scalar.BLOCK_FOLDED ? false : type === Scalar.Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
      if (!value)
        return literal ? "|\n" : ">\n";
      let chomp;
      let endStart;
      for (endStart = value.length; endStart > 0; --endStart) {
        const ch = value[endStart - 1];
        if (ch !== "\n" && ch !== "	" && ch !== " ")
          break;
      }
      let end = value.substring(endStart);
      const endNlPos = end.indexOf("\n");
      if (endNlPos === -1) {
        chomp = "-";
      } else if (value === end || endNlPos !== end.length - 1) {
        chomp = "+";
        if (onChompKeep)
          onChompKeep();
      } else {
        chomp = "";
      }
      if (end) {
        value = value.slice(0, -end.length);
        if (end[end.length - 1] === "\n")
          end = end.slice(0, -1);
        end = end.replace(blockEndNewlines, `$&${indent}`);
      }
      let startWithSpace = false;
      let startEnd;
      let startNlPos = -1;
      for (startEnd = 0; startEnd < value.length; ++startEnd) {
        const ch = value[startEnd];
        if (ch === " ")
          startWithSpace = true;
        else if (ch === "\n")
          startNlPos = startEnd;
        else
          break;
      }
      let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
      if (start) {
        value = value.substring(start.length);
        start = start.replace(/\n+/g, `$&${indent}`);
      }
      const indentSize = indent ? "2" : "1";
      let header = (startWithSpace ? indentSize : "") + chomp;
      if (comment) {
        header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
        if (onComment)
          onComment();
      }
      if (!literal) {
        const foldedValue = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
        let literalFallback = false;
        const foldOptions = getFoldOptions(ctx, true);
        if (blockQuote !== "folded" && type !== Scalar.Scalar.BLOCK_FOLDED) {
          foldOptions.onOverflow = () => {
            literalFallback = true;
          };
        }
        const body = foldFlowLines.foldFlowLines(`${start}${foldedValue}${end}`, indent, foldFlowLines.FOLD_BLOCK, foldOptions);
        if (!literalFallback)
          return `>${header}
${indent}${body}`;
      }
      value = value.replace(/\n+/g, `$&${indent}`);
      return `|${header}
${indent}${start}${value}${end}`;
    }
    function plainString(item, ctx, onComment, onChompKeep) {
      const { type, value } = item;
      const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
      if (implicitKey && value.includes("\n") || inFlow && /[[\]{},]/.test(value)) {
        return quotedString(value, ctx);
      }
      if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
        return implicitKey || inFlow || !value.includes("\n") ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
      }
      if (!implicitKey && !inFlow && type !== Scalar.Scalar.PLAIN && value.includes("\n")) {
        return blockString(item, ctx, onComment, onChompKeep);
      }
      if (containsDocumentMarker(value)) {
        if (indent === "") {
          ctx.forceBlockIndent = true;
          return blockString(item, ctx, onComment, onChompKeep);
        } else if (implicitKey && indent === indentStep) {
          return quotedString(value, ctx);
        }
      }
      const str = value.replace(/\n+/g, `$&
${indent}`);
      if (actualString) {
        const test = (tag) => tag.default && tag.tag !== "tag:yaml.org,2002:str" && tag.test?.test(str);
        const { compat, tags } = ctx.doc.schema;
        if (tags.some(test) || compat?.some(test))
          return quotedString(value, ctx);
      }
      return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
    }
    function stringifyString(item, ctx, onComment, onChompKeep) {
      const { implicitKey, inFlow } = ctx;
      const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
      let { type } = item;
      if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
        if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
          type = Scalar.Scalar.QUOTE_DOUBLE;
      }
      const _stringify = (_type) => {
        switch (_type) {
          case Scalar.Scalar.BLOCK_FOLDED:
          case Scalar.Scalar.BLOCK_LITERAL:
            return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
          case Scalar.Scalar.QUOTE_DOUBLE:
            return doubleQuotedString(ss.value, ctx);
          case Scalar.Scalar.QUOTE_SINGLE:
            return singleQuotedString(ss.value, ctx);
          case Scalar.Scalar.PLAIN:
            return plainString(ss, ctx, onComment, onChompKeep);
          default:
            return null;
        }
      };
      let res = _stringify(type);
      if (res === null) {
        const { defaultKeyType, defaultStringType } = ctx.options;
        const t = implicitKey && defaultKeyType || defaultStringType;
        res = _stringify(t);
        if (res === null)
          throw new Error(`Unsupported default string type ${t}`);
      }
      return res;
    }
    exports2.stringifyString = stringifyString;
  }
});

// node_modules/yaml/dist/stringify/stringify.js
var require_stringify = __commonJS({
  "node_modules/yaml/dist/stringify/stringify.js"(exports2) {
    "use strict";
    var anchors = require_anchors();
    var identity = require_identity();
    var stringifyComment = require_stringifyComment();
    var stringifyString = require_stringifyString();
    function createStringifyContext(doc, options) {
      const opt = Object.assign({
        blockQuote: true,
        commentString: stringifyComment.stringifyComment,
        defaultKeyType: null,
        defaultStringType: "PLAIN",
        directives: null,
        doubleQuotedAsJSON: false,
        doubleQuotedMinMultiLineLength: 40,
        falseStr: "false",
        flowCollectionPadding: true,
        indentSeq: true,
        lineWidth: 80,
        minContentWidth: 20,
        nullStr: "null",
        simpleKeys: false,
        singleQuote: null,
        trueStr: "true",
        verifyAliasOrder: true
      }, doc.schema.toStringOptions, options);
      let inFlow;
      switch (opt.collectionStyle) {
        case "block":
          inFlow = false;
          break;
        case "flow":
          inFlow = true;
          break;
        default:
          inFlow = null;
      }
      return {
        anchors: /* @__PURE__ */ new Set(),
        doc,
        flowCollectionPadding: opt.flowCollectionPadding ? " " : "",
        indent: "",
        indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
        inFlow,
        options: opt
      };
    }
    function getTagObject(tags, item) {
      if (item.tag) {
        const match = tags.filter((t) => t.tag === item.tag);
        if (match.length > 0)
          return match.find((t) => t.format === item.format) ?? match[0];
      }
      let tagObj = void 0;
      let obj;
      if (identity.isScalar(item)) {
        obj = item.value;
        let match = tags.filter((t) => t.identify?.(obj));
        if (match.length > 1) {
          const testMatch = match.filter((t) => t.test);
          if (testMatch.length > 0)
            match = testMatch;
        }
        tagObj = match.find((t) => t.format === item.format) ?? match.find((t) => !t.format);
      } else {
        obj = item;
        tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass);
      }
      if (!tagObj) {
        const name = obj?.constructor?.name ?? typeof obj;
        throw new Error(`Tag not resolved for ${name} value`);
      }
      return tagObj;
    }
    function stringifyProps(node, tagObj, { anchors: anchors$1, doc }) {
      if (!doc.directives)
        return "";
      const props = [];
      const anchor = (identity.isScalar(node) || identity.isCollection(node)) && node.anchor;
      if (anchor && anchors.anchorIsValid(anchor)) {
        anchors$1.add(anchor);
        props.push(`&${anchor}`);
      }
      const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
      if (tag)
        props.push(doc.directives.tagString(tag));
      return props.join(" ");
    }
    function stringify(item, ctx, onComment, onChompKeep) {
      if (identity.isPair(item))
        return item.toString(ctx, onComment, onChompKeep);
      if (identity.isAlias(item)) {
        if (ctx.doc.directives)
          return item.toString(ctx);
        if (ctx.resolvedAliases?.has(item)) {
          throw new TypeError(`Cannot stringify circular structure without alias nodes`);
        } else {
          if (ctx.resolvedAliases)
            ctx.resolvedAliases.add(item);
          else
            ctx.resolvedAliases = /* @__PURE__ */ new Set([item]);
          item = item.resolve(ctx.doc);
        }
      }
      let tagObj = void 0;
      const node = identity.isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: (o) => tagObj = o });
      if (!tagObj)
        tagObj = getTagObject(ctx.doc.schema.tags, node);
      const props = stringifyProps(node, tagObj, ctx);
      if (props.length > 0)
        ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
      const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : identity.isScalar(node) ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
      if (!props)
        return str;
      return identity.isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
    }
    exports2.createStringifyContext = createStringifyContext;
    exports2.stringify = stringify;
  }
});

// node_modules/yaml/dist/stringify/stringifyPair.js
var require_stringifyPair = __commonJS({
  "node_modules/yaml/dist/stringify/stringifyPair.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Scalar = require_Scalar();
    var stringify = require_stringify();
    var stringifyComment = require_stringifyComment();
    function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
      const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
      let keyComment = identity.isNode(key) && key.comment || null;
      if (simpleKeys) {
        if (keyComment) {
          throw new Error("With simple keys, key nodes cannot have comments");
        }
        if (identity.isCollection(key) || !identity.isNode(key) && typeof key === "object") {
          const msg = "With simple keys, collection cannot be used as a key value";
          throw new Error(msg);
        }
      }
      let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || identity.isCollection(key) || (identity.isScalar(key) ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL : typeof key === "object"));
      ctx = Object.assign({}, ctx, {
        allNullValues: false,
        implicitKey: !explicitKey && (simpleKeys || !allNullValues),
        indent: indent + indentStep
      });
      let keyCommentDone = false;
      let chompKeep = false;
      let str = stringify.stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
      if (!explicitKey && !ctx.inFlow && str.length > 1024) {
        if (simpleKeys)
          throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
        explicitKey = true;
      }
      if (ctx.inFlow) {
        if (allNullValues || value == null) {
          if (keyCommentDone && onComment)
            onComment();
          return str === "" ? "?" : explicitKey ? `? ${str}` : str;
        }
      } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
        str = `? ${str}`;
        if (keyComment && !keyCommentDone) {
          str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
        } else if (chompKeep && onChompKeep)
          onChompKeep();
        return str;
      }
      if (keyCommentDone)
        keyComment = null;
      if (explicitKey) {
        if (keyComment)
          str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
        str = `? ${str}
${indent}:`;
      } else {
        str = `${str}:`;
        if (keyComment)
          str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
      }
      let vsb, vcb, valueComment;
      if (identity.isNode(value)) {
        vsb = !!value.spaceBefore;
        vcb = value.commentBefore;
        valueComment = value.comment;
      } else {
        vsb = false;
        vcb = null;
        valueComment = null;
        if (value && typeof value === "object")
          value = doc.createNode(value);
      }
      ctx.implicitKey = false;
      if (!explicitKey && !keyComment && identity.isScalar(value))
        ctx.indentAtStart = str.length + 1;
      chompKeep = false;
      if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && identity.isSeq(value) && !value.flow && !value.tag && !value.anchor) {
        ctx.indent = ctx.indent.substring(2);
      }
      let valueCommentDone = false;
      const valueStr = stringify.stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
      let ws = " ";
      if (keyComment || vsb || vcb) {
        ws = vsb ? "\n" : "";
        if (vcb) {
          const cs = commentString(vcb);
          ws += `
${stringifyComment.indentComment(cs, ctx.indent)}`;
        }
        if (valueStr === "" && !ctx.inFlow) {
          if (ws === "\n")
            ws = "\n\n";
        } else {
          ws += `
${ctx.indent}`;
        }
      } else if (!explicitKey && identity.isCollection(value)) {
        const vs0 = valueStr[0];
        const nl0 = valueStr.indexOf("\n");
        const hasNewline = nl0 !== -1;
        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
        if (hasNewline || !flow) {
          let hasPropsLine = false;
          if (hasNewline && (vs0 === "&" || vs0 === "!")) {
            let sp0 = valueStr.indexOf(" ");
            if (vs0 === "&" && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === "!") {
              sp0 = valueStr.indexOf(" ", sp0 + 1);
            }
            if (sp0 === -1 || nl0 < sp0)
              hasPropsLine = true;
          }
          if (!hasPropsLine)
            ws = `
${ctx.indent}`;
        }
      } else if (valueStr === "" || valueStr[0] === "\n") {
        ws = "";
      }
      str += ws + valueStr;
      if (ctx.inFlow) {
        if (valueCommentDone && onComment)
          onComment();
      } else if (valueComment && !valueCommentDone) {
        str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));
      } else if (chompKeep && onChompKeep) {
        onChompKeep();
      }
      return str;
    }
    exports2.stringifyPair = stringifyPair;
  }
});

// node_modules/yaml/dist/log.js
var require_log = __commonJS({
  "node_modules/yaml/dist/log.js"(exports2) {
    "use strict";
    function debug(logLevel, ...messages) {
      if (logLevel === "debug")
        console.log(...messages);
    }
    function warn(logLevel, warning3) {
      if (logLevel === "debug" || logLevel === "warn") {
        if (typeof process !== "undefined" && process.emitWarning)
          process.emitWarning(warning3);
        else
          console.warn(warning3);
      }
    }
    exports2.debug = debug;
    exports2.warn = warn;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/merge.js
var require_merge = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/merge.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Scalar = require_Scalar();
    var MERGE_KEY = "<<";
    var merge = {
      identify: (value) => value === MERGE_KEY || typeof value === "symbol" && value.description === MERGE_KEY,
      default: "key",
      tag: "tag:yaml.org,2002:merge",
      test: /^<<$/,
      resolve: () => Object.assign(new Scalar.Scalar(Symbol(MERGE_KEY)), {
        addToJSMap: addMergeToJSMap
      }),
      stringify: () => MERGE_KEY
    };
    var isMergeKey = (ctx, key) => (merge.identify(key) || identity.isScalar(key) && (!key.type || key.type === Scalar.Scalar.PLAIN) && merge.identify(key.value)) && ctx?.doc.schema.tags.some((tag) => tag.tag === merge.tag && tag.default);
    function addMergeToJSMap(ctx, map, value) {
      value = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
      if (identity.isSeq(value))
        for (const it of value.items)
          mergeValue(ctx, map, it);
      else if (Array.isArray(value))
        for (const it of value)
          mergeValue(ctx, map, it);
      else
        mergeValue(ctx, map, value);
    }
    function mergeValue(ctx, map, value) {
      const source = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
      if (!identity.isMap(source))
        throw new Error("Merge sources must be maps or map aliases");
      const srcMap = source.toJSON(null, ctx, Map);
      for (const [key, value2] of srcMap) {
        if (map instanceof Map) {
          if (!map.has(key))
            map.set(key, value2);
        } else if (map instanceof Set) {
          map.add(key);
        } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
          Object.defineProperty(map, key, {
            value: value2,
            writable: true,
            enumerable: true,
            configurable: true
          });
        }
      }
      return map;
    }
    exports2.addMergeToJSMap = addMergeToJSMap;
    exports2.isMergeKey = isMergeKey;
    exports2.merge = merge;
  }
});

// node_modules/yaml/dist/nodes/addPairToJSMap.js
var require_addPairToJSMap = __commonJS({
  "node_modules/yaml/dist/nodes/addPairToJSMap.js"(exports2) {
    "use strict";
    var log = require_log();
    var merge = require_merge();
    var stringify = require_stringify();
    var identity = require_identity();
    var toJS = require_toJS();
    function addPairToJSMap(ctx, map, { key, value }) {
      if (identity.isNode(key) && key.addToJSMap)
        key.addToJSMap(ctx, map, value);
      else if (merge.isMergeKey(ctx, key))
        merge.addMergeToJSMap(ctx, map, value);
      else {
        const jsKey = toJS.toJS(key, "", ctx);
        if (map instanceof Map) {
          map.set(jsKey, toJS.toJS(value, jsKey, ctx));
        } else if (map instanceof Set) {
          map.add(jsKey);
        } else {
          const stringKey = stringifyKey(key, jsKey, ctx);
          const jsValue = toJS.toJS(value, stringKey, ctx);
          if (stringKey in map)
            Object.defineProperty(map, stringKey, {
              value: jsValue,
              writable: true,
              enumerable: true,
              configurable: true
            });
          else
            map[stringKey] = jsValue;
        }
      }
      return map;
    }
    function stringifyKey(key, jsKey, ctx) {
      if (jsKey === null)
        return "";
      if (typeof jsKey !== "object")
        return String(jsKey);
      if (identity.isNode(key) && ctx?.doc) {
        const strCtx = stringify.createStringifyContext(ctx.doc, {});
        strCtx.anchors = /* @__PURE__ */ new Set();
        for (const node of ctx.anchors.keys())
          strCtx.anchors.add(node.anchor);
        strCtx.inFlow = true;
        strCtx.inStringifyKey = true;
        const strKey = key.toString(strCtx);
        if (!ctx.mapKeyWarned) {
          let jsonStr = JSON.stringify(strKey);
          if (jsonStr.length > 40)
            jsonStr = jsonStr.substring(0, 36) + '..."';
          log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
          ctx.mapKeyWarned = true;
        }
        return strKey;
      }
      return JSON.stringify(jsKey);
    }
    exports2.addPairToJSMap = addPairToJSMap;
  }
});

// node_modules/yaml/dist/nodes/Pair.js
var require_Pair = __commonJS({
  "node_modules/yaml/dist/nodes/Pair.js"(exports2) {
    "use strict";
    var createNode = require_createNode();
    var stringifyPair = require_stringifyPair();
    var addPairToJSMap = require_addPairToJSMap();
    var identity = require_identity();
    function createPair(key, value, ctx) {
      const k = createNode.createNode(key, void 0, ctx);
      const v = createNode.createNode(value, void 0, ctx);
      return new Pair(k, v);
    }
    var Pair = class _Pair {
      constructor(key, value = null) {
        Object.defineProperty(this, identity.NODE_TYPE, { value: identity.PAIR });
        this.key = key;
        this.value = value;
      }
      clone(schema) {
        let { key, value } = this;
        if (identity.isNode(key))
          key = key.clone(schema);
        if (identity.isNode(value))
          value = value.clone(schema);
        return new _Pair(key, value);
      }
      toJSON(_, ctx) {
        const pair = ctx?.mapAsMap ? /* @__PURE__ */ new Map() : {};
        return addPairToJSMap.addPairToJSMap(ctx, pair, this);
      }
      toString(ctx, onComment, onChompKeep) {
        return ctx?.doc ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
      }
    };
    exports2.Pair = Pair;
    exports2.createPair = createPair;
  }
});

// node_modules/yaml/dist/stringify/stringifyCollection.js
var require_stringifyCollection = __commonJS({
  "node_modules/yaml/dist/stringify/stringifyCollection.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var stringify = require_stringify();
    var stringifyComment = require_stringifyComment();
    function stringifyCollection(collection, ctx, options) {
      const flow = ctx.inFlow ?? collection.flow;
      const stringify2 = flow ? stringifyFlowCollection : stringifyBlockCollection;
      return stringify2(collection, ctx, options);
    }
    function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
      const { indent, options: { commentString } } = ctx;
      const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
      let chompKeep = false;
      const lines = [];
      for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment2 = null;
        if (identity.isNode(item)) {
          if (!chompKeep && item.spaceBefore)
            lines.push("");
          addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
          if (item.comment)
            comment2 = item.comment;
        } else if (identity.isPair(item)) {
          const ik = identity.isNode(item.key) ? item.key : null;
          if (ik) {
            if (!chompKeep && ik.spaceBefore)
              lines.push("");
            addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
          }
        }
        chompKeep = false;
        let str2 = stringify.stringify(item, itemCtx, () => comment2 = null, () => chompKeep = true);
        if (comment2)
          str2 += stringifyComment.lineComment(str2, itemIndent, commentString(comment2));
        if (chompKeep && comment2)
          chompKeep = false;
        lines.push(blockItemPrefix + str2);
      }
      let str;
      if (lines.length === 0) {
        str = flowChars.start + flowChars.end;
      } else {
        str = lines[0];
        for (let i = 1; i < lines.length; ++i) {
          const line = lines[i];
          str += line ? `
${indent}${line}` : "\n";
        }
      }
      if (comment) {
        str += "\n" + stringifyComment.indentComment(commentString(comment), indent);
        if (onComment)
          onComment();
      } else if (chompKeep && onChompKeep)
        onChompKeep();
      return str;
    }
    function stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {
      const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
      itemIndent += indentStep;
      const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        inFlow: true,
        type: null
      });
      let reqNewline = false;
      let linesAtValue = 0;
      const lines = [];
      for (let i = 0; i < items.length; ++i) {
        const item = items[i];
        let comment = null;
        if (identity.isNode(item)) {
          if (item.spaceBefore)
            lines.push("");
          addCommentBefore(ctx, lines, item.commentBefore, false);
          if (item.comment)
            comment = item.comment;
        } else if (identity.isPair(item)) {
          const ik = identity.isNode(item.key) ? item.key : null;
          if (ik) {
            if (ik.spaceBefore)
              lines.push("");
            addCommentBefore(ctx, lines, ik.commentBefore, false);
            if (ik.comment)
              reqNewline = true;
          }
          const iv = identity.isNode(item.value) ? item.value : null;
          if (iv) {
            if (iv.comment)
              comment = iv.comment;
            if (iv.commentBefore)
              reqNewline = true;
          } else if (item.value == null && ik?.comment) {
            comment = ik.comment;
          }
        }
        if (comment)
          reqNewline = true;
        let str = stringify.stringify(item, itemCtx, () => comment = null);
        if (i < items.length - 1)
          str += ",";
        if (comment)
          str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
        if (!reqNewline && (lines.length > linesAtValue || str.includes("\n")))
          reqNewline = true;
        lines.push(str);
        linesAtValue = lines.length;
      }
      const { start, end } = flowChars;
      if (lines.length === 0) {
        return start + end;
      } else {
        if (!reqNewline) {
          const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
          reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;
        }
        if (reqNewline) {
          let str = start;
          for (const line of lines)
            str += line ? `
${indentStep}${indent}${line}` : "\n";
          return `${str}
${indent}${end}`;
        } else {
          return `${start}${fcPadding}${lines.join(" ")}${fcPadding}${end}`;
        }
      }
    }
    function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
      if (comment && chompKeep)
        comment = comment.replace(/^\n+/, "");
      if (comment) {
        const ic = stringifyComment.indentComment(commentString(comment), indent);
        lines.push(ic.trimStart());
      }
    }
    exports2.stringifyCollection = stringifyCollection;
  }
});

// node_modules/yaml/dist/nodes/YAMLMap.js
var require_YAMLMap = __commonJS({
  "node_modules/yaml/dist/nodes/YAMLMap.js"(exports2) {
    "use strict";
    var stringifyCollection = require_stringifyCollection();
    var addPairToJSMap = require_addPairToJSMap();
    var Collection = require_Collection();
    var identity = require_identity();
    var Pair = require_Pair();
    var Scalar = require_Scalar();
    function findPair(items, key) {
      const k = identity.isScalar(key) ? key.value : key;
      for (const it of items) {
        if (identity.isPair(it)) {
          if (it.key === key || it.key === k)
            return it;
          if (identity.isScalar(it.key) && it.key.value === k)
            return it;
        }
      }
      return void 0;
    }
    var YAMLMap = class extends Collection.Collection {
      static get tagName() {
        return "tag:yaml.org,2002:map";
      }
      constructor(schema) {
        super(identity.MAP, schema);
        this.items = [];
      }
      /**
       * A generic collection parsing method that can be extended
       * to other node classes that inherit from YAMLMap
       */
      static from(schema, obj, ctx) {
        const { keepUndefined, replacer } = ctx;
        const map = new this(schema);
        const add = (key, value) => {
          if (typeof replacer === "function")
            value = replacer.call(obj, key, value);
          else if (Array.isArray(replacer) && !replacer.includes(key))
            return;
          if (value !== void 0 || keepUndefined)
            map.items.push(Pair.createPair(key, value, ctx));
        };
        if (obj instanceof Map) {
          for (const [key, value] of obj)
            add(key, value);
        } else if (obj && typeof obj === "object") {
          for (const key of Object.keys(obj))
            add(key, obj[key]);
        }
        if (typeof schema.sortMapEntries === "function") {
          map.items.sort(schema.sortMapEntries);
        }
        return map;
      }
      /**
       * Adds a value to the collection.
       *
       * @param overwrite - If not set `true`, using a key that is already in the
       *   collection will throw. Otherwise, overwrites the previous value.
       */
      add(pair, overwrite) {
        let _pair;
        if (identity.isPair(pair))
          _pair = pair;
        else if (!pair || typeof pair !== "object" || !("key" in pair)) {
          _pair = new Pair.Pair(pair, pair?.value);
        } else
          _pair = new Pair.Pair(pair.key, pair.value);
        const prev = findPair(this.items, _pair.key);
        const sortEntries = this.schema?.sortMapEntries;
        if (prev) {
          if (!overwrite)
            throw new Error(`Key ${_pair.key} already set`);
          if (identity.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))
            prev.value.value = _pair.value;
          else
            prev.value = _pair.value;
        } else if (sortEntries) {
          const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
          if (i === -1)
            this.items.push(_pair);
          else
            this.items.splice(i, 0, _pair);
        } else {
          this.items.push(_pair);
        }
      }
      delete(key) {
        const it = findPair(this.items, key);
        if (!it)
          return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
      }
      get(key, keepScalar) {
        const it = findPair(this.items, key);
        const node = it?.value;
        return (!keepScalar && identity.isScalar(node) ? node.value : node) ?? void 0;
      }
      has(key) {
        return !!findPair(this.items, key);
      }
      set(key, value) {
        this.add(new Pair.Pair(key, value), true);
      }
      /**
       * @param ctx - Conversion context, originally set in Document#toJS()
       * @param {Class} Type - If set, forces the returned collection type
       * @returns Instance of Type, Map, or Object
       */
      toJSON(_, ctx, Type) {
        const map = Type ? new Type() : ctx?.mapAsMap ? /* @__PURE__ */ new Map() : {};
        if (ctx?.onCreate)
          ctx.onCreate(map);
        for (const item of this.items)
          addPairToJSMap.addPairToJSMap(ctx, map, item);
        return map;
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx)
          return JSON.stringify(this);
        for (const item of this.items) {
          if (!identity.isPair(item))
            throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        if (!ctx.allNullValues && this.hasAllNullValues(false))
          ctx = Object.assign({}, ctx, { allNullValues: true });
        return stringifyCollection.stringifyCollection(this, ctx, {
          blockItemPrefix: "",
          flowChars: { start: "{", end: "}" },
          itemIndent: ctx.indent || "",
          onChompKeep,
          onComment
        });
      }
    };
    exports2.YAMLMap = YAMLMap;
    exports2.findPair = findPair;
  }
});

// node_modules/yaml/dist/schema/common/map.js
var require_map = __commonJS({
  "node_modules/yaml/dist/schema/common/map.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var YAMLMap = require_YAMLMap();
    var map = {
      collection: "map",
      default: true,
      nodeClass: YAMLMap.YAMLMap,
      tag: "tag:yaml.org,2002:map",
      resolve(map2, onError) {
        if (!identity.isMap(map2))
          onError("Expected a mapping for this tag");
        return map2;
      },
      createNode: (schema, obj, ctx) => YAMLMap.YAMLMap.from(schema, obj, ctx)
    };
    exports2.map = map;
  }
});

// node_modules/yaml/dist/nodes/YAMLSeq.js
var require_YAMLSeq = __commonJS({
  "node_modules/yaml/dist/nodes/YAMLSeq.js"(exports2) {
    "use strict";
    var createNode = require_createNode();
    var stringifyCollection = require_stringifyCollection();
    var Collection = require_Collection();
    var identity = require_identity();
    var Scalar = require_Scalar();
    var toJS = require_toJS();
    var YAMLSeq = class extends Collection.Collection {
      static get tagName() {
        return "tag:yaml.org,2002:seq";
      }
      constructor(schema) {
        super(identity.SEQ, schema);
        this.items = [];
      }
      add(value) {
        this.items.push(value);
      }
      /**
       * Removes a value from the collection.
       *
       * `key` must contain a representation of an integer for this to succeed.
       * It may be wrapped in a `Scalar`.
       *
       * @returns `true` if the item was found and removed.
       */
      delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
          return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
      }
      get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
          return void 0;
        const it = this.items[idx];
        return !keepScalar && identity.isScalar(it) ? it.value : it;
      }
      /**
       * Checks if the collection includes a value with the key `key`.
       *
       * `key` must contain a representation of an integer for this to succeed.
       * It may be wrapped in a `Scalar`.
       */
      has(key) {
        const idx = asItemIndex(key);
        return typeof idx === "number" && idx < this.items.length;
      }
      /**
       * Sets a value in this collection. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       *
       * If `key` does not contain a representation of an integer, this will throw.
       * It may be wrapped in a `Scalar`.
       */
      set(key, value) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number")
          throw new Error(`Expected a valid index, not ${key}.`);
        const prev = this.items[idx];
        if (identity.isScalar(prev) && Scalar.isScalarValue(value))
          prev.value = value;
        else
          this.items[idx] = value;
      }
      toJSON(_, ctx) {
        const seq = [];
        if (ctx?.onCreate)
          ctx.onCreate(seq);
        let i = 0;
        for (const item of this.items)
          seq.push(toJS.toJS(item, String(i++), ctx));
        return seq;
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx)
          return JSON.stringify(this);
        return stringifyCollection.stringifyCollection(this, ctx, {
          blockItemPrefix: "- ",
          flowChars: { start: "[", end: "]" },
          itemIndent: (ctx.indent || "") + "  ",
          onChompKeep,
          onComment
        });
      }
      static from(schema, obj, ctx) {
        const { replacer } = ctx;
        const seq = new this(schema);
        if (obj && Symbol.iterator in Object(obj)) {
          let i = 0;
          for (let it of obj) {
            if (typeof replacer === "function") {
              const key = obj instanceof Set ? it : String(i++);
              it = replacer.call(obj, key, it);
            }
            seq.items.push(createNode.createNode(it, void 0, ctx));
          }
        }
        return seq;
      }
    };
    function asItemIndex(key) {
      let idx = identity.isScalar(key) ? key.value : key;
      if (idx && typeof idx === "string")
        idx = Number(idx);
      return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
    }
    exports2.YAMLSeq = YAMLSeq;
  }
});

// node_modules/yaml/dist/schema/common/seq.js
var require_seq = __commonJS({
  "node_modules/yaml/dist/schema/common/seq.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var YAMLSeq = require_YAMLSeq();
    var seq = {
      collection: "seq",
      default: true,
      nodeClass: YAMLSeq.YAMLSeq,
      tag: "tag:yaml.org,2002:seq",
      resolve(seq2, onError) {
        if (!identity.isSeq(seq2))
          onError("Expected a sequence for this tag");
        return seq2;
      },
      createNode: (schema, obj, ctx) => YAMLSeq.YAMLSeq.from(schema, obj, ctx)
    };
    exports2.seq = seq;
  }
});

// node_modules/yaml/dist/schema/common/string.js
var require_string = __commonJS({
  "node_modules/yaml/dist/schema/common/string.js"(exports2) {
    "use strict";
    var stringifyString = require_stringifyString();
    var string = {
      identify: (value) => typeof value === "string",
      default: true,
      tag: "tag:yaml.org,2002:str",
      resolve: (str) => str,
      stringify(item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({ actualString: true }, ctx);
        return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);
      }
    };
    exports2.string = string;
  }
});

// node_modules/yaml/dist/schema/common/null.js
var require_null = __commonJS({
  "node_modules/yaml/dist/schema/common/null.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var nullTag = {
      identify: (value) => value == null,
      createNode: () => new Scalar.Scalar(null),
      default: true,
      tag: "tag:yaml.org,2002:null",
      test: /^(?:~|[Nn]ull|NULL)?$/,
      resolve: () => new Scalar.Scalar(null),
      stringify: ({ source }, ctx) => typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
    };
    exports2.nullTag = nullTag;
  }
});

// node_modules/yaml/dist/schema/core/bool.js
var require_bool = __commonJS({
  "node_modules/yaml/dist/schema/core/bool.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var boolTag = {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
      resolve: (str) => new Scalar.Scalar(str[0] === "t" || str[0] === "T"),
      stringify({ source, value }, ctx) {
        if (source && boolTag.test.test(source)) {
          const sv = source[0] === "t" || source[0] === "T";
          if (value === sv)
            return source;
        }
        return value ? ctx.options.trueStr : ctx.options.falseStr;
      }
    };
    exports2.boolTag = boolTag;
  }
});

// node_modules/yaml/dist/stringify/stringifyNumber.js
var require_stringifyNumber = __commonJS({
  "node_modules/yaml/dist/stringify/stringifyNumber.js"(exports2) {
    "use strict";
    function stringifyNumber({ format, minFractionDigits, tag, value }) {
      if (typeof value === "bigint")
        return String(value);
      const num = typeof value === "number" ? value : Number(value);
      if (!isFinite(num))
        return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
      let n = JSON.stringify(value);
      if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
        let i = n.indexOf(".");
        if (i < 0) {
          i = n.length;
          n += ".";
        }
        let d = minFractionDigits - (n.length - i - 1);
        while (d-- > 0)
          n += "0";
      }
      return n;
    }
    exports2.stringifyNumber = stringifyNumber;
  }
});

// node_modules/yaml/dist/schema/core/float.js
var require_float = __commonJS({
  "node_modules/yaml/dist/schema/core/float.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var stringifyNumber = require_stringifyNumber();
    var floatNaN = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
      resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
      stringify: stringifyNumber.stringifyNumber
    };
    var floatExp = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      format: "EXP",
      test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
      resolve: (str) => parseFloat(str),
      stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
      }
    };
    var float = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
      resolve(str) {
        const node = new Scalar.Scalar(parseFloat(str));
        const dot = str.indexOf(".");
        if (dot !== -1 && str[str.length - 1] === "0")
          node.minFractionDigits = str.length - dot - 1;
        return node;
      },
      stringify: stringifyNumber.stringifyNumber
    };
    exports2.float = float;
    exports2.floatExp = floatExp;
    exports2.floatNaN = floatNaN;
  }
});

// node_modules/yaml/dist/schema/core/int.js
var require_int = __commonJS({
  "node_modules/yaml/dist/schema/core/int.js"(exports2) {
    "use strict";
    var stringifyNumber = require_stringifyNumber();
    var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
    var intResolve = (str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
    function intStringify(node, radix, prefix) {
      const { value } = node;
      if (intIdentify(value) && value >= 0)
        return prefix + value.toString(radix);
      return stringifyNumber.stringifyNumber(node);
    }
    var intOct = {
      identify: (value) => intIdentify(value) && value >= 0,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "OCT",
      test: /^0o[0-7]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
      stringify: (node) => intStringify(node, 8, "0o")
    };
    var int = {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^[-+]?[0-9]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
      stringify: stringifyNumber.stringifyNumber
    };
    var intHex = {
      identify: (value) => intIdentify(value) && value >= 0,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "HEX",
      test: /^0x[0-9a-fA-F]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
      stringify: (node) => intStringify(node, 16, "0x")
    };
    exports2.int = int;
    exports2.intHex = intHex;
    exports2.intOct = intOct;
  }
});

// node_modules/yaml/dist/schema/core/schema.js
var require_schema = __commonJS({
  "node_modules/yaml/dist/schema/core/schema.js"(exports2) {
    "use strict";
    var map = require_map();
    var _null = require_null();
    var seq = require_seq();
    var string = require_string();
    var bool = require_bool();
    var float = require_float();
    var int = require_int();
    var schema = [
      map.map,
      seq.seq,
      string.string,
      _null.nullTag,
      bool.boolTag,
      int.intOct,
      int.int,
      int.intHex,
      float.floatNaN,
      float.floatExp,
      float.float
    ];
    exports2.schema = schema;
  }
});

// node_modules/yaml/dist/schema/json/schema.js
var require_schema2 = __commonJS({
  "node_modules/yaml/dist/schema/json/schema.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var map = require_map();
    var seq = require_seq();
    function intIdentify(value) {
      return typeof value === "bigint" || Number.isInteger(value);
    }
    var stringifyJSON = ({ value }) => JSON.stringify(value);
    var jsonScalars = [
      {
        identify: (value) => typeof value === "string",
        default: true,
        tag: "tag:yaml.org,2002:str",
        resolve: (str) => str,
        stringify: stringifyJSON
      },
      {
        identify: (value) => value == null,
        createNode: () => new Scalar.Scalar(null),
        default: true,
        tag: "tag:yaml.org,2002:null",
        test: /^null$/,
        resolve: () => null,
        stringify: stringifyJSON
      },
      {
        identify: (value) => typeof value === "boolean",
        default: true,
        tag: "tag:yaml.org,2002:bool",
        test: /^true$|^false$/,
        resolve: (str) => str === "true",
        stringify: stringifyJSON
      },
      {
        identify: intIdentify,
        default: true,
        tag: "tag:yaml.org,2002:int",
        test: /^-?(?:0|[1-9][0-9]*)$/,
        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
      },
      {
        identify: (value) => typeof value === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
        resolve: (str) => parseFloat(str),
        stringify: stringifyJSON
      }
    ];
    var jsonError = {
      default: true,
      tag: "",
      test: /^/,
      resolve(str, onError) {
        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
        return str;
      }
    };
    var schema = [map.map, seq.seq].concat(jsonScalars, jsonError);
    exports2.schema = schema;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/binary.js
var require_binary = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/binary.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var stringifyString = require_stringifyString();
    var binary = {
      identify: (value) => value instanceof Uint8Array,
      // Buffer inherits from Uint8Array
      default: false,
      tag: "tag:yaml.org,2002:binary",
      /**
       * Returns a Buffer in node and an Uint8Array in browsers
       *
       * To use the resulting buffer as an image, you'll want to do something like:
       *
       *   const blob = new Blob([buffer], { type: 'image/jpeg' })
       *   document.querySelector('#photo').src = URL.createObjectURL(blob)
       */
      resolve(src, onError) {
        if (typeof Buffer === "function") {
          return Buffer.from(src, "base64");
        } else if (typeof atob === "function") {
          const str = atob(src.replace(/[\n\r]/g, ""));
          const buffer = new Uint8Array(str.length);
          for (let i = 0; i < str.length; ++i)
            buffer[i] = str.charCodeAt(i);
          return buffer;
        } else {
          onError("This environment does not support reading binary tags; either Buffer or atob is required");
          return src;
        }
      },
      stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
        const buf = value;
        let str;
        if (typeof Buffer === "function") {
          str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
        } else if (typeof btoa === "function") {
          let s = "";
          for (let i = 0; i < buf.length; ++i)
            s += String.fromCharCode(buf[i]);
          str = btoa(s);
        } else {
          throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
        }
        if (!type)
          type = Scalar.Scalar.BLOCK_LITERAL;
        if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
          const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
          const n = Math.ceil(str.length / lineWidth);
          const lines = new Array(n);
          for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
            lines[i] = str.substr(o, lineWidth);
          }
          str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? "\n" : " ");
        }
        return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
      }
    };
    exports2.binary = binary;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/pairs.js
var require_pairs = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/pairs.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Pair = require_Pair();
    var Scalar = require_Scalar();
    var YAMLSeq = require_YAMLSeq();
    function resolvePairs(seq, onError) {
      if (identity.isSeq(seq)) {
        for (let i = 0; i < seq.items.length; ++i) {
          let item = seq.items[i];
          if (identity.isPair(item))
            continue;
          else if (identity.isMap(item)) {
            if (item.items.length > 1)
              onError("Each pair must have its own sequence indicator");
            const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));
            if (item.commentBefore)
              pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
            if (item.comment) {
              const cn = pair.value ?? pair.key;
              cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
            }
            item = pair;
          }
          seq.items[i] = identity.isPair(item) ? item : new Pair.Pair(item);
        }
      } else
        onError("Expected a sequence for this tag");
      return seq;
    }
    function createPairs(schema, iterable, ctx) {
      const { replacer } = ctx;
      const pairs2 = new YAMLSeq.YAMLSeq(schema);
      pairs2.tag = "tag:yaml.org,2002:pairs";
      let i = 0;
      if (iterable && Symbol.iterator in Object(iterable))
        for (let it of iterable) {
          if (typeof replacer === "function")
            it = replacer.call(iterable, String(i++), it);
          let key, value;
          if (Array.isArray(it)) {
            if (it.length === 2) {
              key = it[0];
              value = it[1];
            } else
              throw new TypeError(`Expected [key, value] tuple: ${it}`);
          } else if (it && it instanceof Object) {
            const keys = Object.keys(it);
            if (keys.length === 1) {
              key = keys[0];
              value = it[key];
            } else {
              throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
            }
          } else {
            key = it;
          }
          pairs2.items.push(Pair.createPair(key, value, ctx));
        }
      return pairs2;
    }
    var pairs = {
      collection: "seq",
      default: false,
      tag: "tag:yaml.org,2002:pairs",
      resolve: resolvePairs,
      createNode: createPairs
    };
    exports2.createPairs = createPairs;
    exports2.pairs = pairs;
    exports2.resolvePairs = resolvePairs;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/omap.js
var require_omap = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/omap.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var toJS = require_toJS();
    var YAMLMap = require_YAMLMap();
    var YAMLSeq = require_YAMLSeq();
    var pairs = require_pairs();
    var YAMLOMap = class _YAMLOMap extends YAMLSeq.YAMLSeq {
      constructor() {
        super();
        this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
        this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
        this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
        this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
        this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
        this.tag = _YAMLOMap.tag;
      }
      /**
       * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
       * but TypeScript won't allow widening the signature of a child method.
       */
      toJSON(_, ctx) {
        if (!ctx)
          return super.toJSON(_);
        const map = /* @__PURE__ */ new Map();
        if (ctx?.onCreate)
          ctx.onCreate(map);
        for (const pair of this.items) {
          let key, value;
          if (identity.isPair(pair)) {
            key = toJS.toJS(pair.key, "", ctx);
            value = toJS.toJS(pair.value, key, ctx);
          } else {
            key = toJS.toJS(pair, "", ctx);
          }
          if (map.has(key))
            throw new Error("Ordered maps must not include duplicate keys");
          map.set(key, value);
        }
        return map;
      }
      static from(schema, iterable, ctx) {
        const pairs$1 = pairs.createPairs(schema, iterable, ctx);
        const omap2 = new this();
        omap2.items = pairs$1.items;
        return omap2;
      }
    };
    YAMLOMap.tag = "tag:yaml.org,2002:omap";
    var omap = {
      collection: "seq",
      identify: (value) => value instanceof Map,
      nodeClass: YAMLOMap,
      default: false,
      tag: "tag:yaml.org,2002:omap",
      resolve(seq, onError) {
        const pairs$1 = pairs.resolvePairs(seq, onError);
        const seenKeys = [];
        for (const { key } of pairs$1.items) {
          if (identity.isScalar(key)) {
            if (seenKeys.includes(key.value)) {
              onError(`Ordered maps must not include duplicate keys: ${key.value}`);
            } else {
              seenKeys.push(key.value);
            }
          }
        }
        return Object.assign(new YAMLOMap(), pairs$1);
      },
      createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)
    };
    exports2.YAMLOMap = YAMLOMap;
    exports2.omap = omap;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/bool.js
var require_bool2 = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/bool.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    function boolStringify({ value, source }, ctx) {
      const boolObj = value ? trueTag : falseTag;
      if (source && boolObj.test.test(source))
        return source;
      return value ? ctx.options.trueStr : ctx.options.falseStr;
    }
    var trueTag = {
      identify: (value) => value === true,
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
      resolve: () => new Scalar.Scalar(true),
      stringify: boolStringify
    };
    var falseTag = {
      identify: (value) => value === false,
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
      resolve: () => new Scalar.Scalar(false),
      stringify: boolStringify
    };
    exports2.falseTag = falseTag;
    exports2.trueTag = trueTag;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/float.js
var require_float2 = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/float.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var stringifyNumber = require_stringifyNumber();
    var floatNaN = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
      resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
      stringify: stringifyNumber.stringifyNumber
    };
    var floatExp = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      format: "EXP",
      test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
      resolve: (str) => parseFloat(str.replace(/_/g, "")),
      stringify(node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
      }
    };
    var float = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
      resolve(str) {
        const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, "")));
        const dot = str.indexOf(".");
        if (dot !== -1) {
          const f = str.substring(dot + 1).replace(/_/g, "");
          if (f[f.length - 1] === "0")
            node.minFractionDigits = f.length;
        }
        return node;
      },
      stringify: stringifyNumber.stringifyNumber
    };
    exports2.float = float;
    exports2.floatExp = floatExp;
    exports2.floatNaN = floatNaN;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/int.js
var require_int2 = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/int.js"(exports2) {
    "use strict";
    var stringifyNumber = require_stringifyNumber();
    var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
    function intResolve(str, offset, radix, { intAsBigInt }) {
      const sign = str[0];
      if (sign === "-" || sign === "+")
        offset += 1;
      str = str.substring(offset).replace(/_/g, "");
      if (intAsBigInt) {
        switch (radix) {
          case 2:
            str = `0b${str}`;
            break;
          case 8:
            str = `0o${str}`;
            break;
          case 16:
            str = `0x${str}`;
            break;
        }
        const n2 = BigInt(str);
        return sign === "-" ? BigInt(-1) * n2 : n2;
      }
      const n = parseInt(str, radix);
      return sign === "-" ? -1 * n : n;
    }
    function intStringify(node, radix, prefix) {
      const { value } = node;
      if (intIdentify(value)) {
        const str = value.toString(radix);
        return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
      }
      return stringifyNumber.stringifyNumber(node);
    }
    var intBin = {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "BIN",
      test: /^[-+]?0b[0-1_]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
      stringify: (node) => intStringify(node, 2, "0b")
    };
    var intOct = {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "OCT",
      test: /^[-+]?0[0-7_]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
      stringify: (node) => intStringify(node, 8, "0")
    };
    var int = {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^[-+]?[0-9][0-9_]*$/,
      resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
      stringify: stringifyNumber.stringifyNumber
    };
    var intHex = {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "HEX",
      test: /^[-+]?0x[0-9a-fA-F_]+$/,
      resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
      stringify: (node) => intStringify(node, 16, "0x")
    };
    exports2.int = int;
    exports2.intBin = intBin;
    exports2.intHex = intHex;
    exports2.intOct = intOct;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/set.js
var require_set = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/set.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Pair = require_Pair();
    var YAMLMap = require_YAMLMap();
    var YAMLSet = class _YAMLSet extends YAMLMap.YAMLMap {
      constructor(schema) {
        super(schema);
        this.tag = _YAMLSet.tag;
      }
      add(key) {
        let pair;
        if (identity.isPair(key))
          pair = key;
        else if (key && typeof key === "object" && "key" in key && "value" in key && key.value === null)
          pair = new Pair.Pair(key.key, null);
        else
          pair = new Pair.Pair(key, null);
        const prev = YAMLMap.findPair(this.items, pair.key);
        if (!prev)
          this.items.push(pair);
      }
      /**
       * If `keepPair` is `true`, returns the Pair matching `key`.
       * Otherwise, returns the value of that Pair's key.
       */
      get(key, keepPair) {
        const pair = YAMLMap.findPair(this.items, key);
        return !keepPair && identity.isPair(pair) ? identity.isScalar(pair.key) ? pair.key.value : pair.key : pair;
      }
      set(key, value) {
        if (typeof value !== "boolean")
          throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
        const prev = YAMLMap.findPair(this.items, key);
        if (prev && !value) {
          this.items.splice(this.items.indexOf(prev), 1);
        } else if (!prev && value) {
          this.items.push(new Pair.Pair(key));
        }
      }
      toJSON(_, ctx) {
        return super.toJSON(_, ctx, Set);
      }
      toString(ctx, onComment, onChompKeep) {
        if (!ctx)
          return JSON.stringify(this);
        if (this.hasAllNullValues(true))
          return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
        else
          throw new Error("Set items must all have null values");
      }
      static from(schema, iterable, ctx) {
        const { replacer } = ctx;
        const set2 = new this(schema);
        if (iterable && Symbol.iterator in Object(iterable))
          for (let value of iterable) {
            if (typeof replacer === "function")
              value = replacer.call(iterable, value, value);
            set2.items.push(Pair.createPair(value, null, ctx));
          }
        return set2;
      }
    };
    YAMLSet.tag = "tag:yaml.org,2002:set";
    var set = {
      collection: "map",
      identify: (value) => value instanceof Set,
      nodeClass: YAMLSet,
      default: false,
      tag: "tag:yaml.org,2002:set",
      createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),
      resolve(map, onError) {
        if (identity.isMap(map)) {
          if (map.hasAllNullValues(true))
            return Object.assign(new YAMLSet(), map);
          else
            onError("Set items must all have null values");
        } else
          onError("Expected a mapping for this tag");
        return map;
      }
    };
    exports2.YAMLSet = YAMLSet;
    exports2.set = set;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/timestamp.js"(exports2) {
    "use strict";
    var stringifyNumber = require_stringifyNumber();
    function parseSexagesimal(str, asBigInt) {
      const sign = str[0];
      const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
      const num = (n) => asBigInt ? BigInt(n) : Number(n);
      const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
      return sign === "-" ? num(-1) * res : res;
    }
    function stringifySexagesimal(node) {
      let { value } = node;
      let num = (n) => n;
      if (typeof value === "bigint")
        num = (n) => BigInt(n);
      else if (isNaN(value) || !isFinite(value))
        return stringifyNumber.stringifyNumber(node);
      let sign = "";
      if (value < 0) {
        sign = "-";
        value *= num(-1);
      }
      const _60 = num(60);
      const parts = [value % _60];
      if (value < 60) {
        parts.unshift(0);
      } else {
        value = (value - parts[0]) / _60;
        parts.unshift(value % _60);
        if (value >= 60) {
          value = (value - parts[0]) / _60;
          parts.unshift(value);
        }
      }
      return sign + parts.map((n) => String(n).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
    }
    var intTime = {
      identify: (value) => typeof value === "bigint" || Number.isInteger(value),
      default: true,
      tag: "tag:yaml.org,2002:int",
      format: "TIME",
      test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
      resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
      stringify: stringifySexagesimal
    };
    var floatTime = {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      format: "TIME",
      test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
      resolve: (str) => parseSexagesimal(str, false),
      stringify: stringifySexagesimal
    };
    var timestamp = {
      identify: (value) => value instanceof Date,
      default: true,
      tag: "tag:yaml.org,2002:timestamp",
      // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
      // may be omitted altogether, resulting in a date format. In such a case, the time part is
      // assumed to be 00:00:00Z (start of day, UTC).
      test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
      resolve(str) {
        const match = str.match(timestamp.test);
        if (!match)
          throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
        const [, year, month, day, hour, minute, second] = match.map(Number);
        const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
        const tz = match[8];
        if (tz && tz !== "Z") {
          let d = parseSexagesimal(tz, false);
          if (Math.abs(d) < 30)
            d *= 60;
          date -= 6e4 * d;
        }
        return new Date(date);
      },
      stringify: ({ value }) => value.toISOString().replace(/(T00:00:00)?\.000Z$/, "")
    };
    exports2.floatTime = floatTime;
    exports2.intTime = intTime;
    exports2.timestamp = timestamp;
  }
});

// node_modules/yaml/dist/schema/yaml-1.1/schema.js
var require_schema3 = __commonJS({
  "node_modules/yaml/dist/schema/yaml-1.1/schema.js"(exports2) {
    "use strict";
    var map = require_map();
    var _null = require_null();
    var seq = require_seq();
    var string = require_string();
    var binary = require_binary();
    var bool = require_bool2();
    var float = require_float2();
    var int = require_int2();
    var merge = require_merge();
    var omap = require_omap();
    var pairs = require_pairs();
    var set = require_set();
    var timestamp = require_timestamp();
    var schema = [
      map.map,
      seq.seq,
      string.string,
      _null.nullTag,
      bool.trueTag,
      bool.falseTag,
      int.intBin,
      int.intOct,
      int.int,
      int.intHex,
      float.floatNaN,
      float.floatExp,
      float.float,
      binary.binary,
      merge.merge,
      omap.omap,
      pairs.pairs,
      set.set,
      timestamp.intTime,
      timestamp.floatTime,
      timestamp.timestamp
    ];
    exports2.schema = schema;
  }
});

// node_modules/yaml/dist/schema/tags.js
var require_tags = __commonJS({
  "node_modules/yaml/dist/schema/tags.js"(exports2) {
    "use strict";
    var map = require_map();
    var _null = require_null();
    var seq = require_seq();
    var string = require_string();
    var bool = require_bool();
    var float = require_float();
    var int = require_int();
    var schema = require_schema();
    var schema$1 = require_schema2();
    var binary = require_binary();
    var merge = require_merge();
    var omap = require_omap();
    var pairs = require_pairs();
    var schema$2 = require_schema3();
    var set = require_set();
    var timestamp = require_timestamp();
    var schemas = /* @__PURE__ */ new Map([
      ["core", schema.schema],
      ["failsafe", [map.map, seq.seq, string.string]],
      ["json", schema$1.schema],
      ["yaml11", schema$2.schema],
      ["yaml-1.1", schema$2.schema]
    ]);
    var tagsByName = {
      binary: binary.binary,
      bool: bool.boolTag,
      float: float.float,
      floatExp: float.floatExp,
      floatNaN: float.floatNaN,
      floatTime: timestamp.floatTime,
      int: int.int,
      intHex: int.intHex,
      intOct: int.intOct,
      intTime: timestamp.intTime,
      map: map.map,
      merge: merge.merge,
      null: _null.nullTag,
      omap: omap.omap,
      pairs: pairs.pairs,
      seq: seq.seq,
      set: set.set,
      timestamp: timestamp.timestamp
    };
    var coreKnownTags = {
      "tag:yaml.org,2002:binary": binary.binary,
      "tag:yaml.org,2002:merge": merge.merge,
      "tag:yaml.org,2002:omap": omap.omap,
      "tag:yaml.org,2002:pairs": pairs.pairs,
      "tag:yaml.org,2002:set": set.set,
      "tag:yaml.org,2002:timestamp": timestamp.timestamp
    };
    function getTags(customTags, schemaName, addMergeTag) {
      const schemaTags = schemas.get(schemaName);
      if (schemaTags && !customTags) {
        return addMergeTag && !schemaTags.includes(merge.merge) ? schemaTags.concat(merge.merge) : schemaTags.slice();
      }
      let tags = schemaTags;
      if (!tags) {
        if (Array.isArray(customTags))
          tags = [];
        else {
          const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
          throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
        }
      }
      if (Array.isArray(customTags)) {
        for (const tag of customTags)
          tags = tags.concat(tag);
      } else if (typeof customTags === "function") {
        tags = customTags(tags.slice());
      }
      if (addMergeTag)
        tags = tags.concat(merge.merge);
      return tags.reduce((tags2, tag) => {
        const tagObj = typeof tag === "string" ? tagsByName[tag] : tag;
        if (!tagObj) {
          const tagName = JSON.stringify(tag);
          const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
          throw new Error(`Unknown custom tag ${tagName}; use one of ${keys}`);
        }
        if (!tags2.includes(tagObj))
          tags2.push(tagObj);
        return tags2;
      }, []);
    }
    exports2.coreKnownTags = coreKnownTags;
    exports2.getTags = getTags;
  }
});

// node_modules/yaml/dist/schema/Schema.js
var require_Schema = __commonJS({
  "node_modules/yaml/dist/schema/Schema.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var map = require_map();
    var seq = require_seq();
    var string = require_string();
    var tags = require_tags();
    var sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
    var Schema = class _Schema {
      constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
        this.compat = Array.isArray(compat) ? tags.getTags(compat, "compat") : compat ? tags.getTags(null, compat) : null;
        this.name = typeof schema === "string" && schema || "core";
        this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
        this.tags = tags.getTags(customTags, this.name, merge);
        this.toStringOptions = toStringDefaults ?? null;
        Object.defineProperty(this, identity.MAP, { value: map.map });
        Object.defineProperty(this, identity.SCALAR, { value: string.string });
        Object.defineProperty(this, identity.SEQ, { value: seq.seq });
        this.sortMapEntries = typeof sortMapEntries === "function" ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
      }
      clone() {
        const copy = Object.create(_Schema.prototype, Object.getOwnPropertyDescriptors(this));
        copy.tags = this.tags.slice();
        return copy;
      }
    };
    exports2.Schema = Schema;
  }
});

// node_modules/yaml/dist/stringify/stringifyDocument.js
var require_stringifyDocument = __commonJS({
  "node_modules/yaml/dist/stringify/stringifyDocument.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var stringify = require_stringify();
    var stringifyComment = require_stringifyComment();
    function stringifyDocument(doc, options) {
      const lines = [];
      let hasDirectives = options.directives === true;
      if (options.directives !== false && doc.directives) {
        const dir = doc.directives.toString(doc);
        if (dir) {
          lines.push(dir);
          hasDirectives = true;
        } else if (doc.directives.docStart)
          hasDirectives = true;
      }
      if (hasDirectives)
        lines.push("---");
      const ctx = stringify.createStringifyContext(doc, options);
      const { commentString } = ctx.options;
      if (doc.commentBefore) {
        if (lines.length !== 1)
          lines.unshift("");
        const cs = commentString(doc.commentBefore);
        lines.unshift(stringifyComment.indentComment(cs, ""));
      }
      let chompKeep = false;
      let contentComment = null;
      if (doc.contents) {
        if (identity.isNode(doc.contents)) {
          if (doc.contents.spaceBefore && hasDirectives)
            lines.push("");
          if (doc.contents.commentBefore) {
            const cs = commentString(doc.contents.commentBefore);
            lines.push(stringifyComment.indentComment(cs, ""));
          }
          ctx.forceBlockIndent = !!doc.comment;
          contentComment = doc.contents.comment;
        }
        const onChompKeep = contentComment ? void 0 : () => chompKeep = true;
        let body = stringify.stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);
        if (contentComment)
          body += stringifyComment.lineComment(body, "", commentString(contentComment));
        if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
          lines[lines.length - 1] = `--- ${body}`;
        } else
          lines.push(body);
      } else {
        lines.push(stringify.stringify(doc.contents, ctx));
      }
      if (doc.directives?.docEnd) {
        if (doc.comment) {
          const cs = commentString(doc.comment);
          if (cs.includes("\n")) {
            lines.push("...");
            lines.push(stringifyComment.indentComment(cs, ""));
          } else {
            lines.push(`... ${cs}`);
          }
        } else {
          lines.push("...");
        }
      } else {
        let dc = doc.comment;
        if (dc && chompKeep)
          dc = dc.replace(/^\n+/, "");
        if (dc) {
          if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
            lines.push("");
          lines.push(stringifyComment.indentComment(commentString(dc), ""));
        }
      }
      return lines.join("\n") + "\n";
    }
    exports2.stringifyDocument = stringifyDocument;
  }
});

// node_modules/yaml/dist/doc/Document.js
var require_Document = __commonJS({
  "node_modules/yaml/dist/doc/Document.js"(exports2) {
    "use strict";
    var Alias = require_Alias();
    var Collection = require_Collection();
    var identity = require_identity();
    var Pair = require_Pair();
    var toJS = require_toJS();
    var Schema = require_Schema();
    var stringifyDocument = require_stringifyDocument();
    var anchors = require_anchors();
    var applyReviver = require_applyReviver();
    var createNode = require_createNode();
    var directives = require_directives();
    var Document = class _Document {
      constructor(value, replacer, options) {
        this.commentBefore = null;
        this.comment = null;
        this.errors = [];
        this.warnings = [];
        Object.defineProperty(this, identity.NODE_TYPE, { value: identity.DOC });
        let _replacer = null;
        if (typeof replacer === "function" || Array.isArray(replacer)) {
          _replacer = replacer;
        } else if (options === void 0 && replacer) {
          options = replacer;
          replacer = void 0;
        }
        const opt = Object.assign({
          intAsBigInt: false,
          keepSourceTokens: false,
          logLevel: "warn",
          prettyErrors: true,
          strict: true,
          stringKeys: false,
          uniqueKeys: true,
          version: "1.2"
        }, options);
        this.options = opt;
        let { version } = opt;
        if (options?._directives) {
          this.directives = options._directives.atDocument();
          if (this.directives.yaml.explicit)
            version = this.directives.yaml.version;
        } else
          this.directives = new directives.Directives({ version });
        this.setSchema(version, options);
        this.contents = value === void 0 ? null : this.createNode(value, _replacer, options);
      }
      /**
       * Create a deep copy of this Document and its contents.
       *
       * Custom Node values that inherit from `Object` still refer to their original instances.
       */
      clone() {
        const copy = Object.create(_Document.prototype, {
          [identity.NODE_TYPE]: { value: identity.DOC }
        });
        copy.commentBefore = this.commentBefore;
        copy.comment = this.comment;
        copy.errors = this.errors.slice();
        copy.warnings = this.warnings.slice();
        copy.options = Object.assign({}, this.options);
        if (this.directives)
          copy.directives = this.directives.clone();
        copy.schema = this.schema.clone();
        copy.contents = identity.isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
        if (this.range)
          copy.range = this.range.slice();
        return copy;
      }
      /** Adds a value to the document. */
      add(value) {
        if (assertCollection(this.contents))
          this.contents.add(value);
      }
      /** Adds a value to the document. */
      addIn(path3, value) {
        if (assertCollection(this.contents))
          this.contents.addIn(path3, value);
      }
      /**
       * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
       *
       * If `node` already has an anchor, `name` is ignored.
       * Otherwise, the `node.anchor` value will be set to `name`,
       * or if an anchor with that name is already present in the document,
       * `name` will be used as a prefix for a new unique anchor.
       * If `name` is undefined, the generated anchor will use 'a' as a prefix.
       */
      createAlias(node, name) {
        if (!node.anchor) {
          const prev = anchors.anchorNames(this);
          node.anchor = // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
          !name || prev.has(name) ? anchors.findNewAnchor(name || "a", prev) : name;
        }
        return new Alias.Alias(node.anchor);
      }
      createNode(value, replacer, options) {
        let _replacer = void 0;
        if (typeof replacer === "function") {
          value = replacer.call({ "": value }, "", value);
          _replacer = replacer;
        } else if (Array.isArray(replacer)) {
          const keyToStr = (v) => typeof v === "number" || v instanceof String || v instanceof Number;
          const asStr = replacer.filter(keyToStr).map(String);
          if (asStr.length > 0)
            replacer = replacer.concat(asStr);
          _replacer = replacer;
        } else if (options === void 0 && replacer) {
          options = replacer;
          replacer = void 0;
        }
        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
        const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(
          this,
          // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
          anchorPrefix || "a"
        );
        const ctx = {
          aliasDuplicateObjects: aliasDuplicateObjects ?? true,
          keepUndefined: keepUndefined ?? false,
          onAnchor,
          onTagObj,
          replacer: _replacer,
          schema: this.schema,
          sourceObjects
        };
        const node = createNode.createNode(value, tag, ctx);
        if (flow && identity.isCollection(node))
          node.flow = true;
        setAnchors();
        return node;
      }
      /**
       * Convert a key and a value into a `Pair` using the current schema,
       * recursively wrapping all values as `Scalar` or `Collection` nodes.
       */
      createPair(key, value, options = {}) {
        const k = this.createNode(key, null, options);
        const v = this.createNode(value, null, options);
        return new Pair.Pair(k, v);
      }
      /**
       * Removes a value from the document.
       * @returns `true` if the item was found and removed.
       */
      delete(key) {
        return assertCollection(this.contents) ? this.contents.delete(key) : false;
      }
      /**
       * Removes a value from the document.
       * @returns `true` if the item was found and removed.
       */
      deleteIn(path3) {
        if (Collection.isEmptyPath(path3)) {
          if (this.contents == null)
            return false;
          this.contents = null;
          return true;
        }
        return assertCollection(this.contents) ? this.contents.deleteIn(path3) : false;
      }
      /**
       * Returns item at `key`, or `undefined` if not found. By default unwraps
       * scalar values from their surrounding node; to disable set `keepScalar` to
       * `true` (collections are always returned intact).
       */
      get(key, keepScalar) {
        return identity.isCollection(this.contents) ? this.contents.get(key, keepScalar) : void 0;
      }
      /**
       * Returns item at `path`, or `undefined` if not found. By default unwraps
       * scalar values from their surrounding node; to disable set `keepScalar` to
       * `true` (collections are always returned intact).
       */
      getIn(path3, keepScalar) {
        if (Collection.isEmptyPath(path3))
          return !keepScalar && identity.isScalar(this.contents) ? this.contents.value : this.contents;
        return identity.isCollection(this.contents) ? this.contents.getIn(path3, keepScalar) : void 0;
      }
      /**
       * Checks if the document includes a value with the key `key`.
       */
      has(key) {
        return identity.isCollection(this.contents) ? this.contents.has(key) : false;
      }
      /**
       * Checks if the document includes a value at `path`.
       */
      hasIn(path3) {
        if (Collection.isEmptyPath(path3))
          return this.contents !== void 0;
        return identity.isCollection(this.contents) ? this.contents.hasIn(path3) : false;
      }
      /**
       * Sets a value in this document. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       */
      set(key, value) {
        if (this.contents == null) {
          this.contents = Collection.collectionFromPath(this.schema, [key], value);
        } else if (assertCollection(this.contents)) {
          this.contents.set(key, value);
        }
      }
      /**
       * Sets a value in this document. For `!!set`, `value` needs to be a
       * boolean to add/remove the item from the set.
       */
      setIn(path3, value) {
        if (Collection.isEmptyPath(path3)) {
          this.contents = value;
        } else if (this.contents == null) {
          this.contents = Collection.collectionFromPath(this.schema, Array.from(path3), value);
        } else if (assertCollection(this.contents)) {
          this.contents.setIn(path3, value);
        }
      }
      /**
       * Change the YAML version and schema used by the document.
       * A `null` version disables support for directives, explicit tags, anchors, and aliases.
       * It also requires the `schema` option to be given as a `Schema` instance value.
       *
       * Overrides all previously set schema options.
       */
      setSchema(version, options = {}) {
        if (typeof version === "number")
          version = String(version);
        let opt;
        switch (version) {
          case "1.1":
            if (this.directives)
              this.directives.yaml.version = "1.1";
            else
              this.directives = new directives.Directives({ version: "1.1" });
            opt = { resolveKnownTags: false, schema: "yaml-1.1" };
            break;
          case "1.2":
          case "next":
            if (this.directives)
              this.directives.yaml.version = version;
            else
              this.directives = new directives.Directives({ version });
            opt = { resolveKnownTags: true, schema: "core" };
            break;
          case null:
            if (this.directives)
              delete this.directives;
            opt = null;
            break;
          default: {
            const sv = JSON.stringify(version);
            throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
          }
        }
        if (options.schema instanceof Object)
          this.schema = options.schema;
        else if (opt)
          this.schema = new Schema.Schema(Object.assign(opt, options));
        else
          throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
      }
      // json & jsonArg are only used from toJSON()
      toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        const ctx = {
          anchors: /* @__PURE__ */ new Map(),
          doc: this,
          keep: !json,
          mapAsMap: mapAsMap === true,
          mapKeyWarned: false,
          maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
        };
        const res = toJS.toJS(this.contents, jsonArg ?? "", ctx);
        if (typeof onAnchor === "function")
          for (const { count, res: res2 } of ctx.anchors.values())
            onAnchor(res2, count);
        return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
      }
      /**
       * A JSON representation of the document `contents`.
       *
       * @param jsonArg Used by `JSON.stringify` to indicate the array index or
       *   property name.
       */
      toJSON(jsonArg, onAnchor) {
        return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
      }
      /** A YAML representation of the document. */
      toString(options = {}) {
        if (this.errors.length > 0)
          throw new Error("Document with errors cannot be stringified");
        if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
          const s = JSON.stringify(options.indent);
          throw new Error(`"indent" option must be a positive integer, not ${s}`);
        }
        return stringifyDocument.stringifyDocument(this, options);
      }
    };
    function assertCollection(contents) {
      if (identity.isCollection(contents))
        return true;
      throw new Error("Expected a YAML collection as document contents");
    }
    exports2.Document = Document;
  }
});

// node_modules/yaml/dist/errors.js
var require_errors4 = __commonJS({
  "node_modules/yaml/dist/errors.js"(exports2) {
    "use strict";
    var YAMLError = class extends Error {
      constructor(name, pos, code, message) {
        super();
        this.name = name;
        this.code = code;
        this.message = message;
        this.pos = pos;
      }
    };
    var YAMLParseError = class extends YAMLError {
      constructor(pos, code, message) {
        super("YAMLParseError", pos, code, message);
      }
    };
    var YAMLWarning = class extends YAMLError {
      constructor(pos, code, message) {
        super("YAMLWarning", pos, code, message);
      }
    };
    var prettifyError = (src, lc) => (error) => {
      if (error.pos[0] === -1)
        return;
      error.linePos = error.pos.map((pos) => lc.linePos(pos));
      const { line, col } = error.linePos[0];
      error.message += ` at line ${line}, column ${col}`;
      let ci = col - 1;
      let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
      if (ci >= 60 && lineStr.length > 80) {
        const trimStart = Math.min(ci - 39, lineStr.length - 79);
        lineStr = "\u2026" + lineStr.substring(trimStart);
        ci -= trimStart - 1;
      }
      if (lineStr.length > 80)
        lineStr = lineStr.substring(0, 79) + "\u2026";
      if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
        if (prev.length > 80)
          prev = prev.substring(0, 79) + "\u2026\n";
        lineStr = prev + lineStr;
      }
      if (/[^ ]/.test(lineStr)) {
        let count = 1;
        const end = error.linePos[1];
        if (end && end.line === line && end.col > col) {
          count = Math.max(1, Math.min(end.col - col, 80 - ci));
        }
        const pointer = " ".repeat(ci) + "^".repeat(count);
        error.message += `:

${lineStr}
${pointer}
`;
      }
    };
    exports2.YAMLError = YAMLError;
    exports2.YAMLParseError = YAMLParseError;
    exports2.YAMLWarning = YAMLWarning;
    exports2.prettifyError = prettifyError;
  }
});

// node_modules/yaml/dist/compose/resolve-props.js
var require_resolve_props = __commonJS({
  "node_modules/yaml/dist/compose/resolve-props.js"(exports2) {
    "use strict";
    function resolveProps(tokens, { flow, indicator, next, offset, onError, parentIndent, startOnNewline }) {
      let spaceBefore = false;
      let atNewline = startOnNewline;
      let hasSpace = startOnNewline;
      let comment = "";
      let commentSep = "";
      let hasNewline = false;
      let reqSpace = false;
      let tab = null;
      let anchor = null;
      let tag = null;
      let newlineAfterProp = null;
      let comma = null;
      let found = null;
      let start = null;
      for (const token of tokens) {
        if (reqSpace) {
          if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
            onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
          reqSpace = false;
        }
        if (tab) {
          if (atNewline && token.type !== "comment" && token.type !== "newline") {
            onError(tab, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
          }
          tab = null;
        }
        switch (token.type) {
          case "space":
            if (!flow && (indicator !== "doc-start" || next?.type !== "flow-collection") && token.source.includes("	")) {
              tab = token;
            }
            hasSpace = true;
            break;
          case "comment": {
            if (!hasSpace)
              onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
            const cb = token.source.substring(1) || " ";
            if (!comment)
              comment = cb;
            else
              comment += commentSep + cb;
            commentSep = "";
            atNewline = false;
            break;
          }
          case "newline":
            if (atNewline) {
              if (comment)
                comment += token.source;
              else
                spaceBefore = true;
            } else
              commentSep += token.source;
            atNewline = true;
            hasNewline = true;
            if (anchor || tag)
              newlineAfterProp = token;
            hasSpace = true;
            break;
          case "anchor":
            if (anchor)
              onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
            if (token.source.endsWith(":"))
              onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
            anchor = token;
            if (start === null)
              start = token.offset;
            atNewline = false;
            hasSpace = false;
            reqSpace = true;
            break;
          case "tag": {
            if (tag)
              onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
            tag = token;
            if (start === null)
              start = token.offset;
            atNewline = false;
            hasSpace = false;
            reqSpace = true;
            break;
          }
          case indicator:
            if (anchor || tag)
              onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
            if (found)
              onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow ?? "collection"}`);
            found = token;
            atNewline = indicator === "seq-item-ind" || indicator === "explicit-key-ind";
            hasSpace = false;
            break;
          case "comma":
            if (flow) {
              if (comma)
                onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
              comma = token;
              atNewline = false;
              hasSpace = false;
              break;
            }
          // else fallthrough
          default:
            onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
            atNewline = false;
            hasSpace = false;
        }
      }
      const last = tokens[tokens.length - 1];
      const end = last ? last.offset + last.source.length : offset;
      if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== "")) {
        onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
      }
      if (tab && (atNewline && tab.indent <= parentIndent || next?.type === "block-map" || next?.type === "block-seq"))
        onError(tab, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
      return {
        comma,
        found,
        spaceBefore,
        comment,
        hasNewline,
        anchor,
        tag,
        newlineAfterProp,
        end,
        start: start ?? end
      };
    }
    exports2.resolveProps = resolveProps;
  }
});

// node_modules/yaml/dist/compose/util-contains-newline.js
var require_util_contains_newline = __commonJS({
  "node_modules/yaml/dist/compose/util-contains-newline.js"(exports2) {
    "use strict";
    function containsNewline(key) {
      if (!key)
        return null;
      switch (key.type) {
        case "alias":
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
          if (key.source.includes("\n"))
            return true;
          if (key.end) {
            for (const st of key.end)
              if (st.type === "newline")
                return true;
          }
          return false;
        case "flow-collection":
          for (const it of key.items) {
            for (const st of it.start)
              if (st.type === "newline")
                return true;
            if (it.sep) {
              for (const st of it.sep)
                if (st.type === "newline")
                  return true;
            }
            if (containsNewline(it.key) || containsNewline(it.value))
              return true;
          }
          return false;
        default:
          return true;
      }
    }
    exports2.containsNewline = containsNewline;
  }
});

// node_modules/yaml/dist/compose/util-flow-indent-check.js
var require_util_flow_indent_check = __commonJS({
  "node_modules/yaml/dist/compose/util-flow-indent-check.js"(exports2) {
    "use strict";
    var utilContainsNewline = require_util_contains_newline();
    function flowIndentCheck(indent, fc, onError) {
      if (fc?.type === "flow-collection") {
        const end = fc.end[0];
        if (end.indent === indent && (end.source === "]" || end.source === "}") && utilContainsNewline.containsNewline(fc)) {
          const msg = "Flow end indicator should be more indented than parent";
          onError(end, "BAD_INDENT", msg, true);
        }
      }
    }
    exports2.flowIndentCheck = flowIndentCheck;
  }
});

// node_modules/yaml/dist/compose/util-map-includes.js
var require_util_map_includes = __commonJS({
  "node_modules/yaml/dist/compose/util-map-includes.js"(exports2) {
    "use strict";
    var identity = require_identity();
    function mapIncludes(ctx, items, search) {
      const { uniqueKeys } = ctx.options;
      if (uniqueKeys === false)
        return false;
      const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a, b) => a === b || identity.isScalar(a) && identity.isScalar(b) && a.value === b.value;
      return items.some((pair) => isEqual(pair.key, search));
    }
    exports2.mapIncludes = mapIncludes;
  }
});

// node_modules/yaml/dist/compose/resolve-block-map.js
var require_resolve_block_map = __commonJS({
  "node_modules/yaml/dist/compose/resolve-block-map.js"(exports2) {
    "use strict";
    var Pair = require_Pair();
    var YAMLMap = require_YAMLMap();
    var resolveProps = require_resolve_props();
    var utilContainsNewline = require_util_contains_newline();
    var utilFlowIndentCheck = require_util_flow_indent_check();
    var utilMapIncludes = require_util_map_includes();
    var startColMsg = "All mapping items must start at the same column";
    function resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {
      const NodeClass = tag?.nodeClass ?? YAMLMap.YAMLMap;
      const map = new NodeClass(ctx.schema);
      if (ctx.atRoot)
        ctx.atRoot = false;
      let offset = bm.offset;
      let commentEnd = null;
      for (const collItem of bm.items) {
        const { start, key, sep, value } = collItem;
        const keyProps = resolveProps.resolveProps(start, {
          indicator: "explicit-key-ind",
          next: key ?? sep?.[0],
          offset,
          onError,
          parentIndent: bm.indent,
          startOnNewline: true
        });
        const implicitKey = !keyProps.found;
        if (implicitKey) {
          if (key) {
            if (key.type === "block-seq")
              onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
            else if ("indent" in key && key.indent !== bm.indent)
              onError(offset, "BAD_INDENT", startColMsg);
          }
          if (!keyProps.anchor && !keyProps.tag && !sep) {
            commentEnd = keyProps.end;
            if (keyProps.comment) {
              if (map.comment)
                map.comment += "\n" + keyProps.comment;
              else
                map.comment = keyProps.comment;
            }
            continue;
          }
          if (keyProps.newlineAfterProp || utilContainsNewline.containsNewline(key)) {
            onError(key ?? start[start.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
          }
        } else if (keyProps.found?.indent !== bm.indent) {
          onError(offset, "BAD_INDENT", startColMsg);
        }
        ctx.atKey = true;
        const keyStart = keyProps.end;
        const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
        if (ctx.schema.compat)
          utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
        ctx.atKey = false;
        if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
          onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
        const valueProps = resolveProps.resolveProps(sep ?? [], {
          indicator: "map-value-ind",
          next: value,
          offset: keyNode.range[2],
          onError,
          parentIndent: bm.indent,
          startOnNewline: !key || key.type === "block-scalar"
        });
        offset = valueProps.end;
        if (valueProps.found) {
          if (implicitKey) {
            if (value?.type === "block-map" && !valueProps.hasNewline)
              onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
            if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
              onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
          }
          const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
          if (ctx.schema.compat)
            utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
          offset = valueNode.range[2];
          const pair = new Pair.Pair(keyNode, valueNode);
          if (ctx.options.keepSourceTokens)
            pair.srcToken = collItem;
          map.items.push(pair);
        } else {
          if (implicitKey)
            onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
          if (valueProps.comment) {
            if (keyNode.comment)
              keyNode.comment += "\n" + valueProps.comment;
            else
              keyNode.comment = valueProps.comment;
          }
          const pair = new Pair.Pair(keyNode);
          if (ctx.options.keepSourceTokens)
            pair.srcToken = collItem;
          map.items.push(pair);
        }
      }
      if (commentEnd && commentEnd < offset)
        onError(commentEnd, "IMPOSSIBLE", "Map comment with trailing content");
      map.range = [bm.offset, offset, commentEnd ?? offset];
      return map;
    }
    exports2.resolveBlockMap = resolveBlockMap;
  }
});

// node_modules/yaml/dist/compose/resolve-block-seq.js
var require_resolve_block_seq = __commonJS({
  "node_modules/yaml/dist/compose/resolve-block-seq.js"(exports2) {
    "use strict";
    var YAMLSeq = require_YAMLSeq();
    var resolveProps = require_resolve_props();
    var utilFlowIndentCheck = require_util_flow_indent_check();
    function resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {
      const NodeClass = tag?.nodeClass ?? YAMLSeq.YAMLSeq;
      const seq = new NodeClass(ctx.schema);
      if (ctx.atRoot)
        ctx.atRoot = false;
      if (ctx.atKey)
        ctx.atKey = false;
      let offset = bs.offset;
      let commentEnd = null;
      for (const { start, value } of bs.items) {
        const props = resolveProps.resolveProps(start, {
          indicator: "seq-item-ind",
          next: value,
          offset,
          onError,
          parentIndent: bs.indent,
          startOnNewline: true
        });
        if (!props.found) {
          if (props.anchor || props.tag || value) {
            if (value && value.type === "block-seq")
              onError(props.end, "BAD_INDENT", "All sequence items must start at the same column");
            else
              onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
          } else {
            commentEnd = props.end;
            if (props.comment)
              seq.comment = props.comment;
            continue;
          }
        }
        const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
        if (ctx.schema.compat)
          utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
        offset = node.range[2];
        seq.items.push(node);
      }
      seq.range = [bs.offset, offset, commentEnd ?? offset];
      return seq;
    }
    exports2.resolveBlockSeq = resolveBlockSeq;
  }
});

// node_modules/yaml/dist/compose/resolve-end.js
var require_resolve_end = __commonJS({
  "node_modules/yaml/dist/compose/resolve-end.js"(exports2) {
    "use strict";
    function resolveEnd(end, offset, reqSpace, onError) {
      let comment = "";
      if (end) {
        let hasSpace = false;
        let sep = "";
        for (const token of end) {
          const { source, type } = token;
          switch (type) {
            case "space":
              hasSpace = true;
              break;
            case "comment": {
              if (reqSpace && !hasSpace)
                onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
              const cb = source.substring(1) || " ";
              if (!comment)
                comment = cb;
              else
                comment += sep + cb;
              sep = "";
              break;
            }
            case "newline":
              if (comment)
                sep += source;
              hasSpace = true;
              break;
            default:
              onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
          }
          offset += source.length;
        }
      }
      return { comment, offset };
    }
    exports2.resolveEnd = resolveEnd;
  }
});

// node_modules/yaml/dist/compose/resolve-flow-collection.js
var require_resolve_flow_collection = __commonJS({
  "node_modules/yaml/dist/compose/resolve-flow-collection.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Pair = require_Pair();
    var YAMLMap = require_YAMLMap();
    var YAMLSeq = require_YAMLSeq();
    var resolveEnd = require_resolve_end();
    var resolveProps = require_resolve_props();
    var utilContainsNewline = require_util_contains_newline();
    var utilMapIncludes = require_util_map_includes();
    var blockMsg = "Block collections are not allowed within flow collections";
    var isBlock = (token) => token && (token.type === "block-map" || token.type === "block-seq");
    function resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {
      const isMap = fc.start.source === "{";
      const fcName = isMap ? "flow map" : "flow sequence";
      const NodeClass = tag?.nodeClass ?? (isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq);
      const coll = new NodeClass(ctx.schema);
      coll.flow = true;
      const atRoot = ctx.atRoot;
      if (atRoot)
        ctx.atRoot = false;
      if (ctx.atKey)
        ctx.atKey = false;
      let offset = fc.offset + fc.start.source.length;
      for (let i = 0; i < fc.items.length; ++i) {
        const collItem = fc.items[i];
        const { start, key, sep, value } = collItem;
        const props = resolveProps.resolveProps(start, {
          flow: fcName,
          indicator: "explicit-key-ind",
          next: key ?? sep?.[0],
          offset,
          onError,
          parentIndent: fc.indent,
          startOnNewline: false
        });
        if (!props.found) {
          if (!props.anchor && !props.tag && !sep && !value) {
            if (i === 0 && props.comma)
              onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
            else if (i < fc.items.length - 1)
              onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
            if (props.comment) {
              if (coll.comment)
                coll.comment += "\n" + props.comment;
              else
                coll.comment = props.comment;
            }
            offset = props.end;
            continue;
          }
          if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))
            onError(
              key,
              // checked by containsNewline()
              "MULTILINE_IMPLICIT_KEY",
              "Implicit keys of flow sequence pairs need to be on a single line"
            );
        }
        if (i === 0) {
          if (props.comma)
            onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
        } else {
          if (!props.comma)
            onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
          if (props.comment) {
            let prevItemComment = "";
            loop: for (const st of start) {
              switch (st.type) {
                case "comma":
                case "space":
                  break;
                case "comment":
                  prevItemComment = st.source.substring(1);
                  break loop;
                default:
                  break loop;
              }
            }
            if (prevItemComment) {
              let prev = coll.items[coll.items.length - 1];
              if (identity.isPair(prev))
                prev = prev.value ?? prev.key;
              if (prev.comment)
                prev.comment += "\n" + prevItemComment;
              else
                prev.comment = prevItemComment;
              props.comment = props.comment.substring(prevItemComment.length + 1);
            }
          }
        }
        if (!isMap && !sep && !props.found) {
          const valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);
          coll.items.push(valueNode);
          offset = valueNode.range[2];
          if (isBlock(value))
            onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
        } else {
          ctx.atKey = true;
          const keyStart = props.end;
          const keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);
          if (isBlock(key))
            onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
          ctx.atKey = false;
          const valueProps = resolveProps.resolveProps(sep ?? [], {
            flow: fcName,
            indicator: "map-value-ind",
            next: value,
            offset: keyNode.range[2],
            onError,
            parentIndent: fc.indent,
            startOnNewline: false
          });
          if (valueProps.found) {
            if (!isMap && !props.found && ctx.options.strict) {
              if (sep)
                for (const st of sep) {
                  if (st === valueProps.found)
                    break;
                  if (st.type === "newline") {
                    onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                    break;
                  }
                }
              if (props.start < valueProps.found.offset - 1024)
                onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
            }
          } else if (value) {
            if ("source" in value && value.source && value.source[0] === ":")
              onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
            else
              onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
          }
          const valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;
          if (valueNode) {
            if (isBlock(value))
              onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
          } else if (valueProps.comment) {
            if (keyNode.comment)
              keyNode.comment += "\n" + valueProps.comment;
            else
              keyNode.comment = valueProps.comment;
          }
          const pair = new Pair.Pair(keyNode, valueNode);
          if (ctx.options.keepSourceTokens)
            pair.srcToken = collItem;
          if (isMap) {
            const map = coll;
            if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
              onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
            map.items.push(pair);
          } else {
            const map = new YAMLMap.YAMLMap(ctx.schema);
            map.flow = true;
            map.items.push(pair);
            const endRange = (valueNode ?? keyNode).range;
            map.range = [keyNode.range[0], endRange[1], endRange[2]];
            coll.items.push(map);
          }
          offset = valueNode ? valueNode.range[2] : valueProps.end;
        }
      }
      const expectedEnd = isMap ? "}" : "]";
      const [ce, ...ee] = fc.end;
      let cePos = offset;
      if (ce && ce.source === expectedEnd)
        cePos = ce.offset + ce.source.length;
      else {
        const name = fcName[0].toUpperCase() + fcName.substring(1);
        const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
        onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
        if (ce && ce.source.length !== 1)
          ee.unshift(ce);
      }
      if (ee.length > 0) {
        const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);
        if (end.comment) {
          if (coll.comment)
            coll.comment += "\n" + end.comment;
          else
            coll.comment = end.comment;
        }
        coll.range = [fc.offset, cePos, end.offset];
      } else {
        coll.range = [fc.offset, cePos, cePos];
      }
      return coll;
    }
    exports2.resolveFlowCollection = resolveFlowCollection;
  }
});

// node_modules/yaml/dist/compose/compose-collection.js
var require_compose_collection = __commonJS({
  "node_modules/yaml/dist/compose/compose-collection.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Scalar = require_Scalar();
    var YAMLMap = require_YAMLMap();
    var YAMLSeq = require_YAMLSeq();
    var resolveBlockMap = require_resolve_block_map();
    var resolveBlockSeq = require_resolve_block_seq();
    var resolveFlowCollection = require_resolve_flow_collection();
    function resolveCollection(CN, ctx, token, onError, tagName, tag) {
      const coll = token.type === "block-map" ? resolveBlockMap.resolveBlockMap(CN, ctx, token, onError, tag) : token.type === "block-seq" ? resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError, tag) : resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError, tag);
      const Coll = coll.constructor;
      if (tagName === "!" || tagName === Coll.tagName) {
        coll.tag = Coll.tagName;
        return coll;
      }
      if (tagName)
        coll.tag = tagName;
      return coll;
    }
    function composeCollection(CN, ctx, token, props, onError) {
      const tagToken = props.tag;
      const tagName = !tagToken ? null : ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
      if (token.type === "block-seq") {
        const { anchor, newlineAfterProp: nl } = props;
        const lastProp = anchor && tagToken ? anchor.offset > tagToken.offset ? anchor : tagToken : anchor ?? tagToken;
        if (lastProp && (!nl || nl.offset < lastProp.offset)) {
          const message = "Missing newline after block sequence props";
          onError(lastProp, "MISSING_CHAR", message);
        }
      }
      const expType = token.type === "block-map" ? "map" : token.type === "block-seq" ? "seq" : token.start.source === "{" ? "map" : "seq";
      if (!tagToken || !tagName || tagName === "!" || tagName === YAMLMap.YAMLMap.tagName && expType === "map" || tagName === YAMLSeq.YAMLSeq.tagName && expType === "seq") {
        return resolveCollection(CN, ctx, token, onError, tagName);
      }
      let tag = ctx.schema.tags.find((t) => t.tag === tagName && t.collection === expType);
      if (!tag) {
        const kt = ctx.schema.knownTags[tagName];
        if (kt && kt.collection === expType) {
          ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
          tag = kt;
        } else {
          if (kt?.collection) {
            onError(tagToken, "BAD_COLLECTION_TYPE", `${kt.tag} used for ${expType} collection, but expects ${kt.collection}`, true);
          } else {
            onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
          }
          return resolveCollection(CN, ctx, token, onError, tagName);
        }
      }
      const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);
      const res = tag.resolve?.(coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options) ?? coll;
      const node = identity.isNode(res) ? res : new Scalar.Scalar(res);
      node.range = coll.range;
      node.tag = tagName;
      if (tag?.format)
        node.format = tag.format;
      return node;
    }
    exports2.composeCollection = composeCollection;
  }
});

// node_modules/yaml/dist/compose/resolve-block-scalar.js
var require_resolve_block_scalar = __commonJS({
  "node_modules/yaml/dist/compose/resolve-block-scalar.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    function resolveBlockScalar(ctx, scalar, onError) {
      const start = scalar.offset;
      const header = parseBlockScalarHeader(scalar, ctx.options.strict, onError);
      if (!header)
        return { value: "", type: null, comment: "", range: [start, start, start] };
      const type = header.mode === ">" ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;
      const lines = scalar.source ? splitLines(scalar.source) : [];
      let chompStart = lines.length;
      for (let i = lines.length - 1; i >= 0; --i) {
        const content = lines[i][1];
        if (content === "" || content === "\r")
          chompStart = i;
        else
          break;
      }
      if (chompStart === 0) {
        const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
        let end2 = start + header.length;
        if (scalar.source)
          end2 += scalar.source.length;
        return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
      }
      let trimIndent = scalar.indent + header.indent;
      let offset = scalar.offset + header.length;
      let contentStart = 0;
      for (let i = 0; i < chompStart; ++i) {
        const [indent, content] = lines[i];
        if (content === "" || content === "\r") {
          if (header.indent === 0 && indent.length > trimIndent)
            trimIndent = indent.length;
        } else {
          if (indent.length < trimIndent) {
            const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
            onError(offset + indent.length, "MISSING_CHAR", message);
          }
          if (header.indent === 0)
            trimIndent = indent.length;
          contentStart = i;
          if (trimIndent === 0 && !ctx.atRoot) {
            const message = "Block scalar values in collections must be indented";
            onError(offset, "BAD_INDENT", message);
          }
          break;
        }
        offset += indent.length + content.length + 1;
      }
      for (let i = lines.length - 1; i >= chompStart; --i) {
        if (lines[i][0].length > trimIndent)
          chompStart = i + 1;
      }
      let value = "";
      let sep = "";
      let prevMoreIndented = false;
      for (let i = 0; i < contentStart; ++i)
        value += lines[i][0].slice(trimIndent) + "\n";
      for (let i = contentStart; i < chompStart; ++i) {
        let [indent, content] = lines[i];
        offset += indent.length + content.length + 1;
        const crlf = content[content.length - 1] === "\r";
        if (crlf)
          content = content.slice(0, -1);
        if (content && indent.length < trimIndent) {
          const src = header.indent ? "explicit indentation indicator" : "first line";
          const message = `Block scalar lines must not be less indented than their ${src}`;
          onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
          indent = "";
        }
        if (type === Scalar.Scalar.BLOCK_LITERAL) {
          value += sep + indent.slice(trimIndent) + content;
          sep = "\n";
        } else if (indent.length > trimIndent || content[0] === "	") {
          if (sep === " ")
            sep = "\n";
          else if (!prevMoreIndented && sep === "\n")
            sep = "\n\n";
          value += sep + indent.slice(trimIndent) + content;
          sep = "\n";
          prevMoreIndented = true;
        } else if (content === "") {
          if (sep === "\n")
            value += "\n";
          else
            sep = "\n";
        } else {
          value += sep + content;
          sep = " ";
          prevMoreIndented = false;
        }
      }
      switch (header.chomp) {
        case "-":
          break;
        case "+":
          for (let i = chompStart; i < lines.length; ++i)
            value += "\n" + lines[i][0].slice(trimIndent);
          if (value[value.length - 1] !== "\n")
            value += "\n";
          break;
        default:
          value += "\n";
      }
      const end = start + header.length + scalar.source.length;
      return { value, type, comment: header.comment, range: [start, end, end] };
    }
    function parseBlockScalarHeader({ offset, props }, strict, onError) {
      if (props[0].type !== "block-scalar-header") {
        onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
        return null;
      }
      const { source } = props[0];
      const mode = source[0];
      let indent = 0;
      let chomp = "";
      let error = -1;
      for (let i = 1; i < source.length; ++i) {
        const ch = source[i];
        if (!chomp && (ch === "-" || ch === "+"))
          chomp = ch;
        else {
          const n = Number(ch);
          if (!indent && n)
            indent = n;
          else if (error === -1)
            error = offset + i;
        }
      }
      if (error !== -1)
        onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
      let hasSpace = false;
      let comment = "";
      let length = source.length;
      for (let i = 1; i < props.length; ++i) {
        const token = props[i];
        switch (token.type) {
          case "space":
            hasSpace = true;
          // fallthrough
          case "newline":
            length += token.source.length;
            break;
          case "comment":
            if (strict && !hasSpace) {
              const message = "Comments must be separated from other tokens by white space characters";
              onError(token, "MISSING_CHAR", message);
            }
            length += token.source.length;
            comment = token.source.substring(1);
            break;
          case "error":
            onError(token, "UNEXPECTED_TOKEN", token.message);
            length += token.source.length;
            break;
          /* istanbul ignore next should not happen */
          default: {
            const message = `Unexpected token in block scalar header: ${token.type}`;
            onError(token, "UNEXPECTED_TOKEN", message);
            const ts = token.source;
            if (ts && typeof ts === "string")
              length += ts.length;
          }
        }
      }
      return { mode, indent, chomp, comment, length };
    }
    function splitLines(source) {
      const split = source.split(/\n( *)/);
      const first = split[0];
      const m = first.match(/^( *)/);
      const line0 = m?.[1] ? [m[1], first.slice(m[1].length)] : ["", first];
      const lines = [line0];
      for (let i = 1; i < split.length; i += 2)
        lines.push([split[i], split[i + 1]]);
      return lines;
    }
    exports2.resolveBlockScalar = resolveBlockScalar;
  }
});

// node_modules/yaml/dist/compose/resolve-flow-scalar.js
var require_resolve_flow_scalar = __commonJS({
  "node_modules/yaml/dist/compose/resolve-flow-scalar.js"(exports2) {
    "use strict";
    var Scalar = require_Scalar();
    var resolveEnd = require_resolve_end();
    function resolveFlowScalar(scalar, strict, onError) {
      const { offset, type, source, end } = scalar;
      let _type;
      let value;
      const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
      switch (type) {
        case "scalar":
          _type = Scalar.Scalar.PLAIN;
          value = plainValue(source, _onError);
          break;
        case "single-quoted-scalar":
          _type = Scalar.Scalar.QUOTE_SINGLE;
          value = singleQuotedValue(source, _onError);
          break;
        case "double-quoted-scalar":
          _type = Scalar.Scalar.QUOTE_DOUBLE;
          value = doubleQuotedValue(source, _onError);
          break;
        /* istanbul ignore next should not happen */
        default:
          onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
          return {
            value: "",
            type: null,
            comment: "",
            range: [offset, offset + source.length, offset + source.length]
          };
      }
      const valueEnd = offset + source.length;
      const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);
      return {
        value,
        type: _type,
        comment: re.comment,
        range: [offset, valueEnd, re.offset]
      };
    }
    function plainValue(source, onError) {
      let badChar = "";
      switch (source[0]) {
        /* istanbul ignore next should not happen */
        case "	":
          badChar = "a tab character";
          break;
        case ",":
          badChar = "flow indicator character ,";
          break;
        case "%":
          badChar = "directive indicator character %";
          break;
        case "|":
        case ">": {
          badChar = `block scalar indicator ${source[0]}`;
          break;
        }
        case "@":
        case "`": {
          badChar = `reserved character ${source[0]}`;
          break;
        }
      }
      if (badChar)
        onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
      return foldLines(source);
    }
    function singleQuotedValue(source, onError) {
      if (source[source.length - 1] !== "'" || source.length === 1)
        onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
      return foldLines(source.slice(1, -1)).replace(/''/g, "'");
    }
    function foldLines(source) {
      let first, line;
      try {
        first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
        line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
      } catch {
        first = /(.*?)[ \t]*\r?\n/sy;
        line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
      }
      let match = first.exec(source);
      if (!match)
        return source;
      let res = match[1];
      let sep = " ";
      let pos = first.lastIndex;
      line.lastIndex = pos;
      while (match = line.exec(source)) {
        if (match[1] === "") {
          if (sep === "\n")
            res += sep;
          else
            sep = "\n";
        } else {
          res += sep + match[1];
          sep = " ";
        }
        pos = line.lastIndex;
      }
      const last = /[ \t]*(.*)/sy;
      last.lastIndex = pos;
      match = last.exec(source);
      return res + sep + (match?.[1] ?? "");
    }
    function doubleQuotedValue(source, onError) {
      let res = "";
      for (let i = 1; i < source.length - 1; ++i) {
        const ch = source[i];
        if (ch === "\r" && source[i + 1] === "\n")
          continue;
        if (ch === "\n") {
          const { fold, offset } = foldNewline(source, i);
          res += fold;
          i = offset;
        } else if (ch === "\\") {
          let next = source[++i];
          const cc = escapeCodes[next];
          if (cc)
            res += cc;
          else if (next === "\n") {
            next = source[i + 1];
            while (next === " " || next === "	")
              next = source[++i + 1];
          } else if (next === "\r" && source[i + 1] === "\n") {
            next = source[++i + 1];
            while (next === " " || next === "	")
              next = source[++i + 1];
          } else if (next === "x" || next === "u" || next === "U") {
            const length = { x: 2, u: 4, U: 8 }[next];
            res += parseCharCode(source, i + 1, length, onError);
            i += length;
          } else {
            const raw = source.substr(i - 1, 2);
            onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
            res += raw;
          }
        } else if (ch === " " || ch === "	") {
          const wsStart = i;
          let next = source[i + 1];
          while (next === " " || next === "	")
            next = source[++i + 1];
          if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n"))
            res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
        } else {
          res += ch;
        }
      }
      if (source[source.length - 1] !== '"' || source.length === 1)
        onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
      return res;
    }
    function foldNewline(source, offset) {
      let fold = "";
      let ch = source[offset + 1];
      while (ch === " " || ch === "	" || ch === "\n" || ch === "\r") {
        if (ch === "\r" && source[offset + 2] !== "\n")
          break;
        if (ch === "\n")
          fold += "\n";
        offset += 1;
        ch = source[offset + 1];
      }
      if (!fold)
        fold = " ";
      return { fold, offset };
    }
    var escapeCodes = {
      "0": "\0",
      // null character
      a: "\x07",
      // bell character
      b: "\b",
      // backspace
      e: "\x1B",
      // escape character
      f: "\f",
      // form feed
      n: "\n",
      // line feed
      r: "\r",
      // carriage return
      t: "	",
      // horizontal tab
      v: "\v",
      // vertical tab
      N: "\x85",
      // Unicode next line
      _: "\xA0",
      // Unicode non-breaking space
      L: "\u2028",
      // Unicode line separator
      P: "\u2029",
      // Unicode paragraph separator
      " ": " ",
      '"': '"',
      "/": "/",
      "\\": "\\",
      "	": "	"
    };
    function parseCharCode(source, offset, length, onError) {
      const cc = source.substr(offset, length);
      const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
      const code = ok ? parseInt(cc, 16) : NaN;
      if (isNaN(code)) {
        const raw = source.substr(offset - 2, length + 2);
        onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
        return raw;
      }
      return String.fromCodePoint(code);
    }
    exports2.resolveFlowScalar = resolveFlowScalar;
  }
});

// node_modules/yaml/dist/compose/compose-scalar.js
var require_compose_scalar = __commonJS({
  "node_modules/yaml/dist/compose/compose-scalar.js"(exports2) {
    "use strict";
    var identity = require_identity();
    var Scalar = require_Scalar();
    var resolveBlockScalar = require_resolve_block_scalar();
    var resolveFlowScalar = require_resolve_flow_scalar();
    function composeScalar(ctx, token, tagToken, onError) {
      const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar.resolveBlockScalar(ctx, token, onError) : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);
      const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
      let tag;
      if (ctx.options.stringKeys && ctx.atKey) {
        tag = ctx.schema[identity.SCALAR];
      } else if (tagName)
        tag = findScalarTagByName(ctx.schema, value, tagName, tagToken, onError);
      else if (token.type === "scalar")
        tag = findScalarTagByTest(ctx, value, token, onError);
      else
        tag = ctx.schema[identity.SCALAR];
      let scalar;
      try {
        const res = tag.resolve(value, (msg) => onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg), ctx.options);
        scalar = identity.isScalar(res) ? res : new Scalar.Scalar(res);
      } catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg);
        scalar = new Scalar.Scalar(value);
      }
      scalar.range = range;
      scalar.source = value;
      if (type)
        scalar.type = type;
      if (tagName)
        scalar.tag = tagName;
      if (tag.format)
        scalar.format = tag.format;
      if (comment)
        scalar.comment = comment;
      return scalar;
    }
    function findScalarTagByName(schema, value, tagName, tagToken, onError) {
      if (tagName === "!")
        return schema[identity.SCALAR];
      const matchWithTest = [];
      for (const tag of schema.tags) {
        if (!tag.collection && tag.tag === tagName) {
          if (tag.default && tag.test)
            matchWithTest.push(tag);
          else
            return tag;
        }
      }
      for (const tag of matchWithTest)
        if (tag.test?.test(value))
          return tag;
      const kt = schema.knownTags[tagName];
      if (kt && !kt.collection) {
        schema.tags.push(Object.assign({}, kt, { default: false, test: void 0 }));
        return kt;
      }
      onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
      return schema[identity.SCALAR];
    }
    function findScalarTagByTest({ atKey, directives, schema }, value, token, onError) {
      const tag = schema.tags.find((tag2) => (tag2.default === true || atKey && tag2.default === "key") && tag2.test?.test(value)) || schema[identity.SCALAR];
      if (schema.compat) {
        const compat = schema.compat.find((tag2) => tag2.default && tag2.test?.test(value)) ?? schema[identity.SCALAR];
        if (tag.tag !== compat.tag) {
          const ts = directives.tagString(tag.tag);
          const cs = directives.tagString(compat.tag);
          const msg = `Value may be parsed as either ${ts} or ${cs}`;
          onError(token, "TAG_RESOLVE_FAILED", msg, true);
        }
      }
      return tag;
    }
    exports2.composeScalar = composeScalar;
  }
});

// node_modules/yaml/dist/compose/util-empty-scalar-position.js
var require_util_empty_scalar_position = __commonJS({
  "node_modules/yaml/dist/compose/util-empty-scalar-position.js"(exports2) {
    "use strict";
    function emptyScalarPosition(offset, before, pos) {
      if (before) {
        if (pos === null)
          pos = before.length;
        for (let i = pos - 1; i >= 0; --i) {
          let st = before[i];
          switch (st.type) {
            case "space":
            case "comment":
            case "newline":
              offset -= st.source.length;
              continue;
          }
          st = before[++i];
          while (st?.type === "space") {
            offset += st.source.length;
            st = before[++i];
          }
          break;
        }
      }
      return offset;
    }
    exports2.emptyScalarPosition = emptyScalarPosition;
  }
});

// node_modules/yaml/dist/compose/compose-node.js
var require_compose_node = __commonJS({
  "node_modules/yaml/dist/compose/compose-node.js"(exports2) {
    "use strict";
    var Alias = require_Alias();
    var identity = require_identity();
    var composeCollection = require_compose_collection();
    var composeScalar = require_compose_scalar();
    var resolveEnd = require_resolve_end();
    var utilEmptyScalarPosition = require_util_empty_scalar_position();
    var CN = { composeNode, composeEmptyNode };
    function composeNode(ctx, token, props, onError) {
      const atKey = ctx.atKey;
      const { spaceBefore, comment, anchor, tag } = props;
      let node;
      let isSrcToken = true;
      switch (token.type) {
        case "alias":
          node = composeAlias(ctx, token, onError);
          if (anchor || tag)
            onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
          break;
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "block-scalar":
          node = composeScalar.composeScalar(ctx, token, tag, onError);
          if (anchor)
            node.anchor = anchor.source.substring(1);
          break;
        case "block-map":
        case "block-seq":
        case "flow-collection":
          node = composeCollection.composeCollection(CN, ctx, token, props, onError);
          if (anchor)
            node.anchor = anchor.source.substring(1);
          break;
        default: {
          const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
          onError(token, "UNEXPECTED_TOKEN", message);
          node = composeEmptyNode(ctx, token.offset, void 0, null, props, onError);
          isSrcToken = false;
        }
      }
      if (anchor && node.anchor === "")
        onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
      if (atKey && ctx.options.stringKeys && (!identity.isScalar(node) || typeof node.value !== "string" || node.tag && node.tag !== "tag:yaml.org,2002:str")) {
        const msg = "With stringKeys, all keys must be strings";
        onError(tag ?? token, "NON_STRING_KEY", msg);
      }
      if (spaceBefore)
        node.spaceBefore = true;
      if (comment) {
        if (token.type === "scalar" && token.source === "")
          node.comment = comment;
        else
          node.commentBefore = comment;
      }
      if (ctx.options.keepSourceTokens && isSrcToken)
        node.srcToken = token;
      return node;
    }
    function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
      const token = {
        type: "scalar",
        offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),
        indent: -1,
        source: ""
      };
      const node = composeScalar.composeScalar(ctx, token, tag, onError);
      if (anchor) {
        node.anchor = anchor.source.substring(1);
        if (node.anchor === "")
          onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
      }
      if (spaceBefore)
        node.spaceBefore = true;
      if (comment) {
        node.comment = comment;
        node.range[2] = end;
      }
      return node;
    }
    function composeAlias({ options }, { offset, source, end }, onError) {
      const alias = new Alias.Alias(source.substring(1));
      if (alias.source === "")
        onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
      if (alias.source.endsWith(":"))
        onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
      const valueEnd = offset + source.length;
      const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);
      alias.range = [offset, valueEnd, re.offset];
      if (re.comment)
        alias.comment = re.comment;
      return alias;
    }
    exports2.composeEmptyNode = composeEmptyNode;
    exports2.composeNode = composeNode;
  }
});

// node_modules/yaml/dist/compose/compose-doc.js
var require_compose_doc = __commonJS({
  "node_modules/yaml/dist/compose/compose-doc.js"(exports2) {
    "use strict";
    var Document = require_Document();
    var composeNode = require_compose_node();
    var resolveEnd = require_resolve_end();
    var resolveProps = require_resolve_props();
    function composeDoc(options, directives, { offset, start, value, end }, onError) {
      const opts = Object.assign({ _directives: directives }, options);
      const doc = new Document.Document(void 0, opts);
      const ctx = {
        atKey: false,
        atRoot: true,
        directives: doc.directives,
        options: doc.options,
        schema: doc.schema
      };
      const props = resolveProps.resolveProps(start, {
        indicator: "doc-start",
        next: value ?? end?.[0],
        offset,
        onError,
        parentIndent: 0,
        startOnNewline: true
      });
      if (props.found) {
        doc.directives.docStart = true;
        if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
          onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
      }
      doc.contents = value ? composeNode.composeNode(ctx, value, props, onError) : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);
      const contentEnd = doc.contents.range[2];
      const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);
      if (re.comment)
        doc.comment = re.comment;
      doc.range = [offset, contentEnd, re.offset];
      return doc;
    }
    exports2.composeDoc = composeDoc;
  }
});

// node_modules/yaml/dist/compose/composer.js
var require_composer = __commonJS({
  "node_modules/yaml/dist/compose/composer.js"(exports2) {
    "use strict";
    var directives = require_directives();
    var Document = require_Document();
    var errors = require_errors4();
    var identity = require_identity();
    var composeDoc = require_compose_doc();
    var resolveEnd = require_resolve_end();
    function getErrorPos(src) {
      if (typeof src === "number")
        return [src, src + 1];
      if (Array.isArray(src))
        return src.length === 2 ? src : [src[0], src[1]];
      const { offset, source } = src;
      return [offset, offset + (typeof source === "string" ? source.length : 1)];
    }
    function parsePrelude(prelude) {
      let comment = "";
      let atComment = false;
      let afterEmptyLine = false;
      for (let i = 0; i < prelude.length; ++i) {
        const source = prelude[i];
        switch (source[0]) {
          case "#":
            comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
            atComment = true;
            afterEmptyLine = false;
            break;
          case "%":
            if (prelude[i + 1]?.[0] !== "#")
              i += 1;
            atComment = false;
            break;
          default:
            if (!atComment)
              afterEmptyLine = true;
            atComment = false;
        }
      }
      return { comment, afterEmptyLine };
    }
    var Composer = class {
      constructor(options = {}) {
        this.doc = null;
        this.atDirectives = false;
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
        this.onError = (source, code, message, warning3) => {
          const pos = getErrorPos(source);
          if (warning3)
            this.warnings.push(new errors.YAMLWarning(pos, code, message));
          else
            this.errors.push(new errors.YAMLParseError(pos, code, message));
        };
        this.directives = new directives.Directives({ version: options.version || "1.2" });
        this.options = options;
      }
      decorate(doc, afterDoc) {
        const { comment, afterEmptyLine } = parsePrelude(this.prelude);
        if (comment) {
          const dc = doc.contents;
          if (afterDoc) {
            doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
          } else if (afterEmptyLine || doc.directives.docStart || !dc) {
            doc.commentBefore = comment;
          } else if (identity.isCollection(dc) && !dc.flow && dc.items.length > 0) {
            let it = dc.items[0];
            if (identity.isPair(it))
              it = it.key;
            const cb = it.commentBefore;
            it.commentBefore = cb ? `${comment}
${cb}` : comment;
          } else {
            const cb = dc.commentBefore;
            dc.commentBefore = cb ? `${comment}
${cb}` : comment;
          }
        }
        if (afterDoc) {
          Array.prototype.push.apply(doc.errors, this.errors);
          Array.prototype.push.apply(doc.warnings, this.warnings);
        } else {
          doc.errors = this.errors;
          doc.warnings = this.warnings;
        }
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
      }
      /**
       * Current stream status information.
       *
       * Mostly useful at the end of input for an empty stream.
       */
      streamInfo() {
        return {
          comment: parsePrelude(this.prelude).comment,
          directives: this.directives,
          errors: this.errors,
          warnings: this.warnings
        };
      }
      /**
       * Compose tokens into documents.
       *
       * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
       * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
       */
      *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)
          yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
      }
      /** Advance the composer by one CST token. */
      *next(token) {
        if (process.env.LOG_STREAM)
          console.dir(token, { depth: null });
        switch (token.type) {
          case "directive":
            this.directives.add(token.source, (offset, message, warning3) => {
              const pos = getErrorPos(token);
              pos[0] += offset;
              this.onError(pos, "BAD_DIRECTIVE", message, warning3);
            });
            this.prelude.push(token.source);
            this.atDirectives = true;
            break;
          case "document": {
            const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
            if (this.atDirectives && !doc.directives.docStart)
              this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
            this.decorate(doc, false);
            if (this.doc)
              yield this.doc;
            this.doc = doc;
            this.atDirectives = false;
            break;
          }
          case "byte-order-mark":
          case "space":
            break;
          case "comment":
          case "newline":
            this.prelude.push(token.source);
            break;
          case "error": {
            const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
            const error = new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
            if (this.atDirectives || !this.doc)
              this.errors.push(error);
            else
              this.doc.errors.push(error);
            break;
          }
          case "doc-end": {
            if (!this.doc) {
              const msg = "Unexpected doc-end without preceding document";
              this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
              break;
            }
            this.doc.directives.docEnd = true;
            const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
            this.decorate(this.doc, true);
            if (end.comment) {
              const dc = this.doc.comment;
              this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
            }
            this.doc.range[2] = end.offset;
            break;
          }
          default:
            this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
        }
      }
      /**
       * Call at end of input to yield any remaining document.
       *
       * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
       * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
       */
      *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
          this.decorate(this.doc, true);
          yield this.doc;
          this.doc = null;
        } else if (forceDoc) {
          const opts = Object.assign({ _directives: this.directives }, this.options);
          const doc = new Document.Document(void 0, opts);
          if (this.atDirectives)
            this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
          doc.range = [0, endOffset, endOffset];
          this.decorate(doc, false);
          yield doc;
        }
      }
    };
    exports2.Composer = Composer;
  }
});

// node_modules/yaml/dist/parse/cst-scalar.js
var require_cst_scalar = __commonJS({
  "node_modules/yaml/dist/parse/cst-scalar.js"(exports2) {
    "use strict";
    var resolveBlockScalar = require_resolve_block_scalar();
    var resolveFlowScalar = require_resolve_flow_scalar();
    var errors = require_errors4();
    var stringifyString = require_stringifyString();
    function resolveAsScalar(token, strict = true, onError) {
      if (token) {
        const _onError = (pos, code, message) => {
          const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
          if (onError)
            onError(offset, code, message);
          else
            throw new errors.YAMLParseError([offset, offset + 1], code, message);
        };
        switch (token.type) {
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);
          case "block-scalar":
            return resolveBlockScalar.resolveBlockScalar({ options: { strict } }, token, _onError);
        }
      }
      return null;
    }
    function createScalarToken(value, context2) {
      const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context2;
      const source = stringifyString.stringifyString({ type, value }, {
        implicitKey,
        indent: indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
      });
      const end = context2.end ?? [
        { type: "newline", offset: -1, indent, source: "\n" }
      ];
      switch (source[0]) {
        case "|":
        case ">": {
          const he = source.indexOf("\n");
          const head = source.substring(0, he);
          const body = source.substring(he + 1) + "\n";
          const props = [
            { type: "block-scalar-header", offset, indent, source: head }
          ];
          if (!addEndtoBlockProps(props, end))
            props.push({ type: "newline", offset: -1, indent, source: "\n" });
          return { type: "block-scalar", offset, indent, props, source: body };
        }
        case '"':
          return { type: "double-quoted-scalar", offset, indent, source, end };
        case "'":
          return { type: "single-quoted-scalar", offset, indent, source, end };
        default:
          return { type: "scalar", offset, indent, source, end };
      }
    }
    function setScalarValue(token, value, context2 = {}) {
      let { afterKey = false, implicitKey = false, inFlow = false, type } = context2;
      let indent = "indent" in token ? token.indent : null;
      if (afterKey && typeof indent === "number")
        indent += 2;
      if (!type)
        switch (token.type) {
          case "single-quoted-scalar":
            type = "QUOTE_SINGLE";
            break;
          case "double-quoted-scalar":
            type = "QUOTE_DOUBLE";
            break;
          case "block-scalar": {
            const header = token.props[0];
            if (header.type !== "block-scalar-header")
              throw new Error("Invalid block scalar header");
            type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
            break;
          }
          default:
            type = "PLAIN";
        }
      const source = stringifyString.stringifyString({ type, value }, {
        implicitKey: implicitKey || indent === null,
        indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: { blockQuote: true, lineWidth: -1 }
      });
      switch (source[0]) {
        case "|":
        case ">":
          setBlockScalarValue(token, source);
          break;
        case '"':
          setFlowScalarValue(token, source, "double-quoted-scalar");
          break;
        case "'":
          setFlowScalarValue(token, source, "single-quoted-scalar");
          break;
        default:
          setFlowScalarValue(token, source, "scalar");
      }
    }
    function setBlockScalarValue(token, source) {
      const he = source.indexOf("\n");
      const head = source.substring(0, he);
      const body = source.substring(he + 1) + "\n";
      if (token.type === "block-scalar") {
        const header = token.props[0];
        if (header.type !== "block-scalar-header")
          throw new Error("Invalid block scalar header");
        header.source = head;
        token.source = body;
      } else {
        const { offset } = token;
        const indent = "indent" in token ? token.indent : -1;
        const props = [
          { type: "block-scalar-header", offset, indent, source: head }
        ];
        if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0))
          props.push({ type: "newline", offset: -1, indent, source: "\n" });
        for (const key of Object.keys(token))
          if (key !== "type" && key !== "offset")
            delete token[key];
        Object.assign(token, { type: "block-scalar", indent, props, source: body });
      }
    }
    function addEndtoBlockProps(props, end) {
      if (end)
        for (const st of end)
          switch (st.type) {
            case "space":
            case "comment":
              props.push(st);
              break;
            case "newline":
              props.push(st);
              return true;
          }
      return false;
    }
    function setFlowScalarValue(token, source, type) {
      switch (token.type) {
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
          token.type = type;
          token.source = source;
          break;
        case "block-scalar": {
          const end = token.props.slice(1);
          let oa = source.length;
          if (token.props[0].type === "block-scalar-header")
            oa -= token.props[0].source.length;
          for (const tok of end)
            tok.offset += oa;
          delete token.props;
          Object.assign(token, { type, source, end });
          break;
        }
        case "block-map":
        case "block-seq": {
          const offset = token.offset + source.length;
          const nl = { type: "newline", offset, indent: token.indent, source: "\n" };
          delete token.items;
          Object.assign(token, { type, source, end: [nl] });
          break;
        }
        default: {
          const indent = "indent" in token ? token.indent : -1;
          const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st) => st.type === "space" || st.type === "comment" || st.type === "newline") : [];
          for (const key of Object.keys(token))
            if (key !== "type" && key !== "offset")
              delete token[key];
          Object.assign(token, { type, indent, source, end });
        }
      }
    }
    exports2.createScalarToken = createScalarToken;
    exports2.resolveAsScalar = resolveAsScalar;
    exports2.setScalarValue = setScalarValue;
  }
});

// node_modules/yaml/dist/parse/cst-stringify.js
var require_cst_stringify = __commonJS({
  "node_modules/yaml/dist/parse/cst-stringify.js"(exports2) {
    "use strict";
    var stringify = (cst) => "type" in cst ? stringifyToken(cst) : stringifyItem(cst);
    function stringifyToken(token) {
      switch (token.type) {
        case "block-scalar": {
          let res = "";
          for (const tok of token.props)
            res += stringifyToken(tok);
          return res + token.source;
        }
        case "block-map":
        case "block-seq": {
          let res = "";
          for (const item of token.items)
            res += stringifyItem(item);
          return res;
        }
        case "flow-collection": {
          let res = token.start.source;
          for (const item of token.items)
            res += stringifyItem(item);
          for (const st of token.end)
            res += st.source;
          return res;
        }
        case "document": {
          let res = stringifyItem(token);
          if (token.end)
            for (const st of token.end)
              res += st.source;
          return res;
        }
        default: {
          let res = token.source;
          if ("end" in token && token.end)
            for (const st of token.end)
              res += st.source;
          return res;
        }
      }
    }
    function stringifyItem({ start, key, sep, value }) {
      let res = "";
      for (const st of start)
        res += st.source;
      if (key)
        res += stringifyToken(key);
      if (sep)
        for (const st of sep)
          res += st.source;
      if (value)
        res += stringifyToken(value);
      return res;
    }
    exports2.stringify = stringify;
  }
});

// node_modules/yaml/dist/parse/cst-visit.js
var require_cst_visit = __commonJS({
  "node_modules/yaml/dist/parse/cst-visit.js"(exports2) {
    "use strict";
    var BREAK = Symbol("break visit");
    var SKIP = Symbol("skip children");
    var REMOVE = Symbol("remove item");
    function visit(cst, visitor) {
      if ("type" in cst && cst.type === "document")
        cst = { start: cst.start, value: cst.value };
      _visit(Object.freeze([]), cst, visitor);
    }
    visit.BREAK = BREAK;
    visit.SKIP = SKIP;
    visit.REMOVE = REMOVE;
    visit.itemAtPath = (cst, path3) => {
      let item = cst;
      for (const [field, index] of path3) {
        const tok = item?.[field];
        if (tok && "items" in tok) {
          item = tok.items[index];
        } else
          return void 0;
      }
      return item;
    };
    visit.parentCollection = (cst, path3) => {
      const parent = visit.itemAtPath(cst, path3.slice(0, -1));
      const field = path3[path3.length - 1][0];
      const coll = parent?.[field];
      if (coll && "items" in coll)
        return coll;
      throw new Error("Parent collection not found");
    };
    function _visit(path3, item, visitor) {
      let ctrl = visitor(item, path3);
      if (typeof ctrl === "symbol")
        return ctrl;
      for (const field of ["key", "value"]) {
        const token = item[field];
        if (token && "items" in token) {
          for (let i = 0; i < token.items.length; ++i) {
            const ci = _visit(Object.freeze(path3.concat([[field, i]])), token.items[i], visitor);
            if (typeof ci === "number")
              i = ci - 1;
            else if (ci === BREAK)
              return BREAK;
            else if (ci === REMOVE) {
              token.items.splice(i, 1);
              i -= 1;
            }
          }
          if (typeof ctrl === "function" && field === "key")
            ctrl = ctrl(item, path3);
        }
      }
      return typeof ctrl === "function" ? ctrl(item, path3) : ctrl;
    }
    exports2.visit = visit;
  }
});

// node_modules/yaml/dist/parse/cst.js
var require_cst = __commonJS({
  "node_modules/yaml/dist/parse/cst.js"(exports2) {
    "use strict";
    var cstScalar = require_cst_scalar();
    var cstStringify = require_cst_stringify();
    var cstVisit = require_cst_visit();
    var BOM = "\uFEFF";
    var DOCUMENT = "";
    var FLOW_END = "";
    var SCALAR = "";
    var isCollection = (token) => !!token && "items" in token;
    var isScalar = (token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
    function prettyToken(token) {
      switch (token) {
        case BOM:
          return "<BOM>";
        case DOCUMENT:
          return "<DOC>";
        case FLOW_END:
          return "<FLOW_END>";
        case SCALAR:
          return "<SCALAR>";
        default:
          return JSON.stringify(token);
      }
    }
    function tokenType(source) {
      switch (source) {
        case BOM:
          return "byte-order-mark";
        case DOCUMENT:
          return "doc-mode";
        case FLOW_END:
          return "flow-error-end";
        case SCALAR:
          return "scalar";
        case "---":
          return "doc-start";
        case "...":
          return "doc-end";
        case "":
        case "\n":
        case "\r\n":
          return "newline";
        case "-":
          return "seq-item-ind";
        case "?":
          return "explicit-key-ind";
        case ":":
          return "map-value-ind";
        case "{":
          return "flow-map-start";
        case "}":
          return "flow-map-end";
        case "[":
          return "flow-seq-start";
        case "]":
          return "flow-seq-end";
        case ",":
          return "comma";
      }
      switch (source[0]) {
        case " ":
        case "	":
          return "space";
        case "#":
          return "comment";
        case "%":
          return "directive-line";
        case "*":
          return "alias";
        case "&":
          return "anchor";
        case "!":
          return "tag";
        case "'":
          return "single-quoted-scalar";
        case '"':
          return "double-quoted-scalar";
        case "|":
        case ">":
          return "block-scalar-header";
      }
      return null;
    }
    exports2.createScalarToken = cstScalar.createScalarToken;
    exports2.resolveAsScalar = cstScalar.resolveAsScalar;
    exports2.setScalarValue = cstScalar.setScalarValue;
    exports2.stringify = cstStringify.stringify;
    exports2.visit = cstVisit.visit;
    exports2.BOM = BOM;
    exports2.DOCUMENT = DOCUMENT;
    exports2.FLOW_END = FLOW_END;
    exports2.SCALAR = SCALAR;
    exports2.isCollection = isCollection;
    exports2.isScalar = isScalar;
    exports2.prettyToken = prettyToken;
    exports2.tokenType = tokenType;
  }
});

// node_modules/yaml/dist/parse/lexer.js
var require_lexer = __commonJS({
  "node_modules/yaml/dist/parse/lexer.js"(exports2) {
    "use strict";
    var cst = require_cst();
    function isEmpty(ch) {
      switch (ch) {
        case void 0:
        case " ":
        case "\n":
        case "\r":
        case "	":
          return true;
        default:
          return false;
      }
    }
    var hexDigits = new Set("0123456789ABCDEFabcdef");
    var tagChars = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()");
    var flowIndicatorChars = new Set(",[]{}");
    var invalidAnchorChars = new Set(" ,[]{}\n\r	");
    var isNotAnchorChar = (ch) => !ch || invalidAnchorChars.has(ch);
    var Lexer = class {
      constructor() {
        this.atEnd = false;
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        this.buffer = "";
        this.flowKey = false;
        this.flowLevel = 0;
        this.indentNext = 0;
        this.indentValue = 0;
        this.lineEndPos = null;
        this.next = null;
        this.pos = 0;
      }
      /**
       * Generate YAML tokens from the `source` string. If `incomplete`,
       * a part of the last line may be left as a buffer for the next call.
       *
       * @returns A generator of lexical tokens
       */
      *lex(source, incomplete = false) {
        if (source) {
          if (typeof source !== "string")
            throw TypeError("source is not a string");
          this.buffer = this.buffer ? this.buffer + source : source;
          this.lineEndPos = null;
        }
        this.atEnd = !incomplete;
        let next = this.next ?? "stream";
        while (next && (incomplete || this.hasChars(1)))
          next = yield* this.parseNext(next);
      }
      atLineEnd() {
        let i = this.pos;
        let ch = this.buffer[i];
        while (ch === " " || ch === "	")
          ch = this.buffer[++i];
        if (!ch || ch === "#" || ch === "\n")
          return true;
        if (ch === "\r")
          return this.buffer[i + 1] === "\n";
        return false;
      }
      charAt(n) {
        return this.buffer[this.pos + n];
      }
      continueScalar(offset) {
        let ch = this.buffer[offset];
        if (this.indentNext > 0) {
          let indent = 0;
          while (ch === " ")
            ch = this.buffer[++indent + offset];
          if (ch === "\r") {
            const next = this.buffer[indent + offset + 1];
            if (next === "\n" || !next && !this.atEnd)
              return offset + indent + 1;
          }
          return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
        }
        if (ch === "-" || ch === ".") {
          const dt = this.buffer.substr(offset, 3);
          if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3]))
            return -1;
        }
        return offset;
      }
      getLine() {
        let end = this.lineEndPos;
        if (typeof end !== "number" || end !== -1 && end < this.pos) {
          end = this.buffer.indexOf("\n", this.pos);
          this.lineEndPos = end;
        }
        if (end === -1)
          return this.atEnd ? this.buffer.substring(this.pos) : null;
        if (this.buffer[end - 1] === "\r")
          end -= 1;
        return this.buffer.substring(this.pos, end);
      }
      hasChars(n) {
        return this.pos + n <= this.buffer.length;
      }
      setNext(state) {
        this.buffer = this.buffer.substring(this.pos);
        this.pos = 0;
        this.lineEndPos = null;
        this.next = state;
        return null;
      }
      peek(n) {
        return this.buffer.substr(this.pos, n);
      }
      *parseNext(next) {
        switch (next) {
          case "stream":
            return yield* this.parseStream();
          case "line-start":
            return yield* this.parseLineStart();
          case "block-start":
            return yield* this.parseBlockStart();
          case "doc":
            return yield* this.parseDocument();
          case "flow":
            return yield* this.parseFlowCollection();
          case "quoted-scalar":
            return yield* this.parseQuotedScalar();
          case "block-scalar":
            return yield* this.parseBlockScalar();
          case "plain-scalar":
            return yield* this.parsePlainScalar();
        }
      }
      *parseStream() {
        let line = this.getLine();
        if (line === null)
          return this.setNext("stream");
        if (line[0] === cst.BOM) {
          yield* this.pushCount(1);
          line = line.substring(1);
        }
        if (line[0] === "%") {
          let dirEnd = line.length;
          let cs = line.indexOf("#");
          while (cs !== -1) {
            const ch = line[cs - 1];
            if (ch === " " || ch === "	") {
              dirEnd = cs - 1;
              break;
            } else {
              cs = line.indexOf("#", cs + 1);
            }
          }
          while (true) {
            const ch = line[dirEnd - 1];
            if (ch === " " || ch === "	")
              dirEnd -= 1;
            else
              break;
          }
          const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
          yield* this.pushCount(line.length - n);
          this.pushNewline();
          return "stream";
        }
        if (this.atLineEnd()) {
          const sp = yield* this.pushSpaces(true);
          yield* this.pushCount(line.length - sp);
          yield* this.pushNewline();
          return "stream";
        }
        yield cst.DOCUMENT;
        return yield* this.parseLineStart();
      }
      *parseLineStart() {
        const ch = this.charAt(0);
        if (!ch && !this.atEnd)
          return this.setNext("line-start");
        if (ch === "-" || ch === ".") {
          if (!this.atEnd && !this.hasChars(4))
            return this.setNext("line-start");
          const s = this.peek(3);
          if ((s === "---" || s === "...") && isEmpty(this.charAt(3))) {
            yield* this.pushCount(3);
            this.indentValue = 0;
            this.indentNext = 0;
            return s === "---" ? "doc" : "stream";
          }
        }
        this.indentValue = yield* this.pushSpaces(false);
        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
          this.indentNext = this.indentValue;
        return yield* this.parseBlockStart();
      }
      *parseBlockStart() {
        const [ch0, ch1] = this.peek(2);
        if (!ch1 && !this.atEnd)
          return this.setNext("block-start");
        if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
          const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
          this.indentNext = this.indentValue + 1;
          this.indentValue += n;
          return yield* this.parseBlockStart();
        }
        return "doc";
      }
      *parseDocument() {
        yield* this.pushSpaces(true);
        const line = this.getLine();
        if (line === null)
          return this.setNext("doc");
        let n = yield* this.pushIndicators();
        switch (line[n]) {
          case "#":
            yield* this.pushCount(line.length - n);
          // fallthrough
          case void 0:
            yield* this.pushNewline();
            return yield* this.parseLineStart();
          case "{":
          case "[":
            yield* this.pushCount(1);
            this.flowKey = false;
            this.flowLevel = 1;
            return "flow";
          case "}":
          case "]":
            yield* this.pushCount(1);
            return "doc";
          case "*":
            yield* this.pushUntil(isNotAnchorChar);
            return "doc";
          case '"':
          case "'":
            return yield* this.parseQuotedScalar();
          case "|":
          case ">":
            n += yield* this.parseBlockScalarHeader();
            n += yield* this.pushSpaces(true);
            yield* this.pushCount(line.length - n);
            yield* this.pushNewline();
            return yield* this.parseBlockScalar();
          default:
            return yield* this.parsePlainScalar();
        }
      }
      *parseFlowCollection() {
        let nl, sp;
        let indent = -1;
        do {
          nl = yield* this.pushNewline();
          if (nl > 0) {
            sp = yield* this.pushSpaces(false);
            this.indentValue = indent = sp;
          } else {
            sp = 0;
          }
          sp += yield* this.pushSpaces(true);
        } while (nl + sp > 0);
        const line = this.getLine();
        if (line === null)
          return this.setNext("flow");
        if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
          const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
          if (!atFlowEndMarker) {
            this.flowLevel = 0;
            yield cst.FLOW_END;
            return yield* this.parseLineStart();
          }
        }
        let n = 0;
        while (line[n] === ",") {
          n += yield* this.pushCount(1);
          n += yield* this.pushSpaces(true);
          this.flowKey = false;
        }
        n += yield* this.pushIndicators();
        switch (line[n]) {
          case void 0:
            return "flow";
          case "#":
            yield* this.pushCount(line.length - n);
            return "flow";
          case "{":
          case "[":
            yield* this.pushCount(1);
            this.flowKey = false;
            this.flowLevel += 1;
            return "flow";
          case "}":
          case "]":
            yield* this.pushCount(1);
            this.flowKey = true;
            this.flowLevel -= 1;
            return this.flowLevel ? "flow" : "doc";
          case "*":
            yield* this.pushUntil(isNotAnchorChar);
            return "flow";
          case '"':
          case "'":
            this.flowKey = true;
            return yield* this.parseQuotedScalar();
          case ":": {
            const next = this.charAt(1);
            if (this.flowKey || isEmpty(next) || next === ",") {
              this.flowKey = false;
              yield* this.pushCount(1);
              yield* this.pushSpaces(true);
              return "flow";
            }
          }
          // fallthrough
          default:
            this.flowKey = false;
            return yield* this.parsePlainScalar();
        }
      }
      *parseQuotedScalar() {
        const quote = this.charAt(0);
        let end = this.buffer.indexOf(quote, this.pos + 1);
        if (quote === "'") {
          while (end !== -1 && this.buffer[end + 1] === "'")
            end = this.buffer.indexOf("'", end + 2);
        } else {
          while (end !== -1) {
            let n = 0;
            while (this.buffer[end - 1 - n] === "\\")
              n += 1;
            if (n % 2 === 0)
              break;
            end = this.buffer.indexOf('"', end + 1);
          }
        }
        const qb = this.buffer.substring(0, end);
        let nl = qb.indexOf("\n", this.pos);
        if (nl !== -1) {
          while (nl !== -1) {
            const cs = this.continueScalar(nl + 1);
            if (cs === -1)
              break;
            nl = qb.indexOf("\n", cs);
          }
          if (nl !== -1) {
            end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
          }
        }
        if (end === -1) {
          if (!this.atEnd)
            return this.setNext("quoted-scalar");
          end = this.buffer.length;
        }
        yield* this.pushToIndex(end + 1, false);
        return this.flowLevel ? "flow" : "doc";
      }
      *parseBlockScalarHeader() {
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        let i = this.pos;
        while (true) {
          const ch = this.buffer[++i];
          if (ch === "+")
            this.blockScalarKeep = true;
          else if (ch > "0" && ch <= "9")
            this.blockScalarIndent = Number(ch) - 1;
          else if (ch !== "-")
            break;
        }
        return yield* this.pushUntil((ch) => isEmpty(ch) || ch === "#");
      }
      *parseBlockScalar() {
        let nl = this.pos - 1;
        let indent = 0;
        let ch;
        loop: for (let i2 = this.pos; ch = this.buffer[i2]; ++i2) {
          switch (ch) {
            case " ":
              indent += 1;
              break;
            case "\n":
              nl = i2;
              indent = 0;
              break;
            case "\r": {
              const next = this.buffer[i2 + 1];
              if (!next && !this.atEnd)
                return this.setNext("block-scalar");
              if (next === "\n")
                break;
            }
            // fallthrough
            default:
              break loop;
          }
        }
        if (!ch && !this.atEnd)
          return this.setNext("block-scalar");
        if (indent >= this.indentNext) {
          if (this.blockScalarIndent === -1)
            this.indentNext = indent;
          else {
            this.indentNext = this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
          }
          do {
            const cs = this.continueScalar(nl + 1);
            if (cs === -1)
              break;
            nl = this.buffer.indexOf("\n", cs);
          } while (nl !== -1);
          if (nl === -1) {
            if (!this.atEnd)
              return this.setNext("block-scalar");
            nl = this.buffer.length;
          }
        }
        let i = nl + 1;
        ch = this.buffer[i];
        while (ch === " ")
          ch = this.buffer[++i];
        if (ch === "	") {
          while (ch === "	" || ch === " " || ch === "\r" || ch === "\n")
            ch = this.buffer[++i];
          nl = i - 1;
        } else if (!this.blockScalarKeep) {
          do {
            let i2 = nl - 1;
            let ch2 = this.buffer[i2];
            if (ch2 === "\r")
              ch2 = this.buffer[--i2];
            const lastChar = i2;
            while (ch2 === " ")
              ch2 = this.buffer[--i2];
            if (ch2 === "\n" && i2 >= this.pos && i2 + 1 + indent > lastChar)
              nl = i2;
            else
              break;
          } while (true);
        }
        yield cst.SCALAR;
        yield* this.pushToIndex(nl + 1, true);
        return yield* this.parseLineStart();
      }
      *parsePlainScalar() {
        const inFlow = this.flowLevel > 0;
        let end = this.pos - 1;
        let i = this.pos - 1;
        let ch;
        while (ch = this.buffer[++i]) {
          if (ch === ":") {
            const next = this.buffer[i + 1];
            if (isEmpty(next) || inFlow && flowIndicatorChars.has(next))
              break;
            end = i;
          } else if (isEmpty(ch)) {
            let next = this.buffer[i + 1];
            if (ch === "\r") {
              if (next === "\n") {
                i += 1;
                ch = "\n";
                next = this.buffer[i + 1];
              } else
                end = i;
            }
            if (next === "#" || inFlow && flowIndicatorChars.has(next))
              break;
            if (ch === "\n") {
              const cs = this.continueScalar(i + 1);
              if (cs === -1)
                break;
              i = Math.max(i, cs - 2);
            }
          } else {
            if (inFlow && flowIndicatorChars.has(ch))
              break;
            end = i;
          }
        }
        if (!ch && !this.atEnd)
          return this.setNext("plain-scalar");
        yield cst.SCALAR;
        yield* this.pushToIndex(end + 1, true);
        return inFlow ? "flow" : "doc";
      }
      *pushCount(n) {
        if (n > 0) {
          yield this.buffer.substr(this.pos, n);
          this.pos += n;
          return n;
        }
        return 0;
      }
      *pushToIndex(i, allowEmpty) {
        const s = this.buffer.slice(this.pos, i);
        if (s) {
          yield s;
          this.pos += s.length;
          return s.length;
        } else if (allowEmpty)
          yield "";
        return 0;
      }
      *pushIndicators() {
        switch (this.charAt(0)) {
          case "!":
            return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          case "&":
            return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          case "-":
          // this is an error
          case "?":
          // this is an error outside flow collections
          case ":": {
            const inFlow = this.flowLevel > 0;
            const ch1 = this.charAt(1);
            if (isEmpty(ch1) || inFlow && flowIndicatorChars.has(ch1)) {
              if (!inFlow)
                this.indentNext = this.indentValue + 1;
              else if (this.flowKey)
                this.flowKey = false;
              return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            }
          }
        }
        return 0;
      }
      *pushTag() {
        if (this.charAt(1) === "<") {
          let i = this.pos + 2;
          let ch = this.buffer[i];
          while (!isEmpty(ch) && ch !== ">")
            ch = this.buffer[++i];
          return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
        } else {
          let i = this.pos + 1;
          let ch = this.buffer[i];
          while (ch) {
            if (tagChars.has(ch))
              ch = this.buffer[++i];
            else if (ch === "%" && hexDigits.has(this.buffer[i + 1]) && hexDigits.has(this.buffer[i + 2])) {
              ch = this.buffer[i += 3];
            } else
              break;
          }
          return yield* this.pushToIndex(i, false);
        }
      }
      *pushNewline() {
        const ch = this.buffer[this.pos];
        if (ch === "\n")
          return yield* this.pushCount(1);
        else if (ch === "\r" && this.charAt(1) === "\n")
          return yield* this.pushCount(2);
        else
          return 0;
      }
      *pushSpaces(allowTabs) {
        let i = this.pos - 1;
        let ch;
        do {
          ch = this.buffer[++i];
        } while (ch === " " || allowTabs && ch === "	");
        const n = i - this.pos;
        if (n > 0) {
          yield this.buffer.substr(this.pos, n);
          this.pos = i;
        }
        return n;
      }
      *pushUntil(test) {
        let i = this.pos;
        let ch = this.buffer[i];
        while (!test(ch))
          ch = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
      }
    };
    exports2.Lexer = Lexer;
  }
});

// node_modules/yaml/dist/parse/line-counter.js
var require_line_counter = __commonJS({
  "node_modules/yaml/dist/parse/line-counter.js"(exports2) {
    "use strict";
    var LineCounter = class {
      constructor() {
        this.lineStarts = [];
        this.addNewLine = (offset) => this.lineStarts.push(offset);
        this.linePos = (offset) => {
          let low = 0;
          let high = this.lineStarts.length;
          while (low < high) {
            const mid = low + high >> 1;
            if (this.lineStarts[mid] < offset)
              low = mid + 1;
            else
              high = mid;
          }
          if (this.lineStarts[low] === offset)
            return { line: low + 1, col: 1 };
          if (low === 0)
            return { line: 0, col: offset };
          const start = this.lineStarts[low - 1];
          return { line: low, col: offset - start + 1 };
        };
      }
    };
    exports2.LineCounter = LineCounter;
  }
});

// node_modules/yaml/dist/parse/parser.js
var require_parser = __commonJS({
  "node_modules/yaml/dist/parse/parser.js"(exports2) {
    "use strict";
    var cst = require_cst();
    var lexer = require_lexer();
    function includesToken(list, type) {
      for (let i = 0; i < list.length; ++i)
        if (list[i].type === type)
          return true;
      return false;
    }
    function findNonEmptyIndex(list) {
      for (let i = 0; i < list.length; ++i) {
        switch (list[i].type) {
          case "space":
          case "comment":
          case "newline":
            break;
          default:
            return i;
        }
      }
      return -1;
    }
    function isFlowToken(token) {
      switch (token?.type) {
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "flow-collection":
          return true;
        default:
          return false;
      }
    }
    function getPrevProps(parent) {
      switch (parent.type) {
        case "document":
          return parent.start;
        case "block-map": {
          const it = parent.items[parent.items.length - 1];
          return it.sep ?? it.start;
        }
        case "block-seq":
          return parent.items[parent.items.length - 1].start;
        /* istanbul ignore next should not happen */
        default:
          return [];
      }
    }
    function getFirstKeyStartProps(prev) {
      if (prev.length === 0)
        return [];
      let i = prev.length;
      loop: while (--i >= 0) {
        switch (prev[i].type) {
          case "doc-start":
          case "explicit-key-ind":
          case "map-value-ind":
          case "seq-item-ind":
          case "newline":
            break loop;
        }
      }
      while (prev[++i]?.type === "space") {
      }
      return prev.splice(i, prev.length);
    }
    function fixFlowSeqItems(fc) {
      if (fc.start.type === "flow-seq-start") {
        for (const it of fc.items) {
          if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
            if (it.key)
              it.value = it.key;
            delete it.key;
            if (isFlowToken(it.value)) {
              if (it.value.end)
                Array.prototype.push.apply(it.value.end, it.sep);
              else
                it.value.end = it.sep;
            } else
              Array.prototype.push.apply(it.start, it.sep);
            delete it.sep;
          }
        }
      }
    }
    var Parser = class {
      /**
       * @param onNewLine - If defined, called separately with the start position of
       *   each new line (in `parse()`, including the start of input).
       */
      constructor(onNewLine) {
        this.atNewLine = true;
        this.atScalar = false;
        this.indent = 0;
        this.offset = 0;
        this.onKeyLine = false;
        this.stack = [];
        this.source = "";
        this.type = "";
        this.lexer = new lexer.Lexer();
        this.onNewLine = onNewLine;
      }
      /**
       * Parse `source` as a YAML stream.
       * If `incomplete`, a part of the last line may be left as a buffer for the next call.
       *
       * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
       *
       * @returns A generator of tokens representing each directive, document, and other structure.
       */
      *parse(source, incomplete = false) {
        if (this.onNewLine && this.offset === 0)
          this.onNewLine(0);
        for (const lexeme of this.lexer.lex(source, incomplete))
          yield* this.next(lexeme);
        if (!incomplete)
          yield* this.end();
      }
      /**
       * Advance the parser by the `source` of one lexical token.
       */
      *next(source) {
        this.source = source;
        if (process.env.LOG_TOKENS)
          console.log("|", cst.prettyToken(source));
        if (this.atScalar) {
          this.atScalar = false;
          yield* this.step();
          this.offset += source.length;
          return;
        }
        const type = cst.tokenType(source);
        if (!type) {
          const message = `Not a YAML token: ${source}`;
          yield* this.pop({ type: "error", offset: this.offset, message, source });
          this.offset += source.length;
        } else if (type === "scalar") {
          this.atNewLine = false;
          this.atScalar = true;
          this.type = "scalar";
        } else {
          this.type = type;
          yield* this.step();
          switch (type) {
            case "newline":
              this.atNewLine = true;
              this.indent = 0;
              if (this.onNewLine)
                this.onNewLine(this.offset + source.length);
              break;
            case "space":
              if (this.atNewLine && source[0] === " ")
                this.indent += source.length;
              break;
            case "explicit-key-ind":
            case "map-value-ind":
            case "seq-item-ind":
              if (this.atNewLine)
                this.indent += source.length;
              break;
            case "doc-mode":
            case "flow-error-end":
              return;
            default:
              this.atNewLine = false;
          }
          this.offset += source.length;
        }
      }
      /** Call at end of input to push out any remaining constructions */
      *end() {
        while (this.stack.length > 0)
          yield* this.pop();
      }
      get sourceToken() {
        const st = {
          type: this.type,
          offset: this.offset,
          indent: this.indent,
          source: this.source
        };
        return st;
      }
      *step() {
        const top = this.peek(1);
        if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
          while (this.stack.length > 0)
            yield* this.pop();
          this.stack.push({
            type: "doc-end",
            offset: this.offset,
            source: this.source
          });
          return;
        }
        if (!top)
          return yield* this.stream();
        switch (top.type) {
          case "document":
            return yield* this.document(top);
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return yield* this.scalar(top);
          case "block-scalar":
            return yield* this.blockScalar(top);
          case "block-map":
            return yield* this.blockMap(top);
          case "block-seq":
            return yield* this.blockSequence(top);
          case "flow-collection":
            return yield* this.flowCollection(top);
          case "doc-end":
            return yield* this.documentEnd(top);
        }
        yield* this.pop();
      }
      peek(n) {
        return this.stack[this.stack.length - n];
      }
      *pop(error) {
        const token = error ?? this.stack.pop();
        if (!token) {
          const message = "Tried to pop an empty stack";
          yield { type: "error", offset: this.offset, source: "", message };
        } else if (this.stack.length === 0) {
          yield token;
        } else {
          const top = this.peek(1);
          if (token.type === "block-scalar") {
            token.indent = "indent" in top ? top.indent : 0;
          } else if (token.type === "flow-collection" && top.type === "document") {
            token.indent = 0;
          }
          if (token.type === "flow-collection")
            fixFlowSeqItems(token);
          switch (top.type) {
            case "document":
              top.value = token;
              break;
            case "block-scalar":
              top.props.push(token);
              break;
            case "block-map": {
              const it = top.items[top.items.length - 1];
              if (it.value) {
                top.items.push({ start: [], key: token, sep: [] });
                this.onKeyLine = true;
                return;
              } else if (it.sep) {
                it.value = token;
              } else {
                Object.assign(it, { key: token, sep: [] });
                this.onKeyLine = !it.explicitKey;
                return;
              }
              break;
            }
            case "block-seq": {
              const it = top.items[top.items.length - 1];
              if (it.value)
                top.items.push({ start: [], value: token });
              else
                it.value = token;
              break;
            }
            case "flow-collection": {
              const it = top.items[top.items.length - 1];
              if (!it || it.value)
                top.items.push({ start: [], key: token, sep: [] });
              else if (it.sep)
                it.value = token;
              else
                Object.assign(it, { key: token, sep: [] });
              return;
            }
            /* istanbul ignore next should not happen */
            default:
              yield* this.pop();
              yield* this.pop(token);
          }
          if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
            const last = token.items[token.items.length - 1];
            if (last && !last.sep && !last.value && last.start.length > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0 || last.start.every((st) => st.type !== "comment" || st.indent < token.indent))) {
              if (top.type === "document")
                top.end = last.start;
              else
                top.items.push({ start: last.start });
              token.items.splice(-1, 1);
            }
          }
        }
      }
      *stream() {
        switch (this.type) {
          case "directive-line":
            yield { type: "directive", offset: this.offset, source: this.source };
            return;
          case "byte-order-mark":
          case "space":
          case "comment":
          case "newline":
            yield this.sourceToken;
            return;
          case "doc-mode":
          case "doc-start": {
            const doc = {
              type: "document",
              offset: this.offset,
              start: []
            };
            if (this.type === "doc-start")
              doc.start.push(this.sourceToken);
            this.stack.push(doc);
            return;
          }
        }
        yield {
          type: "error",
          offset: this.offset,
          message: `Unexpected ${this.type} token in YAML stream`,
          source: this.source
        };
      }
      *document(doc) {
        if (doc.value)
          return yield* this.lineEnd(doc);
        switch (this.type) {
          case "doc-start": {
            if (findNonEmptyIndex(doc.start) !== -1) {
              yield* this.pop();
              yield* this.step();
            } else
              doc.start.push(this.sourceToken);
            return;
          }
          case "anchor":
          case "tag":
          case "space":
          case "comment":
          case "newline":
            doc.start.push(this.sourceToken);
            return;
        }
        const bv = this.startBlockValue(doc);
        if (bv)
          this.stack.push(bv);
        else {
          yield {
            type: "error",
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML document`,
            source: this.source
          };
        }
      }
      *scalar(scalar) {
        if (this.type === "map-value-ind") {
          const prev = getPrevProps(this.peek(2));
          const start = getFirstKeyStartProps(prev);
          let sep;
          if (scalar.end) {
            sep = scalar.end;
            sep.push(this.sourceToken);
            delete scalar.end;
          } else
            sep = [this.sourceToken];
          const map = {
            type: "block-map",
            offset: scalar.offset,
            indent: scalar.indent,
            items: [{ start, key: scalar, sep }]
          };
          this.onKeyLine = true;
          this.stack[this.stack.length - 1] = map;
        } else
          yield* this.lineEnd(scalar);
      }
      *blockScalar(scalar) {
        switch (this.type) {
          case "space":
          case "comment":
          case "newline":
            scalar.props.push(this.sourceToken);
            return;
          case "scalar":
            scalar.source = this.source;
            this.atNewLine = true;
            this.indent = 0;
            if (this.onNewLine) {
              let nl = this.source.indexOf("\n") + 1;
              while (nl !== 0) {
                this.onNewLine(this.offset + nl);
                nl = this.source.indexOf("\n", nl) + 1;
              }
            }
            yield* this.pop();
            break;
          /* istanbul ignore next should not happen */
          default:
            yield* this.pop();
            yield* this.step();
        }
      }
      *blockMap(map) {
        const it = map.items[map.items.length - 1];
        switch (this.type) {
          case "newline":
            this.onKeyLine = false;
            if (it.value) {
              const end = "end" in it.value ? it.value.end : void 0;
              const last = Array.isArray(end) ? end[end.length - 1] : void 0;
              if (last?.type === "comment")
                end?.push(this.sourceToken);
              else
                map.items.push({ start: [this.sourceToken] });
            } else if (it.sep) {
              it.sep.push(this.sourceToken);
            } else {
              it.start.push(this.sourceToken);
            }
            return;
          case "space":
          case "comment":
            if (it.value) {
              map.items.push({ start: [this.sourceToken] });
            } else if (it.sep) {
              it.sep.push(this.sourceToken);
            } else {
              if (this.atIndentedComment(it.start, map.indent)) {
                const prev = map.items[map.items.length - 2];
                const end = prev?.value?.end;
                if (Array.isArray(end)) {
                  Array.prototype.push.apply(end, it.start);
                  end.push(this.sourceToken);
                  map.items.pop();
                  return;
                }
              }
              it.start.push(this.sourceToken);
            }
            return;
        }
        if (this.indent >= map.indent) {
          const atMapIndent = !this.onKeyLine && this.indent === map.indent;
          const atNextItem = atMapIndent && (it.sep || it.explicitKey) && this.type !== "seq-item-ind";
          let start = [];
          if (atNextItem && it.sep && !it.value) {
            const nl = [];
            for (let i = 0; i < it.sep.length; ++i) {
              const st = it.sep[i];
              switch (st.type) {
                case "newline":
                  nl.push(i);
                  break;
                case "space":
                  break;
                case "comment":
                  if (st.indent > map.indent)
                    nl.length = 0;
                  break;
                default:
                  nl.length = 0;
              }
            }
            if (nl.length >= 2)
              start = it.sep.splice(nl[1]);
          }
          switch (this.type) {
            case "anchor":
            case "tag":
              if (atNextItem || it.value) {
                start.push(this.sourceToken);
                map.items.push({ start });
                this.onKeyLine = true;
              } else if (it.sep) {
                it.sep.push(this.sourceToken);
              } else {
                it.start.push(this.sourceToken);
              }
              return;
            case "explicit-key-ind":
              if (!it.sep && !it.explicitKey) {
                it.start.push(this.sourceToken);
                it.explicitKey = true;
              } else if (atNextItem || it.value) {
                start.push(this.sourceToken);
                map.items.push({ start, explicitKey: true });
              } else {
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: [this.sourceToken], explicitKey: true }]
                });
              }
              this.onKeyLine = true;
              return;
            case "map-value-ind":
              if (it.explicitKey) {
                if (!it.sep) {
                  if (includesToken(it.start, "newline")) {
                    Object.assign(it, { key: null, sep: [this.sourceToken] });
                  } else {
                    const start2 = getFirstKeyStartProps(it.start);
                    this.stack.push({
                      type: "block-map",
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start: start2, key: null, sep: [this.sourceToken] }]
                    });
                  }
                } else if (it.value) {
                  map.items.push({ start: [], key: null, sep: [this.sourceToken] });
                } else if (includesToken(it.sep, "map-value-ind")) {
                  this.stack.push({
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start, key: null, sep: [this.sourceToken] }]
                  });
                } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                  const start2 = getFirstKeyStartProps(it.start);
                  const key = it.key;
                  const sep = it.sep;
                  sep.push(this.sourceToken);
                  delete it.key;
                  delete it.sep;
                  this.stack.push({
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: start2, key, sep }]
                  });
                } else if (start.length > 0) {
                  it.sep = it.sep.concat(start, this.sourceToken);
                } else {
                  it.sep.push(this.sourceToken);
                }
              } else {
                if (!it.sep) {
                  Object.assign(it, { key: null, sep: [this.sourceToken] });
                } else if (it.value || atNextItem) {
                  map.items.push({ start, key: null, sep: [this.sourceToken] });
                } else if (includesToken(it.sep, "map-value-ind")) {
                  this.stack.push({
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: [], key: null, sep: [this.sourceToken] }]
                  });
                } else {
                  it.sep.push(this.sourceToken);
                }
              }
              this.onKeyLine = true;
              return;
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar": {
              const fs6 = this.flowScalar(this.type);
              if (atNextItem || it.value) {
                map.items.push({ start, key: fs6, sep: [] });
                this.onKeyLine = true;
              } else if (it.sep) {
                this.stack.push(fs6);
              } else {
                Object.assign(it, { key: fs6, sep: [] });
                this.onKeyLine = true;
              }
              return;
            }
            default: {
              const bv = this.startBlockValue(map);
              if (bv) {
                if (atMapIndent && bv.type !== "block-seq") {
                  map.items.push({ start });
                }
                this.stack.push(bv);
                return;
              }
            }
          }
        }
        yield* this.pop();
        yield* this.step();
      }
      *blockSequence(seq) {
        const it = seq.items[seq.items.length - 1];
        switch (this.type) {
          case "newline":
            if (it.value) {
              const end = "end" in it.value ? it.value.end : void 0;
              const last = Array.isArray(end) ? end[end.length - 1] : void 0;
              if (last?.type === "comment")
                end?.push(this.sourceToken);
              else
                seq.items.push({ start: [this.sourceToken] });
            } else
              it.start.push(this.sourceToken);
            return;
          case "space":
          case "comment":
            if (it.value)
              seq.items.push({ start: [this.sourceToken] });
            else {
              if (this.atIndentedComment(it.start, seq.indent)) {
                const prev = seq.items[seq.items.length - 2];
                const end = prev?.value?.end;
                if (Array.isArray(end)) {
                  Array.prototype.push.apply(end, it.start);
                  end.push(this.sourceToken);
                  seq.items.pop();
                  return;
                }
              }
              it.start.push(this.sourceToken);
            }
            return;
          case "anchor":
          case "tag":
            if (it.value || this.indent <= seq.indent)
              break;
            it.start.push(this.sourceToken);
            return;
          case "seq-item-ind":
            if (this.indent !== seq.indent)
              break;
            if (it.value || includesToken(it.start, "seq-item-ind"))
              seq.items.push({ start: [this.sourceToken] });
            else
              it.start.push(this.sourceToken);
            return;
        }
        if (this.indent > seq.indent) {
          const bv = this.startBlockValue(seq);
          if (bv) {
            this.stack.push(bv);
            return;
          }
        }
        yield* this.pop();
        yield* this.step();
      }
      *flowCollection(fc) {
        const it = fc.items[fc.items.length - 1];
        if (this.type === "flow-error-end") {
          let top;
          do {
            yield* this.pop();
            top = this.peek(1);
          } while (top && top.type === "flow-collection");
        } else if (fc.end.length === 0) {
          switch (this.type) {
            case "comma":
            case "explicit-key-ind":
              if (!it || it.sep)
                fc.items.push({ start: [this.sourceToken] });
              else
                it.start.push(this.sourceToken);
              return;
            case "map-value-ind":
              if (!it || it.value)
                fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
              else if (it.sep)
                it.sep.push(this.sourceToken);
              else
                Object.assign(it, { key: null, sep: [this.sourceToken] });
              return;
            case "space":
            case "comment":
            case "newline":
            case "anchor":
            case "tag":
              if (!it || it.value)
                fc.items.push({ start: [this.sourceToken] });
              else if (it.sep)
                it.sep.push(this.sourceToken);
              else
                it.start.push(this.sourceToken);
              return;
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar": {
              const fs6 = this.flowScalar(this.type);
              if (!it || it.value)
                fc.items.push({ start: [], key: fs6, sep: [] });
              else if (it.sep)
                this.stack.push(fs6);
              else
                Object.assign(it, { key: fs6, sep: [] });
              return;
            }
            case "flow-map-end":
            case "flow-seq-end":
              fc.end.push(this.sourceToken);
              return;
          }
          const bv = this.startBlockValue(fc);
          if (bv)
            this.stack.push(bv);
          else {
            yield* this.pop();
            yield* this.step();
          }
        } else {
          const parent = this.peek(2);
          if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
            yield* this.pop();
            yield* this.step();
          } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
            const prev = getPrevProps(parent);
            const start = getFirstKeyStartProps(prev);
            fixFlowSeqItems(fc);
            const sep = fc.end.splice(1, fc.end.length);
            sep.push(this.sourceToken);
            const map = {
              type: "block-map",
              offset: fc.offset,
              indent: fc.indent,
              items: [{ start, key: fc, sep }]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = map;
          } else {
            yield* this.lineEnd(fc);
          }
        }
      }
      flowScalar(type) {
        if (this.onNewLine) {
          let nl = this.source.indexOf("\n") + 1;
          while (nl !== 0) {
            this.onNewLine(this.offset + nl);
            nl = this.source.indexOf("\n", nl) + 1;
          }
        }
        return {
          type,
          offset: this.offset,
          indent: this.indent,
          source: this.source
        };
      }
      startBlockValue(parent) {
        switch (this.type) {
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return this.flowScalar(this.type);
          case "block-scalar-header":
            return {
              type: "block-scalar",
              offset: this.offset,
              indent: this.indent,
              props: [this.sourceToken],
              source: ""
            };
          case "flow-map-start":
          case "flow-seq-start":
            return {
              type: "flow-collection",
              offset: this.offset,
              indent: this.indent,
              start: this.sourceToken,
              items: [],
              end: []
            };
          case "seq-item-ind":
            return {
              type: "block-seq",
              offset: this.offset,
              indent: this.indent,
              items: [{ start: [this.sourceToken] }]
            };
          case "explicit-key-ind": {
            this.onKeyLine = true;
            const prev = getPrevProps(parent);
            const start = getFirstKeyStartProps(prev);
            start.push(this.sourceToken);
            return {
              type: "block-map",
              offset: this.offset,
              indent: this.indent,
              items: [{ start, explicitKey: true }]
            };
          }
          case "map-value-ind": {
            this.onKeyLine = true;
            const prev = getPrevProps(parent);
            const start = getFirstKeyStartProps(prev);
            return {
              type: "block-map",
              offset: this.offset,
              indent: this.indent,
              items: [{ start, key: null, sep: [this.sourceToken] }]
            };
          }
        }
        return null;
      }
      atIndentedComment(start, indent) {
        if (this.type !== "comment")
          return false;
        if (this.indent <= indent)
          return false;
        return start.every((st) => st.type === "newline" || st.type === "space");
      }
      *documentEnd(docEnd) {
        if (this.type !== "doc-mode") {
          if (docEnd.end)
            docEnd.end.push(this.sourceToken);
          else
            docEnd.end = [this.sourceToken];
          if (this.type === "newline")
            yield* this.pop();
        }
      }
      *lineEnd(token) {
        switch (this.type) {
          case "comma":
          case "doc-start":
          case "doc-end":
          case "flow-seq-end":
          case "flow-map-end":
          case "map-value-ind":
            yield* this.pop();
            yield* this.step();
            break;
          case "newline":
            this.onKeyLine = false;
          // fallthrough
          case "space":
          case "comment":
          default:
            if (token.end)
              token.end.push(this.sourceToken);
            else
              token.end = [this.sourceToken];
            if (this.type === "newline")
              yield* this.pop();
        }
      }
    };
    exports2.Parser = Parser;
  }
});

// node_modules/yaml/dist/public-api.js
var require_public_api = __commonJS({
  "node_modules/yaml/dist/public-api.js"(exports2) {
    "use strict";
    var composer = require_composer();
    var Document = require_Document();
    var errors = require_errors4();
    var log = require_log();
    var identity = require_identity();
    var lineCounter = require_line_counter();
    var parser = require_parser();
    function parseOptions(options) {
      const prettyErrors = options.prettyErrors !== false;
      const lineCounter$1 = options.lineCounter || prettyErrors && new lineCounter.LineCounter() || null;
      return { lineCounter: lineCounter$1, prettyErrors };
    }
    function parseAllDocuments(source, options = {}) {
      const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
      const parser$1 = new parser.Parser(lineCounter2?.addNewLine);
      const composer$1 = new composer.Composer(options);
      const docs = Array.from(composer$1.compose(parser$1.parse(source)));
      if (prettyErrors && lineCounter2)
        for (const doc of docs) {
          doc.errors.forEach(errors.prettifyError(source, lineCounter2));
          doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
        }
      if (docs.length > 0)
        return docs;
      return Object.assign([], { empty: true }, composer$1.streamInfo());
    }
    function parseDocument(source, options = {}) {
      const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
      const parser$1 = new parser.Parser(lineCounter2?.addNewLine);
      const composer$1 = new composer.Composer(options);
      let doc = null;
      for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
        if (!doc)
          doc = _doc;
        else if (doc.options.logLevel !== "silent") {
          doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
          break;
        }
      }
      if (prettyErrors && lineCounter2) {
        doc.errors.forEach(errors.prettifyError(source, lineCounter2));
        doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
      }
      return doc;
    }
    function parse3(src, reviver, options) {
      let _reviver = void 0;
      if (typeof reviver === "function") {
        _reviver = reviver;
      } else if (options === void 0 && reviver && typeof reviver === "object") {
        options = reviver;
      }
      const doc = parseDocument(src, options);
      if (!doc)
        return null;
      doc.warnings.forEach((warning3) => log.warn(doc.options.logLevel, warning3));
      if (doc.errors.length > 0) {
        if (doc.options.logLevel !== "silent")
          throw doc.errors[0];
        else
          doc.errors = [];
      }
      return doc.toJS(Object.assign({ reviver: _reviver }, options));
    }
    function stringify(value, replacer, options) {
      let _replacer = null;
      if (typeof replacer === "function" || Array.isArray(replacer)) {
        _replacer = replacer;
      } else if (options === void 0 && replacer) {
        options = replacer;
      }
      if (typeof options === "string")
        options = options.length;
      if (typeof options === "number") {
        const indent = Math.round(options);
        options = indent < 1 ? void 0 : indent > 8 ? { indent: 8 } : { indent };
      }
      if (value === void 0) {
        const { keepUndefined } = options ?? replacer ?? {};
        if (!keepUndefined)
          return void 0;
      }
      if (identity.isDocument(value) && !_replacer)
        return value.toString(options);
      return new Document.Document(value, _replacer, options).toString(options);
    }
    exports2.parse = parse3;
    exports2.parseAllDocuments = parseAllDocuments;
    exports2.parseDocument = parseDocument;
    exports2.stringify = stringify;
  }
});

// node_modules/yaml/dist/index.js
var require_dist = __commonJS({
  "node_modules/yaml/dist/index.js"(exports2) {
    "use strict";
    var composer = require_composer();
    var Document = require_Document();
    var Schema = require_Schema();
    var errors = require_errors4();
    var Alias = require_Alias();
    var identity = require_identity();
    var Pair = require_Pair();
    var Scalar = require_Scalar();
    var YAMLMap = require_YAMLMap();
    var YAMLSeq = require_YAMLSeq();
    var cst = require_cst();
    var lexer = require_lexer();
    var lineCounter = require_line_counter();
    var parser = require_parser();
    var publicApi = require_public_api();
    var visit = require_visit();
    exports2.Composer = composer.Composer;
    exports2.Document = Document.Document;
    exports2.Schema = Schema.Schema;
    exports2.YAMLError = errors.YAMLError;
    exports2.YAMLParseError = errors.YAMLParseError;
    exports2.YAMLWarning = errors.YAMLWarning;
    exports2.Alias = Alias.Alias;
    exports2.isAlias = identity.isAlias;
    exports2.isCollection = identity.isCollection;
    exports2.isDocument = identity.isDocument;
    exports2.isMap = identity.isMap;
    exports2.isNode = identity.isNode;
    exports2.isPair = identity.isPair;
    exports2.isScalar = identity.isScalar;
    exports2.isSeq = identity.isSeq;
    exports2.Pair = Pair.Pair;
    exports2.Scalar = Scalar.Scalar;
    exports2.YAMLMap = YAMLMap.YAMLMap;
    exports2.YAMLSeq = YAMLSeq.YAMLSeq;
    exports2.CST = cst;
    exports2.Lexer = lexer.Lexer;
    exports2.LineCounter = lineCounter.LineCounter;
    exports2.Parser = parser.Parser;
    exports2.parse = publicApi.parse;
    exports2.parseAllDocuments = publicApi.parseAllDocuments;
    exports2.parseDocument = publicApi.parseDocument;
    exports2.stringify = publicApi.stringify;
    exports2.visit = visit.visit;
    exports2.visitAsync = visit.visitAsync;
  }
});

// sentinel/src/index.ts
var import_core6 = __toESM(require_core());

// node_modules/eventemitter3/index.mjs
var import_index = __toESM(require_eventemitter3(), 1);

// node_modules/p-timeout/index.js
var TimeoutError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "TimeoutError";
  }
};
var AbortError = class extends Error {
  constructor(message) {
    super();
    this.name = "AbortError";
    this.message = message;
  }
};
var getDOMException = (errorMessage) => globalThis.DOMException === void 0 ? new AbortError(errorMessage) : new DOMException(errorMessage);
var getAbortedReason = (signal) => {
  const reason = signal.reason === void 0 ? getDOMException("This operation was aborted.") : signal.reason;
  return reason instanceof Error ? reason : getDOMException(reason);
};
function pTimeout(promise, options) {
  const {
    milliseconds,
    fallback,
    message,
    customTimers = { setTimeout, clearTimeout }
  } = options;
  let timer;
  const wrappedPromise = new Promise((resolve, reject) => {
    if (typeof milliseconds !== "number" || Math.sign(milliseconds) !== 1) {
      throw new TypeError(`Expected \`milliseconds\` to be a positive number, got \`${milliseconds}\``);
    }
    if (options.signal) {
      const { signal } = options;
      if (signal.aborted) {
        reject(getAbortedReason(signal));
      }
      const abortHandler = () => {
        reject(getAbortedReason(signal));
      };
      signal.addEventListener("abort", abortHandler, { once: true });
      promise.finally(() => {
        signal.removeEventListener("abort", abortHandler);
      });
    }
    if (milliseconds === Number.POSITIVE_INFINITY) {
      promise.then(resolve, reject);
      return;
    }
    const timeoutError = new TimeoutError();
    timer = customTimers.setTimeout.call(void 0, () => {
      if (fallback) {
        try {
          resolve(fallback());
        } catch (error) {
          reject(error);
        }
        return;
      }
      if (typeof promise.cancel === "function") {
        promise.cancel();
      }
      if (message === false) {
        resolve();
      } else if (message instanceof Error) {
        reject(message);
      } else {
        timeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;
        reject(timeoutError);
      }
    }, milliseconds);
    (async () => {
      try {
        resolve(await promise);
      } catch (error) {
        reject(error);
      }
    })();
  });
  const cancelablePromise = wrappedPromise.finally(() => {
    cancelablePromise.clear();
  });
  cancelablePromise.clear = () => {
    customTimers.clearTimeout.call(void 0, timer);
    timer = void 0;
  };
  return cancelablePromise;
}

// node_modules/p-queue/dist/lower-bound.js
function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;
  while (count > 0) {
    const step = Math.trunc(count / 2);
    let it = first + step;
    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }
  return first;
}

// node_modules/p-queue/dist/priority-queue.js
var PriorityQueue = class {
  #queue = [];
  enqueue(run2, options) {
    options = {
      priority: 0,
      ...options
    };
    const element = {
      priority: options.priority,
      run: run2
    };
    if (this.size && this.#queue[this.size - 1].priority >= options.priority) {
      this.#queue.push(element);
      return;
    }
    const index = lowerBound(this.#queue, element, (a, b) => b.priority - a.priority);
    this.#queue.splice(index, 0, element);
  }
  dequeue() {
    const item = this.#queue.shift();
    return item?.run;
  }
  filter(options) {
    return this.#queue.filter((element) => element.priority === options.priority).map((element) => element.run);
  }
  get size() {
    return this.#queue.length;
  }
};

// node_modules/p-queue/dist/index.js
var PQueue = class extends import_index.default {
  #carryoverConcurrencyCount;
  #isIntervalIgnored;
  #intervalCount = 0;
  #intervalCap;
  #interval;
  #intervalEnd = 0;
  #intervalId;
  #timeoutId;
  #queue;
  #queueClass;
  #pending = 0;
  // The `!` is needed because of https://github.com/microsoft/TypeScript/issues/32194
  #concurrency;
  #isPaused;
  #throwOnTimeout;
  /**
      Per-operation timeout in milliseconds. Operations fulfill once `timeout` elapses if they haven't already.
  
      Applies to each future operation.
      */
  timeout;
  // TODO: The `throwOnTimeout` option should affect the return types of `add()` and `addAll()`
  constructor(options) {
    super();
    options = {
      carryoverConcurrencyCount: false,
      intervalCap: Number.POSITIVE_INFINITY,
      interval: 0,
      concurrency: Number.POSITIVE_INFINITY,
      autoStart: true,
      queueClass: PriorityQueue,
      ...options
    };
    if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
      throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${options.intervalCap?.toString() ?? ""}\` (${typeof options.intervalCap})`);
    }
    if (options.interval === void 0 || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${options.interval?.toString() ?? ""}\` (${typeof options.interval})`);
    }
    this.#carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this.#isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;
    this.#intervalCap = options.intervalCap;
    this.#interval = options.interval;
    this.#queue = new options.queueClass();
    this.#queueClass = options.queueClass;
    this.concurrency = options.concurrency;
    this.timeout = options.timeout;
    this.#throwOnTimeout = options.throwOnTimeout === true;
    this.#isPaused = options.autoStart === false;
  }
  get #doesIntervalAllowAnother() {
    return this.#isIntervalIgnored || this.#intervalCount < this.#intervalCap;
  }
  get #doesConcurrentAllowAnother() {
    return this.#pending < this.#concurrency;
  }
  #next() {
    this.#pending--;
    this.#tryToStartAnother();
    this.emit("next");
  }
  #onResumeInterval() {
    this.#onInterval();
    this.#initializeIntervalIfNeeded();
    this.#timeoutId = void 0;
  }
  get #isIntervalPaused() {
    const now = Date.now();
    if (this.#intervalId === void 0) {
      const delay = this.#intervalEnd - now;
      if (delay < 0) {
        this.#intervalCount = this.#carryoverConcurrencyCount ? this.#pending : 0;
      } else {
        if (this.#timeoutId === void 0) {
          this.#timeoutId = setTimeout(() => {
            this.#onResumeInterval();
          }, delay);
        }
        return true;
      }
    }
    return false;
  }
  #tryToStartAnother() {
    if (this.#queue.size === 0) {
      if (this.#intervalId) {
        clearInterval(this.#intervalId);
      }
      this.#intervalId = void 0;
      this.emit("empty");
      if (this.#pending === 0) {
        this.emit("idle");
      }
      return false;
    }
    if (!this.#isPaused) {
      const canInitializeInterval = !this.#isIntervalPaused;
      if (this.#doesIntervalAllowAnother && this.#doesConcurrentAllowAnother) {
        const job = this.#queue.dequeue();
        if (!job) {
          return false;
        }
        this.emit("active");
        job();
        if (canInitializeInterval) {
          this.#initializeIntervalIfNeeded();
        }
        return true;
      }
    }
    return false;
  }
  #initializeIntervalIfNeeded() {
    if (this.#isIntervalIgnored || this.#intervalId !== void 0) {
      return;
    }
    this.#intervalId = setInterval(() => {
      this.#onInterval();
    }, this.#interval);
    this.#intervalEnd = Date.now() + this.#interval;
  }
  #onInterval() {
    if (this.#intervalCount === 0 && this.#pending === 0 && this.#intervalId) {
      clearInterval(this.#intervalId);
      this.#intervalId = void 0;
    }
    this.#intervalCount = this.#carryoverConcurrencyCount ? this.#pending : 0;
    this.#processQueue();
  }
  /**
  Executes all queued functions until it reaches the limit.
  */
  #processQueue() {
    while (this.#tryToStartAnother()) {
    }
  }
  get concurrency() {
    return this.#concurrency;
  }
  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
    }
    this.#concurrency = newConcurrency;
    this.#processQueue();
  }
  async #throwOnAbort(signal) {
    return new Promise((_resolve, reject) => {
      signal.addEventListener("abort", () => {
        reject(signal.reason);
      }, { once: true });
    });
  }
  async add(function_, options = {}) {
    options = {
      timeout: this.timeout,
      throwOnTimeout: this.#throwOnTimeout,
      ...options
    };
    return new Promise((resolve, reject) => {
      this.#queue.enqueue(async () => {
        this.#pending++;
        this.#intervalCount++;
        try {
          options.signal?.throwIfAborted();
          let operation = function_({ signal: options.signal });
          if (options.timeout) {
            operation = pTimeout(Promise.resolve(operation), { milliseconds: options.timeout });
          }
          if (options.signal) {
            operation = Promise.race([operation, this.#throwOnAbort(options.signal)]);
          }
          const result = await operation;
          resolve(result);
          this.emit("completed", result);
        } catch (error) {
          if (error instanceof TimeoutError && !options.throwOnTimeout) {
            resolve();
            return;
          }
          reject(error);
          this.emit("error", error);
        } finally {
          this.#next();
        }
      }, options);
      this.emit("add");
      this.#tryToStartAnother();
    });
  }
  async addAll(functions, options) {
    return Promise.all(functions.map(async (function_) => this.add(function_, options)));
  }
  /**
  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
  */
  start() {
    if (!this.#isPaused) {
      return this;
    }
    this.#isPaused = false;
    this.#processQueue();
    return this;
  }
  /**
  Put queue execution on hold.
  */
  pause() {
    this.#isPaused = true;
  }
  /**
  Clear the queue.
  */
  clear() {
    this.#queue = new this.#queueClass();
  }
  /**
      Can be called multiple times. Useful if you for example add additional items at a later time.
  
      @returns A promise that settles when the queue becomes empty.
      */
  async onEmpty() {
    if (this.#queue.size === 0) {
      return;
    }
    await this.#onEvent("empty");
  }
  /**
      @returns A promise that settles when the queue size is less than the given limit: `queue.size < limit`.
  
      If you want to avoid having the queue grow beyond a certain size you can `await queue.onSizeLessThan()` before adding a new item.
  
      Note that this only limits the number of items waiting to start. There could still be up to `concurrency` jobs already running that this call does not include in its calculation.
      */
  async onSizeLessThan(limit) {
    if (this.#queue.size < limit) {
      return;
    }
    await this.#onEvent("next", () => this.#queue.size < limit);
  }
  /**
      The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
  
      @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
      */
  async onIdle() {
    if (this.#pending === 0 && this.#queue.size === 0) {
      return;
    }
    await this.#onEvent("idle");
  }
  async #onEvent(event, filter) {
    return new Promise((resolve) => {
      const listener = () => {
        if (filter && !filter()) {
          return;
        }
        this.off(event, listener);
        resolve();
      };
      this.on(event, listener);
    });
  }
  /**
  Size of the queue, the number of queued items waiting to run.
  */
  get size() {
    return this.#queue.size;
  }
  /**
      Size of the queue, filtered by the given options.
  
      For example, this can be used to find the number of items remaining in the queue with a specific priority level.
      */
  sizeBy(options) {
    return this.#queue.filter(options).length;
  }
  /**
  Number of running items (no longer in the queue).
  */
  get pending() {
    return this.#pending;
  }
  /**
  Whether the queue is currently paused.
  */
  get isPaused() {
    return this.#isPaused;
  }
};

// release/src/common/inputs.ts
var import_github = __toESM(require_github());
var import_core3 = __toESM(require_core());
var import_jira = __toESM(require_out());

// lib/github.ts
var import_core = __toESM(require_core());
var import_utils = __toESM(require_utils4());
function getToken(inputName = "gh-token") {
  const ghToken = (0, import_core.getInput)(inputName);
  if (!ghToken) {
    throw new Error("The GitHub token is missing");
  }
  return ghToken;
}

// lib/core.ts
var import_core2 = __toESM(require_core());
var import_exec = __toESM(require_exec());

// release/src/common/inputs.ts
var getOctoKitClient = () => {
  return (0, import_github.getOctokit)(getToken());
};

// sentinel/src/github-api.ts
var contentQueue = new PQueue({ concurrency: 90 });
var vulnerabilityAlertsQueue = new PQueue({ concurrency: 90 });
async function getRepos() {
  return [
    { name: "merlin", html_url: "https://github.com/exivity/merlin" },
    { name: "hermes", html_url: "https://github.com/exivity/hermes" },
    { name: "actions", html_url: "https://github.com/exivity/actions" }
  ];
}
async function getFiles(repoName, path3) {
  const octokit = getOctoKitClient();
  try {
    const response = await contentQueue.add(
      () => octokit.rest.repos.getContent({
        owner: "exivity",
        repo: repoName,
        path: path3
      })
    );
    if (Array.isArray(response.data)) {
      return response.data.filter((item) => item.type === "file");
    }
  } catch {
  }
  return [];
}
async function getFileContent(owner, repo, filePath) {
  const octokit = getOctoKitClient();
  const response = await contentQueue.add(
    () => octokit.rest.repos.getContent({
      owner,
      repo,
      path: filePath
    })
  );
  if ("content" in response.data) {
    return Buffer.from(response.data.content, "base64").toString("utf8");
  }
  return null;
}
async function hasDependabotAlerts(owner, repo) {
  const octokit = getOctoKitClient();
  try {
    await vulnerabilityAlertsQueue.add(
      () => octokit.rest.repos.checkVulnerabilityAlerts({
        owner,
        repo
      })
    );
    return true;
  } catch {
    return false;
  }
}

// sentinel/src/analysis/actions.ts
var yaml = __toESM(require_dist());
var fs = __toESM(require("fs"));

// sentinel/src/utils.ts
function formatRepoList(title, repos, subTitle) {
  let result = "";
  if (subTitle) {
    result += `### ${title}

`;
  } else {
    result += `## ${title}

`;
  }
  if (repos.length === 0) {
    result += "No repositories found\n";
  } else if (repos.length > 3) {
    result += `<details><summary>Show ${repos.length} repositories</summary>

`;
    for (const { name, url } of repos) {
      result += `- [${name}](${url})
`;
    }
    result += `
</details>

`;
  } else {
    for (const { name, url } of repos) {
      result += `- [${name}](${url})
`;
    }
    result += `
`;
  }
  return result;
}

// sentinel/src/analysis/actions.ts
function getActionsUsed(file) {
  if (!file.content) {
    return [];
  }
  const data = yaml.parse(file.content);
  let actionsUsed = /* @__PURE__ */ new Set();
  if (data && data.jobs) {
    for (const job of Object.values(data.jobs)) {
      if (Array.isArray(job.steps)) {
        for (const step of job.steps) {
          if (step.uses) {
            actionsUsed.add(step.uses);
          }
        }
      }
    }
  }
  return Array.from(actionsUsed);
}
async function externalActionsReport(repos) {
  let reportContent = `# External Actions Report - ${(/* @__PURE__ */ new Date()).toISOString()}

`;
  const actionsUsed = /* @__PURE__ */ new Map();
  for (const repo of repos) {
    const actions = (repo.workflowFiles ?? []).flatMap(
      (file) => getActionsUsed(file)
    );
    for (const action of actions) {
      if (action.startsWith("exivity/") || action.startsWith("./")) continue;
      if (!actionsUsed.has(action)) {
        actionsUsed.set(action, []);
      }
      if (!actionsUsed.get(action).includes(repo)) {
        actionsUsed.get(action).push(repo);
      }
    }
  }
  for (const [action, repos2] of actionsUsed) {
    reportContent += formatRepoList(action, repos2, true);
  }
  await fs.promises.writeFile("external-actions.md", reportContent);
  console.log(`External actions report generated`);
}
async function exivityActionsReport(repos) {
  let reportContent = `# Exivity Actions Report - ${(/* @__PURE__ */ new Date()).toISOString()}

`;
  const actionsUsed = /* @__PURE__ */ new Map();
  for (const repo of repos) {
    const actions = (repo.workflowFiles ?? []).flatMap(
      (file) => getActionsUsed(file)
    );
    for (const action of actions) {
      if (!action.startsWith("exivity/") && !action.startsWith("./")) continue;
      if (!actionsUsed.has(action)) {
        actionsUsed.set(action, []);
      }
      if (!actionsUsed.get(action).includes(repo)) {
        actionsUsed.get(action).push(repo);
      }
    }
  }
  for (const [action, repos2] of actionsUsed) {
    reportContent += formatRepoList(action, repos2, true);
  }
  await fs.promises.writeFile("exivity-actions.md", reportContent);
  console.log(`Exivity actions report generated`);
}

// sentinel/src/analysis/operating-systems.ts
var yaml2 = __toESM(require_dist());
var fs2 = __toESM(require("fs"));
function getOSUsed(file) {
  if (!file.content) {
    return [];
  }
  let data;
  try {
    data = yaml2.parse(file.content);
  } catch {
    console.error(`Error parsing ${file.path} as yaml`);
    return [];
  }
  let osTypes = /* @__PURE__ */ new Set();
  if (data && data.jobs) {
    for (const job of Object.values(data.jobs)) {
      if (job["runs-on"]) {
        if (Array.isArray(job["runs-on"])) {
          job["runs-on"].forEach((os) => {
            if (!os.includes("matrix")) {
              osTypes.add(os);
            }
          });
        } else {
          if (typeof job["runs-on"] === "string" && !job["runs-on"].includes("matrix")) {
            osTypes.add(job["runs-on"]);
          }
        }
      }
      if (job["strategy"] && job["strategy"]["matrix"] && job["strategy"]["matrix"]["os"]) {
        if (Array.isArray(job.strategy.matrix["os"])) {
          job.strategy.matrix["os"].forEach((os) => {
            osTypes.add(os);
          });
        } else {
          if (typeof job.strategy.matrix["os"] === "string") {
            osTypes.add(job.strategy.matrix["os"]);
          }
        }
      }
    }
  }
  return Array.from(osTypes);
}
async function operatingSystemsReport(repos) {
  let reportContent = `# Operating Systems Report - ${(/* @__PURE__ */ new Date()).toISOString()}

`;
  const osUsed = /* @__PURE__ */ new Map();
  for (const repo of repos) {
    const osTypes = (repo.workflowFiles ?? []).flatMap(
      (file) => getOSUsed(file)
    );
    for (const os of osTypes) {
      if (!osUsed.has(os)) {
        osUsed.set(os, []);
      }
      if (!osUsed.get(os).includes(repo)) {
        osUsed.get(os).push(repo);
      }
    }
  }
  for (const [os, repos2] of osUsed) {
    reportContent += formatRepoList(os, repos2, true);
  }
  await fs2.promises.writeFile("operating-systems.md", reportContent);
  console.log(`Operating systems report generated`);
}

// sentinel/src/analysis/up-to-standards.ts
var fs3 = __toESM(require("fs"));
async function standardsAdherenceReport(repos) {
  let reportContent = `# Standards Adherence Report - ${(/* @__PURE__ */ new Date()).toISOString()}

`;
  for (const repo of repos) {
    for (const file of repo.rootFiles || []) {
      if (file.name === "CODEOWNERS") {
        await setFileDataContent(repo.name, file);
        repo.codeownersFile = file;
        break;
      }
    }
  }
  const withoutCodeowners = repos.filter((repo) => !repo.codeownersFile);
  reportContent += formatRepoList("Has No CODEOWNERS File", withoutCodeowners);
  const withoutDependabot = [];
  for (const repo of repos) {
    if (!await hasDependabotAlerts("exivity", repo.name) || !repo.githubFiles?.some((file) => file.name === "dependabot.yml")) {
      withoutDependabot.push(repo);
    }
  }
  reportContent += formatRepoList("Has No Dependabot Alerts", withoutDependabot);
  reportContent += formatRepoList(
    "Adheres To Standards",
    repos.filter(
      (repo) => !withoutDependabot.includes(repo) && !withoutCodeowners.includes(repo)
    )
  );
  await fs3.promises.writeFile("standards-adherence.md", reportContent);
  console.log(`Operating systems report generated`);
}

// sentinel/src/analysis/index.ts
async function analyseRepositories() {
  console.log("Starting analysis...");
  const repos = (await getRepos()).map(
    (repo) => ({ name: repo.name, url: repo.html_url })
  );
  console.log(`Found ${repos.length} repositories.`);
  for (const repo of repos) {
    console.log(`Analyzing ${repo.name}...`);
    await retrieveRootFiles(repo);
    await retrieveWorkflowFiles(repo);
    await retrieveGithubFiles(repo);
  }
  await operatingSystemsReport(repos);
  await externalActionsReport(repos);
  await exivityActionsReport(repos);
  await standardsAdherenceReport(repos);
  console.log("Analysis complete.");
}
async function setFileDataContent(repo, file) {
  if (!file.content) {
    try {
      const content = await getFileContent("exivity", repo, file.path);
      if (content) {
        file.content = content;
      }
    } catch (error) {
      console.error(`Error analyzing ${repo}/${file.path}: ${error}`);
      file.content = "";
    }
  }
  return file;
}
async function retrieveWorkflowFiles(repo) {
  const files = (await getFiles(repo.name, ".github/workflows")).map(
    (file) => ({ name: file.name, path: file.path })
  );
  repo.workflowFiles = await Promise.all(
    files.map((file) => setFileDataContent(repo.name, file))
  );
}
async function retrieveRootFiles(repo) {
  repo.rootFiles = (await getFiles(repo.name, "")).map(
    (file) => ({ name: file.name, path: file.path })
  );
}
async function retrieveGithubFiles(repo) {
  repo.githubFiles = (await getFiles(repo.name, ".github")).map(
    (file) => ({ name: file.name, path: file.path })
  );
}

// sentinel/src/update-workflows.ts
var fs5 = __toESM(require("fs"));
var path2 = __toESM(require("path"));
var import_core5 = __toESM(require_core());

// sentinel/src/pr-links.ts
var fs4 = __toESM(require("fs"));
var path = __toESM(require("path"));
var prOverviewFile = "pr-overview.md";
async function getUpdatedPrLinks() {
  const octokit = getOctoKitClient();
  const prOverviewPath = path.join(process.cwd(), prOverviewFile);
  const prLinks = [];
  if (fs4.existsSync(prOverviewPath)) {
    try {
      const reportContent = await fs4.promises.readFile(prOverviewPath, "utf8");
      const linkRegex = /^- \[.*\]\((.*)\)$/gm;
      let match;
      while ((match = linkRegex.exec(reportContent)) !== null) {
        const prUrl = match[1];
        const prMatch = prUrl.match(
          /https:\/\/github\.com\/exivity\/([^/]+)\/pull\/(\d+)/
        );
        if (prMatch) {
          const repoName = prMatch[1];
          const prNumber = parseInt(prMatch[2], 10);
          try {
            const { data: prData } = await octokit.rest.pulls.get({
              owner: "exivity",
              repo: repoName,
              pull_number: prNumber
            });
            if (prData.state === "open") {
              prLinks.push(`- [${repoName}](${prUrl})`);
            }
          } catch (error) {
            if (error.status !== 404) {
              console.error(
                `Error fetching PR data for ${repoName}#${prNumber}: ${error}`
              );
            }
          }
        }
      }
    } catch (error) {
      console.error(`Error reading report file: ${error}`);
    }
  }
  return prLinks;
}
async function savePrLinks(prLinks) {
  let prOverview = "";
  if (prLinks.length > 0) {
    prOverview += `## Open Pull Requests

`;
    prLinks.forEach((link) => {
      prOverview += `${link}
`;
    });
    prOverview += `
`;
  }
  const overviewPath = path.join(process.cwd(), prOverviewFile);
  await fs4.promises.writeFile(overviewPath, prOverview, "utf8");
}
async function updatePROverview() {
  const prLinks = await getUpdatedPrLinks();
  await savePrLinks(prLinks);
}

// sentinel/src/update-workflows.ts
async function updateRepoWorkflows(repoName, workflowFiles, searchPattern, replacePattern) {
  const octokit = getOctoKitClient();
  const branchName = "chore/dev-ops-maintenance";
  const commitMessage = "chore(devOps): automated maintenance";
  const { data: repoData } = await octokit.rest.repos.get({
    owner: "exivity",
    repo: repoName
  });
  const defaultBranch = repoData.default_branch;
  const { data: refData } = await octokit.rest.git.getRef({
    owner: "exivity",
    repo: repoName,
    ref: `heads/${defaultBranch}`
  });
  await octokit.rest.git.createRef({
    owner: "exivity",
    repo: repoName,
    ref: `refs/heads/${branchName}`,
    sha: refData.object.sha
  });
  let filesChanged = 0;
  await Promise.all(
    workflowFiles.map(async (file) => {
      const content = await getFileContent("exivity", repoName, file.path);
      if (content && content.includes(searchPattern)) {
        const updatedContent = content.replace(
          new RegExp(searchPattern, "g"),
          replacePattern
        );
        if (updatedContent !== content) {
          const encodedContent = Buffer.from(updatedContent).toString("base64");
          await octokit.rest.repos.createOrUpdateFileContents({
            owner: "exivity",
            repo: repoName,
            path: file.path,
            message: commitMessage,
            content: encodedContent,
            sha: file.sha,
            branch: branchName
          });
          filesChanged++;
        }
      }
    })
  );
  if (filesChanged > 0) {
    const { data: prData } = await octokit.rest.pulls.create({
      owner: "exivity",
      repo: repoName,
      title: "chore(devOps): automated maintenance",
      head: branchName,
      base: defaultBranch,
      body: `This PR replaces occurrences of "${searchPattern}" with "${replacePattern}" in workflow files.`
    });
    return prData.html_url;
  } else {
    await octokit.rest.git.deleteRef({
      owner: "exivity",
      repo: repoName,
      ref: `heads/${branchName}`
    });
    return null;
  }
}
async function updateWorkflows() {
  const searchPattern = (0, import_core5.getInput)("search-pattern");
  const replacePattern = (0, import_core5.getInput)("replace-pattern");
  if (!searchPattern || !replacePattern) {
    throw new Error(
      "Both search-pattern and replace-pattern inputs must be provided in update mode"
    );
  }
  (0, import_core5.info)(`Replacing "${searchPattern}" with "${replacePattern}" in workflows`);
  const repos = await getRepos();
  const prLinks = [];
  await Promise.all(
    repos.map(async (repo) => {
      try {
        const repoName = repo.name;
        (0, import_core5.info)(`Processing repository: ${repoName}`);
        const workflowFiles = await getFiles(repoName, ".github/workflows");
        const prLink = await updateRepoWorkflows(
          repoName,
          workflowFiles,
          searchPattern,
          replacePattern
        );
        if (prLink) {
          prLinks.push(`- [${repoName}](${prLink})`);
        }
      } catch (error) {
        (0, import_core5.info)(`Error processing repository ${repo.name}: ${error}`);
      }
    })
  );
  const reportFilePath = (0, import_core5.getInput)("report-file");
  const reportPath = path2.join(process.cwd(), reportFilePath);
  let reportContent = "";
  if (fs5.existsSync(reportPath)) {
    reportContent = await fs5.promises.readFile(reportPath, "utf8");
  } else {
    reportContent = `# Workflow Report - ${(/* @__PURE__ */ new Date()).toISOString()}

`;
  }
  await fs5.promises.writeFile(reportPath, reportContent);
  (0, import_core5.info)(`Report updated at ${reportPath}`);
  await savePrLinks(prLinks);
}

// sentinel/src/index.ts
async function run() {
  try {
    const mode = (0, import_core6.getInput)("mode");
    if (mode === "update") {
      (0, import_core6.info)("Running in update mode");
      await updateWorkflows();
    } else {
      (0, import_core6.info)("Running in analyse mode");
      await analyseRepositories();
    }
  } catch (error) {
    (0, import_core6.setFailed)(error?.message || error);
  }
  await updatePROverview();
}
run();
/*! Bundled license information:

undici/lib/fetch/body.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

undici/lib/websocket/frame.js:
  (*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
